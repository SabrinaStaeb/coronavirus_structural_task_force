# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  29 ', 'ASN', 0.008446819288232111, (-4.799000000000012, -92.05899999999997, 26.179000000000006)), ('B', ' 346 ', 'LEU', 0.009150528713720596, (-45.845, -45.21199999999999, -7.266000000000002))]
data['omega'] = []
data['rota'] = [('A', '  26 ', 'SER', 0.0557548069024533, (-12.197999999999999, -98.73, 26.265000000000008)), ('A', '  39 ', 'VAL', 0.09810477157371658, (-10.491000000000026, -107.33799999999997, 19.026000000000007)), ('A', '  48 ', 'THR', 0.16846655892049298, (-9.333000000000018, -81.001, 20.459000000000007)), ('A', '  65 ', 'LYS', 0.08952961306742953, (-25.85200000000001, -81.371, 5.703)), ('A', ' 171 ', 'GLU', 0.010053237552183432, (-26.50400000000002, -80.014, -8.042000000000003)), ('A', ' 176 ', 'GLN', 0.015799228795989523, (-26.522, -71.493, -2.223)), ('A', ' 220 ', 'ASP', 0.28639349340607523, (3.8920000000000017, -62.094000000000015, -22.307)), ('A', ' 251 ', 'LEU', 0.16773798490549038, (-2.9390000000000076, -65.125, -5.724000000000002)), ('A', ' 260 ', 'LYS', 0.0, (2.586999999999988, -77.994, -12.048000000000004)), ('A', ' 309 ', 'SER', 0.01003645816729415, (-10.623000000000008, -49.342, -10.521000000000004)), ('A', ' 314 ', 'VAL', 0.24676264208366047, (-0.4360000000000074, -41.25799999999999, -5.437000000000002)), ('A', ' 346 ', 'LEU', 0.008669052605690238, (-0.4400000000000115, -57.55999999999999, 7.419)), ('B', '  26 ', 'SER', 0.05593940727382829, (-87.076, -56.45, -26.378)), ('B', '  39 ', 'VAL', 0.0667478916480568, (-95.63900000000002, -54.6, -19.393)), ('B', '  48 ', 'THR', 0.17405557866714183, (-69.27, -53.96899999999999, -20.701000000000008)), ('B', ' 150 ', 'LYS', 0.21852915147180918, (-51.760000000000005, -86.565, -4.005)), ('B', ' 245 ', 'GLN', 0.013941529410538906, (-50.813, -31.541999999999994, 0.995)), ('B', ' 262 ', 'SER', 0.11596132840410878, (-65.004, -36.51099999999999, 10.258000000000003)), ('B', ' 285 ', 'GLN', 0.025633231463792754, (-62.896000000000015, -30.607999999999993, 7.767)), ('B', ' 309 ', 'SER', 0.09539915499206827, (-37.791000000000004, -56.078999999999986, 10.242))]
data['cbeta'] = []
data['probe'] = [(' B 285  GLN  HA ', ' B 285  GLN HE21', -0.553, (-64.363, -30.273, 8.463)), (' A 250  HIS  NE2', ' A 401  CIT  O4 ', -0.522, (3.27, -59.374, -2.045)), (' A 159  LYS  HA ', ' A 176  GLN  HG2', -0.465, (-23.978, -70.882, -4.379)), (' B 118  ALA  HB3', ' B 119  PRO  HD3', -0.45, (-50.282, -72.919, -26.92)), (' A 118  ALA  HB3', ' A 119  PRO  HD3', -0.446, (-27.925, -61.673, 26.505)), (' B  66  PRO  HA ', ' B 162  SER  O  ', -0.417, (-67.281, -66.789, -4.103)), (' B 128  VAL  HB ', ' B 131  GLN  HG3', -0.409, (-64.207, -78.687, -12.354)), (' A 314  VAL HG12', ' A 315  VAL  H  ', -0.409, (0.67, -41.514, -3.215)), (' A  66  PRO  HA ', ' A 162  SER  O  ', -0.406, (-22.162, -78.699, 3.698)), (' B 220  ASP  N  ', ' B 220  ASP  OD1', -0.406, (-52.262, -40.172, 22.273)), (' B 168  LEU  O  ', ' B 168  LEU HD12', -0.405, (-66.459, -65.489, 2.509))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
