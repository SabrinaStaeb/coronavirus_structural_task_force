# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '   5 ', 'LYS', 0.0009553731964888776, (25.626, 34.444999999999986, 21.057)), ('A', '  49 ', 'MET', 0.07523316293144248, (6.076, 62.887, 11.667)), ('A', '  59 ', 'ILE', 0.06432723570838397, (10.711, 67.693, -4.12)), ('A', '  61 ', 'LYS', 0.2597286965639001, (14.908, 69.669, -1.1209999999999996)), ('A', '  87 ', 'LEU', 0.0, (16.5, 57.802, 0.732)), ('A', ' 128 ', 'CYS', 0.07694409764291803, (19.332, 39.55999999999999, 16.647)), ('A', ' 188 ', 'ARG', 0.0, (4.66, 57.696, 10.515999999999996)), ('A', ' 189 ', 'GLN', 0.0005310988374027177, (3.454, 58.265, 14.16)), ('A', ' 190 ', 'THR', 0.0013793706936215619, (0.279, 56.079, 13.960999999999997)), ('A', ' 217 ', 'ARG', 0.029223715069940703, (23.361, 16.144, 26.518)), ('A', ' 222 ', 'ARG', 0.0323478061387946, (15.119999999999996, 7.497000000000001, 23.911)), ('A', ' 223 ', 'PHE', 0.07415889433097037, (11.543, 8.519, 22.759999999999994)), ('A', ' 232 ', 'LEU', 0.09895947333496066, (0.23699999999999988, 19.265, 18.541999999999994)), ('A', ' 235 ', 'MET', 0.14641463307760622, (1.3769999999999996, 24.632999999999996, 19.418999999999993)), ('A', ' 263 ', 'ASP', 0.12574207676818414, (14.586000000000004, 12.126, 18.262)), ('B', '  47 ', 'GLU', 0.21515887860185656, (55.349, 16.404, 22.851)), ('B', '  73 ', 'VAL', 0.003150532575091347, (51.772, 39.512, 2.374)), ('B', '  75 ', 'LEU', 0.0, (56.14499999999999, 40.066, 7.27)), ('B', '  76 ', 'ARG', 0.06302946546503453, (59.938, 39.651, 7.737999999999999)), ('B', '  90 ', 'LYS', 0.08623928950233817, (59.854, 42.399, 15.816)), ('B', '  93 ', 'THR', 0.1270927049687788, (57.038, 46.77399999999999, 8.784)), ('B', ' 104 ', 'VAL', 0.2613140893339864, (45.646, 46.715, 30.629)), ('B', ' 106 ', 'ILE', 0.2790580933666064, (41.585999999999984, 43.59599999999999, 34.082999999999984)), ('B', ' 121 ', 'SER', 0.04867245826810925, (41.09299999999999, 35.809, 10.302)), ('B', ' 153 ', 'ASP', 0.0, (37.37299999999998, 53.780000000000015, 25.606)), ('B', ' 188 ', 'ARG', 0.0, (52.083, 23.235, 30.287)), ('B', ' 222 ', 'ARG', 0.0, (11.083, 48.504999999999995, 51.617)), ('B', ' 232 ', 'LEU', 0.0, (27.839, 37.023999999999994, 54.987999999999985)), ('B', ' 235 ', 'MET', 0.2263992557080514, (29.241, 34.186, 50.833)), ('B', ' 270 ', 'GLU', 0.0, (15.696999999999997, 38.203, 49.931)), ('B', ' 280 ', 'THR', 0.030202532374219236, (11.502999999999997, 35.912, 34.652999999999984))]
data['cbeta'] = [('A', ' 128 ', 'CYS', ' ', 0.2678210790163627, (18.988000000000007, 40.839, 15.868999999999998))]
data['probe'] = [(' A  76  ARG  NH1', ' A  92  ASP  OD2', -0.73, (33.295, 66.48, -4.963)), (' A 186  VAL HG23', ' A 188  ARG  HG3', -0.596, (2.669, 55.395, 9.233)), (' B 270  GLU  HG3', ' B 271  LEU  N  ', -0.59, (14.594, 38.168, 47.48)), (' B  86  VAL HG13', ' B 179  GLY  HA2', -0.586, (51.424, 37.209, 27.725)), (' B 221  ASN HD21', ' B 267  SER  HA ', -0.573, (14.238, 42.317, 48.202)), (' B 163  HIS  HE1', ' B 172  HIS  HB3', -0.544, (39.887, 29.67, 26.575)), (' A  83  GLN  OE1', ' A  88  LYS  CE ', -0.538, (16.79, 52.183, -3.879)), (' A  83  GLN  OE1', ' A  88  LYS  NZ ', -0.533, (16.979, 51.808, -4.39)), (' A 217  ARG  HD2', ' A 544  HOH  O  ', -0.533, (26.657, 13.514, 23.338)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.527, (14.037, 51.173, 2.529)), (' A 285  ALA  HB3', ' B 285  ALA  HB3', -0.524, (16.028, 30.636, 33.219)), (' B 163  HIS  CE1', ' B 172  HIS  HB3', -0.512, (40.071, 29.821, 26.081)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.507, (32.494, 39.318, 36.61)), (' A 276  MET  CE ', ' A 281  ILE HG13', -0.502, (18.383, 23.082, 29.516)), (' A 304  THR  HB ', ' B 121  SER  HB3', -0.488, (39.153, 34.311, 8.868)), (' A 285  ALA  HB2', ' B 286  LEU  HG ', -0.474, (18.18, 29.779, 34.32)), (' B 249  ILE HG22', ' B 293  PRO  HG2', -0.473, (29.459, 49.603, 38.713)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.467, (13.772, 33.102, 14.339)), (' A  52  PRO  HG2', ' A  54  TYR  CE2', -0.463, (6.112, 60.218, 6.198)), (' A 231  ASN  ND2', ' A 501  HOH  O  ', -0.456, (3.882, 19.176, 11.654)), (' B  40  ARG  O  ', ' B  43  ILE HG12', -0.452, (56.942, 28.926, 22.087)), (' A  40  ARG  O  ', ' A  43  ILE HG12', -0.447, (12.504, 62.034, 4.516)), (' A 100  LYS  HD3', ' A 155  ASP  OD2', -0.445, (34.806, 38.833, -2.238)), (' A  52  PRO  HD2', ' A 507  HOH  O  ', -0.443, (3.457, 59.656, 6.133)), (' B  78  ILE  O  ', ' B  78  ILE HG22', -0.44, (65.506, 42.257, 13.79)), (' A  78  ILE  O  ', ' A  78  ILE HG22', -0.439, (24.631, 64.38, -8.751)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.426, (38.376, 40.735, 23.671)), (' B  86  VAL HG13', ' B 179  GLY  CA ', -0.423, (52.097, 37.065, 27.846)), (' A 101  TYR  HA ', ' A 157  VAL  O  ', -0.42, (27.354, 42.29, 0.941)), (' A 285  ALA  HB2', ' B 286  LEU  CD1', -0.418, (18.736, 29.292, 34.234)), (' A 186  VAL  CG2', ' A 188  ARG  HG3', -0.414, (2.692, 54.944, 9.167)), (' A 139  SER  HB3', ' B   6  MET  HE2', -0.413, (22.056, 47.269, 21.997)), (' B 214  ASN  HB2', ' B 282  LEU HD21', -0.41, (14.454, 45.449, 31.875)), (' A  10  SER  OG ', ' A  14  GLU  OE1', -0.405, (33.082, 46.116, 14.104)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.402, (22.858, 43.961, 11.461))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
