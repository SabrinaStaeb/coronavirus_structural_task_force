# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  48 ', 'ASP', 0.0031765932737555093, (-33.34, 6.379999999999999, 34.144)), ('A', '  49 ', 'MET', 0.16520281617610078, (-29.574999999999992, 5.523999999999998, 34.210000000000015)), ('A', '  67 ', 'LEU', 0.027943984249992577, (-33.57, -3.5539999999999994, 15.759)), ('A', '  86 ', 'VAL', 0.15385841998319388, (-25.013, -8.719999999999997, 28.831000000000003)), ('A', ' 154 ', 'TYR', 0.1623328205482813, (-4.247, -21.279999999999994, 17.184000000000005)), ('A', ' 155 ', 'ASP', 0.11868702180204849, (-7.259999999999998, -20.404999999999998, 14.845)), ('A', ' 216 ', 'ASP', 0.26736889024472016, (19.895999999999994, -4.837999999999998, 23.509)), ('A', ' 222 ', 'ARG', 0.03359906623375959, (26.521, -7.802999999999997, 37.529)), ('B', '  67 ', 'LEU', 0.03147945515805147, (3.371, -24.459, -5.597000000000002)), ('B', '  86 ', 'VAL', 0.15108287537799295, (7.697999999999999, -8.77, -7.914)), ('B', ' 100 ', 'LYS', 0.0, (-12.241999999999997, -3.5239999999999987, -4.05)), ('B', ' 154 ', 'TYR', 0.03387657362026216, (-14.276999999999997, 3.849999999999999, 2.334)), ('B', ' 189 ', 'GLN', 0.05585927836980846, (23.188, -10.226, -0.9860000000000001)), ('B', ' 216 ', 'ASP', 0.26786561283101157, (-2.853, 16.778999999999993, 27.767000000000003)), ('B', ' 226 ', 'THR', 0.2071197033793862, (7.608999999999998, 31.334, 11.55)), ('B', ' 270 ', 'GLU', 0.08323004153242719, (10.685999999999998, 24.289999999999996, 23.197)), ('B', ' 279 ', 'ARG', 0.025351335939574685, (6.704, 14.576, 31.917))]
data['cbeta'] = []
data['probe'] = [(' A 249  ILE  CD1', ' A 293  PRO  HG2', -0.767, (5.207, -14.614, 31.722)), (' A 231  ASN  O  ', ' A 235  MET  HG2', -0.746, (7.697, -4.517, 45.953)), (' B  58  LEU HD22', ' B  82  MET  HE3', -0.604, (10.656, -13.099, -12.968)), (' B 233  VAL HG11', ' B 269  LYS  HG3', -0.594, (12.823, 25.037, 17.78)), (' A 231  ASN  HB3', ' A 235  MET  HE2', -0.579, (7.141, -7.119, 46.256)), (' A 249  ILE HD13', ' A 293  PRO  HG2', -0.57, (4.648, -14.835, 32.016)), (' A  61  LYS  NZ ', ' A 506  HOH  O  ', -0.536, (-38.448, -0.863, 28.228)), (' A 123  SER  HB2', ' B 304  THR HG22', -0.51, (-15.257, 2.445, 12.572)), (' A 202  VAL HG21', ' A 249  ILE HD11', -0.499, (5.082, -13.447, 34.121)), (' A   5  LYS  HG2', ' A 127  GLN  HB2', -0.489, (-0.499, -3.289, 21.038)), (' A 233  VAL HG21', ' A 269  LYS  HE3', -0.471, (15.802, -3.48, 44.902)), (' A 229  ASP  O  ', ' A 233  VAL HG23', -0.466, (13.722, -4.48, 46.677)), (' B   5  LYS  HG2', ' B 127  GLN  HB2', -0.466, (0.271, 1.646, 14.997)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.455, (6.794, 9.5, 8.404)), (' B  40  ARG  HD3', ' B  85  CYS  HA ', -0.451, (11.874, -8.356, -9.048)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.449, (-0.946, -6.365, 32.784)), (' A  40  ARG  HD3', ' A  85  CYS  HA ', -0.43, (-26.808, -6.694, 32.436)), (' B  40  ARG  HB2', ' B  82  MET  HE2', -0.426, (11.476, -12.172, -10.186)), (' B 269  LYS  HB2', ' B 269  LYS  HE3', -0.424, (10.094, 25.996, 17.022)), (' A 202  VAL  CG2', ' A 249  ILE HD11', -0.416, (5.34, -13.416, 34.122)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.416, (0.439, -3.053, 5.446)), (' B 236  LYS  HB3', ' B 236  LYS  HE2', -0.408, (20.469, 21.935, 16.354)), (' B   5  LYS  HD3', ' B 505  HOH  O  ', -0.404, (3.149, 2.773, 14.661)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.4, (-10.335, -7.512, 21.341))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
