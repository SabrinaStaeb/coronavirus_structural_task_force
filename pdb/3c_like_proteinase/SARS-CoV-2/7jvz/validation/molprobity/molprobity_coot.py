# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  22 ', 'CYS', 0.030069769467763924, (-14.377999999999995, -43.002, -3.649)), ('A', '  63 ', 'ASN', 0.009681108939106425, (-20.121000000000006, -50.71099999999999, -1.7499999999999998)), ('A', '  68 ', 'VAL', 0.05027035712794612, (-11.64, -47.559999999999995, 3.668)), ('A', ' 154 ', 'TYR', 0.0004254156778395828, (-14.162000000000003, -39.23299999999999, 32.683)), ('A', ' 218 ', 'TRP', 0.03387396935392674, (-6.582000000000002, -4.161, 38.655)), ('A', ' 277 ', 'ASN', 0.022379372134554355, (-5.5230000000000015, 1.32, 27.151))]
data['omega'] = []
data['rota'] = [('A', '  30 ', 'LEU', 0.0741762208981905, (-14.944, -41.981, 11.958999999999998)), ('A', '  34 ', 'ASP', 0.0031085046771935146, (-19.219, -51.705, 12.419999999999998)), ('A', '  43 ', 'ILE', 0.15087572092811719, (-19.046, -39.137, -3.844)), ('A', '  46 ', 'SER', 0.1749468982110006, (-14.771000000000003, -30.881999999999998, -8.464)), ('A', '  50 ', 'LEU', 0.0, (-21.28799999999999, -26.712, -8.183)), ('A', '  59 ', 'ILE', 0.014474675633830583, (-27.35300000000001, -44.342, -7.070999999999999)), ('A', '  63 ', 'ASN', 0.0, (-20.121000000000006, -50.71099999999999, -1.7499999999999998)), ('A', '  65 ', 'ASN', 0.16669541689116282, (-16.386, -48.44, -5.072)), ('A', '  72 ', 'ASN', 0.015296532609205727, (-2.9160000000000004, -50.74099999999999, 6.471)), ('A', '  77 ', 'VAL', 0.29231902332988857, (-17.974000000000007, -52.29, 2.789)), ('A', '  84 ', 'ASN', 0.0, (-28.927, -36.278, 5.768)), ('A', '  97 ', 'LYS', 0.04816164575791331, (-10.701, -49.451000000000015, 19.823)), ('A', ' 121 ', 'SER', 0.12245293210668606, (-3.819, -39.73, 10.265)), ('A', ' 127 ', 'GLN', 0.07696044809688458, (-9.702000000000002, -25.916, 21.628)), ('A', ' 165 ', 'MET', 0.09823924920154614, (-16.504, -27.044999999999995, 4.368)), ('A', ' 177 ', 'LEU', 0.16299630109313656, (-22.938, -36.831, 13.723)), ('A', ' 198 ', 'THR', 0.0006404987167877283, (-21.306000000000004, -11.717999999999996, 18.547)), ('A', ' 201 ', 'THR', 0.0791740026151936, (-20.778000000000002, -12.664, 27.405999999999995)), ('A', ' 232 ', 'LEU', 0.08903953854744721, (-28.019, -1.8149999999999995, 27.29)), ('A', ' 243 ', 'THR', 0.11742313786463743, (-29.863, -13.539999999999996, 31.44)), ('A', ' 267 ', 'SER', 0.1729263873330334, (-16.147, -4.176, 35.838)), ('A', ' 274 ', 'ASN', 0.11958413547366235, (-13.094, 2.970999999999999, 28.403)), ('A', ' 276 ', 'MET', 0.0, (-7.962000000000001, -1.552, 28.032)), ('A', ' 279 ', 'ARG', 0.17728295495666366, (-3.21, -3.1599999999999993, 29.474)), ('A', ' 286 ', 'LEU', 0.001999627145496759, (-8.607000000000003, -8.091000000000001, 24.261)), ('A', ' 289 ', 'ASP', 0.10352539491811791, (-14.719000000000005, -15.381, 24.842999999999996)), ('A', ' 301 ', 'SER', 0.29373183000453906, (-9.595999999999997, -27.296999999999993, 39.971)), ('A', ' 303 ', 'VAL', 0.011426068383557881, (-9.769000000000002, -33.224, 36.719)), ('A', ' 304 ', 'THR', 0.08009104241526153, (-8.933, -36.963999999999984, 36.148))]
data['cbeta'] = []
data['probe'] = [(' A 106  ILE  HB ', ' A 416  HOH  O  ', -1.158, (-21.901, -26.788, 22.415)), (' A 235  MET  HA ', ' A 421  HOH  O  ', -0.762, (-27.218, -5.526, 22.638)), (' A  24  THR  CG2', ' A 439  HOH  O  ', -0.746, (-12.624, -36.602, -8.268)), (' A 235  MET  CA ', ' A 421  HOH  O  ', -0.662, (-27.511, -4.722, 23.026)), (' A 110  GLN  HB2', ' A 416  HOH  O  ', -0.659, (-21.632, -26.456, 22.774)), (' A 130  MET  HE3', ' A 182  TYR  CD1', -0.652, (-22.837, -26.581, 15.472)), (' A 110  GLN  CB ', ' A 416  HOH  O  ', -0.64, (-21.246, -26.74, 23.371)), (' A 111  THR  HB ', ' A 402  HOH  O  ', -0.633, (-13.998, -25.249, 23.185)), (' A  80  HIS  N  ', ' A 401  HOH  O  ', -0.628, (-24.487, -50.07, 3.87)), (' A  83  GLN  C  ', ' A  84  ASN HD22', -0.62, (-29.002, -37.965, 7.128)), (' A 127  GLN  HA ', ' A 127  GLN HE21', -0.605, (-10.468, -27.573, 22.414)), (' A 217  ARG  HD3', ' A 437  HOH  O  ', -0.604, (-6.718, -10.484, 43.43)), (' A 235  MET  HB2', ' A 421  HOH  O  ', -0.604, (-27.738, -4.655, 23.023)), (' A 112  PHE  N  ', ' A 402  HOH  O  ', -0.602, (-14.192, -26.167, 22.55)), (' A 232  LEU  O  ', ' A 235  MET  HE2', -0.594, (-26.749, -0.552, 24.339)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.593, (-24.354, -35.42, 9.063)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.582, (-14.964, -49.345, 17.279)), (' A  52  PRO  HD2', ' A 188  ARG  HG3', -0.563, (-24.877, -27.783, -4.906)), (' A 218  TRP  CZ3', ' A 219  PHE  HB3', -0.547, (-9.08, -4.353, 34.238)), (' A 185  PHE  N  ', ' A 403  HOH  O  ', -0.537, (-27.591, -24.661, 6.078)), (' A  58  LEU  CD2', ' A  82  MET  HE2', -0.529, (-27.96, -40.622, -1.04)), (' A 274  ASN  N  ', ' A 274  ASN HD22', -0.523, (-14.913, 2.964, 28.783)), (' A 268  LEU  O  ', ' A 271  LEU  N  ', -0.518, (-15.681, -2.513, 30.749)), (' A 198  THR HG22', ' A 238  ASN  O  ', -0.517, (-22.061, -9.148, 19.732)), (' A 225  THR  OG1', ' A 226  THR  N  ', -0.51, (-26.592, -2.885, 36.731)), (' A 235  MET  CB ', ' A 421  HOH  O  ', -0.504, (-27.544, -4.587, 23.405)), (' A 261  VAL  O  ', ' A 264  MET  HB3', -0.501, (-20.391, -10.097, 37.464)), (' A 110  GLN  HB3', ' A 440  HOH  O  ', -0.495, (-19.592, -26.405, 25.241)), (' A  84  ASN  OD1', ' A 180  ASN  ND2', -0.49, (-30.307, -34.935, 9.131)), (' A  83  GLN  HG2', ' A  84  ASN HD22', -0.486, (-28.441, -38.506, 8.498)), (' A  63  ASN  N  ', ' A  63  ASN  OD1', -0.481, (-21.811, -51.128, -2.442)), (' A  72  ASN HD22', ' A  73  VAL  H  ', -0.479, (-3.632, -52.16, 8.401)), (' A 201  THR HG23', ' A 239  TYR  HD2', -0.474, (-20.641, -9.648, 26.867)), (' A 276  MET  HE1', ' A 287  LEU  CD2', -0.47, (-10.835, -6.915, 27.558)), (' A 276  MET  HE1', ' A 287  LEU HD21', -0.459, (-11.194, -6.498, 27.809)), (' A 281  ILE  HA ', ' A 406  HOH  O  ', -0.458, (-4.006, -9.304, 32.143)), (' A 276  MET  HG2', ' A 279  ARG  O  ', -0.457, (-5.856, -4.574, 28.575)), (' A 154  TYR  CB ', ' A 419  HOH  O  ', -0.45, (-16.056, -38.814, 34.12)), (' A 107  GLN  O  ', ' A 108  PRO  C  ', -0.449, (-23.062, -22.623, 21.648)), (' A 243  THR  O  ', ' A 247  VAL HG23', -0.445, (-28.135, -13.84, 34.278)), (' A 153  ASP  O  ', ' A 155  ASP  N  ', -0.441, (-15.51, -40.373, 30.897)), (' A 118  TYR  CE1', ' A 144  SER  HB3', -0.439, (-6.913, -30.907, 6.462)), (' A 253  LEU  O  ', ' A 257  THR  OG1', -0.438, (-16.136, -15.941, 42.498)), (' A  58  LEU HD23', ' A  82  MET  HE2', -0.436, (-28.095, -41.114, -1.086)), (' A  24  THR HG23', ' A 439  HOH  O  ', -0.433, (-12.365, -36.382, -7.149)), (' A 154  TYR  O  ', ' A 306  GLN  N  ', -0.429, (-11.347, -40.508, 31.482)), (' A 217  ARG  CD ', ' A 437  HOH  O  ', -0.429, (-6.541, -10.47, 43.36)), (' A 184  PRO  C  ', ' A 403  HOH  O  ', -0.426, (-27.856, -24.319, 6.249)), (' A  83  GLN  HG2', ' A  84  ASN  ND2', -0.417, (-29.007, -38.168, 8.679)), (' A  30  LEU HD21', ' A  32  LEU HD11', -0.416, (-17.853, -41.837, 16.18)), (' A  84  ASN  N  ', ' A  84  ASN  ND2', -0.415, (-29.337, -37.535, 7.043)), (' A  58  LEU HD22', ' A  82  MET  HE2', -0.414, (-27.124, -40.692, -0.818)), (' A 268  LEU  O  ', ' A 269  LYS  C  ', -0.414, (-17.558, -2.356, 31.014)), (' A 140  PHE  HB3', ' A 144  SER  OG ', -0.413, (-9.755, -28.281, 7.291)), (' A  80  HIS  CG ', ' A  80  HIS  O  ', -0.412, (-25.238, -47.638, 0.709)), (' A  86  VAL HG13', ' A 179  GLY  CA ', -0.411, (-24.713, -35.799, 9.047)), (' A  72  ASN HD22', ' A  73  VAL  N  ', -0.409, (-3.504, -52.271, 8.171)), (' A  40  ARG  C  ', ' A  42  VAL  H  ', -0.404, (-19.595, -37.014, 0.415)), (' A 281  ILE  CA ', ' A 406  HOH  O  ', -0.402, (-3.942, -9.291, 31.998)), (' A 218  TRP  CE3', ' A 219  PHE  CA ', -0.402, (-8.85, -3.675, 35.951)), (' A  68  VAL  O  ', ' A  68  VAL HG12', -0.401, (-11.303, -48.787, 5.621)), (' A  83  GLN  CG ', ' A  84  ASN  ND2', -0.401, (-29.251, -38.772, 8.838)), (' A  83  GLN  CG ', ' A  84  ASN HD22', -0.4, (-28.813, -38.781, 7.986))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
