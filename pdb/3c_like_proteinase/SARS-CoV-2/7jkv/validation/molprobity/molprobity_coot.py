# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  27 ', 'LEU', 0.29986878727418836, (-17.946, 53.071000000000005, -4.804)), ('A', ' 125 ', 'VAL', 0.2949613831053148, (-7.416, 48.67700000000001, 8.656)), ('A', ' 127 ', 'GLN', 0.2364995469894075, (-10.010000000000002, 50.445, 15.13)), ('A', ' 223 ', 'PHE', 0.007456915799656122, (-8.986, 57.699000000000005, 47.818)), ('A', ' 298 ', 'ARG', 0.0, (-7.962000000000002, 40.78, 24.948)), ('A', ' 301 ', 'SER', 0.10071389528965699, (-4.363999999999998, 38.668, 29.117999999999995)), ('B', '   5 ', 'LYS', 0.006774968093650368, (-2.0120000000000005, 54.52700000000001, 13.079)), ('B', ' 222 ', 'ARG', 0.2127995085981615, (12.385999999999997, 82.59900000000002, 7.170000000000001)), ('B', ' 277 ', 'ASN', 0.151619004872731, (5.397000000000001, 78.169, 24.296))]
data['cbeta'] = [('A', '   4 ', 'ARG', ' ', 0.2620278614144938, (-0.7960000000000003, 48.808, 19.777)), ('A', '  92 ', 'ASP', ' ', 0.2509812131779611, (-25.753, 35.241, -12.102)), ('A', ' 241 ', 'PRO', ' ', 0.26439901470868354, (-24.051, 58.072000000000024, 33.132)), ('A', ' 298 ', 'ARG', ' ', 0.28022520907339116, (-8.847, 40.91800000000001, 23.687)), ('B', '  22 ', 'CYS', ' ', 0.3210994812706566, (10.228999999999992, 21.244000000000003, 18.508)), ('B', '  41 ', 'HIS', ' ', 0.2680413564803551, (14.746999999999996, 29.6, 20.224)), ('B', '  76 ', 'ARG', 'B', 0.26199335484010744, (4.704, 15.977000000000006, 5.63)), ('B', ' 155 ', 'ASP', ' ', 0.27068886661456343, (-1.08, 43.133, -5.128)), ('B', ' 298 ', 'ARG', ' ', 0.3290551514157862, (-0.623, 56.73200000000001, 2.841)), ('B', ' 301 ', 'SER', ' ', 0.4174071909479836, (-4.393000000000001, 61.133, -0.893))]
data['probe'] = [(' B 226 BTHR HG21', ' B 647  HOH  O  ', -0.979, (27.183, 73.086, 8.023)), (' A  86  VAL HG22', ' A 162 BMET  HE1', -0.876, (-24.915, 50.147, 2.122)), (' B 126  TYR  HE1', ' B 128  CYS  SG ', -0.859, (3.481, 46.709, 16.391)), (' B  86 BVAL HG22', ' B 162 BMET  HE1', -0.84, (13.165, 33.24, 11.041)), (' B 240  GLU  HG3', ' B 617  HOH  O  ', -0.809, (19.638, 57.773, 14.394)), (' A  67  LEU HD11', ' A  74  GLN  OE1', -0.807, (-17.457, 45.549, -15.983)), (' A 686  HOH  O  ', ' B   6  MET  HE1', -0.783, (-6.158, 53.834, 4.823)), (' B 126  TYR  CE1', ' B 128  CYS  SG ', -0.743, (3.183, 45.935, 16.444)), (' B 226 BTHR HG23', ' B 229  ASP  H  ', -0.729, (24.773, 71.829, 9.176)), (' B 122  PRO  HG2', ' B 698  HOH  O  ', -0.718, (-7.215, 35.032, 12.009)), (' A  45  THR HG23', ' A  47  GLU  HG2', -0.703, (-26.854, 64.107, -11.966)), (' B  40  ARG  HA ', ' B  87 BLEU  HG ', -0.698, (14.511, 27.851, 14.169)), (' A  86  VAL HG22', ' A 162 BMET  CE ', -0.676, (-25.29, 51.049, 2.667)), (' A 186 BVAL HG23', ' A 188  ARG  HG2', -0.671, (-28.984, 64.424, 3.562)), (' B 288  GLU  HG2', ' B 291  PHE  CD2', -0.67, (1.898, 61.227, 14.312)), (' B  86 BVAL HG22', ' B 162 BMET  CE ', -0.667, (12.715, 34.1, 11.412)), (' A 139 ASER  OG ', ' B   4  ARG  HD2', -0.628, (-7.696, 56.779, 10.212)), (' A 235  MET  HG3', ' A 691  HOH  O  ', -0.603, (-22.774, 61.532, 34.24)), (' A  45  THR HG22', ' A  48  ASP  OD2', -0.587, (-28.343, 61.631, -10.916)), (' A  27  LEU  CB ', ' A 515  HOH  O  ', -0.585, (-17.295, 54.354, -3.461)), (' A  45  THR  CG2', ' A  47  GLU  HG2', -0.561, (-27.046, 64.048, -12.473)), (' A  27  LEU  HA ', ' A 515  HOH  O  ', -0.557, (-17.018, 54.159, -3.636)), (' B 288  GLU  HG2', ' B 291  PHE  HD2', -0.551, (2.224, 61.225, 13.711)), (' B 402  1PE H231', ' B 655  HOH  O  ', -0.539, (-4.773, 27.428, 6.209)), (' B   5  LYS  HE3', ' B 291  PHE  CZ ', -0.523, (0.467, 57.843, 13.48)), (' A  45  THR HG23', ' A  47  GLU  CG ', -0.519, (-27.583, 64.552, -11.779)), (' B  52  PRO  HG2', ' B 561  HOH  O  ', -0.503, (22.183, 30.371, 21.72)), (' A 127  GLN  HG2', ' A 569  HOH  O  ', -0.492, (-10.346, 49.346, 19.395)), (' B   4  ARG  NH1', ' B 507  HOH  O  ', -0.476, (-8.089, 54.76, 14.391)), (' A  27  LEU  HB2', ' A 515  HOH  O  ', -0.463, (-17.529, 53.829, -2.808)), (' A  31  TRP  CE2', ' A  95  ASN  HB2', -0.462, (-19.358, 36.73, -3.591)), (' B   5  LYS  HD2', ' B   5  LYS  N  ', -0.457, (-1.376, 56.171, 13.94)), (' B  86 BVAL HG23', ' B 179  GLY  HA2', -0.457, (15.624, 34.794, 11.018)), (' A  45  THR  CG2', ' A  47  GLU  CG ', -0.445, (-27.703, 64.449, -12.126)), (' B 300  CYS  HB2', ' B 538  HOH  O  ', -0.443, (-1.1, 64.215, 2.015)), (' A  39  PRO  HG3', ' A 162 BMET  HE3', -0.441, (-23.243, 52.141, 1.817)), (' A 165 BMET  SD ', ' A 401  V7G  C25', -0.437, (-23.546, 61.505, 2.056)), (' A  66  PHE  CE1', ' A  87  LEU HD21', -0.431, (-27.901, 50.067, -7.421)), (' B 221  ASN  HB2', ' B 664  HOH  O  ', -0.429, (11.345, 82.553, 10.89)), (' B  45  THR  O  ', ' B  49  MET  HG3', -0.423, (15.285, 26.267, 26.08)), (' B 279  ARG  HB3', ' B 279  ARG  HE ', -0.423, (0.676, 77.476, 18.733)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.419, (4.031, 43.612, 10.524)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.416, (-14.791, 47.824, 10.537)), (' B   6  MET  HB3', ' B   6  MET  HE2', -0.412, (-4.634, 52.369, 7.171)), (' B 288  GLU  HG2', ' B 291  PHE  CE2', -0.411, (1.374, 60.571, 14.293)), (' B  27  LEU  HA ', ' B 504  HOH  O  ', -0.409, (4.934, 30.602, 18.791)), (' B 226 BTHR HG22', ' B 229  ASP  HB2', -0.407, (24.258, 73.841, 10.23)), (' B 108  PRO  HB3', ' B 132  PRO  HA ', -0.407, (16.289, 53.876, 14.846))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
