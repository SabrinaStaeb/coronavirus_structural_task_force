# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  74 ', 'GLN', 0.12237064387957594, (-17.397999999999996, 42.095, -14.303)), ('A', ' 125 ', 'VAL', 0.27585634787901536, (-7.408666666666669, 46.963333333333324, 8.473999999999998)), ('A', ' 301 ', 'SER', 0.11238802307788169, (-4.881000000000002, 39.241, 29.738000000000003)), ('B', '   3 ', 'PHE', 0.21703173757855504, (-4.068000000000001, 61.628, 11.478000000000002)), ('B', '  22 ', 'CYS', 0.19754277893343947, (8.525999999999998, 20.889000000000003, 18.85)), ('B', '  51 ', 'ASN', 0.027782372159502595, (24.124499999999998, 28.971249999999998, 28.203500000000005)), ('B', ' 125 ', 'VAL', 0.12715937662596738, (-3.1220000000000017, 43.982, 13.207)), ('B', ' 128 ', 'CYS', 0.014815192566569654, (4.674999999999999, 48.36, 15.614)), ('B', ' 130 ', 'MET', 0.0880907250526359, (13.225000000000001, 48.597500000000004, 13.6525)), ('B', ' 165 ', 'MET', 0.17411564185066442, (11.455, 38.22, 22.524000000000008)), ('B', ' 276 ', 'MET', 0.11926647780670246, (5.229, 74.926, 21.706)), ('B', ' 306 ', 'GLN', 0.18860084063516896, (-3.8409999999999997, 43.816, -4.589000000000001))]
data['cbeta'] = [('A', ' 127 ', 'GLN', ' ', 0.28249083711967493, (-9.394000000000004, 50.558, 16.218)), ('B', '  44 ', 'CYS', 'B', 0.25729044363310777, (15.428999999999993, 25.817999999999998, 23.203)), ('B', ' 117 ', 'CYS', 'B', 0.2880492313499391, (-0.07000000000000206, 35.142, 14.594))]
data['probe'] = [(' B  86 BVAL HG22', ' B 162 BMET  HE1', -0.867, (12.334, 33.585, 11.988)), (' A  86  VAL HG22', ' A 162 BMET  HE1', -0.802, (-25.545, 50.35, 1.853)), (' A 235  MET  HG3', ' A 724  HOH  O  ', -0.646, (-23.396, 61.672, 34.145)), (' A 106 BILE HG12', ' A 110 BGLN  HB2', -0.645, (-20.404, 49.913, 19.206)), (' B  86 BVAL HG22', ' B 162 BMET  CE ', -0.587, (12.44, 33.827, 11.744)), (' A 402  DMS  H13', ' A 677  HOH  O  ', -0.585, (-2.944, 54.042, 18.073)), (' A 132  PRO  HD2', ' A 615 BHOH  O  ', -0.556, (-19.592, 60.668, 21.207)), (' B  44 BCYS  SG ', ' B  49  MET  HG3', -0.537, (14.452, 27.498, 24.914)), (' B  44 BCYS  SG ', ' B  49  MET  CG ', -0.536, (14.263, 28.18, 24.666)), (' B 300  CYS  HB3', ' B 749  HOH  O  ', -0.526, (-2.429, 64.357, 0.892)), (' A  86  VAL HG22', ' A 162 BMET  CE ', -0.52, (-24.927, 51.04, 2.714)), (' A 131  ARG  HG2', ' A 135  THR  O  ', -0.507, (-17.748, 58.905, 16.639)), (' B  51  ASN  N  ', ' B  51 BASN HD22', -0.506, (21.65, 28.582, 28.212)), (' A  66  PHE  CE1', ' A  87  LEU HD21', -0.505, (-27.406, 50.488, -8.117)), (' B  44 BCYS  HB2', ' B  48  ASP  HB2', -0.493, (16.579, 25.079, 24.883)), (' A 106 BILE HG13', ' A 110 BGLN  OE1', -0.489, (-21.912, 47.636, 18.932)), (' A 166  GLU  O  ', ' A 401 AK36  H1 ', -0.488, (-19.122, 65.565, 4.027)), (' B 108  PRO  HB3', ' B 132  PRO  HA ', -0.482, (16.335, 53.669, 15.293)), (' B  62 ASER  HG ', ' B  64  HIS  CE1', -0.479, (13.048, 11.872, 12.783)), (' B  86 AVAL HG13', ' B 179  GLY  HA2', -0.474, (15.683, 35.133, 11.541)), (' B  62 ASER  OG ', ' B  64  HIS  CE1', -0.472, (13.209, 12.389, 12.87)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.468, (11.414, 55.707, 13.222)), (' A 233  VAL HG11', ' A 269  LYS  HG3', -0.467, (-15.046, 64.468, 39.553)), (' B   6 BMET  HB2', ' B   6 BMET  HE3', -0.463, (-4.327, 55.074, 8.778)), (' B  44 BCYS  SG ', ' B  49  MET  HG2', -0.456, (14.596, 28.412, 24.486)), (' A 402  DMS  H21', ' B   5  LYS  HG2', -0.452, (-1.278, 56.559, 15.117)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.44, (-14.747, 48.093, 10.33)), (' A 165 BMET  HB2', ' A 165 BMET  HE3', -0.437, (-22.905, 61.359, 4.171)), (' A  50  LEU  O  ', ' A 188 AARG  NE ', -0.434, (-29.682, 68.647, -0.909)), (' A 235  MET  CG ', ' A 724  HOH  O  ', -0.432, (-24.11, 61.87, 34.323)), (' A 402  DMS  H11', ' B   5  LYS  HB2', -0.431, (-2.847, 54.363, 15.333)), (' B  66  PHE  CE1', ' B  87  LEU HD21', -0.425, (12.448, 22.905, 13.486)), (' A 402  DMS  H12', ' B 656  HOH  O  ', -0.423, (-4.891, 53.865, 15.525)), (' B 101  TYR  OH ', ' B 501  HOH  O  ', -0.421, (9.892, 31.949, -1.046)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.417, (-17.575, 54.929, 23.094)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.417, (4.415, 43.42, 10.521)), (' B 155  ASP  HB3', ' B 306  GLN  O  ', -0.409, (-1.43, 43.32, -6.675)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.407, (-8.522, 46.146, 2.707)), (' B 130 BMET  HB2', ' B 130 BMET  HE3', -0.402, (11.424, 48.44, 13.03))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
