# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 298 ', 'ARG', 0.012840601145348702, (7.7360000000000015, 19.272, -21.493))]
data['omega'] = []
data['rota'] = [('A', '  27 ', 'LEU', 0.2648735966426054, (-24.456, 1.367, -20.727)), ('A', '  47 ', 'GLU', 0.08841938011866915, (-32.00799999999999, -7.492, -33.279)), ('A', '  73 ', 'VAL', 0.007351242675213143, (-29.88, 8.883, -6.809)), ('A', '  75 ', 'LEU', 0.17332186466852356, (-32.2, 11.338, -12.166)), ('A', '  86 ', 'VAL', 0.15712045276476885, (-24.99600000000001, 10.465, -29.375)), ('A', ' 130 ', 'MET', 4.1945269868624334e-05, (-5.439, 7.017999999999999, -31.443)), ('A', ' 190 ', 'THR', 0.0013599335943581536, (-22.252, -4.978, -40.088)), ('A', ' 214 ', 'ASN', 0.18591901314240428, (18.457, 10.674, -20.895)), ('A', ' 216 ', 'ASP', 0.22091396064397276, (21.103, 6.341, -24.258)), ('A', ' 222 ', 'ARG', 0.0, (27.004, 9.294999999999998, -38.903)), ('A', ' 235 ', 'MET', 0.2884973235075929, (6.785, 2.5999999999999996, -45.953)), ('A', ' 259 ', 'ILE', 0.0, (21.134, 15.944000000000003, -34.036)), ('A', ' 263 ', 'ASP', 0.010327656983427547, (19.955, 12.767999999999999, -38.815)), ('A', ' 298 ', 'ARG', 0.0, (7.7360000000000015, 19.272, -21.493)), ('A', ' 299 ', 'GLN', 0.08067853041634031, (8.408, 16.199, -19.332)), ('A', ' 300 ', 'CYS', 0.012204796803416684, (11.986, 16.201, -20.709)), ('B', '  48 ', 'ASP', 0.034937868080666644, (22.399, 16.388, 6.685)), ('B', '  55 ', 'GLU', 0.22025529985822198, (16.147999999999996, 11.249000000000004, 16.678)), ('B', '  73 ', 'VAL', 0.004687776407314807, (-5.877, 26.238000000000003, 2.685)), ('B', '  78 ', 'ILE', 0.06502402600420984, (-0.201, 20.786000000000005, 16.556)), ('B', '  86 ', 'VAL', 0.06620771739171404, (7.634, 8.099, 8.532)), ('B', ' 169 ', 'THR', 0.0013599335943581536, (19.697, 2.7920000000000003, -11.611)), ('B', ' 181 ', 'PHE', 0.29592601809717195, (11.253, -0.358, 4.37)), ('B', ' 196 ', 'THR', 0.11385819093846358, (19.652, -9.223, -8.862)), ('B', ' 217 ', 'ARG', 0.1454133866505332, (-3.048999999999999, -20.545, -28.3)), ('B', ' 235 ', 'MET', 0.12291745425223224, (16.47800000000001, -21.131000000000007, -11.855)), ('B', ' 276 ', 'MET', 0.2964670555018601, (9.389, -17.431, -29.416)), ('B', ' 279 ', 'ARG', 0.16692871849096858, (6.069000000000002, -14.915, -32.997))]
data['cbeta'] = [('A', '  84 ', 'ASN', ' ', 0.33742188840974313, (-23.834, 13.047000000000004, -35.189)), ('B', '  84 ', 'ASN', ' ', 0.2930377661263216, (9.791, 2.686, 11.386))]
data['probe'] = [(' B 221  ASN  OD1', ' B 401  HOH  O  ', -0.723, (2.498, -28.854, -23.189)), (' B 263  ASP  OD1', ' B 401  HOH  O  ', -0.628, (1.349, -28.619, -22.247)), (' B 233  VAL HG21', ' B 269  LYS  HE3', -0.604, (13.503, -26.927, -18.793)), (' A 295  ASP  OD1', ' A 401  HOH  O  ', -0.555, (1.861, 12.779, -24.997)), (' A 259  ILE HG22', ' A 263  ASP  HB3', -0.541, (21.346, 13.238, -36.456)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.539, (-0.554, 8.254, -33.308)), (' A 138  GLY  HA2', ' B   4  ARG  HG3', -0.537, (-5.693, -1.507, -23.933)), (' A 221  ASN  HB2', ' A 222 AARG  NH1', -0.534, (25.19, 5.353, -39.125)), (' A   4  ARG  HB2', ' B 139  SER  HB2', -0.524, (7.137, 6.128, -15.73)), (' A 140  PHE  HB2', ' A 172  HIS  NE2', -0.517, (-12.791, -2.585, -26.281)), (' A 298  ARG HH11', ' A 299  GLN  HB2', -0.516, (5.454, 15.266, -20.035)), (' B 107 AGLN  NE2', ' B 407  HOH  O  ', -0.501, (5.633, -8.711, 2.642)), (' A 293  PRO  O  ', ' A 297  VAL HG23', -0.498, (7.532, 17.288, -27.78)), (' B  55  GLU  CD ', ' B  55  GLU  H  ', -0.493, (17.857, 9.671, 15.557)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.492, (5.642, -10.036, -8.577)), (' B 115  LEU HD11', ' B 122  PRO  HB3', -0.491, (-2.678, 11.792, -8.652)), (' B 223  PHE  O  ', ' B 401  HOH  O  ', -0.481, (2.449, -29.565, -22.436)), (' B 140  PHE  HB2', ' B 172  HIS  NE2', -0.471, (11.349, 7.464, -9.207)), (' B 111  THR HG22', ' B 129  ALA  HB2', -0.47, (2.547, -6.26, -10.585)), (' A 115  LEU HD11', ' A 122  PRO  HB3', -0.467, (-13.523, 5.001, -13.574)), (' B 201  THR  H  ', ' B 240  GLU  HG2', -0.454, (8.557, -16.129, -10.874)), (' B  83  GLN  O  ', ' B  86 AVAL HG12', -0.45, (6.869, 5.608, 10.038)), (' A 137  LYS  HG2', ' A 171  VAL HG12', -0.449, (-6.748, -2.679, -31.648)), (' A 259  ILE  H  ', ' A 259  ILE HG12', -0.44, (20.806, 15.869, -31.416)), (' A 253  LEU  HG ', ' A 297  VAL HG22', -0.437, (10.583, 17.91, -28.09)), (' B 175  THR HG22', ' B 181  PHE  HA ', -0.437, (10.742, 1.124, 3.983)), (' B 227  LEU  O  ', ' B 231  ASN  ND2', -0.435, (9.818, -26.977, -9.474)), (' B 176  ASP  OD2', ' B 180  ASN  HB2', -0.435, (6.427, -1.854, 6.657)), (' B 167  LEU  HB2', ' B 171  VAL HG23', -0.433, (17.066, 2.203, -7.515)), (' B 140  PHE  HB2', ' B 172  HIS  CD2', -0.432, (11.538, 7.621, -8.446)), (' B 187  ASP  N  ', ' B 187  ASP  OD1', -0.431, (17.062, 5.681, 5.609)), (' B  21  THR  HB ', ' B  67  LEU  HB2', -0.427, (5.819, 24.216, 4.356)), (' B  40  ARG  HD3', ' B  85  CYS  HA ', -0.425, (11.855, 7.32, 9.354)), (' B  53  ASN  OD1', ' B  56  ASP  HB2', -0.413, (20.254, 12.544, 17.053)), (' A 163  HIS  CD2', ' A 172  HIS  HB3', -0.405, (-14.351, 0.779, -28.142)), (' B 165 AMET  HB2', ' B 165 AMET  HE3', -0.405, (15.624, 4.858, -1.983))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
