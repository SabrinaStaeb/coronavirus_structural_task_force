# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 154 ', 'TYR', 0.0139673336334858, (10.963999999999999, -11.457, -10.142)), ('A', ' 154 ', 'TYR', 0.010343429943677736, (10.963999999999999, -11.457, -10.142))]
data['omega'] = []
data['rota'] = [('A', '  27 ', 'LEU', 0.25905114201959495, (6.549000000000004, -9.847999999999997, 19.312)), ('A', '  50 ', 'LEU', 0.21299018954118756, (16.689000000000007, 1.639, 29.723)), ('A', '  62 ', 'SER', 0.08629381270915087, (17.168, -21.419999999999995, 27.519)), ('A', '  73 ', 'VAL', 0.2621857726556269, (1.2159999999999997, -24.915999999999993, 15.35)), ('A', '  81 ', 'SER', 0.22207502231706783, (21.83100000000001, -17.525999999999993, 19.507)), ('A', '  93 ', 'THR', 0.02572238707618198, (11.036000000000001, -27.69399999999999, 11.181)), ('A', ' 100 ', 'LYS', 0.0035762026048904395, (13.474, -17.946, -2.289)), ('A', ' 125 ', 'VAL', 0.2752554864365915, (1.1609999999999998, -3.5159999999999996, 3.735)), ('A', ' 128 ', 'CYS', 0.2462190377872103, (8.214, 2.984, 3.1680000000000006)), ('A', ' 131 ', 'ARG', 0.21732955993132766, (15.456000000000007, 8.201999999999996, 4.824)), ('A', ' 136 ', 'ILE', 0.012444263602807181, (11.494, 5.339999999999998, 8.278)), ('A', ' 189 ', 'GLN', 0.0, (14.339, 2.833, 25.502)), ('A', ' 232 ', 'LEU', 0.029314912347554345, (23.362, 25.565999999999992, -4.282)), ('A', ' 299 ', 'GLN', 0.07399617202865444, (4.725000000000001, 1.426, -12.365000000000002))]
data['cbeta'] = []
data['probe'] = [(' A 273  GLN  N  ', ' A 503  HOH  O  ', -0.936, (11.522, 27.798, -6.504)), (' A  92 BASP  OD2', ' A 501  HOH  O  ', -0.88, (10.475, -30.633, 16.818)), (' A 273  GLN  OE1', ' A 502  HOH  O  ', -0.798, (15.98, 30.87, -3.703)), (' A  67  LEU  O  ', ' A 504  HOH  O  ', -0.783, (5.275, -17.812, 21.045)), (' A 270  GLU  O  ', ' A 503  HOH  O  ', -0.756, (10.803, 28.021, -7.665)), (' A 131  ARG  NH2', ' A 289  ASP  OD2', -0.732, (13.094, 11.422, 0.644)), (' A  27  LEU HD21', ' A  42  VAL  HB ', -0.714, (10.902, -10.031, 20.785)), (' A 134  PHE  O  ', ' A 505  HOH  O  ', -0.696, (17.42, 3.969, 10.288)), (' A 276  MET  CE ', ' A 281  ILE HD12', -0.609, (3.571, 20.04, -7.529)), (' A 190  THR  N  ', ' A 506  HOH  O  ', -0.604, (14.81, 5.638, 24.472)), (' A  58  LEU  CD1', ' A  87  LEU HD21', -0.595, (19.107, -14.637, 22.466)), (' A 276  MET  HE1', ' A 281  ILE HD12', -0.569, (4.378, 19.452, -7.049)), (' A  17  MET  HG3', ' A 117  CYS  SG ', -0.563, (4.146, -10.486, 9.119)), (' A 270  GLU  C  ', ' A 503  HOH  O  ', -0.556, (11.047, 27.59, -7.679)), (' A 247  VAL HG13', ' A 261  VAL HG11', -0.548, (20.762, 14.532, -15.011)), (' A  58  LEU HD13', ' A  87  LEU HD21', -0.54, (19.344, -13.84, 23.092)), (' A 274  ASN  N  ', ' A 503  HOH  O  ', -0.524, (11.024, 28.542, -6.25)), (' A 273  GLN  CA ', ' A 503  HOH  O  ', -0.523, (11.372, 28.375, -6.25)), (' A 144  SER  O  ', ' A 147  SER  OG ', -0.517, (6.154, -5.544, 13.16)), (' A 257  THR HG23', ' A 259  ILE  H  ', -0.517, (12.163, 13.44, -20.93)), (' A  43  ILE HD12', ' A  57  LEU  HB3', -0.5, (18.011, -10.689, 28.585)), (' A 190  THR  O  ', ' A 506  HOH  O  ', -0.49, (14.529, 5.895, 23.89)), (' A  30  LEU HD21', ' A  32  LEU HD11', -0.485, (13.573, -13.896, 6.185)), (' A  13  VAL HG13', ' A 159  PHE  HE1', -0.476, (9.305, -11.182, 4.371)), (' A 295  ASP  OD1', ' A 298  ARG  NH2', -0.473, (10.312, 0.252, -6.712)), (' A 268  LEU  O  ', ' A 268  LEU HD23', -0.466, (12.835, 22.188, -7.353)), (' A 209  TYR  CE2', ' A 257  THR HG21', -0.465, (11.918, 13.321, -18.119)), (' A 190  THR  C  ', ' A 506  HOH  O  ', -0.464, (14.833, 6.105, 24.579)), (' A 273  GLN  O  ', ' A 507  HOH  O  ', -0.454, (11.869, 30.982, -3.71)), (' A 294  PHE  HD1', ' A 294  PHE  O  ', -0.453, (11.241, 0.89, -11.115)), (' A  21  THR HG23', ' A  26  THR  OG1', -0.452, (4.555, -13.089, 23.859)), (' A 190  THR HG23', ' A 192  GLN  HG2', -0.449, (18.448, 6.45, 22.653)), (' A 268  LEU  C  ', ' A 268  LEU HD23', -0.446, (12.987, 21.877, -7.585)), (' A  13  VAL HG21', ' A 150  PHE  CE1', -0.444, (7.609, -9.333, 2.444)), (' A 210  ALA  HB2', ' A 296  VAL HG13', -0.441, (7.283, 8.237, -12.088)), (' A  13  VAL HG21', ' A 150  PHE  CD1', -0.441, (7.899, -9.276, 2.316)), (' A 184  PRO  HD2', ' A 185  PHE  CE1', -0.44, (19.456, 6.19, 13.479)), (' A 206  ALA  HB1', ' A 296  VAL HG21', -0.439, (11.205, 8.435, -10.497)), (' A 205  LEU HD23', ' A 268  LEU HD12', -0.437, (13.828, 17.725, -8.994)), (' A 273  GLN  HA ', ' A 507  HOH  O  ', -0.434, (12.559, 30.195, -3.545)), (' A 167  LEU HD21', ' A 185  PHE  CE2', -0.433, (16.793, 6.817, 16.394)), (' A 189  GLN  C  ', ' A 506  HOH  O  ', -0.427, (14.235, 5.207, 25.194)), (' A  45  THR  O  ', ' A  49  MET  HE3', -0.416, (10.949, -4.655, 29.512)), (' A 188  ARG  O  ', ' A 190  THR  N  ', -0.41, (16.435, 3.518, 24.605)), (' A  49  MET  SD ', ' A 189  GLN  NE2', -0.408, (11.179, -0.666, 26.998)), (' A  95  ASN  HB3', ' A  98  THR  OG1', -0.4, (9.631, -22.101, 5.019))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
