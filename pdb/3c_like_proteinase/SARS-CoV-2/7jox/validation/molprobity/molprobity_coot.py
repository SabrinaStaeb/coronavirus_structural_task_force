# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '   5 ', 'LYS', 0.0002063045811710724, (25.424999999999994, 5.454, 10.559999999999997)), ('A', '  49 ', 'MET', 0.0757764019037108, (5.879999999999998, -22.994, 19.95)), ('A', '  59 ', 'ILE', 0.06504015733169642, (10.521, -27.80299999999999, 35.738)), ('A', '  61 ', 'LYS', 0.26237905609384365, (14.718, -29.778, 32.73699999999999)), ('A', '  87 ', 'LEU', 0.0, (16.306000000000008, -17.91, 30.886)), ('A', ' 128 ', 'CYS', 0.0789709364058037, (19.131, 0.3359999999999999, 14.977999999999996)), ('A', ' 188 ', 'ARG', 0.0, (4.464, -17.802, 21.105)), ('A', ' 189 ', 'GLN', 0.0005985375760906006, (3.259, -18.369, 17.46)), ('A', ' 190 ', 'THR', 0.001370465223996949, (0.08400000000000005, -16.183999999999997, 17.662)), ('A', ' 217 ', 'ARG', 0.029201969717154844, (23.153000000000006, 23.756, 5.105999999999998)), ('A', ' 222 ', 'ARG', 0.03184523191745679, (14.910999999999996, 32.401, 7.716999999999998)), ('A', ' 223 ', 'PHE', 0.07506632588812918, (11.334, 31.378999999999998, 8.87)), ('A', ' 232 ', 'LEU', 0.10003516503409624, (0.032000000000000015, 20.630000000000003, 13.089)), ('A', ' 235 ', 'MET', 0.14734186429226723, (1.173, 15.261, 12.21)), ('A', ' 263 ', 'ASP', 0.12808745410570932, (14.38, 27.771, 13.364)), ('B', '  47 ', 'GLU', 0.22179464364632445, (55.142, 23.499, 8.758999999999999)), ('B', '  73 ', 'VAL', 0.003150532575091347, (51.577, 0.389, 29.234)), ('B', '  75 ', 'LEU', 0.0, (55.947999999999986, -0.165, 24.33599999999999)), ('B', '  76 ', 'ARG', 0.060286002097007636, (59.741, 0.25, 23.866999999999994)), ('B', '  90 ', 'LYS', 0.08469905371956889, (59.654, -2.494999999999999, 15.787999999999997)), ('B', '  93 ', 'THR', 0.12829608168037518, (56.843, -6.874999999999999, 22.82)), ('B', ' 104 ', 'VAL', 0.17322296577314272, (45.439, -6.807, 0.979)), ('B', ' 106 ', 'ILE', 0.27703987607366487, (41.393, -3.695, -2.483)), ('B', ' 121 ', 'SER', 0.04668335707080287, (40.895, 4.09, 21.316)), ('B', ' 153 ', 'ASP', 0.0, (37.170000000000016, -13.879999999999995, 6.002999999999998)), ('B', ' 188 ', 'ARG', 0.0, (51.87699999999999, 16.668, 1.3189999999999995)), ('B', ' 222 ', 'ARG', 0.0, (10.874999999999996, -8.605, -19.99)), ('B', ' 232 ', 'LEU', 0.0, (27.622999999999994, 2.885, -23.369)), ('B', ' 235 ', 'MET', 0.22469740030164276, (29.026, 5.722, -19.215)), ('B', ' 270 ', 'GLU', 0.0, (15.483999999999996, 1.7010000000000005, -18.308999999999994)), ('B', ' 280 ', 'THR', 0.03024364862309673, (11.295, 3.9889999999999994, -3.029))]
data['cbeta'] = [('A', ' 128 ', 'CYS', ' ', 0.2631523027276859, (18.788, -0.9429999999999998, 15.751))]
data['probe'] = [(' A  76  ARG  NH1', ' A  92  ASP  OD2', -0.728, (33.417, -26.218, 35.57)), (' A 186  VAL HG23', ' A 188  ARG  HG3', -0.598, (3.053, -15.646, 21.881)), (' B  86  VAL HG13', ' B 179  GLY  HA2', -0.589, (51.512, 3.442, 4.175)), (' B 270  GLU  HG3', ' B 271  LEU  N  ', -0.589, (14.639, 1.422, -16.38)), (' B 221  ASN HD21', ' B 267  SER  HA ', -0.576, (14.635, -2.724, -16.931)), (' B 163  HIS  HE1', ' B 172  HIS  HB3', -0.549, (40.117, 10.129, 4.704)), (' A  83  GLN  OE1', ' A  88  LYS  NZ ', -0.542, (17.001, -11.689, 35.798)), (' A 217  ARG  HD2', ' A 544  HOH  O  ', -0.537, (25.93, 26.801, 7.92)), (' A  83  GLN  OE1', ' A  88  LYS  CE ', -0.532, (16.888, -11.876, 35.023)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.53, (13.678, -11.339, 28.59)), (' B 109  GLY  HA2', ' B 200  ILE HD13', -0.52, (31.969, 0.317, -5.235)), (' A 285  ALA  HB3', ' B 285  ALA  HB3', -0.52, (16.013, 9.279, -2.075)), (' B 163  HIS  CE1', ' B 172  HIS  HB3', -0.518, (40.321, 9.614, 5.214)), (' A 276  MET  CE ', ' A 281  ILE HG13', -0.5, (18.64, 17.288, 1.985)), (' A 304  THR  HB ', ' B 121  SER  HB3', -0.491, (39.027, 5.625, 22.249)), (' A 231  ASN  ND2', ' A 501  HOH  O  ', -0.48, (3.672, 20.717, 19.976)), (' A  52  PRO  HD2', ' A 508  HOH  O  ', -0.479, (2.85, -19.767, 25.321)), (' A 285  ALA  HB2', ' B 286  LEU  HG ', -0.475, (17.651, 10.187, -2.902)), (' B 249  ILE HG22', ' B 293  PRO  HG2', -0.471, (29.407, -9.529, -7.339)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.468, (13.183, 6.586, 17.195)), (' A  52  PRO  HG2', ' A  54  TYR  CE2', -0.459, (6.115, -20.303, 25.21)), (' B  40  ARG  O  ', ' B  43  ILE HG12', -0.45, (56.619, 11.215, 9.53)), (' A  40  ARG  O  ', ' A  43  ILE HG12', -0.449, (12.423, -22.278, 26.857)), (' A 100  LYS  HD3', ' A 155  ASP  OD2', -0.445, (34.536, 0.877, 33.673)), (' B  78  ILE  O  ', ' B  78  ILE HG22', -0.442, (65.432, -2.435, 17.565)), (' A  78  ILE  O  ', ' A  78  ILE HG22', -0.438, (24.315, -24.263, 40.376)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.43, (38.171, -0.826, 7.944)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.426, (22.959, -3.839, 19.943)), (' B  86  VAL HG13', ' B 179  GLY  CA ', -0.424, (51.787, 3.06, 3.69)), (' A 285  ALA  HB2', ' B 286  LEU  CD1', -0.423, (18.522, 10.602, -2.612)), (' A 101  TYR  HA ', ' A 157  VAL  O  ', -0.421, (27.155, -2.404, 30.675)), (' A 186  VAL  CG2', ' A 188  ARG  HG3', -0.413, (2.488, -15.051, 22.454)), (' B 214  ASN  HB2', ' B 282  LEU HD21', -0.405, (14.239, -5.544, -0.253)), (' A 139  SER  HB3', ' B   6  MET  HE2', -0.404, (21.847, -7.338, 9.607)), (' A  19  GLN  NE2', ' A  26  THR HG21', -0.402, (24.439, -23.907, 18.355)), (' A  10  SER  OG ', ' A  14  GLU  OE1', -0.402, (32.88, -6.221, 17.512))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
