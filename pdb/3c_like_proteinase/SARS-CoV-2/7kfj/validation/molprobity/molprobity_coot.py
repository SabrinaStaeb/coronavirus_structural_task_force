# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 140 ', 'PHE', 0.04515730708673897, (-11.046, 7.2940000000000005, 21.082)), ('A', ' 142 ', 'ASN', 0.024157586223176982, (-18.176, 6.987000000000001, 20.319))]
data['omega'] = []
data['rota'] = [('A', ' 153 ', 'ASP', 0.0, (-5.045, -20.421, 18.484)), ('A', ' 158 ', 'SER', 0.03522993140841786, (-11.196999999999996, -17.548, 22.110999999999997)), ('A', ' 158 ', 'SER', 0.0964551101827476, (-11.153, -17.532, 22.110999999999997)), ('A', ' 165 ', 'MET', 0.15463085790949482, (-18.287999999999993, 1.2419999999999995, 29.166999999999998)), ('A', ' 166 ', 'GLU', 0.16909588327866806, (-15.871999999999996, 4.107999999999998, 29.274999999999995)), ('A', ' 279 ', 'ARG', 0.06949554320937693, (18.500999999999998, 4.041000000000001, 25.279999999999998)), ('B', '   4 ', 'ARG', 0.07864322524340432, (-4.531, 4.138, 20.884)), ('B', '  47 ', 'GLU', 0.0802189987780009, (24.093, -19.331, -6.502)), ('B', '  50 ', 'LEU', 0.0072352428970111566, (24.544999999999995, -12.333000000000002, -5.857)), ('B', '  64 ', 'HIS', 0.08333987380943197, (4.816, -25.769000000000002, -13.328)), ('B', ' 155 ', 'ASP', 0.27379940861782415, (-14.565, -0.9140000000000004, 1.639)), ('B', ' 165 ', 'MET', 0.04513824266834523, (13.782, -8.327, 2.9149999999999996)), ('B', ' 279 ', 'ARG', 0.07956005977767935, (5.509999999999998, 14.831, 32.257)), ('B', ' 298 ', 'ARG', 0.002585001815701279, (-10.136999999999997, 10.0, 11.434)), ('B', ' 299 ', 'GLN', 0.20862369482197904, (-9.911999999999997, 8.923999999999996, 15.104))]
data['cbeta'] = []
data['probe'] = [(' A 137  LYS  HD3', ' A 403  PEG  H21', -0.815, (-2.114, 1.388, 27.471)), (' A  52  PRO  HD2', ' A 188  ARG  HG2', -0.793, (-27.2, 0.748, 36.471)), (' A 141  LEU HD13', ' A 172  HIS  HE1', -0.676, (-14.088, 3.702, 25.192)), (' A 126  TYR  HA ', ' A 404  WD1  C7 ', -0.658, (-3.977, -3.188, 16.772)), (' A 141  LEU HD11', ' A 600  HOH  O  ', -0.631, (-17.827, 3.401, 24.645)), (' A 141  LEU HD13', ' A 172  HIS  CE1', -0.622, (-14.012, 3.463, 24.949)), (' B  52  PRO  HD2', ' B 188  ARG  HG2', -0.588, (20.783, -9.375, -7.329)), (' A  19  GLN  OE1', ' A 402  PEG  H32', -0.57, (-28.816, 0.747, 12.586)), (' A  46  SER  HA ', ' A 617  HOH  O  ', -0.563, (-28.572, 7.032, 28.871)), (' A   4  ARG HH21', ' A 404  WD1  C2 ', -0.561, (3.445, 0.344, 15.359)), (' B 260  ALA  O  ', ' B 263  ASP  HB3', -0.547, (0.413, 27.154, 15.758)), (' B  49  MET  SD ', ' B 189  GLN  HG2', -0.535, (20.159, -12.972, -1.665)), (' B  90  LYS  HB2', ' B 501  PEG  H12', -0.523, (-0.749, -14.241, -15.984)), (' A 166  GLU  HG3', ' A 172  HIS  CE1', -0.515, (-13.977, 4.804, 26.571)), (' B 297  VAL  O  ', ' B 301  SER  HB2', -0.511, (-10.959, 13.549, 12.314)), (' A   6  MET  HE3', ' B 504  DMS  H12', -0.503, (1.877, -11.002, 15.496)), (' B 249  ILE HG22', ' B 293  PRO  HG2', -0.47, (-0.677, 16.195, 7.843)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.469, (-21.333, -10.457, 29.784)), (' B 231  ASN  HB3', ' B 235  MET  HE2', -0.462, (15.183, 22.469, 8.395)), (' B 173  ALA  HA ', ' B 605  HOH  O  ', -0.448, (12.013, -1.301, 2.432)), (' B  86  VAL HG13', ' B 179  GLY  HA2', -0.426, (7.107, -5.435, -6.974)), (' A 126  TYR  CD1', ' B   4  ARG  HD3', -0.424, (-5.953, -0.613, 22.108)), (' A 109  GLY  HA2', ' A 200  ILE HD13', -0.416, (-0.945, -7.624, 32.076)), (' A   0  MET  HG3', ' B 141  LEU HD12', -0.412, (11.037, -12.645, 17.752)), (' B 113  SER  O  ', ' B 149  GLY  HA2', -0.412, (0.204, -3.321, 5.193)), (' B 207  TRP  HZ3', ' B 287  LEU HD23', -0.411, (4.884, 13.945, 22.485)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.409, (-9.945, -8.471, 21.419))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
