# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  49 ', 'MET', 0.017569845954885473, (55.39199999999999, 23.36, 20.002)), ('B', '  51 ', 'ASN', 0.0696793459130485, (5.489, -19.841, 1.359))]
data['omega'] = []
data['rota'] = [('A', '   5 ', 'LYS', 0.0, (36.313, -4.937, 10.793)), ('A', '  49 ', 'MET', 0.18150551694066533, (55.39199999999999, 23.36, 20.002)), ('A', '  59 ', 'ILE', 0.013790522415451069, (51.272999999999996, 27.888000000000012, 35.838)), ('A', '  75 ', 'LEU', 0.00041665605450117875, (30.98399999999999, 24.426, 30.944)), ('A', '  76 ', 'ARG', 0.025298737545948996, (32.53799999999998, 26.383000000000006, 33.844)), ('A', '  87 ', 'LEU', 0.052082508529545095, (45.22699999999998, 18.102, 31.205)), ('A', ' 128 ', 'CYS', 0.12156590846893672, (42.382999999999974, 0.059, 15.276)), ('A', ' 229 ', 'ASP', 0.20053345701417286, (59.292999999999985, -24.941000000000003, 15.068)), ('A', ' 235 ', 'MET', 0.0, (60.33799999999999, -15.030000000000003, 12.89)), ('A', ' 236 ', 'LYS', 0.0014291859072641008, (61.69399999999999, -15.152000000000001, 9.313)), ('A', ' 238 ', 'ASN', 0.23771391635278522, (58.57099999999998, -10.758, 10.534)), ('A', ' 240 ', 'GLU', 0.0, (55.810999999999986, -11.798, 16.453)), ('A', ' 279 ', 'ARG', 0.17436438591725384, (43.137, -17.682, -3.431)), ('A', ' 306 ', 'GLN', 0.15181909877427557, (23.986999999999988, -1.714, 26.927)), ('B', '  59 ', 'ILE', 0.0181632367192668, (-5.052, -10.352000000000002, 9.503999999999996)), ('B', '  72 ', 'ASN', 0.030004636913126083, (13.237999999999992, -2.048, 30.45)), ('B', '  75 ', 'LEU', 0.0003830003073541551, (5.768, 0.262, 24.235)), ('B', '  87 ', 'LEU', 0.05898805704204589, (5.604, -3.875000000000001, 9.223999999999997)), ('B', ' 128 ', 'CYS', 0.10818054926096349, (29.133999999999986, -1.4609999999999996, 3.727)), ('B', ' 153 ', 'ASP', 0.01029091300844815, (24.37099999999999, 14.524000000000003, 6.497)), ('B', ' 214 ', 'ASN', 0.2306311488640184, (49.197999999999986, 9.12, -0.441)), ('B', ' 222 ', 'ARG', 0.0061832286495697554, (51.39499999999999, 8.952, -19.809)), ('B', ' 235 ', 'MET', 0.0, (33.176999999999985, -5.243, -18.96)), ('B', ' 236 ', 'LYS', 0.14437731375239296, (35.499, -8.166, -19.82)), ('B', ' 277 ', 'ASN', 0.10724291258584102, (53.06599999999999, -8.125, -10.805))]
data['cbeta'] = []
data['probe'] = [(' B  86  VAL HG13', ' B 179  GLY  HA2', -0.607, (10.301, -2.942, 3.77)), (' A  86  VAL HG13', ' A 179  GLY  HA2', -0.549, (47.322, 11.785, 28.735)), (' B   3  PHE  CE1', ' B 300  CYS  SG ', -0.542, (43.193, 10.11, 0.785)), (' A   5  LYS  NZ ', ' B   4  ARG HH12', -0.535, (42.087, -1.605, 10.787)), (' A 276  MET  HE3', ' A 281  ILE HG13', -0.517, (43.562, -16.947, 2.02)), (' A 122  PRO  HB2', ' B   9  PRO  HG2', -0.514, (30.464, 11.463, 15.401)), (' A 226  THR  OG1', ' A 229  ASP  HB2', -0.503, (58.215, -27.117, 16.06)), (' A 233  VAL HG21', ' A 269  LYS  HE3', -0.488, (58.103, -23.912, 8.837)), (' A 126  TYR  HD2', ' B   6  MET  HG3', -0.487, (37.269, 5.679, 11.28)), (' A  59  ILE HG22', ' A  60  ARG  HG3', -0.482, (53.217, 30.373, 34.495)), (' B   3  PHE  HE1', ' B 300  CYS  SG ', -0.48, (42.506, 10.256, 1.032)), (' B 233  VAL HG21', ' B 269  LYS  HE3', -0.477, (41.197, -1.891, -23.04)), (' A 249  ILE HG22', ' A 293  PRO  HG2', -0.474, (43.568, -15.061, 21.719)), (' A 131  ARG  HD3', ' A 137  LYS  HD2', -0.472, (49.107, -1.063, 12.133)), (' A  58  LEU HD11', ' A  80  HIS  HD2', -0.469, (46.358, 24.177, 33.805)), (' A 295  ASP  OD1', ' A 298  ARG  NH1', -0.448, (36.967, -6.84, 19.112)), (' B  58  LEU HD11', ' B  80  HIS  HD2', -0.439, (-0.481, -6.071, 11.337)), (' B  52  PRO  HD2', ' B 188  ARG  HG2', -0.437, (6.991, -16.017, 1.238)), (' A   8  PHE  HE1', ' A 305  PHE  CZ ', -0.435, (31.852, -4.887, 22.407)), (' A  12  LYS  CE ', ' A 306  GLN  HB3', -0.432, (25.504, 0.983, 27.26)), (' B   3  PHE  HE2', ' B 214  ASN  HB2', -0.431, (46.831, 8.059, 0.461)), (' B   3  PHE  CZ ', ' B 300  CYS  SG ', -0.431, (43.904, 10.352, 0.795)), (' A  40  ARG  O  ', ' A  43  ILE HG12', -0.41, (49.018, 22.598, 27.179)), (' B  40  ARG  O  ', ' B  43  ILE HG12', -0.405, (5.255, -11.013, 9.481)), (' A 113  SER  O  ', ' A 149  GLY  HA2', -0.4, (38.814, 4.265, 20.419))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
