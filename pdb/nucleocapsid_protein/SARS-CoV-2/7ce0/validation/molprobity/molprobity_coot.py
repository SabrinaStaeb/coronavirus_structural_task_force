# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  68 ', 'MET', 0.08663747890855476, (25.46600000000001, 15.988, 20.812)), ('C', '  68 ', 'MET', 0.08497128030840014, (-13.17, 53.555, -13.381))]
data['cbeta'] = []
data['probe'] = [(' B  63  MET  SD ', ' B 328  HOH  O  ', -0.997, (-0.633, 48.731, -17.659)), (' D  35  GLN  NE2', ' D 201  HOH  O  ', -0.919, (34.144, 24.967, 37.973)), (' D   3  LYS  NZ ', ' D 202  HOH  O  ', -0.91, (19.614, 42.016, 23.308)), (' C  93  LYS  NZ ', ' C 201  HOH  O  ', -0.827, (27.103, 61.204, -9.672)), (' B  99  LEU HD13', ' C  68 AMET  HE1', -0.78, (-12.114, 48.151, -11.836)), (' A  27  GLN  NE2', ' A 203  HOH  O  ', -0.652, (9.011, 13.723, 13.608)), (' B  76  TRP  CZ2', ' C  84  LYS  HE2', -0.594, (8.637, 63.76, -2.944)), (' A 101  LYS  NZ ', ' A 201  HOH  O  ', -0.589, (-1.254, 35.108, 9.64)), (' D  23  ARG  HG2', ' D 260  HOH  O  ', -0.582, (23.051, 28.044, 35.055)), (' C  23  ARG  HG2', ' C 267  HOH  O  ', -0.565, (8.136, 50.97, -28.834)), (' D  88  LYS  HD2', ' D 328  HOH  O  ', -0.517, (35.825, 14.58, 3.978)), (' C  80  THR HG23', ' C 341  HOH  O  ', -0.511, (-5.229, 58.935, -14.038)), (' A  46  HIS  HE1', ' B 217  HOH  O  ', -0.498, (-0.105, 41.846, 9.151)), (' B  23  ARG  HG3', ' B  38  ILE HD11', -0.497, (-8.784, 55.248, 2.516)), (' B  23  ARG  HG2', ' B 265  HOH  O  ', -0.495, (-6.684, 56.114, 3.863)), (' D 106  TYR  HA ', ' D 109  PHE  CZ ', -0.484, (27.459, 23.896, 36.001)), (' C  23  ARG  HG3', ' C  38  ILE HD11', -0.48, (10.263, 52.231, -27.575)), (' D  23  ARG  HG3', ' D  38  ILE HD11', -0.47, (25.521, 26.606, 33.823)), (' D  80  THR HG23', ' D 359  HOH  O  ', -0.47, (10.056, 19.689, 19.858)), (' B  63  MET  HE3', ' C   5  ARG  NH1', -0.465, (-2.057, 48.444, -20.958)), (' D  93  LYS  HE2', ' D 349  HOH  O  ', -0.452, (39.042, 12.756, 16.731)), (' D  88  LYS  HA ', ' D  88  LYS  HD3', -0.449, (36.837, 16.353, 6.77)), (' C 106  TYR  HA ', ' C 109  PHE  CZ ', -0.448, (12.343, 55.084, -29.812)), (' D  88  LYS  CE ', ' D 328  HOH  O  ', -0.444, (35.24, 14.269, 4.746)), (' A  23  ARG  HG3', ' A  38  ILE HD11', -0.444, (6.542, 24.581, 3.405)), (' A  15  ASN  HB2', ' A  38  ILE  O  ', -0.443, (10.63, 29.985, -0.532)), (' D  45  LYS  HA ', ' D  45  LYS  HD2', -0.443, (36.42, 36.398, 24.52)), (' C  28  THR  HB ', ' C 225  HOH  O  ', -0.442, (-4.303, 53.178, -23.706)), (' D  88  LYS  HE3', ' D 328  HOH  O  ', -0.434, (34.616, 14.286, 4.582)), (' A  44  TYR  CE1', ' A  46  HIS  HB2', -0.424, (3.727, 36.578, 7.678)), (' B  77  LEU HD13', ' C  99  LEU HD13', -0.423, (12.295, 57.748, -13.229)), (' B  63  MET  HE3', ' C   5  ARG HH11', -0.421, (-2.298, 48.585, -21.404)), (' C  88  LYS  HA ', ' C  88  LYS  HD3', -0.419, (21.336, 62.846, -0.015)), (' B  15  ASN  HB2', ' B  38  ILE  O  ', -0.417, (-4.214, 49.53, 7.131)), (' C   2  LYS  HB2', ' C   2  LYS  HE2', -0.417, (-1.698, 32.72, -21.144)), (' D  15  ASN  HB2', ' D  38  ILE  O  ', -0.416, (26.496, 34.604, 33.691)), (' D  88  LYS  CD ', ' D 328  HOH  O  ', -0.414, (35.232, 14.645, 4.438)), (' B  80  THR HG22', ' C  80  THR HG22', -0.41, (-2.119, 59.537, -14.531)), (' A  46  HIS  CE1', ' B 217  HOH  O  ', -0.409, (0.369, 41.569, 9.445)), (' D  12  LYS  HB2', ' D  12  LYS  HE2', -0.401, (30.879, 41.539, 31.755))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
