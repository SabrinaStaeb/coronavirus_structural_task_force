# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  49 ', 'THR', 0.03725484279445391, (36.659, 27.675, 21.453)), ('A', '  68 ', 'ARG', 0.016674524678624937, (26.358, 22.369, 44.894000000000005)), ('A', '  71 ', 'GLY', 0.038128487233142334, (25.068, 20.491, 36.558)), ('A', '  94 ', 'ILE', 0.00973134322670309, (29.432, 44.20399999999999, 21.652)), ('A', ' 103 ', 'ASP', 0.04789066233145541, (18.348, 43.385, 21.200000000000003)), ('A', ' 140 ', 'ASN', 0.014271043474251559, (40.582, 17.564000000000004, 37.11500000000001)), ('A', '  71 ', 'GLY', 0.03642610357573084, (24.966, 20.433, 36.677)), ('A', '  94 ', 'ILE', 0.048736180699420206, (30.205, 44.12499999999999, 21.003000000000004)), ('A', ' 162 ', 'PRO', 0.004493870786546218, (21.383, 12.69, 33.949)), ('A', '  49 ', 'THR', 0.03549365834313193, (37.325, 27.955, 21.077)), ('A', '  71 ', 'GLY', 0.07921219346500415, (24.609, 20.441000000000003, 36.429)), ('A', '  94 ', 'ILE', 0.00557886778605992, (29.586, 44.044999999999995, 20.843000000000007)), ('A', '  60 ', 'GLY', 0.015797625257965724, (14.36, 35.206, 34.991000000000014)), ('A', '  68 ', 'ARG', 0.007258128618117335, (27.861, 22.33, 44.97700000000001)), ('A', '  71 ', 'GLY', 0.03472983275365146, (24.795, 20.333000000000006, 36.728000000000016)), ('A', '  94 ', 'ILE', 0.00256301, (29.687, 44.636999999999986, 21.621)), ('A', ' 140 ', 'ASN', 0.03499754599280146, (40.548, 16.990000000000006, 37.29)), ('A', '  49 ', 'THR', 0.02551327648790887, (36.83899999999999, 27.92, 20.881000000000004)), ('A', '  71 ', 'GLY', 0.02227689004667411, (24.579, 20.06500000000001, 36.433)), ('A', '  94 ', 'ILE', 0.04068624281241535, (30.384000000000004, 43.667, 21.017000000000007)), ('A', '  96 ', 'GLY', 0.015157549991152435, (34.56, 46.456999999999994, 18.926)), ('A', ' 155 ', 'ALA', 0.007835198065470209, (24.849, 18.612000000000002, 14.762)), ('A', '  60 ', 'GLY', 0.09844816284282065, (14.417, 35.303000000000004, 34.506)), ('A', '  64 ', 'LEU', 0.02025801029859017, (22.498, 29.349000000000007, 36.164)), ('A', '  71 ', 'GLY', 0.02512033537004069, (25.208, 20.169000000000004, 36.957)), ('A', '  94 ', 'ILE', 0.00512602, (30.311000000000003, 44.22299999999999, 21.541)), ('A', '  96 ', 'GLY', 0.06252818202950229, (35.121, 46.801, 19.34400000000001)), ('A', ' 158 ', 'VAL', 0.08810411578314961, (20.729, 18.920000000000005, 22.856000000000005)), ('A', '  71 ', 'GLY', 0.028037395223263734, (25.303, 20.429000000000006, 36.857)), ('A', '  94 ', 'ILE', 0.0003068131733389703, (29.911, 43.95499999999999, 21.425)), ('A', ' 158 ', 'VAL', 0.016079682845144, (21.169, 18.394, 22.974)), ('A', ' 162 ', 'PRO', 0.06384179787005864, (21.045, 13.089, 34.003)), ('A', '  49 ', 'THR', 0.0006310717126135956, (36.91, 27.915999999999997, 21.146)), ('A', '  70 ', 'GLN', 0.049453539715234716, (26.215, 18.995, 40.62000000000001)), ('A', '  71 ', 'GLY', 0.09828292276595921, (25.338, 19.732000000000003, 36.917000000000016)), ('A', '  94 ', 'ILE', 0.0007046567360150856, (30.264, 43.385, 20.554000000000002)), ('A', ' 140 ', 'ASN', 0.021579144808178824, (41.618, 16.400000000000002, 37.411)), ('A', '  49 ', 'THR', 0.03176045363186229, (36.423, 27.849, 20.573)), ('A', '  71 ', 'GLY', 0.020367085378166748, (25.171, 19.62900000000001, 36.621)), ('A', '  94 ', 'ILE', 0.00512602, (29.721, 44.714, 22.224000000000004)), ('A', '  71 ', 'GLY', 0.02293509224102293, (24.878, 20.008000000000006, 36.08700000000001)), ('A', '  83 ', 'GLN', 0.04148780945941608, (32.617, 14.976, 33.45900000000001)), ('A', '  94 ', 'ILE', 0.0027661215243629154, (29.306, 44.754, 22.319000000000003))]
data['omega'] = [('A', ' 180 ', 'SER', None, (-0.665, 20.505, 27.414)), ('A', '  94 ', 'ILE', None, (29.19, 43.534, 21.843)), ('A', ' 180 ', 'SER', None, (5.665, 15.695000000000002, 17.172000000000008)), ('A', ' 150 ', 'ASN', None, (37.164, 18.788, 16.446000000000005)), ('A', ' 180 ', 'SER', None, (5.002000000000001, 12.826, 22.680000000000003)), ('A', ' 180 ', 'SER', None, (5.966, 16.678000000000004, 17.624000000000002)), ('A', ' 180 ', 'SER', None, (2.1359999999999992, 14.269, 24.916000000000007)), ('A', ' 180 ', 'SER', None, (2.6839999999999993, 17.682, 20.668)), ('A', ' 180 ', 'SER', None, (0.3319999999999999, 17.666000000000007, 23.524)), ('A', ' 172 ', 'TYR', None, (14.491, 29.878, 28.585)), ('A', ' 180 ', 'SER', None, (3.065, 15.113000000000001, 20.825)), ('A', ' 180 ', 'SER', None, (5.236999999999998, 15.857, 21.304)), ('A', '  56 ', 'LEU', None, (21.354999999999993, 27.496, 26.541000000000007)), ('A', ' 126 ', 'ASN', None, (37.568, 32.18800000000001, 39.908)), ('A', ' 180 ', 'SER', None, (1.4620000000000004, 15.099, 23.641000000000002))]
data['rota'] = [('A', ' 130 ', 'ILE', 0.15886418599538335, (31.64900000000001, 31.579, 35.149)), ('A', ' 103 ', 'ASP', 0.24526444234721176, (19.232, 43.89000000000001, 22.482000000000006)), ('A', ' 151 ', 'PRO', 0.0451477348823656, (33.446, 22.267, 15.411000000000001)), ('A', '  53 ', 'PHE', 0.0936898423345889, (26.284999999999997, 22.281, 22.275000000000002)), ('A', ' 103 ', 'ASP', 0.09637226183880292, (18.014, 43.438, 21.677)), ('A', ' 130 ', 'ILE', 0.15810355368896567, (31.61200000000001, 31.667000000000012, 34.287000000000006)), ('A', ' 144 ', 'ASP', 0.04057616539061543, (42.246, 18.878, 25.630000000000003)), ('A', '  98 ', 'ASP', 0.00640385362941328, (33.723, 40.48100000000001, 14.898000000000003)), ('A', ' 103 ', 'ASP', 0.018415414997828297, (19.471, 43.154999999999994, 20.857)), ('A', ' 109 ', 'TYR', 0.04803449566957117, (26.67599999999999, 28.087, 26.791)), ('A', ' 153 ', 'ASN', 0.15682078530522628, (31.638999999999996, 18.352, 12.142)), ('A', '  67 ', 'PRO', 0.08018119058557309, (24.862, 24.828000000000007, 43.696)), ('A', ' 130 ', 'ILE', 0.17547502863859735, (31.560000000000016, 31.722000000000005, 34.675)), ('A', '  89 ', 'ARG', 0.2452321205947607, (26.904, 33.72500000000001, 29.90500000000001)), ('A', '  76 ', 'THR', 0.059775486295715434, (27.221, 9.395, 25.698000000000004)), ('A', ' 151 ', 'PRO', 0.13098246777050662, (32.252, 20.692, 16.916000000000007)), ('A', '  53 ', 'PHE', 0.03822712234019214, (25.823, 21.711000000000002, 22.317)), ('A', ' 130 ', 'ILE', 0.25291901780897824, (31.272000000000013, 31.69900000000001, 34.456))]
data['cbeta'] = [('A', '  54 ', 'THR', ' ', 0.3074198739633088, (21.485, 23.132, 22.300000000000004)), ('A', '  72 ', 'VAL', ' ', 0.25373146494815707, (28.733, 17.772, 34.603)), ('A', '  82 ', 'ASP', ' ', 0.3176497136520478, (35.378, 13.662999999999998, 29.312)), ('A', '  98 ', 'ASP', ' ', 0.2920225039302938, (34.21, 41.534000000000006, 14.845)), ('A', ' 128 ', 'ASP', ' ', 0.25944843534553674, (32.929, 38.374, 36.851000000000006)), ('A', ' 151 ', 'PRO', ' ', 0.3367252302283722, (31.74, 21.393, 17.385)), ('A', ' 180 ', 'SER', ' ', 0.25458102228224805, (-1.9909999999999992, 21.868, 28.82)), ('A', '  48 ', 'ASN', ' ', 0.4555778652582774, (37.524, 23.989, 18.779)), ('A', '  77 ', 'ASN', ' ', 0.34156767190413545, (30.905, 11.681000000000003, 21.898)), ('A', ' 113 ', 'LEU', ' ', 0.304859323736407, (37.367, 20.894, 32.767)), ('A', ' 145 ', 'HIS', ' ', 0.26800222049317673, (41.512, 15.238000000000005, 22.076)), ('A', '  70 ', 'GLN', ' ', 0.25803449968968095, (25.03, 18.677000000000007, 41.22000000000001)), ('A', '  94 ', 'ILE', ' ', 0.33675035096579153, (28.979, 44.80499999999999, 19.595)), ('A', ' 103 ', 'ASP', ' ', 0.5001377097127283, (17.135, 44.63499999999999, 21.26000000000001)), ('A', ' 106 ', 'PRO', ' ', 0.25862833807704344, (21.869999999999994, 37.23900000000001, 28.870000000000005)), ('A', ' 135 ', 'THR', ' ', 0.25527585755555326, (30.503, 13.982, 37.98000000000001)), ('A', ' 166 ', 'THR', ' ', 0.2670364262293403, (13.117, 19.313000000000006, 34.17700000000001)), ('A', ' 173 ', 'ALA', ' ', 0.29202025706900225, (15.805999999999997, 24.545, 27.783)), ('A', '  84 ', 'ILE', ' ', 0.26359482559719966, (35.048, 18.195000000000004, 35.435)), ('A', ' 105 ', 'SER', ' ', 0.2780941763363127, (16.306, 36.913000000000004, 26.657000000000004)), ('A', ' 106 ', 'PRO', ' ', 0.2629990103699385, (21.17899999999999, 37.068000000000005, 28.745000000000008)), ('A', ' 118 ', 'GLU', ' ', 0.32681546096357883, (37.261, 30.604, 30.411)), ('A', ' 127 ', 'LYS', ' ', 0.2910795452900321, (36.737, 34.498, 35.626000000000005)), ('A', ' 163 ', 'GLN', ' ', 0.32273456370122167, (18.467, 10.836, 37.38800000000001)), ('A', '  50 ', 'ALA', ' ', 0.32648437970971417, (32.73, 26.669, 18.958)), ('A', '  58 ', 'GLN', ' ', 0.26172643799716205, (17.877, 35.236, 29.920000000000005)), ('A', '  80 ', 'PRO', ' ', 0.3017259221891065, (32.941, 7.824, 33.479)), ('A', '  98 ', 'ASP', ' ', 0.4472845317624335, (34.772, 39.45400000000001, 15.362000000000002)), ('A', ' 115 ', 'THR', ' ', 0.2812007482270504, (37.106, 22.684, 25.968)), ('A', ' 146 ', 'ILE', ' ', 0.2507813983091597, (36.364999999999995, 17.903000000000002, 24.459000000000007)), ('A', '  48 ', 'ASN', ' ', 0.27865841987372836, (38.099, 23.582000000000008, 18.604000000000003)), ('A', '  54 ', 'THR', ' ', 0.2612609548704993, (21.404, 23.318, 21.739000000000008)), ('A', '  67 ', 'PRO', ' ', 0.2678123964565435, (23.977, 23.513, 45.32600000000001)), ('A', '  82 ', 'ASP', ' ', 0.286243236149462, (35.174, 13.885000000000002, 29.294000000000004)), ('A', ' 103 ', 'ASP', ' ', 0.33952978086210167, (18.879, 44.587, 20.547000000000008)), ('A', '  79 ', 'SER', ' ', 0.2912314613466223, (34.637, 8.181000000000003, 29.198)), ('A', '  82 ', 'ASP', ' ', 0.26315991108222136, (35.121, 13.446000000000002, 29.726)), ('A', '  94 ', 'ILE', ' ', 0.2823861223337248, (29.272, 44.16799999999999, 20.004)), ('A', ' 140 ', 'ASN', ' ', 0.3275349437268884, (41.613, 17.750000000000004, 38.182)), ('A', '  55 ', 'ALA', ' ', 0.30881287737059393, (23.441999999999993, 28.629, 23.114000000000004)), ('A', '  94 ', 'ILE', ' ', 0.3026984048665201, (29.784, 43.81, 19.145000000000007)), ('A', ' 150 ', 'ASN', ' ', 0.30002208863238067, (36.008, 19.243000000000002, 13.531000000000004)), ('A', '  62 ', 'GLU', ' ', 0.29469387594005336, (18.978, 34.312000000000005, 39.364)), ('A', '  90 ', 'ALA', ' ', 0.2517405456810732, (26.874, 34.34700000000001, 25.113)), ('A', '  94 ', 'ILE', ' ', 0.26175817209336594, (29.134, 45.249, 20.866000000000007)), ('A', ' 138 ', 'ALA', ' ', 0.26768780588786745, (35.153, 14.51, 36.388)), ('A', ' 143 ', 'LYS', ' ', 0.2586435842220666, (38.343, 17.604, 28.016000000000002)), ('A', ' 163 ', 'GLN', ' ', 0.2621872960367798, (19.7, 11.755, 37.978)), ('A', ' 176 ', 'SER', ' ', 0.26535216709049103, (10.926, 22.084, 30.243000000000002)), ('A', '  76 ', 'THR', ' ', 0.27022304087542026, (28.183, 8.957, 23.289)), ('A', '  84 ', 'ILE', ' ', 0.29372582508991374, (35.053, 18.256, 35.66700000000001)), ('A', '  98 ', 'ASP', ' ', 0.2721745355078275, (33.65, 43.095, 16.571)), ('A', ' 153 ', 'ASN', ' ', 0.2654951137544294, (33.006, 16.8, 11.973)), ('A', ' 165 ', 'THR', ' ', 0.25301336869190083, (18.219, 16.819, 36.121)), ('A', ' 176 ', 'SER', ' ', 0.2599407161834557, (10.288, 21.938999999999997, 30.206000000000007))]
data['probe'] = [(' A  63  ASP  HB2', ' A  65  LYS  HE3', -0.421, (24.35, 34.276, 38.189))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
