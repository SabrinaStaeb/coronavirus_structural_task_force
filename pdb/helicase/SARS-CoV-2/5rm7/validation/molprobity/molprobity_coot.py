# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 195 ', 'ILE', 0.012034525791806869, (-34.049, 28.43499999999999, -54.398)), ('A', ' 218 ', 'LYS', 0.0173887148508874, (-43.002, 24.920999999999992, -57.944)), ('A', ' 484 ', 'VAL', 0.01370142807631016, (-32.19100000000001, 37.473, -81.025))]
data['omega'] = []
data['rota'] = [('A', '   7 ', 'LEU', 0.11813211150198812, (6.817000000000002, 41.709999999999994, -62.2)), ('A', '  12 ', 'THR', 0.0, (7.450999999999999, 46.958999999999996, -51.556999999999995)), ('A', '  35 ', 'ILE', 0.02396625196690218, (3.9970000000000026, 56.97399999999998, -66.251)), ('A', '  46 ', 'ASN', 0.13071676444816482, (-1.9280000000000035, 54.964, -46.379999999999995)), ('A', '  51 ', 'ASN', 0.05626084620501918, (-2.712999999999999, 65.218, -47.027)), ('A', '  81 ', 'PHE', 0.17961082593645017, (10.816000000000006, 65.259, -52.948)), ('A', ' 148 ', 'SER', 0.2408326406239455, (-24.391, 44.538, -65.522)), ('A', ' 162 ', 'GLU', 0.1754022534996266, (-42.27799999999999, 26.32399999999999, -68.989)), ('A', ' 173 ', 'ARG', 0.12101948919108904, (-30.998000000000005, 40.661, -71.307)), ('A', ' 209 ', 'VAL', 0.01779839586165112, (-39.626000000000005, 29.907999999999987, -72.283)), ('A', ' 215 ', 'THR', 0.2904389381320021, (-33.61600000000001, 21.921999999999993, -57.264)), ('A', ' 217 ', 'TYR', 0.08841032478994187, (-39.411, 23.857999999999997, -56.963)), ('A', ' 226 ', 'VAL', 0.21075712693229767, (-29.942999999999998, 37.043, -60.782)), ('A', ' 255 ', 'THR', 0.07900706813955972, (3.828999999999999, -3.57500000000001, -63.00599999999999)), ('A', ' 289 ', 'SER', 0.041846613539382196, (-9.846000000000002, 7.7519999999999865, -71.173)), ('A', ' 337 ', 'ARG', 0.2727266756873335, (-23.743, 23.288, -53.663)), ('A', ' 344 ', 'ASP', 0.220351204309211, (-23.417000000000005, 7.883999999999997, -58.642999999999994)), ('A', ' 416 ', 'THR', 0.19608737614799618, (-10.666000000000007, 34.664, -82.811)), ('A', ' 502 ', 'ARG', 0.0, (-35.74900000000002, 7.6619999999999955, -97.03999999999999)), ('A', ' 517 ', 'SER', 0.2512808868908713, (-32.331, 27.882999999999978, -81.277)), ('A', ' 530 ', 'THR', 0.028558605117723346, (-30.365999999999993, 17.506999999999987, -79.795)), ('A', ' 551 ', 'GLU', 0.053828477972334005, (-21.693000000000012, 30.676999999999985, -92.389)), ('A', ' 592 ', 'ILE', 0.0283458294313912, (-31.624000000000013, 18.48799999999999, -103.69299999999998)), ('B', '   8 ', 'CYS', 0.25043245030156186, (7.501000000000001, 3.709999999999993, -33.766)), ('B', '  20 ', 'ILE', 0.26316686763816627, (-11.17900000000001, 1.7129999999999939, -38.835)), ('B', '  68 ', 'MET', 0.26169469685698565, (4.854, -12.73500000000001, -55.238)), ('B', '  69 ', 'SER', 0.06767413740977289, (1.229999999999996, -13.73500000000001, -54.184999999999995)), ('B', '  79 ', 'ILE', 0.11499328619221526, (8.335000000000003, -22.651000000000003, -51.65)), ('B', '  95 ', 'ASN', 0.297196816421783, (15.747999999999994, -3.9100000000000072, -41.037)), ('B', '  96 ', 'THR', 0.21099788899428146, (14.679999999999996, -0.408000000000003, -39.643)), ('B', ' 103 ', 'VAL', 0.03476244019957325, (1.5599999999999992, -1.9870000000000037, -27.548)), ('B', ' 124 ', 'ASN', 0.03636878640167396, (-5.977, 11.998, -23.152)), ('B', ' 164 ', 'HIS', 0.08627895660371021, (-45.59700000000001, 13.537999999999993, -39.374)), ('B', ' 191 ', 'SER', 0.2952060315741579, (-30.994, 11.392999999999994, -57.33599999999999)), ('B', ' 192 ', 'LYS', 0.08163785442914147, (-31.593999999999987, 13.539999999999988, -54.16)), ('B', ' 195 ', 'ILE', 0.10272439354207333, (-32.842, 21.150999999999993, -49.017)), ('B', ' 215 ', 'THR', 0.20051631582942692, (-33.419000000000004, 27.449999999999996, -44.26)), ('B', ' 219 ', 'LEU', 0.08137098323676717, (-41.25, 20.83, -47.731)), ('B', ' 289 ', 'SER', 0.15278448813802148, (-13.821000000000002, 38.131, -25.517999999999994)), ('B', ' 353 ', 'GLU', 0.24863139025740663, (-6.243000000000004, 40.385, -43.441)), ('B', ' 442 ', 'ARG', 0.011763544905291468, (-18.852, 41.236, -13.867)), ('B', ' 484 ', 'VAL', 0.028135770833797237, (-37.837, 8.342999999999996, -25.78)), ('B', ' 551 ', 'GLU', 0.036902493581297206, (-31.075999999999997, 14.019, -9.818))]
data['cbeta'] = []
data['probe'] = [(' B  12  THR HG21', ' B  25  LEU  O  ', -0.8, (3.557, -1.327, -41.38)), (' B  12  THR HG22', ' B  14  LEU  H  ', -0.716, (4.299, -1.288, -43.721)), (' A  60  VAL  HB ', ' A 908  HOH  O  ', -0.708, (-0.407, 58.068, -57.142)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.647, (-32.469, 34.587, -22.007)), (' A 368  ALA  O  ', ' A 393  ALA  HA ', -0.613, (1.569, 14.392, -56.464)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.612, (-30.878, 20.585, -79.929)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.594, (-30.642, 21.052, -80.341)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.587, (5.605, -1.257, -41.187)), (' A 375  GLU  OE2', ' A 801  HOH  O  ', -0.579, (-16.136, 18.508, -71.206)), (' A 255  THR HG23', ' A 300  PRO  HG3', -0.572, (1.3, -2.934, -61.167)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.557, (-26.231, 11.265, -79.974)), (' B  12  THR HG22', ' B  14  LEU  N  ', -0.556, (3.768, -1.81, -43.807)), (' A 200  PHE  N  ', ' A 810  HOH  O  ', -0.555, (-31.601, 29.535, -68.95)), (' A 277  TYR  HA ', ' A 396  TYR  O  ', -0.545, (2.93, 15.91, -66.107)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.541, (-12.805, 7.332, -52.611)), (' B  92  LEU  HB3', ' B  93  TYR  CD2', -0.53, (9.232, -0.221, -46.45)), (' B 195  ILE  O  ', ' B 195  ILE HG23', -0.518, (-34.396, 21.329, -47.461)), (' A 158  LEU HD12', ' A 162  GLU  HB3', -0.516, (-44.037, 27.459, -70.599)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.516, (9.625, -0.068, -32.745)), (' B 277  TYR  HA ', ' B 396  TYR  O  ', -0.513, (-0.03, 30.119, -26.848)), (' A 235  LEU HD21', ' A 382  TYR  CE2', -0.505, (-7.63, 32.206, -60.49)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.504, (-38.639, 28.149, -3.269)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.499, (2.801, 41.826, -29.001)), (' B 279  THR  HB ', ' B 429  MET  CE ', -0.495, (-5.641, 27.364, -20.728)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.494, (-25.771, 19.172, -87.148)), (' B 371  VAL HG23', ' B 393  ALA  HB2', -0.488, (-0.753, 31.173, -34.986)), (' B 143  GLU  HA ', ' B 146  LYS  HE2', -0.478, (-20.901, 11.163, -38.025)), (' A 326  PRO  HB2', ' A 329  LYS  HZ3', -0.478, (-9.597, -1.518, -55.974)), (' B  69  SER  HB2', ' B  71  TYR  CE2', -0.477, (0.306, -16.647, -54.687)), (' A 260  ASP  HA ', ' A 263  SER  OG ', -0.476, (-0.381, -5.51, -73.822)), (' A 158  LEU HD21', ' A 164  HIS  ND1', -0.467, (-46.622, 31.722, -70.249)), (' B 477  LYS  NZ ', ' B 551  GLU  OE2', -0.465, (-34.108, 13.399, -4.406)), (' A  59  ASP  OD1', ' A  61  THR  OG1', -0.46, (0.458, 62.145, -62.01)), (' B 347  LYS  HD2', ' B 353  GLU  OE2', -0.459, (-9.177, 42.043, -46.116)), (' B 460  LYS  CE ', ' B 808  HOH  O  ', -0.459, (-9.63, 28.148, -9.909)), (' A 442  ARG  HA ', ' A 464  HIS  HB3', -0.458, (-10.457, 3.259, -85.017)), (' B 505  ALA  O  ', ' B 508  LYS  HG2', -0.455, (-39.549, 39.602, -15.131)), (' B  16  CYS  O  ', ' B  22  ARG  HA ', -0.453, (-5.701, -0.431, -41.074)), (' A 333  ILE  HB ', ' A 358  CYS  SG ', -0.449, (-14.059, 16.613, -56.261)), (' B 376  ILE  HA ', ' B 376  ILE HD12', -0.447, (-10.906, 25.291, -26.924)), (' B 167  TRP  CZ3', ' B 174  PRO  HD2', -0.446, (-34.323, 9.003, -36.653)), (' A 519  ASN  HB3', ' A 530  THR HG21', -0.446, (-31.473, 21.035, -79.47)), (' A 254  PRO  HA ', ' A 298  TYR  O  ', -0.444, (3.958, 0.461, -63.162)), (' A 304  ILE  HA ', ' A 370  ILE  O  ', -0.444, (-2.795, 10.902, -59.484)), (' B 253  TYR  O  ', ' B 801  HOH  O  ', -0.44, (3.02, 46.319, -31.202)), (' B 368  ALA  O  ', ' B 393  ALA  HA ', -0.44, (2.195, 32.526, -35.734)), (' B 184  GLY  HA3', ' B 195  ILE HG22', -0.44, (-34.202, 18.917, -46.817)), (' B 187  VAL HG23', ' B 872  HOH  O  ', -0.439, (-38.716, 12.817, -51.806)), (' B 162  GLU  HG2', ' B 210  VAL HG22', -0.439, (-44.507, 21.515, -34.21)), (' A  20  ILE HG22', ' A 873  HOH  O  ', -0.434, (-7.291, 45.438, -63.287)), (' B  12  THR HG23', ' B  26  CYS  HA ', -0.434, (5.74, -1.473, -41.196)), (' A 280  LEU HD11', ' A 438  LEU  HG ', -0.432, (-2.403, 10.084, -76.696)), (' A 276  LYS  O  ', ' A 395  HIS  HA ', -0.432, (4.685, 15.16, -63.117)), (' A 367  THR  HA ', ' A 392  ARG  O  ', -0.431, (0.055, 16.388, -53.803)), (' A  19  CYS  HB2', ' A  23  PRO  HD2', -0.431, (-3.65, 46.81, -59.706)), (' B 516  ASN  ND2', ' B 814  HOH  O  ', -0.431, (-33.2, 16.207, -24.107)), (' B 279  THR  HB ', ' B 429  MET  HE3', -0.428, (-6.009, 27.125, -20.875)), (' B 474 AMET  SD ', ' B 495  VAL HG11', -0.428, (-41.062, 24.792, -6.22)), (' B 311  HIS  CD2', ' B 340  VAL HG11', -0.426, (-21.533, 28.071, -39.076)), (' A 130  LEU  HA ', ' A 130  LEU HD23', -0.426, (1.602, 39.284, -64.665)), (' A 327  ILE HD11', ' A 345  LYS  O  ', -0.426, (-19.225, 2.047, -57.858)), (' B 249  ILE HG23', ' B 273  GLY  HA3', -0.421, (5.227, 39.212, -25.864)), (' B  19  CYS  HB2', ' B  23  PRO  HD2', -0.419, (-5.899, 0.009, -38.234)), (' A 565  ILE  HA ', ' A 572  ILE  CD1', -0.419, (-20.102, 14.858, -88.072)), (' A 139  LYS  O  ', ' A 143  GLU  HG2', -0.416, (-14.719, 37.117, -62.735)), (' B 268  ASN  HA ', ' B 268  ASN HD22', -0.416, (-0.858, 37.295, -18.322)), (' B 278  SER  HA ', ' B 435  ASP  OD1', -0.416, (-0.186, 29.475, -21.254)), (' B  64  TYR  CD1', ' B  64  TYR  N  ', -0.415, (0.899, -18.023, -45.603)), (' B 512  ILE  O  ', ' B 546  PHE  HA ', -0.414, (-34.032, 25.968, -15.103)), (' B 544  VAL  O  ', ' B 572  ILE  HA ', -0.413, (-33.434, 32.497, -12.122)), (' B 490  ARG  N  ', ' B 491  PRO  CD ', -0.41, (-43.945, 17.376, -13.067)), (' A 269  TYR  OH ', ' A 294  GLY  HA3', -0.408, (-3.372, 3.26, -69.592)), (' B 451  THR HG21', ' B 585  LEU HD23', -0.408, (-25.627, 27.548, -6.158)), (' B 129  ARG  HA ', ' B 129  ARG  HD2', -0.407, (0.795, 11.167, -32.686)), (' B  14  LEU  HB2', ' B  25  LEU  O  ', -0.404, (3.078, -2.15, -40.94)), (' B 518  GLN  HA ', ' B 518  GLN  OE1', -0.404, (-39.784, 19.124, -18.158)), (' B  94  LYS  CB ', ' B 861  HOH  O  ', -0.404, (10.998, -6.086, -43.59)), (' B 115  THR  HA ', ' B 411  LEU  O  ', -0.404, (-20.352, 5.568, -25.63)), (' A 158  LEU HD21', ' A 164  HIS  CE1', -0.403, (-46.982, 31.242, -70.337)), (' A 445  PRO  HD2', ' A 448  ILE HD12', -0.402, (-17.498, 8.965, -88.952)), (' B  27  CYS  HB2', ' B  97  CYS  SG ', -0.4, (9.126, -3.997, -39.588)), (' B 376  ILE HG22', ' B 400  GLY  HA3', -0.4, (-11.694, 27.126, -23.255))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
