# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '   6 ', 'VAL', 0.0998758413424682, (3.6719999999999997, 41.072, -59.302)), ('A', '  45 ', 'VAL', 0.08972174039025523, (-0.40100000000000247, 51.899, -45.338)), ('A', ' 195 ', 'ILE', 0.005167386489723103, (-34.686, 28.53, -54.167)), ('A', ' 218 ', 'LYS', 0.007740440852268117, (-43.58800000000001, 25.277, -56.495)), ('A', ' 249 ', 'ILE', 0.08265606681528095, (10.491999999999999, 6.691000000000008, -63.688)), ('A', ' 283 ', 'PRO', 0.015503194802749871, (-8.359, 13.755000000000004, -81.441)), ('A', ' 351 ', 'THR', 0.0, (-11.277000000000008, 12.433000000000003, -50.619)), ('A', ' 484 ', 'VAL', 0.01923737617052364, (-32.80600000000001, 37.652, -80.564)), ('B', '   9 ', 'ASN', 0.03194269289696243, (7.450000000000001, 6.015000000000003, -35.734)), ('B', '  10 ', 'SER', 0.01994901428454352, (9.551000000000002, 3.2390000000000034, -37.41)), ('B', '  48 ', 'TYR', 0.012478518003137016, (-2.722000000000003, -9.691000000000003, -46.828)), ('B', '  97 ', 'CYS', 0.013012348576112371, (11.675000000000002, -1.4849999999999959, -36.56)), ('B', ' 195 ', 'ILE', 0.09909426952336477, (-32.802, 21.501, -48.763))]
data['omega'] = []
data['rota'] = [('B', '   7 ', 'LEU', 0.16915513249507627, (3.817000000000001, 3.549000000000002, -31.625)), ('B', '  69 ', 'SER', 0.004359221968270257, (0.836999999999998, -13.585999999999999, -53.995)), ('B', '  96 ', 'THR', 0.030614669475075334, (14.171, -0.7229999999999972, -39.417)), ('B', ' 103 ', 'VAL', 0.042709895820323515, (1.1670000000000007, -2.027, -26.886)), ('B', ' 144 ', 'THR', 0.17827317961051584, (-20.4, 6.138000000000003, -38.427)), ('B', ' 155 ', 'ARG', 0.15338052970804605, (-45.67800000000001, 11.354000000000003, -44.207)), ('B', ' 188 ', 'THR', 0.2067184928146749, (-35.74300000000001, 13.949, -57.863)), ('B', ' 192 ', 'LYS', 0.0, (-31.618000000000002, 13.803000000000006, -54.204000000000015)), ('B', ' 215 ', 'THR', 0.04981698824069531, (-33.953, 27.947000000000006, -44.195)), ('B', ' 220 ', 'ASN', 0.10567225895871757, (-44.107, 18.341, -48.69)), ('B', ' 229 ', 'SER', 0.11450660176515429, (-21.859, 12.848000000000004, -41.437)), ('B', ' 231 ', 'THR', 0.14241124428716548, (-15.179000000000006, 12.396000000000008, -43.969)), ('B', ' 259 ', 'SER', 0.010914166354040323, (-7.322000000000001, 52.817, -22.971)), ('B', ' 278 ', 'SER', 0.008033023091693485, (-0.9739999999999984, 30.571000000000005, -22.803000000000004)), ('B', ' 327 ', 'ILE', 0.2722556532579331, (-13.596000000000007, 46.873000000000005, -40.184)), ('A', '  12 ', 'THR', 0.12873901597013634, (7.078, 46.907, -51.885)), ('A', '  26 ', 'CYS', 0.09023243556981048, (7.8500000000000005, 47.747, -57.05400000000001)), ('A', ' 156 ', 'GLU', 0.08969642986204832, (-47.03400000000001, 34.195000000000014, -63.96)), ('A', ' 183 ', 'THR', 0.16897037941660348, (-30.13400000000001, 31.885, -58.858)), ('A', ' 201 ', 'GLU', 0.20397570361819634, (-35.11600000000003, 28.493000000000006, -73.125)), ('A', ' 255 ', 'THR', 0.14749928983363428, (3.548000000000001, -3.3569999999999958, -63.347000000000016)), ('A', ' 259 ', 'SER', 0.14347619349204932, (-3.3859999999999983, -6.373999999999992, -69.933)), ('A', ' 351 ', 'THR', 0.2405145368301745, (-11.277000000000008, 12.433000000000003, -50.619)), ('A', ' 480 ', 'ILE', 0.29961761892956773, (-32.059000000000005, 32.45200000000001, -91.59)), ('A', ' 502 ', 'ARG', 0.0, (-36.65800000000002, 7.973000000000006, -97.251)), ('A', ' 530 ', 'THR', 0.028395685229892526, (-31.160000000000004, 17.60300000000001, -79.733)), ('A', ' 589 ', 'SER', 0.2609839717166095, (-23.261000000000003, 14.99100000000001, -102.014))]
data['cbeta'] = []
data['probe'] = [(' B   5  CYS  HG ', ' B 703   ZN ZN  ', -0.976, (6.054, 0.19, -35.408)), (' B  27  CYS  SG ', ' B 855  HOH  O  ', -0.836, (8.181, -5.237, -42.293)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.802, (-32.789, 34.986, -21.819)), (' B  12  THR HG21', ' B  25  LEU  O  ', -0.794, (4.097, -1.503, -40.591)), (' B  48  TYR  O  ', ' B 801  HOH  O  ', -0.771, (-4.847, -9.957, -44.596)), (' A  60  VAL  HB ', ' A 928  HOH  O  ', -0.709, (-0.679, 58.222, -56.888)), (' B  48  TYR  OH ', ' B  90  PHE  O  ', -0.707, (3.54, -7.663, -45.586)), (' A 368  ALA  O  ', ' A 393  ALA  HA ', -0.691, (1.15, 14.523, -56.935)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.664, (-30.972, 21.063, -79.65)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.662, (9.689, -0.121, -32.029)), (' A  13  SER  OG ', ' A  44  SER  HB2', -0.657, (3.44, 51.416, -48.701)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.653, (-26.046, 11.327, -80.23)), (' A 275  GLN  O  ', ' A 395  HIS  ND1', -0.641, (6.347, 12.729, -64.266)), (' B  51  ASN  OD1', ' B 802  HOH  O  ', -0.635, (-1.979, -11.207, -54.399)), (' A 367  THR  HA ', ' A 392  ARG  O  ', -0.62, (-0.591, 16.305, -54.304)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.614, (-31.734, 20.779, -80.146)), (' B   7  LEU HD12', ' B 103  VAL HG22', -0.611, (2.3, -0.859, -30.263)), (' A  21  ARG  NH1', ' A 809  HOH  O  ', -0.601, (-11.358, 41.271, -57.814)), (' B 275  GLN  NE2', ' B 435  ASP  OD2', -0.59, (1.51, 30.152, -20.25)), (' B 278  SER  HB2', ' B 436  MET  HE2', -0.587, (-1.951, 33.075, -22.054)), (' B 508  LYS  HD3', ' B 992  HOH  O  ', -0.587, (-36.426, 41.317, -17.945)), (' B 445  PRO  HB3', ' B 468  SER  HB3', -0.586, (-28.483, 40.083, -7.833)), (' B 376  ILE HG22', ' B 400  GLY  HA3', -0.572, (-11.446, 27.58, -23.168)), (' A 269  TYR  OH ', ' A 294  GLY  HA3', -0.568, (-3.892, 3.486, -70.184)), (' A   5  CYS  SG ', ' A  26  CYS  HB3', -0.568, (8.151, 45.334, -58.458)), (' A 163  LEU HD23', ' A 211  TYR  CD2', -0.563, (-41.279, 28.611, -65.171)), (' A   4  ALA  O  ', ' A  24  PHE  HB2', -0.56, (3.139, 43.192, -54.893)), (' B  13  SER  O  ', ' B  44  SER  HA ', -0.558, (1.862, -2.17, -46.323)), (' B 510  VAL HG21', ' B 541  TYR  CG ', -0.551, (-32.198, 34.521, -20.894)), (' B  28  LYS  O  ', ' B  32  ASP  OD1', -0.549, (5.326, -6.662, -32.104)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.545, (5.97, -1.304, -40.031)), (' A   7  LEU HD13', ' A 103  VAL HG22', -0.541, (5.95, 45.443, -64.897)), (' B 277  TYR  HA ', ' B 396  TYR  O  ', -0.54, (-0.318, 30.327, -26.828)), (' A 152  ALA  HB2', ' A 167  TRP  CZ3', -0.536, (-34.564, 38.047, -66.971)), (' B 279  THR  HB ', ' B 429  MET  CE ', -0.534, (-6.214, 27.39, -20.749)), (' B 220  ASN  N  ', ' B 220  ASN  OD1', -0.53, (-42.985, 19.596, -49.51)), (' B 385  SER  OG ', ' B 804  HOH  O  ', -0.527, (-3.425, 17.134, -36.494)), (' B  12  THR HG21', ' B  26  CYS  HA ', -0.524, (5.365, -1.698, -39.815)), (' A  16  CYS  SG ', ' A  18  ALA  HB3', -0.519, (-3.996, 51.526, -61.079)), (' A   7  LEU HD21', ' A 106  PHE  HB2', -0.517, (3.48, 43.476, -65.476)), (' B   7  LEU  CD1', ' B 103  VAL HG22', -0.508, (1.665, -0.572, -29.81)), (' A  31  TYR  CE2', ' A  87  GLY  HA2', -0.505, (10.655, 56.716, -64.238)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.5, (2.596, 42.059, -29.181)), (' A 277  TYR  HA ', ' A 396  TYR  O  ', -0.499, (2.663, 16.695, -66.234)), (' A 350  SER  O  ', ' A 352  LEU  N  ', -0.498, (-10.894, 10.268, -50.193)), (' A 304  ILE  HA ', ' A 370  ILE  O  ', -0.497, (-3.358, 10.545, -59.677)), (' B 220  ASN  O  ', ' B 223  ASP  OD2', -0.496, (-41.853, 16.691, -48.879)), (' B   7  LEU HD21', ' B 106  PHE  HB2', -0.493, (-0.453, 1.99, -29.706)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.493, (-13.318, 7.532, -52.858)), (' B  32  ASP  O  ', ' B  36  SER  OG ', -0.488, (-1.246, -7.386, -29.613)), (' B 333  ILE  HB ', ' B 358  CYS  SG ', -0.488, (-12.109, 30.891, -41.675)), (' A 296  ALA  O  ', ' A 300  PRO  HA ', -0.484, (-2.363, 1.12, -60.878)), (' B 477  LYS  NZ ', ' B 551  GLU  OE2', -0.484, (-33.776, 13.873, -4.43)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.483, (-38.819, 28.679, -2.663)), (' B 103  VAL  CG1', ' B 103  VAL  O  ', -0.482, (-0.751, -2.45, -28.207)), (' B 533  VAL HG11', ' B 560  ARG  O  ', -0.482, (-25.416, 24.19, -16.554)), (' A  59  ASP  OD1', ' A  61  THR  OG1', -0.481, (-0.068, 62.361, -62.04)), (' A 235  LEU HD21', ' A 382  TYR  CE2', -0.475, (-7.784, 32.178, -60.553)), (' B   2  VAL  N  ', ' B 828  HOH  O  ', -0.475, (2.185, 1.787, -48.366)), (' B  14  LEU  HB2', ' B  25  LEU  O  ', -0.472, (3.224, -1.851, -40.335)), (' B 115  THR  HA ', ' B 411  LEU  O  ', -0.472, (-20.534, 5.525, -25.408)), (' B  16  CYS  O  ', ' B  22  ARG  HA ', -0.468, (-6.08, 0.076, -40.461)), (' B   8  CYS  SG ', ' B  99  GLY  O  ', -0.465, (8.521, 0.207, -31.299)), (' A  12  THR HG21', ' A  25  LEU  O  ', -0.464, (5.939, 48.831, -55.716)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.461, (-26.565, 19.413, -87.23)), (' B  15  ARG  HG3', ' B  24  PHE  CD2', -0.457, (-0.08, 1.739, -43.375)), (' B 378  MET  O  ', ' B 407  ALA  HB2', -0.457, (-16.214, 20.551, -28.104)), (' A   4  ALA  O  ', ' A  24  PHE  CB ', -0.456, (3.582, 42.953, -54.581)), (' A 351  THR HG23', ' A 364  PRO  HG3', -0.454, (-10.323, 15.382, -51.653)), (' A 318  CYS  HB3', ' A 343  PHE  CD2', -0.454, (-18.398, 7.325, -61.991)), (' A 376  ILE HG12', ' A 425  VAL HG11', -0.452, (-3.474, 20.818, -71.473)), (' A 585  LEU HD22', ' A 587  PHE  CE2', -0.451, (-19.066, 16.017, -93.888)), (' A  64  TYR  O  ', ' A  70  TYR  HA ', -0.451, (3.492, 64.317, -50.508)), (' A  34  VAL  HA ', ' A  39  HIS  O  ', -0.447, (-0.746, 55.345, -63.449)), (' A 512  ILE  HA ', ' A 531  GLN  O  ', -0.447, (-27.039, 19.779, -81.977)), (' A 308  ALA  O  ', ' A 359  THR  HA ', -0.446, (-13.675, 19.198, -63.166)), (' B   8  CYS  SG ', ' B  99  GLY  CA ', -0.445, (8.22, -0.444, -31.97)), (' A 480  ILE  N  ', ' A 480  ILE HD12', -0.444, (-31.231, 31.78, -93.626)), (' A 334  ILE HD12', ' A 348  VAL HG13', -0.442, (-20.4, 12.515, -54.277)), (' A 304  ILE HG12', ' A 370  ILE  HB ', -0.441, (-1.937, 8.762, -60.988)), (' B 245  HIS  HE1', ' B 930  HOH  O  ', -0.44, (4.29, 28.495, -18.813)), (' B 284  PRO  HG2', ' B 566  THR HG21', -0.44, (-20.884, 31.068, -13.882)), (' B 511  PHE  O  ', ' B 530  THR  HA ', -0.44, (-36.211, 28.196, -21.231)), (' B 184  GLY  C  ', ' B 195  ILE HG22', -0.44, (-33.645, 18.446, -47.615)), (' B 124  ASN  OD1', ' B 381  ASN  ND2', -0.437, (-7.328, 14.566, -25.298)), (' A  33  HIS  HA ', ' A 107  ASN  OD1', -0.437, (1.781, 50.513, -66.491)), (' B  14  LEU  O  ', ' B  24  PHE  HA ', -0.433, (0.939, 0.575, -41.232)), (' B 315  ASP  O  ', ' B 318  CYS  HB2', -0.432, (-18.665, 38.284, -34.871)), (' B 152  ALA  HB2', ' B 167  TRP  CZ3', -0.431, (-36.199, 10.127, -38.34)), (' A 591  GLU  O  ', ' A 592  ILE  HB ', -0.431, (-32.362, 16.044, -103.134)), (' A 490  ARG  HB2', ' A 491  PRO  HD3', -0.43, (-37.31, 27.881, -92.602)), (' B 488  ILE HD11', ' B 517  SER  HB3', -0.43, (-40.815, 15.992, -22.478)), (' B 254  PRO  HB3', ' B 298  TYR  CE2', -0.429, (2.083, 45.441, -25.079)), (' B 282  GLY  O  ', ' B 288  LYS  HD3', -0.428, (-14.232, 32.248, -19.354)), (' B  59  ASP  C  ', ' B  59  ASP  OD1', -0.427, (-4.784, -14.23, -40.181)), (' B 372  VAL  CG1', ' B 399  ILE HD12', -0.426, (-8.683, 34.332, -27.432)), (' B 152  ALA  HB2', ' B 167  TRP  CH2', -0.423, (-36.475, 10.601, -38.113)), (' B 386  VAL  O  ', ' B 390  ARG  HG2', -0.423, (-5.415, 22.828, -39.214)), (' A  72  CYS  SG ', ' A  74  SER  HB2', -0.421, (-2.136, 72.174, -54.469)), (' B 377  SER  O  ', ' B 406  PRO  HA ', -0.421, (-15.722, 21.222, -23.553)), (' B 544  VAL  O  ', ' B 572  ILE  HA ', -0.42, (-33.743, 32.71, -12.039)), (' B   5  CYS  O  ', ' B   9  ASN  N  ', -0.42, (6.093, 5.153, -34.906)), (' B 452  VAL  CG1', ' B 565  ILE HD11', -0.42, (-23.438, 28.795, -9.328)), (' A 561  PHE  CD2', ' A 581  LEU HD22', -0.417, (-15.901, 22.024, -91.66)), (' A 552  THR  C  ', ' A 892  HOH  O  ', -0.416, (-19.143, 32.902, -90.149)), (' A 280  LEU HD11', ' A 438  LEU  HG ', -0.415, (-3.029, 10.263, -76.898)), (' B 279  THR  HB ', ' B 429  MET  HE3', -0.415, (-6.062, 27.261, -20.988)), (' B  31  TYR  HB2', ' B  89  VAL HG23', -0.415, (3.892, -8.805, -36.48)), (' A 241  VAL HG22', ' A 867  HOH  O  ', -0.414, (2.512, 21.596, -63.265)), (' B 542  ASP  HA ', ' B 569  LYS  HB2', -0.413, (-29.713, 40.124, -15.686)), (' B  26  CYS  O  ', ' B  29  CYS  N  ', -0.413, (5.06, -3.606, -35.705)), (' A 152  ALA  HB2', ' A 167  TRP  CE3', -0.413, (-34.748, 38.686, -66.816)), (' A 585  LEU HD22', ' A 587  PHE  CZ ', -0.412, (-18.648, 15.286, -93.708)), (' A  31  TYR  CD2', ' A  87  GLY  HA2', -0.411, (10.364, 56.336, -63.747)), (' B 404  GLN  NE2', ' B 706  PO4  O2 ', -0.411, (-20.32, 29.925, -19.847)), (' A 276  LYS  O  ', ' A 395  HIS  HA ', -0.408, (4.239, 15.17, -63.017)), (' B 376  ILE  HA ', ' B 376  ILE HD12', -0.408, (-11.127, 25.408, -26.901)), (' B 504  PRO  HB3', ' B 507  ARG  NH2', -0.408, (-48.155, 38.002, -13.188)), (' B  84  CYS  O  ', ' B  84  CYS  SG ', -0.407, (2.659, -14.217, -37.792)), (' A 377  SER  O  ', ' A 406  PRO  HA ', -0.406, (-11.001, 25.213, -74.516)), (' A  44  SER  O  ', ' A  45  VAL  C  ', -0.406, (-1.706, 52.614, -46.565)), (' A 151  ILE HG12', ' A 226  VAL HG22', -0.405, (-31.42, 40.388, -60.47))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
