# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 195 ', 'ILE', 0.057008565118783036, (-34.257999999999996, 28.357999999999993, -54.898)), ('A', ' 218 ', 'LYS', 0.025564081328674177, (-42.742, 24.772999999999993, -58.05200000000001)), ('A', ' 484 ', 'VAL', 0.01659676795507991, (-32.059, 37.518, -81.007)), ('B', '  11 ', 'GLN', 0.02031143676044493, (9.238999999999994, 3.342999999999998, -41.24300000000001)), ('B', '  27 ', 'CYS', 0.025676952173964835, (6.8389999999999995, -5.19600000000001, -38.238)), ('B', '  48 ', 'TYR', 0.028268349041688904, (-2.404999999999996, -9.61, -46.728000000000016)), ('B', '  92 ', 'LEU', 0.010452888731638478, (9.380999999999998, -3.4890000000000043, -45.84000000000001))]
data['omega'] = []
data['rota'] = [('A', '  12 ', 'THR', 0.029289166969880043, (7.536999999999985, 46.856, -52.116)), ('A', '  20 ', 'ILE', 0.23796924471320935, (-9.028000000000006, 46.111999999999995, -60.571000000000005)), ('A', '  51 ', 'ASN', 0.06268770478840302, (-2.7970000000000015, 65.463, -47.22)), ('A', '  76 ', 'LYS', 0.1962737957739411, (4.0459999999999905, 70.83299999999997, -50.749)), ('A', '  81 ', 'PHE', 0.1164386786615723, (10.981999999999974, 65.357, -53.172)), ('A', '  92 ', 'LEU', 0.060072437822813116, (9.879, 51.161, -49.19000000000001)), ('A', ' 127 ', 'THR', 0.0881620857250612, (5.842999999999985, 35.97699999999999, -68.53)), ('A', ' 157 ', 'VAL', 0.007351242675213143, (-46.289, 29.940999999999992, -64.221)), ('A', ' 162 ', 'GLU', 0.1265361941548412, (-42.478999999999985, 26.501999999999992, -69.027)), ('A', ' 169 ', 'VAL', 0.169870531696672, (-35.611999999999995, 47.742, -68.725)), ('A', ' 173 ', 'ARG', 0.1256244534198778, (-31.049000000000007, 40.664999999999985, -71.315)), ('A', ' 201 ', 'GLU', 0.27025630536438283, (-34.53499999999998, 28.148999999999994, -73.572)), ('A', ' 209 ', 'VAL', 0.011551952047739178, (-39.975, 30.14, -72.244)), ('A', ' 217 ', 'TYR', 0.12341631843741732, (-39.094, 24.026999999999997, -56.966)), ('A', ' 226 ', 'VAL', 0.2582274049786089, (-30.151000000000014, 36.661, -61.215)), ('A', ' 255 ', 'THR', 0.008159601566148922, (4.227999999999994, -3.3680000000000057, -63.446)), ('A', ' 289 ', 'SER', 0.016401949030024017, (-9.922999999999995, 7.956999999999995, -71.52)), ('A', ' 502 ', 'ARG', 0.11183818614547858, (-35.968, 8.060999999999996, -97.36100000000002)), ('A', ' 530 ', 'THR', 0.029508712835262924, (-30.51599999999999, 17.657999999999994, -80.077)), ('A', ' 591 ', 'GLU', 0.06809581343123652, (-28.900000000000006, 16.35199999999999, -104.688)), ('B', '   8 ', 'CYS', 0.09489939740015614, (7.673999999999996, 3.770999999999999, -32.906)), ('B', '   9 ', 'ASN', 0.272527817248309, (7.721999999999999, 6.007999999999997, -36.043)), ('B', '  12 ', 'THR', 0.035622655889516644, (6.831999999999995, 0.6209999999999916, -42.628)), ('B', '  51 ', 'ASN', 0.2231192264684133, (-4.876999999999995, -14.914000000000001, -53.50200000000002)), ('B', '  69 ', 'SER', 0.1238451826856079, (1.440000000000004, -13.45400000000001, -54.054)), ('B', '  76 ', 'LYS', 0.039079238882744054, (0.6599999999999993, -21.80600000000001, -50.451)), ('B', '  92 ', 'LEU', 0.08781602408988609, (9.380999999999998, -3.4890000000000043, -45.84000000000001)), ('B', '  95 ', 'ASN', 0.03434838461281074, (16.071999999999996, -3.7220000000000066, -40.597)), ('B', ' 144 ', 'THR', 0.17451332451385942, (-20.052999999999997, 6.027999999999995, -38.605)), ('B', ' 158 ', 'LEU', 0.2568738842812266, (-49.42799999999998, 18.825999999999993, -40.575)), ('B', ' 169 ', 'VAL', 0.09818493012851458, (-37.489, 0.039999999999995595, -39.849)), ('B', ' 187 ', 'VAL', 0.27667821077885946, (-36.563, 12.856999999999989, -54.517)), ('B', ' 192 ', 'LYS', 0.0, (-31.475999999999996, 13.726999999999995, -54.28300000000001)), ('B', ' 195 ', 'ILE', 0.006964042633964312, (-32.93300000000001, 21.05999999999999, -49.004)), ('B', ' 209 ', 'VAL', 0.2777229549130429, (-42.975, 16.15, -34.743)), ('B', ' 215 ', 'THR', 0.17305486479362647, (-33.81799999999999, 27.543999999999993, -44.372)), ('B', ' 220 ', 'ASN', 0.04107701249841905, (-43.57600000000001, 18.493999999999993, -49.238000000000014)), ('B', ' 256 ', 'LEU', 0.0420081138935174, (2.6889999999999894, 52.788, -25.656)), ('B', ' 353 ', 'GLU', 0.11802502229463516, (-6.173000000000006, 40.331, -43.566)), ('B', ' 365 ', 'GLU', 0.01925821204415377, (-2.986000000000007, 27.004999999999995, -44.114000000000004)), ('B', ' 416 ', 'THR', 0.0594533882459498, (-18.964, 11.068, -16.498)), ('B', ' 458 ', 'ASP', 0.0014783065007798284, (-11.596000000000005, 27.03600000000001, -5.419)), ('B', ' 484 ', 'VAL', 0.00499661409135745, (-37.956, 8.519, -25.763)), ('B', ' 486 ', 'SER', 0.023462435089787268, (-35.61199999999998, 13.118000000000002, -22.188000000000002)), ('B', ' 551 ', 'GLU', 0.293254106625587, (-31.369, 13.855999999999998, -9.773))]
data['cbeta'] = [('B', ' 534 ', 'ASP', ' ', 0.2618418764325619, (-26.119, 21.835, -23.628000000000007))]
data['probe'] = [(' A  60  VAL  HB ', ' A 925  HOH  O  ', -0.964, (-0.339, 57.905, -57.453)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.81, (-32.746, 34.685, -22.032)), (' A 293  ILE HG13', ' A 320  LYS  HB3', -0.771, (-10.715, 5.265, -67.891)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.753, (-30.807, 20.626, -80.534)), (' A 333  ILE  HB ', ' A 358  CYS  SG ', -0.738, (-14.058, 16.336, -56.713)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.711, (-25.973, 11.31, -80.687)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.684, (-31.123, 20.694, -80.282)), (' A 269  TYR  CD1', ' A 295  LEU HD13', -0.66, (0.616, 6.445, -68.944)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.641, (-38.563, 28.185, -3.488)), (' A 277  TYR  HA ', ' A 396  TYR  O  ', -0.637, (3.193, 16.531, -66.618)), (' B  15  ARG  HG3', ' B  24  PHE  CE2', -0.628, (-0.474, 1.871, -43.875)), (' B 293  ILE HG13', ' B 320  LYS  HB3', -0.608, (-13.783, 41.583, -30.075)), (' A 352  LEU HD11', ' B 234  PRO  HD3', -0.607, (-7.044, 11.307, -44.451)), (' B 195  ILE  CG2', ' B 195  ILE  O  ', -0.601, (-34.5, 21.538, -47.809)), (' A 368  ALA  O  ', ' A 393  ALA  HA ', -0.6, (1.43, 14.749, -56.799)), (' B 280  LEU HD11', ' B 438  LEU  HG ', -0.598, (-9.365, 35.511, -18.384)), (' B 451  THR HG21', ' B 585  LEU HD23', -0.589, (-25.643, 27.1, -6.242)), (' B  15  ARG  HG3', ' B  24  PHE  CD2', -0.588, (0.158, 2.434, -43.273)), (' B 512  ILE  O  ', ' B 546  PHE  HA ', -0.587, (-34.538, 26.241, -15.308)), (' A 127  THR HG23', ' A 130  LEU  HB2', -0.585, (4.438, 38.153, -67.195)), (' B 284  PRO  HG2', ' B 566  THR HG21', -0.567, (-21.083, 30.714, -14.116)), (' A 304  ILE  HA ', ' A 370  ILE  O  ', -0.566, (-2.698, 10.511, -59.626)), (' A 280  LEU HD11', ' A 438  LEU  HG ', -0.56, (-2.288, 10.361, -77.332)), (' B 195  ILE  O  ', ' B 195  ILE HG23', -0.559, (-34.376, 22.102, -47.513)), (' A 139  LYS  O  ', ' A 143  GLU  HG2', -0.55, (-15.163, 37.037, -62.951)), (' B 278  SER  HA ', ' B 435  ASP  OD1', -0.55, (0.089, 29.522, -20.921)), (' A 215  THR HG22', ' B 193  VAL HG21', -0.548, (-31.41, 21.364, -56.206)), (' B 504  PRO  HB3', ' B 507  ARG HH21', -0.547, (-47.546, 38.786, -13.042)), (' B  13  SER  O  ', ' B  44  SER  HA ', -0.54, (1.592, -2.173, -46.633)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.533, (2.721, 41.992, -29.06)), (' B 183  THR  O  ', ' B 225  PHE  HA ', -0.531, (-32.888, 14.597, -44.184)), (' B 378  MET  O  ', ' B 407  ALA  HB2', -0.53, (-16.376, 20.224, -28.386)), (' A 445  PRO  HD3', ' A 569  LYS  O  ', -0.518, (-17.964, 6.024, -88.049)), (' A   7  LEU HD21', ' A 106  PHE  CD1', -0.518, (2.814, 43.805, -64.623)), (' A 419  PRO  HA ', ' A 422  PHE  CE1', -0.518, (-7.038, 27.697, -79.684)), (' B 152  ALA  HB2', ' B 167  TRP  CZ3', -0.513, (-36.181, 9.937, -38.537)), (' B  15  ARG  HG2', ' B  22  ARG  O  ', -0.512, (-2.731, 2.384, -42.13)), (' A  19  CYS  HB2', ' A  23  PRO  HD2', -0.511, (-3.705, 47.06, -60.125)), (' B 277  TYR  HA ', ' B 396  TYR  O  ', -0.508, (0.179, 30.003, -26.679)), (' A 158  LEU HD11', ' A 164  HIS  CE1', -0.508, (-46.16, 30.948, -71.051)), (' B 279  THR  HB ', ' B 429  MET  CE ', -0.508, (-6.122, 27.58, -20.694)), (' A 275  GLN  O  ', ' A 395  HIS  ND1', -0.5, (7.07, 12.811, -64.024)), (' B 486  SER  HB3', ' B 517  SER  HB2', -0.499, (-37.859, 15.442, -22.624)), (' B 103  VAL  O  ', ' B 103  VAL HG12', -0.499, (-0.806, -2.134, -28.148)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.498, (-25.984, 19.286, -87.392)), (' B 510  VAL HG21', ' B 541  TYR  CG ', -0.494, (-32.467, 34.654, -20.839)), (' A 276  LYS  O  ', ' A 395  HIS  HA ', -0.493, (4.47, 15.43, -63.407)), (' B 279  THR  HB ', ' B 429  MET  HE3', -0.493, (-5.531, 27.313, -20.836)), (' A 367  THR HG22', ' A 392  ARG  HB3', -0.49, (1.257, 17.999, -52.94)), (' B 269  TYR  CD1', ' B 295  LEU HD13', -0.488, (-3.476, 40.431, -24.589)), (' A 510  VAL HG21', ' A 541  TYR  CG ', -0.487, (-25.495, 11.195, -80.728)), (' B  19  CYS  CB ', ' B  23  PRO  HD2', -0.484, (-5.694, 0.804, -37.824)), (' B  19  CYS  HB2', ' B  23  PRO  HD2', -0.48, (-5.901, 0.31, -37.638)), (' B 152  ALA  HB2', ' B 167  TRP  CH2', -0.479, (-35.978, 10.549, -38.786)), (' B 177  ASN  HB3', ' B 516  ASN  ND2', -0.475, (-33.468, 16.656, -27.325)), (' A 164  HIS  CD2', ' A 207  ASP  O  ', -0.473, (-44.72, 34.399, -72.584)), (' A 406  PRO  HB3', ' A 422  PHE  CD2', -0.472, (-9.099, 26.832, -77.21)), (' A 235  LEU HD21', ' A 382  TYR  CE2', -0.471, (-7.74, 32.283, -60.813)), (' B   2  VAL  N  ', ' B 819  HOH  O  ', -0.471, (1.642, 2.333, -47.896)), (' B  31  TYR  CE2', ' B  87  GLY  HA2', -0.47, (6.005, -11.655, -32.815)), (' B 563  VAL  O  ', ' B 567  ARG  HG2', -0.468, (-25.947, 29.272, -17.393)), (' B 124  ASN  OD1', ' B 381  ASN  ND2', -0.466, (-7.196, 14.858, -25.436)), (' B  51  ASN  ND2', ' B 822  HOH  O  ', -0.465, (-3.652, -11.302, -52.071)), (' A 251  GLY  HA3', ' A 394  LYS  HD3', -0.465, (7.01, 9.97, -57.056)), (' B 303  ARG  NH1', ' B 353  GLU  O  ', -0.465, (-4.13, 38.068, -42.023)), (' B 103  VAL  CG1', ' B 103  VAL  O  ', -0.462, (-0.119, -2.074, -28.403)), (' A 456  VAL HG23', ' A 457  TYR  CD2', -0.462, (-7.472, 17.703, -86.715)), (' A 297  LEU HD11', ' A 324  TYR  HB3', -0.461, (-8.213, -0.999, -66.232)), (' A 533  VAL HG11', ' A 560  ARG  HG3', -0.46, (-18.648, 22.776, -83.288)), (' A  14  LEU  HB2', ' A  25  LEU  O  ', -0.457, (5.162, 49.167, -55.776)), (' A 194  GLN  C  ', ' A 196  GLY  H  ', -0.457, (-31.931, 28.601, -54.934)), (' B   8  CYS  SG ', ' B  99  GLY  O  ', -0.457, (9.06, 0.591, -31.251)), (' A 367  THR  HA ', ' A 392  ARG  O  ', -0.457, (-0.343, 16.442, -54.116)), (' A 127  THR  O  ', ' A 131  LYS  HG3', -0.456, (2.726, 34.471, -68.31)), (' A 512  ILE  HA ', ' A 531  GLN  O  ', -0.455, (-26.406, 19.559, -82.575)), (' B 474 AMET  SD ', ' B 495  VAL HG11', -0.454, (-41.201, 24.741, -6.193)), (' B  26  CYS  O  ', ' B  29  CYS  N  ', -0.454, (5.555, -3.637, -35.147)), (' B 254  PRO  HB3', ' B 298  TYR  CE2', -0.452, (2.366, 44.959, -24.788)), (' A  46  ASN  N  ', ' A  46  ASN  OD1', -0.451, (0.051, 54.749, -46.138)), (' B 504  PRO  HA ', ' B 507  ARG  HD2', -0.449, (-45.463, 37.923, -13.503)), (' A 329  LYS  HE2', ' A 354  GLN  OE1', -0.449, (-5.694, 1.367, -55.427)), (' A 269  TYR  OH ', ' A 294  GLY  HA3', -0.448, (-3.578, 2.974, -69.715)), (' B 452  VAL  CG1', ' B 565  ILE HD11', -0.448, (-23.022, 28.789, -9.774)), (' A 106  PHE  CE1', ' A 133  PHE  CE2', -0.445, (-0.885, 43.821, -64.307)), (' B 445  PRO  HD2', ' B 448  ILE HD12', -0.445, (-26.951, 35.669, -10.622)), (' A 296  ALA  O  ', ' A 300  PRO  HA ', -0.443, (-2.155, 1.249, -61.212)), (' B 480  ILE HD11', ' B 851  HOH  O  ', -0.443, (-36.693, 14.152, -9.71)), (' B 283  PRO  HD2', ' B 438  LEU  O  ', -0.442, (-12.572, 34.746, -14.423)), (' A  63  LEU  CB ', ' A  83  LEU HD12', -0.441, (2.709, 62.043, -54.586)), (' A  12  THR  OG1', ' A  26  CYS  HA ', -0.439, (7.853, 47.124, -55.186)), (' B 167  TRP  CZ3', ' B 174  PRO  HD2', -0.439, (-34.356, 9.19, -36.887)), (' A 291  PHE  C  ', ' A 291  PHE  CD1', -0.438, (-3.684, 7.253, -70.733)), (' B  16  CYS  O  ', ' B  22  ARG  HA ', -0.436, (-5.67, 0.094, -40.327)), (' B 456  VAL HG23', ' B 457  TYR  CE2', -0.435, (-16.725, 28.124, -11.496)), (' B 386  VAL  O  ', ' B 390  ARG  HG2', -0.435, (-5.306, 22.734, -38.715)), (' A 376  ILE HG12', ' A 425  VAL HG11', -0.434, (-2.949, 20.677, -71.459)), (' B 519  ASN HD21', ' B 531  GLN  C  ', -0.433, (-33.631, 24.497, -22.271)), (' B 452  VAL HG13', ' B 565  ILE HD11', -0.43, (-23.404, 28.706, -9.614)), (' A  64  TYR  O  ', ' A  70  TYR  HA ', -0.43, (3.724, 64.175, -50.671)), (' A 490  ARG  N  ', ' A 491  PRO  CD ', -0.43, (-35.043, 27.126, -92.721)), (' B 183  THR  OG1', ' B 228  THR  OG1', -0.428, (-27.304, 17.146, -43.243)), (' A   7  LEU HD13', ' A 103  VAL HG22', -0.427, (6.764, 45.472, -65.667)), (' A 456  VAL HG23', ' A 457  TYR  CE2', -0.426, (-7.837, 17.29, -86.243)), (' A 591  GLU  O  ', ' A 592  ILE  HB ', -0.426, (-31.996, 16.695, -103.396)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.423, (9.671, -0.336, -32.204)), (' A  31  TYR  CE2', ' A  87  GLY  HA2', -0.423, (10.583, 56.662, -64.484)), (' A 457  TYR  O  ', ' A 458  ASP  C  ', -0.421, (-1.882, 16.422, -89.686)), (' B  32  ASP  O  ', ' B  36  SER  OG ', -0.42, (-0.37, -8.259, -29.269)), (' B  26  CYS  O  ', ' B  27  CYS  C  ', -0.42, (6.047, -4.595, -36.695)), (' B 280  LEU HD21', ' B 438  LEU HD11', -0.42, (-9.621, 36.087, -20.362)), (' B 187  VAL HG23', ' B 897  HOH  O  ', -0.419, (-39.018, 13.719, -52.147)), (' B 533  VAL HG11', ' B 560  ARG  O  ', -0.418, (-25.425, 24.11, -16.631)), (' A 319  GLU  HA ', ' A 319  GLU  OE2', -0.417, (-18.319, 4.538, -66.289)), (' B  50  CYS  SG ', ' B  71  TYR  HA ', -0.417, (-3.616, -17.763, -50.099)), (' B 445  PRO  HG3', ' B 570  VAL  O  ', -0.415, (-29.305, 38.941, -9.69)), (' B  86  ASN  HB3', ' B 991  HOH  O  ', -0.415, (13.014, -12.88, -34.044)), (' A  19  CYS  CB ', ' A  23  PRO  HD2', -0.414, (-3.725, 46.753, -60.309)), (' B 367  THR  HA ', ' B 392  ARG  O  ', -0.414, (1.593, 30.693, -38.617)), (' A 480  ILE HG21', ' A 550  THR HG22', -0.413, (-27.713, 32.238, -90.519)), (' A 370  ILE  HA ', ' A 395  HIS  O  ', -0.412, (1.063, 13.289, -61.455)), (' B 289  SER  HB2', ' B 320  LYS  HD3', -0.412, (-16.209, 40.425, -26.105)), (' A  12  THR HG21', ' A  26  CYS  HA ', -0.412, (7.779, 48.331, -55.547)), (' B   7  LEU  CD2', ' B 130  LEU HD21', -0.411, (0.195, 3.67, -30.719)), (' A 445  PRO  HD2', ' A 448  ILE HD12', -0.411, (-17.643, 9.188, -89.299)), (' B  52  ALA  CB ', ' B  75  HIS  CG ', -0.409, (-5.919, -20.686, -52.671)), (' A 130  LEU  HA ', ' A 130  LEU HD23', -0.409, (1.242, 39.475, -64.919)), (' B 345  LYS  HE3', ' B 826  HOH  O  ', -0.408, (-23.349, 41.992, -37.581)), (' B 474 BMET  HB3', ' B 474 BMET  HE2', -0.407, (-39.599, 25.051, -3.995)), (' A  34  VAL  HA ', ' A  39  HIS  O  ', -0.407, (-0.341, 55.155, -63.737)), (' B 154  VAL HG13', ' B 163  LEU HD22', -0.406, (-43.504, 16.023, -43.479)), (' A 419  PRO  HA ', ' A 422  PHE  CD1', -0.405, (-7.202, 27.612, -78.789)), (' B 542  ASP  OD1', ' B 569  LYS  HE3', -0.403, (-30.032, 41.204, -17.661)), (' A 304  ILE HG12', ' A 370  ILE  HB ', -0.402, (-1.644, 9.118, -61.356)), (' A 239  THR  O  ', ' A 388  ASN  ND2', -0.401, (-0.126, 24.856, -63.434)), (' A 158  LEU HD11', ' A 164  HIS  ND1', -0.401, (-46.023, 31.162, -70.418)), (' B 304  ILE HD12', ' B 355  TYR  HE1', -0.401, (-4.703, 41.718, -33.967)), (' B 459  ASN  HA ', ' B 922  HOH  O  ', -0.401, (-14.78, 31.241, -3.524)), (' B 174  PRO  HG2', ' B 182  PHE  HZ ', -0.4, (-32.866, 11.821, -35.58)), (' A  21  ARG  NH1', ' A 827  HOH  O  ', -0.4, (-9.832, 41.453, -58.389)), (' B 484  VAL HG23', ' B 928  HOH  O  ', -0.4, (-37.98, 11.71, -26.502))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
