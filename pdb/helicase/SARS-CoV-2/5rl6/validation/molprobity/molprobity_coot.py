# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 196 ', 'GLY', 0.005433715777389309, (-29.857999999999997, 27.49599999999999, -56.782)), ('A', ' 219 ', 'LEU', 0.01603752255276548, (-40.260000000000005, 30.154999999999987, -58.759)), ('A', ' 484 ', 'VAL', 0.01241691795746016, (-32.03799999999998, 39.298999999999985, -80.789))]
data['omega'] = []
data['rota'] = [('A', '   7 ', 'LEU', 0.1401728640691409, (8.091000000000001, 43.843999999999994, -63.541)), ('A', '  11 ', 'GLN', 0.13640099402767386, (11.332999999999998, 45.206, -53.273)), ('A', '  12 ', 'THR', 0.0013169467728929329, (8.951000000000006, 48.191, -52.848)), ('A', '  35 ', 'ILE', 0.2075444246447497, (4.792000000000005, 58.792, -66.992)), ('A', '  46 ', 'ASN', 0.005110585172994449, (0.052000000000007596, 56.236999999999995, -47.04500000000001)), ('A', '  81 ', 'PHE', 0.02919090664730816, (11.478000000000002, 67.139, -53.389)), ('A', '  92 ', 'LEU', 0.21198209675352303, (11.475000000000009, 52.718, -49.847)), ('A', ' 163 ', 'LEU', 0.11916146351368534, (-42.57899999999999, 31.294999999999987, -67.613)), ('A', ' 173 ', 'ARG', 0.0, (-30.217000000000006, 42.916, -70.458)), ('A', ' 207 ', 'ASP', 0.25018284163712, (-43.013999999999996, 35.951999999999984, -75.372)), ('A', ' 209 ', 'VAL', 0.0885017603887134, (-39.394, 31.840999999999987, -72.589)), ('A', ' 226 ', 'VAL', 0.029340245467466494, (-28.156, 38.007, -60.239)), ('A', ' 227 ', 'LEU', 0.16081327282187602, (-25.194000000000003, 36.991, -62.5)), ('A', ' 230 ', 'HIS', 0.1544970565425482, (-17.58, 35.356999999999985, -57.649)), ('A', ' 247 ', 'VAL', 0.1119858008281491, (17.169999999999998, 10.756999999999985, -66.474)), ('A', ' 255 ', 'THR', 0.008159601566148922, (4.621999999999998, -2.3050000000000033, -63.95)), ('A', ' 337 ', 'ARG', 0.04097326308655675, (-23.443000000000005, 24.218999999999987, -53.781)), ('A', ' 344 ', 'ASP', 0.2137097275035562, (-22.969000000000005, 9.411999999999994, -58.758)), ('A', ' 416 ', 'THR', 0.27852108454622, (-10.509999999999998, 36.283, -83.034)), ('A', ' 502 ', 'ARG', 0.025093628250704707, (-36.00800000000002, 9.573999999999991, -97.045)), ('A', ' 517 ', 'SER', 0.173588529236112, (-32.03499999999999, 29.627999999999993, -81.221)), ('A', ' 530 ', 'THR', 0.013599336671177298, (-30.192, 19.16099999999999, -79.735)), ('A', ' 531 ', 'GLN', 0.04173937722854141, (-26.713999999999995, 20.426999999999992, -78.859)), ('A', ' 551 ', 'GLU', 0.04195650420692487, (-21.621000000000006, 32.282999999999994, -92.51800000000001)), ('A', ' 592 ', 'ILE', 0.008101659587387903, (-32.074, 20.08499999999998, -103.816)), ('B', '   7 ', 'LEU', 0.10685755741190472, (3.4929999999999986, 4.079999999999998, -32.547)), ('B', '   8 ', 'CYS', 0.2565328838435835, (7.185999999999997, 4.2879999999999985, -33.707)), ('B', '  69 ', 'SER', 0.08714325266851511, (1.468999999999995, -13.366000000000007, -54.546)), ('B', '  73 ', 'LYS', 0.00026159029099834903, (-1.457000000000007, -22.641999999999996, -45.655)), ('B', '  92 ', 'LEU', 0.0005176252227235045, (9.080999999999998, -2.691000000000008, -46.733)), ('B', ' 100 ', 'SER', 0.025315383222736805, (7.2029999999999985, -0.05000000000000426, -28.966)), ('B', ' 158 ', 'LEU', 0.0904098799798167, (-49.90899999999999, 19.314, -40.814)), ('B', ' 164 ', 'HIS', 0.00855517727511829, (-46.212999999999994, 13.982999999999997, -39.449)), ('B', ' 177 ', 'ASN', 0.042187853496765806, (-33.944, 18.325999999999997, -29.968000000000004)), ('B', ' 179 ', 'ASN', 0.17691374707010799, (-28.672, 19.453, -30.449)), ('B', ' 192 ', 'LYS', 0.0, (-31.711000000000006, 14.63099999999999, -54.181)), ('B', ' 194 ', 'GLN', 0.14729077395255302, (-31.155, 20.46199999999999, -50.867)), ('B', ' 219 ', 'LEU', 0.11561687506492088, (-42.179, 21.410999999999994, -47.68)), ('B', ' 247 ', 'VAL', 0.20154417604439837, (12.868000000000002, 36.281, -20.723)), ('B', ' 344 ', 'ASP', 0.1298193488787323, (-21.542, 40.119, -42.147)), ('B', ' 458 ', 'ASP', 0.014766234333596888, (-11.545999999999996, 27.299999999999997, -5.293))]
data['cbeta'] = [('A', '  81 ', 'PHE', ' ', 0.3188759772792375, (12.058000000000018, 65.89099999999999, -52.71)), ('A', ' 592 ', 'ILE', ' ', 0.2880614996067048, (-33.135000000000005, 19.39199999999999, -102.854)), ('B', '  20 ', 'ILE', ' ', 0.27830482653193483, (-12.655999999999999, 2.692999999999996, -38.542)), ('B', ' 483 ', 'ASP', ' ', 0.2532482139397118, (-40.628000000000014, 11.215999999999996, -23.809))]
data['probe'] = [(' A 352  LEU HD11', ' B 234  PRO  HD3', -0.908, (-7.827, 12.372, -44.742)), (' B  12  THR HG21', ' B  25  LEU  O  ', -0.874, (3.26, -1.152, -41.096)), (' B 279  THR  HB ', ' B 429  MET  HE2', -0.838, (-6.086, 27.376, -20.729)), (' A 279  THR  HB ', ' A 429  MET  HE2', -0.801, (0.089, 19.415, -74.856)), (' B  12  THR HG22', ' B  14  LEU  H  ', -0.788, (3.755, -0.735, -43.972)), (' A 326  PRO  HB2', ' A 329  LYS  HZ3', -0.736, (-9.4, 0.337, -56.482)), (' A 158  LEU HD11', ' A 164  HIS  NE2', -0.721, (-45.914, 32.268, -71.17)), (' A 158  LEU HD11', ' A 164  HIS  CE1', -0.695, (-45.799, 31.632, -70.748)), (' A 158  LEU  HB2', ' A 163  LEU  HA ', -0.672, (-44.098, 31.019, -67.876)), (' A 352  LEU  CD1', ' B 234  PRO  HD3', -0.669, (-7.083, 11.942, -44.761)), (' A 504  PRO  O  ', ' A 507  ARG  HB2', -0.657, (-35.122, 7.381, -88.837)), (' A 326  PRO  HB2', ' A 329  LYS  NZ ', -0.656, (-9.107, 0.24, -56.005)), (' A  32  ASP  HB3', ' A 103  VAL HG11', -0.625, (7.861, 52.031, -68.319)), (' A 184  GLY  HA2', ' A 225  PHE  HD1', -0.622, (-31.599, 33.273, -59.417)), (' B  13  SER  HB3', ' B  92  LEU  HB2', -0.617, (7.135, -1.107, -47.876)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.614, (-38.525, 28.336, -3.224)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.589, (-33.005, 34.374, -21.321)), (' B 158  LEU HD11', ' B 164  HIS  ND1', -0.578, (-50.576, 15.123, -39.519)), (' A 184  GLY  HA2', ' A 225  PHE  CD1', -0.567, (-31.806, 33.127, -59.296)), (' A  20  ILE HG23', ' A  21  ARG  HG2', -0.563, (-6.28, 44.281, -61.614)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.548, (5.576, -0.549, -41.212)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.534, (-26.075, 12.592, -80.127)), (' B  19  CYS  CB ', ' B  23  PRO  HD2', -0.532, (-6.162, 1.094, -38.613)), (' A  12  THR HG21', ' A  26  CYS  HA ', -0.53, (9.311, 49.927, -56.636)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.523, (9.669, 0.595, -33.089)), (' B 182  PHE  HB3', ' B 225  PHE  HB3', -0.522, (-33.763, 16.409, -41.557)), (' B  12  THR HG23', ' B  26  CYS  HA ', -0.518, (5.851, -0.457, -40.78)), (' A 162  GLU  HG2', ' A 210  VAL HG22', -0.518, (-40.68, 26.68, -71.407)), (' A 445  PRO  HB3', ' A 468  SER  HB3', -0.512, (-17.991, 6.581, -91.603)), (' B  19  CYS  HB2', ' B  23  PRO  HD2', -0.503, (-5.954, 0.906, -38.62)), (' B 445  PRO  HB3', ' B 468  SER  HB3', -0.502, (-28.484, 40.225, -7.713)), (' A 425  VAL HG12', ' A 429  MET  HE3', -0.496, (-1.26, 21.672, -73.852)), (' A 158  LEU  CD1', ' A 164  HIS  CE1', -0.485, (-45.629, 31.744, -70.484)), (' B  12  THR HG22', ' B  14  LEU  N  ', -0.47, (3.695, -1.092, -43.817)), (' A 244  GLU  HB2', ' A 276  LYS  HB2', -0.47, (10.631, 18.949, -63.818)), (' B  13  SER  O  ', ' B  44  SER  HA ', -0.469, (1.789, -1.994, -47.27)), (' A 297  LEU HD11', ' A 324  TYR  HB3', -0.463, (-8.023, 0.359, -66.227)), (' B 505  ALA  O  ', ' B 508  LYS  HG2', -0.462, (-39.622, 39.984, -15.089)), (' A 263  SER  O  ', ' A 266  VAL HG22', -0.461, (3.138, 0.59, -75.154)), (' B 228  THR HG22', ' B 230  HIS  CE1', -0.46, (-22.112, 17.742, -42.367)), (' A 352  LEU HD11', ' B 234  PRO  CD ', -0.46, (-6.905, 12.515, -44.231)), (' B 701  LJA  C1 ', ' B 701  LJA  C8 ', -0.459, (-27.583, 11.18, -46.223)), (' B 195  ILE  O  ', ' B 195  ILE HG22', -0.458, (-35.307, 22.491, -46.999)), (' B 158  LEU  CD1', ' B 164  HIS  ND1', -0.454, (-50.086, 15.301, -39.512)), (' B 451  THR HG21', ' B 585  LEU HD23', -0.453, (-25.74, 27.637, -5.909)), (' B 331  SER  HB2', ' B 353  GLU  HG3', -0.452, (-9.868, 41.082, -44.001)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.452, (-12.637, 9.227, -52.627)), (' B  52  ALA  CB ', ' B  75  HIS  CG ', -0.452, (-5.693, -20.957, -53.071)), (' B 425  VAL HG12', ' B 429  MET  HE3', -0.451, (-7.062, 25.899, -21.483)), (' A 158  LEU  CD1', ' A 164  HIS  NE2', -0.45, (-45.287, 31.513, -71.041)), (' B 244  GLU  HB2', ' B 276  LYS  HB2', -0.444, (7.179, 28.771, -26.81)), (' B 195  ILE  CG2', ' B 195  ILE  O  ', -0.442, (-35.228, 22.636, -47.488)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.435, (-25.733, 20.587, -87.018)), (' A 164  HIS  CD2', ' A 208  ALA  HA ', -0.433, (-43.655, 33.087, -72.673)), (' B 185  TYR  CE2', ' B 194  GLN  HG2', -0.433, (-29.444, 18.565, -49.524)), (' A 311  HIS  HE2', ' A 339  ARG  NH2', -0.429, (-19.019, 22.94, -60.432)), (' A  49  VAL HG23', ' A  58  THR HG22', -0.428, (-4.987, 63.162, -53.621)), (' A 176  LEU HD13', ' A 209  VAL HG21', -0.427, (-35.707, 34.3, -72.852)), (' B 508  LYS  HD2', ' B 906  HOH  O  ', -0.427, (-36.452, 41.693, -17.401)), (' B   8  CYS  SG ', ' B  99  GLY  O  ', -0.426, (8.89, 1.214, -31.679)), (' A 214  THR HG21', ' A 340  VAL HG12', -0.422, (-27.834, 22.819, -63.134)), (' B 297  LEU HD11', ' B 324  TYR  HB3', -0.422, (-10.42, 47.912, -28.948)), (' B  49  VAL HG23', ' B  58  THR HG22', -0.421, (-8.803, -12.011, -47.677)), (' A 163  LEU HD11', ' A 211  TYR  HB3', -0.419, (-38.39, 30.984, -66.186)), (' B 512  ILE  O  ', ' B 546  PHE  HA ', -0.419, (-34.291, 26.216, -14.955)), (' B 156  GLU  HB3', ' B 164  HIS  HB2', -0.418, (-48.256, 14.229, -41.394)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.416, (3.017, 42.292, -28.485)), (' A 333  ILE  HB ', ' A 358  CYS  HB2', -0.416, (-13.17, 17.019, -56.392)), (' A 326  PRO  CB ', ' A 329  LYS  NZ ', -0.415, (-9.299, -0.19, -56.535)), (' A 158  LEU  CG ', ' A 164  HIS  CE1', -0.415, (-46.371, 31.845, -69.778)), (' B  16  CYS  O  ', ' B  22  ARG  HA ', -0.411, (-5.859, 0.085, -41.08)), (' A 451  THR HG21', ' A 585  LEU HD23', -0.408, (-14.961, 18.506, -93.73)), (' B 511  PHE  HB3', ' B 530  THR HG22', -0.407, (-38.419, 27.974, -20.135)), (' A  12  THR  CG2', ' A  26  CYS  HA ', -0.406, (9.656, 49.762, -55.875)), (' A 376  ILE HG12', ' A 425  VAL HG11', -0.405, (-2.693, 22.161, -71.168)), (' A  72  CYS  SG ', ' A  74  SER  HB2', -0.405, (-1.174, 73.201, -54.706)), (' B 333  ILE  HB ', ' B 358  CYS  HB2', -0.404, (-11.931, 32.44, -40.849)), (' A 531  GLN  HG2', ' A 536  SER  HB3', -0.404, (-22.957, 19.212, -79.153))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
