# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 218 ', 'LYS', 0.02530110445942297, (-42.53700000000001, 24.551000000000005, -58.081)), ('A', ' 283 ', 'PRO', 0.08927348137619072, (-7.329999999999993, 13.485000000000007, -81.182)), ('A', ' 484 ', 'VAL', 0.020744031516642565, (-31.28000000000001, 37.065000000000026, -80.688)), ('B', ' 187 ', 'VAL', 0.005113903276075287, (-36.388, 12.629000000000007, -54.156)), ('B', ' 283 ', 'PRO', 0.07509597120429518, (-15.082000000000006, 31.757, -15.719))]
data['omega'] = []
data['rota'] = [('A', '  11 ', 'GLN', 0.2977710310100023, (9.831999999999994, 43.49600000000001, -51.870000000000005)), ('A', '  12 ', 'THR', 0.0013599335943581536, (7.617999999999993, 46.63600000000002, -51.59)), ('A', '  20 ', 'ILE', 0.0, (-8.638000000000005, 45.71800000000002, -60.30200000000001)), ('A', '  35 ', 'ILE', 0.08946081706625786, (4.036999999999995, 56.73600000000001, -66.086)), ('A', '  36 ', 'SER', 0.19505237484744742, (2.7169999999999916, 54.649, -69.014)), ('A', '  46 ', 'ASN', 0.002781227523890047, (-1.3330000000000064, 54.936000000000014, -46.29000000000001)), ('A', '  51 ', 'ASN', 0.10851394491492086, (-2.5130000000000123, 65.018, -46.913)), ('A', '  65 ', 'LEU', 0.0410483453189172, (7.198000000000001, 63.56700000000002, -49.75300000000001)), ('A', ' 148 ', 'SER', 0.004019992775283754, (-24.045000000000016, 44.28500000000001, -65.338)), ('A', ' 156 ', 'GLU', 0.02977128939434706, (-46.334, 33.431, -64.539)), ('A', ' 162 ', 'GLU', 0.00013250835803813832, (-42.242999999999995, 26.179000000000002, -68.973)), ('A', ' 173 ', 'ARG', 0.0, (-30.860000000000007, 40.704000000000015, -71.361)), ('A', ' 199 ', 'THR', 0.042146260883080156, (-31.150000000000002, 27.451000000000008, -66.71900000000001)), ('A', ' 209 ', 'VAL', 0.051214589318263885, (-39.335000000000015, 29.691000000000017, -72.18)), ('A', ' 217 ', 'TYR', 0.18768216830051646, (-39.042, 23.636, -56.773)), ('A', ' 226 ', 'VAL', 0.07705522110941962, (-29.35000000000001, 36.649000000000015, -60.606)), ('A', ' 255 ', 'THR', 0.0013599335943581536, (4.425000000000001, -3.7619999999999933, -63.243)), ('A', ' 289 ', 'SER', 0.1338221172698444, (-9.313000000000002, 7.706000000000008, -71.237)), ('A', ' 307 ', 'THR', 0.029399689420041373, (-9.226999999999997, 16.027000000000008, -62.737000000000016)), ('A', ' 328 ', 'ASP', 0.05112257364708218, (-13.403999999999998, 0.35600000000000875, -53.436000000000014)), ('A', ' 376 ', 'ILE', 0.12199300112697563, (-6.858000000000004, 20.211000000000013, -71.378)), ('A', ' 495 ', 'VAL', 0.038662126045543956, (-33.697, 18.742000000000015, -95.906)), ('A', ' 502 ', 'ARG', 0.03795775744924182, (-35.551, 7.682000000000013, -97.39500000000001)), ('A', ' 516 ', 'ASN', 0.0, (-29.160000000000004, 25.810000000000013, -79.43700000000001)), ('A', ' 530 ', 'THR', 0.03599998994255644, (-30.169000000000008, 17.22400000000001, -79.74500000000002)), ('A', ' 592 ', 'ILE', 0.02684512585700288, (-31.82400000000001, 17.85600000000001, -103.452)), ('B', '   8 ', 'CYS', 0.2083546026896615, (7.650999999999998, 3.3630000000000058, -33.16)), ('B', '  12 ', 'THR', 0.0013599335943581536, (6.580000000000002, 0.05900000000000283, -43.062)), ('B', '  20 ', 'ILE', 0.0, (-11.130000000000003, 1.475000000000005, -38.243)), ('B', '  36 ', 'SER', 0.20304270925827622, (-2.9020000000000006, -9.742, -28.815)), ('B', '  69 ', 'SER', 0.21531504787351738, (1.4300000000000077, -13.819999999999999, -54.046)), ('B', '  76 ', 'LYS', 0.24390921579570038, (0.5130000000000026, -22.35799999999999, -50.213)), ('B', '  92 ', 'LEU', 0.12755432135259506, (9.105999999999998, -3.8809999999999985, -45.712)), ('B', '  95 ', 'ASN', 0.111966678172542, (16.028, -4.054999999999998, -40.637)), ('B', '  96 ', 'THR', 0.0, (14.862, -0.482999999999997, -39.674)), ('B', ' 144 ', 'THR', 0.2723972547884391, (-20.061, 5.683000000000005, -38.346000000000004)), ('B', ' 158 ', 'LEU', 0.11840532778402262, (-49.431, 18.339, -40.601)), ('B', ' 162 ', 'GLU', 0.009787357814294241, (-45.032999999999994, 20.416000000000007, -37.559)), ('B', ' 164 ', 'HIS', 0.039997729481531706, (-45.565, 13.290000000000004, -39.18600000000001)), ('B', ' 179 ', 'ASN', 0.038643148706611764, (-27.745, 18.270000000000003, -29.998000000000005)), ('B', ' 187 ', 'VAL', 0.006301065150182694, (-36.388, 12.629000000000007, -54.156)), ('B', ' 191 ', 'SER', 0.07542817738653827, (-30.67200000000001, 11.234000000000005, -57.126)), ('B', ' 192 ', 'LYS', 0.0, (-31.269999999999992, 13.603000000000007, -54.06300000000002)), ('B', ' 195 ', 'ILE', 0.008985727981507369, (-33.049, 21.011, -48.625)), ('B', ' 201 ', 'GLU', 0.1831592104185231, (-38.60600000000002, 17.947000000000003, -30.745)), ('B', ' 219 ', 'LEU', 0.23227916864550094, (-41.288, 20.72500000000001, -47.194)), ('B', ' 220 ', 'ASN', 0.14043564392488736, (-43.257, 17.957000000000008, -48.879000000000005)), ('B', ' 226 ', 'VAL', 0.2639482259793949, (-30.228, 12.248000000000005, -42.09000000000001)), ('B', ' 247 ', 'VAL', 0.0784529890366463, (12.972, 36.022, -21.321)), ('B', ' 289 ', 'SER', 0.13395323071994467, (-13.72700000000001, 37.97300000000001, -25.628)), ('B', ' 307 ', 'THR', 0.029590466413279216, (-10.581000000000005, 30.231, -33.902)), ('B', ' 361 ', 'ASN', 0.04036790800917105, (-12.888000000000005, 22.774, -39.643)), ('B', ' 376 ', 'ILE', 0.13933985997753262, (-11.403000000000006, 25.533000000000005, -25.18)), ('B', ' 484 ', 'VAL', 0.002408826868984412, (-37.85699999999999, 8.286000000000003, -25.694)), ('B', ' 495 ', 'VAL', 0.03780638799071312, (-44.187, 25.17, -8.815))]
data['cbeta'] = [('A', '  20 ', 'ILE', ' ', 0.2581819806307677, (-9.692000000000013, 45.17200000000001, -61.381)), ('A', ' 484 ', 'VAL', ' ', 0.28532502754763417, (-31.247, 37.00400000000001, -79.137)), ('A', ' 592 ', 'ILE', ' ', 0.32138942979031987, (-32.734000000000016, 16.970000000000013, -102.49800000000002))]
data['probe'] = [(' A 326  PRO  HB2', ' A 329  LYS  HZ2', -0.872, (-9.351, -0.235, -56.228)), (' B 460  LYS  NZ ', ' B 801  HOH  O  ', -0.799, (-8.101, 28.075, -10.919)), (' A 329  LYS  HB2', ' A 329  LYS  HZ3', -0.684, (-9.17, 1.391, -55.925)), (' B 279  THR  HB ', ' B 429  MET  HE2', -0.676, (-6.083, 27.152, -20.732)), (' A 484  VAL  O  ', ' A 801  HOH  O  ', -0.673, (-29.963, 37.325, -83.871)), (' A 326  PRO  HB2', ' A 329  LYS  NZ ', -0.666, (-8.958, -0.554, -56.497)), (' A 326  PRO  HD2', ' A 329  LYS  HZ1', -0.654, (-8.355, -0.082, -57.62)), (' A 279  THR  HB ', ' A 429  MET  HE2', -0.648, (-0.072, 17.939, -74.297)), (' B  21  ARG  HE ', ' B 136  GLU  HG2', -0.644, (-7.994, 8.305, -38.662)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.638, (-30.489, 20.503, -79.95)), (' A 280  LEU HD11', ' A 438  LEU  HG ', -0.629, (-2.008, 10.54, -76.576)), (' B 182  PHE  HB3', ' B 225  PHE  HB3', -0.621, (-32.715, 15.706, -41.038)), (' A 326  PRO  CG ', ' A 329  LYS  HZ1', -0.62, (-8.548, -0.683, -57.363)), (' A 445  PRO  HD2', ' A 448  ILE HD12', -0.618, (-16.807, 8.712, -89.465)), (' B 249  ILE HD11', ' B 270  GLN  HG2', -0.613, (4.754, 42.42, -22.996)), (' A  19  CYS  HB2', ' A  23  PRO  HD2', -0.611, (-3.089, 46.858, -59.889)), (' A 249  ILE HD11', ' A 270  GLN  HG2', -0.609, (9.224, 3.331, -67.647)), (' A 329  LYS  HB2', ' A 329  LYS  NZ ', -0.608, (-8.494, 0.798, -55.955)), (' A 326  PRO  CD ', ' A 329  LYS  HZ1', -0.588, (-8.11, -0.852, -58.125)), (' A 244  GLU  HB2', ' A 276  LYS  HB2', -0.577, (10.335, 17.345, -63.219)), (' B 280  LEU HD11', ' B 438  LEU  HG ', -0.576, (-9.028, 35.329, -18.335)), (' B  19  CYS  HB2', ' B  23  PRO  HD2', -0.574, (-5.701, 0.331, -38.242)), (' B 445  PRO  HD2', ' B 448  ILE HD12', -0.574, (-26.516, 35.947, -10.686)), (' A 158  LEU HD11', ' A 164  HIS  CE1', -0.573, (-45.793, 30.822, -71.41)), (' A 519  ASN  HB3', ' A 530  THR HG21', -0.571, (-31.13, 21.014, -80.123)), (' B 505  ALA  HB3', ' B1003  HOH  O  ', -0.571, (-39.284, 40.883, -10.38)), (' B 511  PHE  HB3', ' B 530  THR HG22', -0.57, (-38.341, 27.975, -20.429)), (' B 244  GLU  HB2', ' B 276  LYS  HB2', -0.56, (7.702, 28.474, -27.142)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.556, (-32.378, 34.398, -22.007)), (' B 512  ILE HD12', ' B 544  VAL HG13', -0.553, (-32.127, 30.056, -16.949)), (' A 352  LEU HD11', ' B 234  PRO  HD3', -0.552, (-7.715, 11.19, -43.93)), (' B  21  ARG  NE ', ' B 136  GLU  HG2', -0.551, (-8.5, 8.378, -38.659)), (' B 276  LYS  NZ ', ' B 806  HOH  O  ', -0.549, (7.416, 29.87, -32.748)), (' B 451  THR HG21', ' B 585  LEU HD23', -0.549, (-25.148, 27.66, -6.254)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.533, (-25.346, 11.036, -79.954)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.525, (-12.403, 6.962, -52.615)), (' A 451  THR HG21', ' A 585  LEU HD23', -0.525, (-15.004, 16.971, -93.712)), (' A 176  LEU HD22', ' A 200  PHE  HB2', -0.524, (-32.858, 31.722, -70.284)), (' A 512  ILE HD12', ' A 544  VAL HG13', -0.52, (-23.643, 14.95, -84.714)), (' A 297  LEU HD11', ' A 324  TYR  HB3', -0.517, (-7.494, -1.421, -66.102)), (' A 337  ARG  NH1', ' B 336  ALA  O  ', -0.515, (-21.752, 25.726, -49.381)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.513, (-30.187, 20.571, -80.196)), (' B 386  VAL  O  ', ' B 390  ARG  HG2', -0.513, (-5.019, 22.409, -38.539)), (' A 158  LEU  HB2', ' A 162  GLU  HB3', -0.51, (-45.242, 26.694, -69.423)), (' A  28  LYS  O  ', ' A  32  ASP  OD2', -0.509, (9.81, 51.378, -63.485)), (' B 297  LEU HD11', ' B 324  TYR  HB3', -0.503, (-10.477, 47.014, -29.836)), (' A 281  GLN  HG3', ' A 402  PRO  HD2', -0.503, (-3.939, 18.279, -79.484)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.501, (3.202, 41.45, -29.623)), (' B 228  THR HG22', ' B 230  HIS  NE2', -0.496, (-22.308, 16.159, -43.351)), (' A 326  PRO  CG ', ' A 329  LYS  NZ ', -0.493, (-8.624, -0.759, -57.123)), (' A  19  CYS  CB ', ' A  23  PRO  HD2', -0.492, (-3.326, 46.411, -60.079)), (' A 215  THR HG22', ' B 193  VAL HG21', -0.491, (-31.62, 21.081, -55.513)), (' A 156  GLU  HG3', ' A 164  HIS  HB2', -0.489, (-45.516, 33.721, -67.846)), (' B 477  LYS  H  ', ' B 702  K34  H1 ', -0.488, (-38.776, 16.812, -3.474)), (' B 157  VAL  HA ', ' B 163  LEU HD23', -0.488, (-44.998, 17.823, -42.585)), (' A 367  THR HG22', ' A 392  ARG  HB3', -0.487, (1.556, 17.714, -52.561)), (' A 427  ARG  HG2', ' A 991  HOH  O  ', -0.485, (3.888, 28.184, -74.364)), (' A 326  PRO  CB ', ' A 329  LYS  NZ ', -0.484, (-9.123, -1.113, -57.07)), (' A 425  VAL HG12', ' A 429  MET  HE3', -0.484, (-1.35, 20.051, -73.38)), (' B 228  THR HG22', ' B 230  HIS  CE1', -0.483, (-22.102, 15.699, -43.545)), (' B 512  ILE  O  ', ' B 546  PHE  HA ', -0.482, (-34.099, 25.976, -15.666)), (' B 154  VAL HG13', ' B 163  LEU HD22', -0.48, (-43.48, 15.87, -43.481)), (' B  28  LYS  O  ', ' B  32  ASP  OD1', -0.477, (5.821, -6.552, -32.042)), (' A 326  PRO  HG2', ' A 329  LYS  HZ1', -0.477, (-8.036, -1.449, -57.094)), (' A 452  VAL HG11', ' A 566  THR HG23', -0.471, (-13.006, 14.948, -86.761)), (' B 425  VAL HG12', ' B 429  MET  HE3', -0.471, (-6.928, 25.532, -21.799)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.47, (-25.492, 18.747, -87.088)), (' A 503  ASN  HB3', ' A 506  TRP  CD1', -0.467, (-30.058, 6.838, -93.522)), (' B 281  GLN  HG3', ' B 402  PRO  HD2', -0.466, (-10.905, 27.412, -16.9)), (' B  19  CYS  CB ', ' B  23  PRO  HD2', -0.459, (-5.943, 0.115, -37.401)), (' A  39  HIS  NE2', ' A 111  THR HG22', -0.457, (-4.958, 50.366, -66.275)), (' B 452  VAL HG11', ' B 566  THR HG23', -0.454, (-21.833, 29.384, -11.842)), (' A 455  LEU  CD1', ' A 584  LYS  HE3', -0.452, (-9.993, 23.035, -93.327)), (' A 494  GLY  O  ', ' A 498  GLU  HG2', -0.452, (-36.544, 17.96, -95.923)), (' A 504  PRO  O  ', ' A 507  ARG  HB2', -0.451, (-34.287, 5.286, -88.758)), (' B  39  HIS  NE2', ' B 111  THR HG22', -0.448, (-9.291, -4.251, -31.884)), (' B 163  LEU HD21', ' B 219  LEU HD13', -0.447, (-42.769, 18.561, -43.9)), (' B 278  SER  HB2', ' B 436  MET  HE2', -0.444, (-1.894, 32.528, -21.448)), (' B 152  ALA  HB2', ' B 167  TRP  CZ3', -0.443, (-35.617, 9.908, -38.495)), (' B 152  ALA  HB2', ' B 167  TRP  CH2', -0.442, (-35.916, 10.323, -38.699)), (' A 376  ILE  HA ', ' A 376  ILE HD12', -0.441, (-6.932, 20.814, -69.765)), (' A 177  ASN  ND2', ' A 179  ASN HD22', -0.432, (-24.288, 29.342, -74.898)), (' B 316  ALA  O  ', ' B 802  HOH  O  ', -0.431, (-18.56, 38.32, -29.346)), (' B  31  TYR  CZ ', ' B  35  ILE HG21', -0.428, (2.543, -12.872, -32.815)), (' B 503  ASN  HB3', ' B 506  TRP  CD1', -0.426, (-41.02, 36.852, -9.354)), (' A 516  ASN  ND2', ' A 816  HOH  O  ', -0.42, (-27.541, 29.572, -77.867)), (' B  12  THR  OG1', ' B  26  CYS  HA ', -0.42, (6.018, -0.629, -39.957)), (' A 409  ARG  NH2', ' A 422  PHE  O  ', -0.416, (-7.431, 29.768, -72.707)), (' B 592  ILE  HA ', ' B 593  PRO  HD3', -0.414, (-43.199, 25.391, -2.334)), (' B  65  LEU HD23', ' B  81  PHE  CZ ', -0.412, (7.831, -13.123, -48.683)), (' B 486  SER  HB3', ' B 517  SER  HB2', -0.411, (-37.472, 15.006, -22.33)), (' A 326  PRO  HG2', ' A 329  LYS  NZ ', -0.41, (-8.033, -1.032, -56.825)), (' A 404  GLN HE21', ' A 563  VAL HG22', -0.41, (-13.613, 17.979, -80.032)), (' A  20  ILE HG21', ' A 844  HOH  O  ', -0.409, (-10.563, 44.979, -64.367)), (' A 317  LEU  HG ', ' A 802  HOH  O  ', -0.409, (-12.245, 11.799, -68.194)), (' A 443  ARG  HG3', ' A 569  LYS  HG2', -0.408, (-17.48, 6.291, -82.393)), (' B 474 BMET  HE3', ' B 592  ILE HG23', -0.407, (-42.182, 23.595, -3.272)), (' A  12  THR  OG1', ' A  26  CYS  HA ', -0.406, (8.046, 47.135, -55.033)), (' B 480  ILE HG12', ' B 550  THR HG22', -0.405, (-36.153, 13.23, -12.992)), (' A 480  ILE HG21', ' A 550  THR HG22', -0.404, (-27.707, 32.019, -89.896)), (' B   8  CYS  SG ', ' B  99  GLY  O  ', -0.403, (9.153, 0.403, -31.128)), (' A  13  SER  HB2', ' A  92  LEU HD12', -0.403, (6.653, 49.652, -47.569)), (' B 458  ASP  HB2', ' B 460  LYS  HE3', -0.402, (-9.27, 27.841, -7.111)), (' A 333  ILE  HB ', ' A 358  CYS  SG ', -0.402, (-13.479, 16.241, -56.202)), (' B 462  LYS  HA ', ' B 462  LYS  HD3', -0.402, (-14.772, 36.492, -5.599)), (' A 512  ILE HG22', ' A 546  PHE  HD1', -0.401, (-23.141, 19.525, -85.723)), (' A 163  LEU HD11', ' A 200  PHE  HE2', -0.401, (-37.65, 30.284, -66.235)), (' B 167  TRP  CZ3', ' B 174  PRO  HD2', -0.401, (-34.429, 8.681, -36.549)), (' A 542  ASP  OD1', ' A 569  LYS  HE3', -0.4, (-21.746, 3.768, -82.674)), (' B 404  GLN HE21', ' B 563  VAL HG22', -0.4, (-20.685, 27.304, -18.836))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
