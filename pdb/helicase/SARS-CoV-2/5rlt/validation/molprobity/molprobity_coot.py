# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  10 ', 'SER', 0.03292277557935318, (11.532000000000007, 43.903000000000006, -54.999)), ('A', ' 219 ', 'LEU', 0.031098036198202582, (-41.169999999999995, 28.959000000000007, -59.21)), ('A', ' 484 ', 'VAL', 0.009221519019134332, (-31.56899999999998, 37.92200000000001, -80.55499999999999)), ('B', '  10 ', 'SER', 0.047507423350435445, (9.728000000000002, 2.879000000000003, -38.656))]
data['omega'] = []
data['rota'] = [('A', '  11 ', 'GLN', 0.03824166009638333, (9.571000000000016, 44.2, -51.64999999999999)), ('A', '  12 ', 'THR', 0.0065031709074959525, (7.49800000000001, 47.447, -51.363)), ('A', '  35 ', 'ILE', 0.23050756073237597, (4.000000000000009, 57.53, -65.994)), ('A', '  46 ', 'ASN', 0.026678110751495863, (-1.7089999999999854, 55.711, -46.061)), ('A', '  69 ', 'SER', 0.23820678481774296, (3.603000000000015, 63.607, -45.206999999999994)), ('A', '  81 ', 'PHE', 0.2513630424811843, (10.924000000000017, 66.172, -52.91899999999998)), ('A', ' 124 ', 'ASN', 0.19080783599911028, (-0.1869999999999976, 34.08900000000001, -72.424)), ('A', ' 151 ', 'ILE', 0.07511490761114625, (-33.04999999999998, 41.771, -63.481)), ('A', ' 157 ', 'VAL', 0.005438480503172722, (-45.55799999999999, 29.988000000000007, -64.759)), ('A', ' 173 ', 'ARG', 0.024548256017245123, (-30.461999999999986, 41.51000000000001, -71.309)), ('A', ' 177 ', 'ASN', 0.2067004809337161, (-27.911999999999985, 29.897, -72.922)), ('A', ' 209 ', 'VAL', 0.13147542638871187, (-38.885999999999996, 30.387, -72.019)), ('A', ' 217 ', 'TYR', 0.07866144642514346, (-38.90399999999998, 24.406000000000006, -56.368)), ('A', ' 226 ', 'VAL', 0.1478022292470885, (-29.617999999999995, 38.424, -60.181999999999995)), ('A', ' 255 ', 'THR', 0.008159601566148922, (3.9780000000000078, -3.3369999999999997, -63.04)), ('A', ' 329 ', 'LYS', 0.2555493603282378, (-10.687000000000001, 3.006000000000004, -54.042)), ('A', ' 344 ', 'ASP', 0.059875928679948884, (-23.313000000000006, 8.536000000000007, -58.904)), ('A', ' 376 ', 'ILE', 0.020711960857488828, (-6.771999999999995, 20.847, -71.433)), ('A', ' 530 ', 'THR', 0.03107733834510628, (-30.110000000000007, 18.012000000000008, -79.778)), ('A', ' 531 ', 'GLN', 0.27950894409758803, (-26.576, 19.125000000000004, -78.91799999999999)), ('A', ' 592 ', 'ILE', 0.028887843512898113, (-31.60399999999999, 18.80100000000001, -103.777)), ('B', '   8 ', 'CYS', 0.2119671512152158, (7.638999999999999, 3.638000000000001, -33.90599999999999)), ('B', '  12 ', 'THR', 0.006827541335713476, (6.386000000000003, 0.3730000000000011, -43.685)), ('B', '  19 ', 'CYS', 0.2939299592388732, (-8.477, -0.620000000000001, -37.514)), ('B', '  35 ', 'ILE', 0.197377984087181, (-1.0870000000000015, -11.284999999999998, -32.001)), ('B', '  68 ', 'MET', 0.002356229585933785, (4.527000000000003, -12.894000000000005, -55.08999999999999)), ('B', '  69 ', 'SER', 0.0697167241836398, (0.846000000000001, -14.048000000000002, -54.449999999999996)), ('B', '  74 ', 'SER', 0.2041527538438832, (-4.514000000000002, -25.15600000000001, -47.378999999999984)), ('B', '  92 ', 'LEU', 0.15295546169271668, (8.782, -3.426999999999998, -46.636)), ('B', '  96 ', 'THR', 0.14847869054261675, (14.213000000000001, -0.4819999999999993, -40.171)), ('B', ' 124 ', 'ASN', 0.1869069641222294, (-5.586999999999996, 12.089000000000002, -23.2)), ('B', ' 146 ', 'LYS', 0.2633872977435616, (-24.394, 8.940000000000007, -37.282)), ('B', ' 151 ', 'ILE', 0.06649592427680051, (-33.855, 8.067000000000007, -42.275)), ('B', ' 166 ', 'SER', 0.12972263446214347, (-41.998, 8.164, -40.798)), ('B', ' 179 ', 'ASN', 0.002071365273359899, (-27.718000000000004, 18.926, -30.304)), ('B', ' 187 ', 'VAL', 0.003150532575091347, (-36.66699999999999, 13.192000000000007, -54.24599999999999)), ('B', ' 188 ', 'THR', 0.17875443688158316, (-35.369000000000014, 14.574000000000003, -57.67299999999999)), ('B', ' 191 ', 'SER', 0.05717344610778802, (-31.164999999999985, 11.746000000000008, -57.124)), ('B', ' 192 ', 'LYS', 0.0, (-31.475000000000005, 14.007000000000005, -53.950999999999986)), ('B', ' 194 ', 'GLN', 0.06550031416047764, (-30.372, 19.653, -50.511)), ('B', ' 195 ', 'ILE', 0.007628313814645141, (-33.251, 21.282000000000007, -48.650999999999996)), ('B', ' 199 ', 'THR', 0.17130339597750455, (-33.639, 20.617000000000004, -35.957)), ('B', ' 220 ', 'ASN', 0.29904377412704847, (-43.82699999999998, 18.942, -48.743)), ('B', ' 256 ', 'LEU', 0.18591733851550912, (2.6350000000000104, 52.885000000000005, -25.581)), ('B', ' 351 ', 'THR', 0.01946395009809046, (-7.106999999999995, 35.03, -45.889)), ('B', ' 353 ', 'GLU', 0.159230885078682, (-6.389999999999993, 40.41, -43.647)), ('B', ' 376 ', 'ILE', 0.02069056640546109, (-11.330999999999996, 25.848000000000006, -25.139999999999993)), ('B', ' 460 ', 'LYS', 0.008600144335426009, (-10.587999999999996, 32.624, -6.487999999999999)), ('B', ' 484 ', 'VAL', 0.2962902303970061, (-37.496, 8.319000000000004, -25.441)), ('B', ' 486 ', 'SER', 0.1293830347398141, (-35.211999999999996, 13.081000000000003, -22.051999999999996))]
data['cbeta'] = [('A', '  81 ', 'PHE', ' ', 0.29594240618556455, (11.441999999999997, 64.956, -52.134999999999984)), ('A', ' 183 ', 'THR', ' ', 0.2596627698955354, (-27.32899999999999, 32.727000000000004, -58.264)), ('A', ' 484 ', 'VAL', ' ', 0.2724213444254048, (-31.37999999999999, 37.762000000000015, -79.003)), ('A', ' 592 ', 'ILE', ' ', 0.3316483996632196, (-32.64600000000001, 18.058000000000014, -102.835)), ('B', ' 275 ', 'GLN', ' ', 0.25073989942743674, (5.212000000000007, 31.36300000000001, -22.631))]
data['probe'] = [(' A 326  PRO  CG ', ' A 329  LYS  HZ2', -0.824, (-8.731, -1.221, -57.522)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.776, (-30.508, 21.018, -80.094)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.743, (-30.19, 21.378, -79.389)), (' B 162  GLU  HG2', ' B 210  VAL HG22', -0.721, (-45.095, 20.678, -34.353)), (' A 445  PRO  HD2', ' A 448  ILE HD12', -0.711, (-17.054, 9.609, -89.726)), (' A 326  PRO  HG2', ' A 329  LYS  HZ2', -0.7, (-8.48, -1.164, -57.52)), (' B 445  PRO  HD2', ' B 448  ILE HD12', -0.681, (-26.649, 36.245, -10.548)), (' A 326  PRO  HB2', ' A 329  LYS  NZ ', -0.657, (-9.794, 0.18, -56.648)), (' A 533  VAL HG11', ' A 560  ARG  HG3', -0.636, (-18.104, 22.943, -83.14)), (' A 244  GLU  HB2', ' A 276  LYS  HB2', -0.636, (9.757, 18.0, -63.127)), (' A 326  PRO  CB ', ' A 329  LYS  HZ2', -0.633, (-9.575, -0.735, -57.501)), (' B 533  VAL HG11', ' B 560  ARG  HG3', -0.629, (-25.756, 23.009, -17.846)), (' A 458  ASP  HB3', ' A 460  LYS  HE2', -0.629, (1.68, 17.803, -89.467)), (' B 486  SER  HB3', ' B 517  SER  HB2', -0.619, (-37.387, 15.356, -22.95)), (' B 279  THR  HB ', ' B 429  MET  HE2', -0.604, (-5.521, 27.594, -20.765)), (' A   7  LEU HD21', ' A 106  PHE  HB2', -0.604, (4.165, 44.086, -65.799)), (' B 244  GLU  HB2', ' B 276  LYS  HB2', -0.6, (7.787, 28.333, -27.219)), (' A 352  LEU HD11', ' B 234  PRO  HD3', -0.595, (-7.135, 12.264, -44.247)), (' A 279  THR  HB ', ' A 429  MET  HE2', -0.592, (0.371, 18.726, -74.117)), (' B 363  LEU HD22', ' B 391  LEU HD21', -0.583, (-6.061, 28.824, -39.338)), (' A 326  PRO  HB2', ' A 329  LYS  HZ2', -0.58, (-9.762, -0.783, -56.78)), (' A 519  ASN  HB3', ' A 530  THR HG21', -0.579, (-31.247, 21.394, -79.595)), (' A 176  LEU HD22', ' A 200  PHE  HB2', -0.572, (-32.288, 31.934, -69.781)), (' A 363  LEU HD22', ' A 391  LEU HD21', -0.57, (-6.932, 18.233, -56.584)), (' B   7  LEU HD21', ' B 106  PHE  HB2', -0.568, (0.201, 2.205, -30.485)), (' A 185  TYR  HD2', ' A 194  GLN  HA ', -0.562, (-31.989, 33.09, -52.985)), (' A 146  LYS  HD3', ' A 227  LEU  HB3', -0.559, (-23.56, 37.531, -63.277)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.553, (-38.552, 28.552, -2.932)), (' B  12  THR  OG1', ' B  26  CYS  HA ', -0.547, (6.267, -0.877, -40.447)), (' A  12  THR  OG1', ' A  26  CYS  HA ', -0.532, (8.021, 47.464, -54.684)), (' B  13  SER  OG ', ' B  44  SER  OG ', -0.526, (2.688, -3.808, -48.684)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.523, (-32.302, 34.652, -21.707)), (' A 215  THR  HA ', ' B 193  VAL HG21', -0.522, (-31.982, 21.061, -56.34)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.517, (-25.703, 11.599, -80.132)), (' B 511  PHE  HB3', ' B 530  THR HG22', -0.516, (-38.006, 28.193, -20.265)), (' A 103  VAL  O  ', ' A 103  VAL HG12', -0.513, (4.544, 48.209, -67.479)), (' A  13  SER  OG ', ' A  44  SER  OG ', -0.513, (3.583, 52.891, -48.422)), (' B 460  LYS  NZ ', ' B 801  HOH  O  ', -0.509, (-8.481, 27.955, -11.064)), (' B 457  TYR  O  ', ' B 460  LYS  HG3', -0.506, (-10.404, 29.427, -7.711)), (' B 504  PRO  HB3', ' B 507  ARG HH21', -0.501, (-46.969, 38.364, -13.021)), (' B   8  CYS  SG ', ' B  99  GLY  O  ', -0.498, (8.873, 0.421, -31.921)), (' A 326  PRO  HD2', ' A 329  LYS  NZ ', -0.496, (-8.611, 0.308, -58.147)), (' B 705  PO4  O2 ', ' B 706  PO4  O1 ', -0.489, (-18.905, 35.058, -21.131)), (' A 280  LEU HD11', ' A 438  LEU  HG ', -0.486, (-1.894, 10.675, -76.882)), (' A 457  TYR  O  ', ' A 460  LYS  HG2', -0.485, (-0.781, 16.249, -88.188)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.484, (-25.431, 19.611, -87.133)), (' A 409  ARG  NH2', ' A 422  PHE  O  ', -0.484, (-7.142, 30.542, -72.681)), (' B 512  ILE  O  ', ' B 546  PHE  HA ', -0.48, (-33.933, 26.117, -15.545)), (' B 103  VAL  O  ', ' B 103  VAL HG12', -0.472, (-0.346, -1.855, -28.773)), (' B 409  ARG  NH2', ' B 422  PHE  O  ', -0.471, (-12.226, 16.205, -24.863)), (' A 561  PHE  CZ ', ' A 585  LEU HD21', -0.471, (-17.214, 19.465, -92.423)), (' A 158  LEU HD12', ' A 162  GLU  HB3', -0.467, (-43.611, 27.896, -70.623)), (' A 263  SER  HA ', ' A 266  VAL HG13', -0.467, (2.012, -0.844, -72.74)), (' B 280  LEU HD23', ' B 399  ILE HG23', -0.466, (-9.514, 33.689, -22.4)), (' B 533  VAL  CG1', ' B 560  ARG  HG3', -0.465, (-25.962, 22.895, -18.084)), (' A 163  LEU  HG ', ' A 211  TYR  HB3', -0.46, (-38.988, 29.369, -66.494)), (' B 182  PHE  HB3', ' B 225  PHE  HB3', -0.46, (-33.044, 15.775, -40.661)), (' B 149  TYR  CD2', ' B 174  PRO  HB3', -0.459, (-29.135, 9.571, -34.804)), (' B  10  SER  HB3', ' B  96  THR  O  ', -0.453, (10.916, 0.467, -38.985)), (' A 122  LEU HD23', ' A 935  HOH  O  ', -0.452, (-2.119, 42.653, -72.862)), (' A 533  VAL  CG1', ' A 560  ARG  HG3', -0.451, (-18.674, 23.083, -82.629)), (' A 185  TYR  CD2', ' A 194  GLN  HA ', -0.451, (-31.796, 33.354, -53.377)), (' A 158  LEU HD11', ' A 164  HIS  CE1', -0.448, (-44.885, 30.51, -71.501)), (' A 156  GLU  HG2', ' A 164  HIS  HB2', -0.447, (-45.325, 34.13, -68.681)), (' B 376  ILE  HA ', ' B 376  ILE HD12', -0.442, (-10.803, 25.379, -26.698)), (' A 326  PRO  HD2', ' A 329  LYS  HZ1', -0.441, (-8.709, 0.635, -57.801)), (' A 480  ILE HG21', ' A 550  THR HG22', -0.44, (-27.561, 33.068, -90.277)), (' A 326  PRO  CD ', ' A 329  LYS  HZ2', -0.439, (-8.914, -0.563, -57.917)), (' A 195  ILE  O  ', ' A 215  THR  OG1', -0.436, (-33.169, 26.0, -55.645)), (' B 451  THR HG21', ' B 585  LEU HD23', -0.433, (-25.392, 27.407, -6.062)), (' A 249  ILE HD11', ' A 270  GLN  HG2', -0.431, (8.736, 4.133, -67.121)), (' A 280  LEU HD23', ' A 399  ILE HG23', -0.429, (-4.275, 12.817, -73.137)), (' B 386  VAL  O  ', ' B 390  ARG  HG2', -0.429, (-5.246, 22.755, -38.63)), (' B 561  PHE  CZ ', ' B 585  LEU HD21', -0.426, (-27.105, 25.848, -7.89)), (' A 149  TYR  HB3', ' A 174  PRO  HD3', -0.426, (-28.748, 40.898, -68.488)), (' A 367  THR HG22', ' A 392  ARG  HB3', -0.423, (1.313, 18.195, -52.469)), (' B 452  VAL HG13', ' B 565  ILE HD11', -0.422, (-22.818, 29.072, -9.294)), (' B 249  ILE HD11', ' B 270  GLN  HG2', -0.421, (4.829, 42.619, -22.648)), (' A 451  THR HG21', ' A 585  LEU HD23', -0.421, (-14.909, 17.73, -93.69)), (' A 376  ILE  HA ', ' A 376  ILE HD12', -0.419, (-6.756, 21.303, -69.769)), (' A 352  LEU HD11', ' B 234  PRO  CD ', -0.417, (-6.775, 11.8, -44.139)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.417, (9.679, -0.294, -32.819)), (' B 146  LYS  NZ ', ' B 229  SER  HA ', -0.416, (-22.245, 13.927, -39.326)), (' B 387  VAL HG13', ' B 391  LEU HD12', -0.415, (-4.978, 27.891, -35.299)), (' B 474 BMET  HB3', ' B 474 BMET  HE2', -0.412, (-39.233, 24.935, -4.039)), (' B   4  ALA  O  ', ' B  24  PHE  HB2', -0.412, (2.674, 4.786, -40.651)), (' A 561  PHE  HZ ', ' A 585  LEU HD21', -0.411, (-17.459, 19.377, -92.427)), (' A 449  VAL  HB ', ' A 463  ALA  HB2', -0.408, (-9.264, 8.287, -90.68)), (' A 498  GLU  HG3', ' A 502  ARG  NH2', -0.408, (-37.173, 14.96, -99.424)), (' B 228  THR HG22', ' B 230  HIS  NE2', -0.408, (-22.265, 17.168, -42.869)), (' A 542  ASP  HA ', ' A 569  LYS  HB2', -0.405, (-21.136, 5.923, -84.195)), (' A 185  TYR  HB2', ' A 224  TYR  CZ ', -0.404, (-33.391, 36.949, -55.156)), (' B 280  LEU HD11', ' B 438  LEU  HG ', -0.403, (-8.757, 35.709, -18.192)), (' B 406  PRO  HB3', ' B 422  PHE  CD2', -0.402, (-14.898, 19.712, -21.18)), (' A 452  VAL HG11', ' A 566  THR HG23', -0.402, (-12.909, 16.109, -87.124)), (' B 542  ASP  HA ', ' B 569  LYS  HB2', -0.401, (-29.422, 39.839, -15.747)), (' A 260  ASP  HA ', ' A 263  SER  OG ', -0.401, (-0.382, -4.948, -73.538)), (' A 387  VAL HG13', ' A 391  LEU HD12', -0.4, (-4.711, 19.511, -59.536)), (' A 106  PHE  HD1', ' A 130  LEU HD21', -0.4, (2.185, 43.259, -65.022))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
