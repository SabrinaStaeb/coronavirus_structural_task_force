# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 484 ', 'VAL', 0.00512602, (-32.129, 37.747, -80.801)), ('B', ' 103 ', 'VAL', 0.050614204736284446, (1.5890000000000017, -1.7279999999999998, -27.197000000000006)), ('B', ' 157 ', 'VAL', 0.08484045513337721, (-47.138, 18.287, -43.79100000000001)), ('B', ' 158 ', 'LEU', 0.000713863453416256, (-49.638999999999996, 18.756999999999998, -40.788)), ('B', ' 283 ', 'PRO', 0.05667847164324433, (-15.244, 32.048, -15.419))]
data['omega'] = []
data['rota'] = [('A', '  12 ', 'THR', 0.0030028260850990672, (7.959000000000001, 46.861, -51.871)), ('A', '  19 ', 'CYS', 0.28942696651307304, (-5.348999999999996, 48.358999999999995, -61.03)), ('A', '  35 ', 'ILE', 0.0, (4.238000000000004, 57.330999999999996, -66.184)), ('A', '  46 ', 'ASN', 0.002773532964505208, (-1.1209999999999933, 55.29699999999998, -46.66000000000001)), ('A', '  65 ', 'LEU', 0.07374526564699065, (7.383999999999998, 64.187, -49.88000000000001)), ('A', '  69 ', 'SER', 0.01954801889200456, (3.9280000000000026, 63.53400000000001, -45.433000000000014)), ('A', '  81 ', 'PHE', 0.06505236519452044, (11.313000000000002, 65.822, -53.009)), ('A', ' 156 ', 'GLU', 0.1151542274674656, (-46.158999999999985, 34.175, -63.921000000000014)), ('A', ' 157 ', 'VAL', 0.04225266714784549, (-46.015999999999984, 30.239, -64.101)), ('A', ' 166 ', 'SER', 0.16558275914966197, (-40.229, 40.562, -66.43300000000002)), ('A', ' 173 ', 'ARG', 0.03237198636869822, (-30.749000000000002, 41.49, -70.999)), ('A', ' 179 ', 'ASN', 0.28198538309062304, (-24.20799999999999, 28.878, -70.70100000000001)), ('A', ' 209 ', 'VAL', 0.00945159699767828, (-39.465, 30.159000000000006, -72.31700000000001)), ('A', ' 217 ', 'TYR', 0.025871103203530584, (-39.201, 24.012999999999995, -56.849)), ('A', ' 230 ', 'HIS', 0.10637245810582753, (-18.120999999999995, 34.242, -57.503)), ('A', ' 247 ', 'VAL', 0.0074266187992043315, (16.918000000000006, 9.758999999999997, -66.051)), ('A', ' 255 ', 'THR', 0.024617936269369558, (4.311000000000005, -3.3830000000000062, -63.32000000000001)), ('A', ' 278 ', 'SER', 0.14935292334923847, (3.846999999999997, 15.864, -69.825)), ('A', ' 307 ', 'THR', 0.07252133347426258, (-9.352, 16.382, -62.837)), ('A', ' 397 ', 'VAL', 0.21320328272994954, (-0.2719999999999958, 14.864, -67.097)), ('A', ' 486 ', 'SER', 0.1627472024899022, (-28.76099999999999, 32.924, -81.79300000000003)), ('A', ' 495 ', 'VAL', 0.23016765293639202, (-34.138000000000005, 19.46, -95.70700000000001)), ('A', ' 502 ', 'ARG', 0.06443504785159468, (-36.221999999999994, 8.588999999999992, -97.16900000000001)), ('A', ' 516 ', 'ASN', 0.0004724195998721716, (-29.246000000000002, 26.415, -79.25200000000001)), ('A', ' 530 ', 'THR', 0.0258387386566028, (-30.417000000000005, 17.85, -79.704)), ('A', ' 531 ', 'GLN', 0.02870742137661678, (-26.854, 18.955, -78.865)), ('A', ' 591 ', 'GLU', 0.004398526632389572, (-29.076999999999998, 16.716000000000005, -103.96300000000001)), ('B', '   8 ', 'CYS', 0.18591226789634063, (7.423999999999999, 3.761000000000002, -32.931000000000004)), ('B', '  19 ', 'CYS', 0.25761328107087605, (-8.435999999999995, -0.6260000000000012, -37.224)), ('B', '  65 ', 'LEU', 0.05740507474121225, (4.026000000000001, -15.399000000000003, -49.294)), ('B', '  69 ', 'SER', 0.0066768021314443276, (1.2750000000000021, -13.622000000000005, -54.00200000000001)), ('B', '  97 ', 'CYS', 0.2244214111701691, (12.319000000000003, -1.6000000000000032, -36.841)), ('B', ' 158 ', 'LEU', 0.14838199772444263, (-49.638999999999996, 18.756999999999998, -40.788)), ('B', ' 160 ', 'ASP', 0.06630177960235956, (-46.301999999999985, 25.176, -40.511)), ('B', ' 162 ', 'GLU', 0.1557936863815886, (-45.064, 20.772999999999996, -37.571)), ('B', ' 164 ', 'HIS', 0.021413664068145863, (-45.872, 13.608, -39.217)), ('B', ' 188 ', 'THR', 0.04260734591197859, (-35.163000000000004, 14.102, -57.89)), ('B', ' 191 ', 'SER', 0.11188944128623377, (-30.91599999999999, 11.345, -57.427)), ('B', ' 192 ', 'LYS', 0.0, (-31.362000000000002, 13.701, -54.308000000000014)), ('B', ' 199 ', 'THR', 0.06852105321495948, (-33.663999999999994, 20.377000000000002, -35.952000000000005)), ('B', ' 219 ', 'LEU', 0.28860428916723774, (-41.38100000000001, 21.231000000000005, -47.483000000000004)), ('B', ' 229 ', 'SER', 0.043342324525531675, (-21.61799999999999, 13.450999999999997, -41.427)), ('B', ' 259 ', 'SER', 0.08639871455632295, (-7.172, 52.639, -23.011)), ('B', ' 261 ', 'GLU', 0.017499136299358096, (-10.670999999999992, 49.638, -20.506)), ('B', ' 278 ', 'SER', 0.15481508020738308, (-0.6609999999999969, 30.43, -22.785)), ('B', ' 289 ', 'SER', 0.004019992775283754, (-13.938000000000002, 38.36, -25.468000000000004)), ('B', ' 307 ', 'THR', 0.0740200968518348, (-10.609999999999998, 30.797999999999995, -33.875)), ('B', ' 327 ', 'ILE', 0.018924146903247806, (-13.336, 46.944, -40.067)), ('B', ' 344 ', 'ASP', 0.0053297606666406665, (-21.795, 39.622, -42.479000000000006)), ('B', ' 347 ', 'LYS', 0.11715275600819432, (-14.773999999999992, 41.466, -45.977)), ('B', ' 397 ', 'VAL', 0.20866785047822353, (-3.592999999999997, 31.766, -26.636)), ('B', ' 416 ', 'THR', 0.22725436734899124, (-18.627000000000006, 10.792, -16.091)), ('B', ' 484 ', 'VAL', 0.003150532575091347, (-38.109, 8.43, -25.421)), ('B', ' 495 ', 'VAL', 0.22744422308061826, (-44.408, 25.272999999999996, -8.739)), ('B', ' 516 ', 'ASN', 0.17942520981686558, (-35.403, 19.823999999999998, -23.948))]
data['cbeta'] = [('A', ' 484 ', 'VAL', ' ', 0.2504819689150602, (-31.982, 37.675, -79.235)), ('A', ' 592 ', 'ILE', ' ', 0.25368263996453577, (-33.423, 17.324999999999996, -102.322))]
data['probe'] = [(' B  12  THR HG22', ' B  14  LEU  H  ', -0.944, (4.068, -0.459, -43.072)), (' A 158  LEU HD11', ' A 164  HIS  CE1', -0.825, (-45.247, 30.716, -71.155)), (' A 158  LEU HD21', ' A 164  HIS  CE1', -0.81, (-47.382, 31.201, -70.104)), (' A 158  LEU HD21', ' A 164  HIS  HE1', -0.709, (-47.095, 31.363, -70.701)), (' A 163  LEU  HG ', ' A 211  TYR  HB3', -0.696, (-39.265, 28.929, -66.716)), (' B 289  SER  HB2', ' B 320  LYS  HD3', -0.692, (-16.04, 40.561, -26.388)), (' B  12  THR HG21', ' B  25  LEU  O  ', -0.673, (3.592, -0.891, -40.633)), (' A 326  PRO  HB2', ' A 329  LYS  NZ ', -0.673, (-9.541, -1.021, -56.731)), (' B   7  LEU HD13', ' B 103  VAL HG22', -0.653, (2.809, -1.114, -30.258)), (' B 511  PHE  HB3', ' B 530  THR HG22', -0.619, (-38.16, 28.01, -20.774)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.618, (-30.876, 21.007, -79.842)), (' A 352  LEU HD11', ' B 234  PRO  HD3', -0.616, (-7.403, 11.946, -44.546)), (' A 326  PRO  HG2', ' A 329  LYS  NZ ', -0.596, (-8.292, -1.162, -57.165)), (' B 279  THR  HB ', ' B 429  MET  HE2', -0.583, (-5.61, 27.751, -20.828)), (' B  13  SER  HB2', ' B  92  LEU  HB2', -0.582, (6.818, -1.99, -47.097)), (' B 313  ALA  O  ', ' B 801  HOH  O  ', -0.573, (-16.216, 33.935, -30.02)), (' A 279  THR  HB ', ' A 429  MET  HE2', -0.573, (0.173, 18.697, -74.215)), (' A 293  ILE HG13', ' A 320  LYS  HB3', -0.57, (-10.751, 5.37, -68.059)), (' A 326  PRO  HB2', ' A 329  LYS  HZ2', -0.556, (-9.479, -1.433, -56.303)), (' A 326  PRO  CG ', ' A 329  LYS  NZ ', -0.552, (-8.556, -1.179, -57.165)), (' B  39  HIS  NE2', ' B 111  THR HG22', -0.55, (-9.486, -3.982, -32.44)), (' B 293  ILE HG13', ' B 320  LYS  HB3', -0.543, (-13.839, 41.473, -29.627)), (' A   9  ASN HD22', ' A 129  ARG  NH2', -0.543, (8.646, 36.887, -58.585)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.538, (-30.618, 21.038, -79.841)), (' A 176  LEU HD22', ' A 200  PHE  HB2', -0.534, (-33.077, 31.877, -70.22)), (' A  39  HIS  NE2', ' A 111  THR HG22', -0.531, (-5.026, 50.958, -66.903)), (' A 158  LEU HD11', ' A 164  HIS  HE1', -0.531, (-46.395, 30.878, -70.984)), (' B  12  THR HG22', ' B  14  LEU  N  ', -0.529, (3.385, -1.043, -43.007)), (' A 326  PRO  HG2', ' A 329  LYS  HZ2', -0.518, (-8.561, -1.61, -56.724)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.517, (-39.065, 28.614, -2.598)), (' A  28  LYS  O  ', ' A  32  ASP  OD2', -0.516, (10.288, 51.453, -64.108)), (' B  13  SER  O  ', ' B  44  SER  HA ', -0.515, (1.667, -1.91, -46.459)), (' A 280  LEU HD11', ' A 438  LEU  HG ', -0.512, (-2.119, 10.424, -77.151)), (' A 329  LYS  HB3', ' A 354  GLN  HB3', -0.505, (-7.624, 3.388, -54.647)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.505, (2.932, 42.102, -29.324)), (' A 244  GLU  HB2', ' A 276  LYS  HB2', -0.501, (10.311, 17.572, -63.327)), (' A 519  ASN  HB3', ' A 530  THR HG21', -0.499, (-31.471, 21.457, -79.383)), (' B 458  ASP  HB2', ' B 460  LYS  HE2', -0.497, (-9.251, 27.941, -7.065)), (' A 297  LEU HD11', ' A 324  TYR  HB3', -0.497, (-7.559, -0.917, -66.155)), (' A 289  SER  HB3', ' A 320  LYS  HD3', -0.494, (-11.643, 6.456, -72.012)), (' A 158  LEU HD12', ' A 162  GLU  HB3', -0.492, (-44.046, 27.897, -70.241)), (' A 326  PRO  HD2', ' A 329  LYS  HZ1', -0.492, (-8.61, -0.12, -57.973)), (' B 244  GLU  HB2', ' B 276  LYS  HB2', -0.491, (7.36, 28.593, -27.145)), (' B 109  ILE HD13', ' B 134  ALA  HB2', -0.49, (-6.24, 6.942, -28.51)), (' B 297  LEU HD11', ' B 324  TYR  HB3', -0.483, (-10.395, 47.903, -29.659)), (' A 451  THR HG21', ' A 585  LEU HD23', -0.479, (-15.004, 17.384, -93.617)), (' A 326  PRO  CB ', ' A 329  LYS  NZ ', -0.477, (-9.292, -1.075, -56.959)), (' B  49  VAL HG23', ' B  58  THR HG22', -0.477, (-9.001, -11.729, -46.862)), (' A 109  ILE HD13', ' A 134  ALA  HB2', -0.476, (-1.561, 39.141, -68.079)), (' B 451  THR HG21', ' B 585  LEU HD23', -0.475, (-25.786, 27.604, -6.069)), (' A 367  THR HG22', ' A 392  ARG  HB3', -0.474, (1.389, 18.013, -52.757)), (' B 158  LEU  CD1', ' B 164  HIS  ND1', -0.469, (-49.913, 14.891, -39.387)), (' A  19  CYS  CB ', ' A  23  PRO  HD2', -0.468, (-3.283, 46.826, -60.183)), (' B 158  LEU HD13', ' B 164  HIS  ND1', -0.466, (-49.272, 14.527, -39.336)), (' B 259  SER  HB2', ' B 261  GLU  HG2', -0.465, (-9.815, 52.045, -22.932)), (' A 425  VAL HG12', ' A 429  MET  HE3', -0.464, (-1.661, 20.941, -73.42)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.461, (9.697, 0.017, -32.531)), (' A 326  PRO  CB ', ' A 329  LYS  HZ2', -0.454, (-9.266, -1.513, -56.531)), (' A 516  ASN  ND2', ' A 809  HOH  O  ', -0.452, (-28.314, 29.884, -77.795)), (' A  19  CYS  HB3', ' A  23  PRO  HD2', -0.452, (-3.131, 46.503, -59.873)), (' B  19  CYS  CB ', ' B  23  PRO  HD2', -0.452, (-6.091, 0.418, -37.718)), (' A 182  PHE  HB3', ' A 225  PHE  HB3', -0.452, (-31.374, 33.525, -62.55)), (' A 480  ILE HG21', ' A 550  THR HG22', -0.449, (-28.051, 32.882, -89.959)), (' B 163  LEU HD21', ' B 219  LEU HD11', -0.448, (-42.537, 19.394, -43.363)), (' A 386  VAL HG13', ' A 390  ARG  NE ', -0.447, (-8.242, 25.706, -56.471)), (' B 280  LEU HD11', ' B 438  LEU  HG ', -0.445, (-8.634, 35.559, -18.291)), (' A 326  PRO  CG ', ' A 329  LYS  HZ1', -0.444, (-8.756, -0.389, -57.292)), (' B   8  CYS  SG ', ' B  99  GLY  O  ', -0.443, (9.152, 0.901, -31.113)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.44, (-12.766, 7.272, -52.667)), (' A 533  VAL HG11', ' A 560  ARG  HG3', -0.44, (-18.569, 22.791, -82.951)), (' B 102  ASN  C  ', ' B 104  THR  H  ', -0.437, (1.687, -1.541, -24.881)), (' A 289  SER  O  ', ' A 293  ILE HG12', -0.436, (-8.815, 6.378, -69.11)), (' A 127  THR HG23', ' A 130  LEU  H  ', -0.429, (4.343, 37.292, -65.725)), (' B 480  ILE HG21', ' B 550  THR HG22', -0.425, (-36.785, 12.503, -13.787)), (' B 425  VAL HG12', ' B 429  MET  HE3', -0.424, (-6.922, 25.463, -21.871)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.422, (-25.811, 19.356, -87.047)), (' A 326  PRO  CG ', ' A 329  LYS  HZ2', -0.422, (-8.811, -1.273, -56.419)), (' B 154  VAL HG13', ' B 163  LEU HD22', -0.418, (-43.837, 16.317, -43.264)), (' B 249  ILE HG23', ' B 273  GLY  HA3', -0.417, (5.011, 39.006, -26.027)), (' A 181  VAL HG22', ' A 199  THR HG22', -0.417, (-27.332, 27.308, -65.96)), (' B 289  SER  O  ', ' B 293  ILE HG12', -0.417, (-12.321, 40.276, -27.762)), (' A 163  LEU HD11', ' A 200  PHE  HE2', -0.416, (-37.993, 30.794, -66.557)), (' B 445  PRO  HB3', ' B 468  SER  HB3', -0.415, (-27.982, 40.031, -7.941)), (' B 283  PRO  HG2', ' B 461  LEU HD13', -0.415, (-13.922, 33.315, -12.318)), (' B 512  ILE  O  ', ' B 546  PHE  HA ', -0.413, (-34.155, 26.069, -15.403)), (' A 326  PRO  CD ', ' A 329  LYS  HZ1', -0.413, (-8.736, -0.325, -57.892)), (' B 533  VAL HG11', ' B 560  ARG  HG3', -0.412, (-25.934, 22.733, -17.526)), (' B 452  VAL HG11', ' B 566  THR HG23', -0.41, (-22.28, 30.043, -11.855)), (' B 533  VAL HG11', ' B 560  ARG  O  ', -0.41, (-25.598, 24.109, -16.351)), (' B 376  ILE HG12', ' B 425  VAL HG11', -0.409, (-7.521, 25.488, -24.466)), (' B  16  CYS  O  ', ' B  22  ARG  HA ', -0.408, (-5.605, -0.274, -40.555)), (' B 146  LYS  HD3', ' B 229  SER  HB3', -0.408, (-21.932, 11.785, -39.306)), (' B  19  CYS  HB3', ' B  23  PRO  HD2', -0.407, (-6.237, 1.005, -37.459)), (' B 163  LEU HD11', ' B 219  LEU HD11', -0.407, (-41.442, 18.768, -42.634)), (' A 260  ASP  HA ', ' A 263  SER  OG ', -0.405, (0.188, -5.277, -73.801)), (' A 445  PRO  HB3', ' A 468  SER  HB3', -0.405, (-17.94, 5.198, -91.428)), (' A 263  SER  O  ', ' A 266  VAL HG22', -0.402, (3.481, -0.405, -74.62)), (' A 452  VAL HG11', ' A 566  THR HG23', -0.401, (-13.576, 15.612, -86.994)), (' A 106  PHE  HD1', ' A 130  LEU HD21', -0.401, (2.355, 42.728, -64.945)), (' A 163  LEU HD11', ' A 200  PHE  CE2', -0.401, (-37.914, 31.083, -66.544)), (' A 533  VAL HG11', ' A 560  ARG  O  ', -0.4, (-17.69, 22.084, -83.72))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
