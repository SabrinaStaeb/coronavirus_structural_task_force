# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '   6 ', 'VAL', 0.08131877500292263, (3.5929999999999955, 40.861, -59.185)), ('A', '  45 ', 'VAL', 0.010141295765598655, (-0.5640000000000063, 51.706, -45.073)), ('A', ' 195 ', 'ILE', 0.010264066868453468, (-34.672999999999995, 28.347, -54.156)), ('A', ' 218 ', 'LYS', 0.005420554010404695, (-43.55299999999999, 25.173999999999992, -56.331)), ('A', ' 283 ', 'PRO', 0.03304339170010758, (-8.210999999999999, 13.638999999999992, -81.157)), ('A', ' 484 ', 'VAL', 0.009725027362195672, (-32.78799999999998, 37.402999999999984, -80.495)), ('B', '   6 ', 'VAL', 0.09819310159342191, (2.065, 5.224, -34.692)), ('B', '  10 ', 'SER', 0.02040290698305001, (9.566999999999995, 3.061999999999995, -37.441)), ('B', '  27 ', 'CYS', 0.013788706854203, (6.483000000000002, -5.3440000000000065, -38.4)), ('B', '  48 ', 'TYR', 0.018179495784446092, (-2.6959999999999944, -9.711000000000004, -46.61899999999999)), ('B', ' 195 ', 'ILE', 0.0953581455865178, (-32.635999999999996, 21.35, -48.609))]
data['omega'] = []
data['rota'] = [('B', '   7 ', 'LEU', 0.19795082109423479, (3.8779999999999983, 3.4549999999999965, -31.709)), ('B', '  69 ', 'SER', 0.12293815732308179, (0.8159999999999981, -13.624999999999998, -53.924)), ('B', '  96 ', 'THR', 0.0027198671887163073, (14.373999999999995, -0.7560000000000002, -39.447)), ('B', ' 103 ', 'VAL', 0.03227184897402735, (1.255, -1.967000000000004, -26.827)), ('B', ' 104 ', 'THR', 0.2437744606954809, (-1.6, -2.127, -24.224)), ('B', ' 155 ', 'ARG', 0.0983330700078041, (-45.46899999999999, 11.348999999999997, -44.026)), ('B', ' 188 ', 'THR', 0.057208096215313343, (-35.56599999999999, 13.782999999999998, -57.682)), ('B', ' 191 ', 'SER', 0.11593109539310675, (-30.988999999999997, 11.285999999999996, -57.159)), ('B', ' 192 ', 'LYS', 0.0, (-31.519999999999996, 13.661999999999995, -54.12499999999999)), ('B', ' 215 ', 'THR', 0.02680910688550866, (-33.76200000000001, 27.756999999999998, -44.042)), ('B', ' 220 ', 'ASN', 0.05113953894716744, (-43.86, 18.304999999999996, -48.611999999999995)), ('B', ' 231 ', 'THR', 0.08302756907091159, (-15.003999999999994, 12.169999999999993, -43.87)), ('B', ' 259 ', 'SER', 0.07637536507960159, (-7.207999999999997, 52.61699999999998, -22.86)), ('B', ' 289 ', 'SER', 0.2948335809779469, (-13.851, 38.258, -25.658)), ('B', ' 327 ', 'ILE', 0.10956909839847848, (-13.491000000000005, 46.75399999999999, -40.044)), ('B', ' 359 ', 'THR', 0.24851948482666059, (-14.165, 28.109, -37.233)), ('B', ' 486 ', 'SER', 0.2126022593242104, (-35.589999999999996, 13.119, -22.121)), ('A', '  46 ', 'ASN', 0.23321519544001992, (-2.081999999999997, 55.13899999999999, -46.006)), ('A', '  69 ', 'SER', 0.2069871461377504, (3.162999999999994, 62.996, -45.30599999999999)), ('A', ' 156 ', 'GLU', 0.1976098774995291, (-47.019999999999975, 34.07499999999999, -63.941)), ('A', ' 201 ', 'GLU', 0.12219146555973902, (-35.082999999999984, 28.222999999999992, -72.998)), ('A', ' 259 ', 'SER', 0.06375131768273404, (-3.3779999999999983, -6.3770000000000024, -69.675)), ('A', ' 344 ', 'ASP', 0.06090756904969326, (-23.667000000000005, 7.487999999999996, -58.251)), ('A', ' 485 ', 'SER', 0.053336883948615875, (-29.195999999999998, 36.561, -81.72)), ('A', ' 502 ', 'ARG', 0.0, (-36.43599999999997, 7.873999999999995, -97.05)), ('A', ' 517 ', 'SER', 0.28220278947615085, (-32.877, 27.910999999999987, -81.095)), ('A', ' 530 ', 'THR', 0.0258387386566028, (-30.997000000000014, 17.454, -79.584)), ('A', ' 589 ', 'SER', 0.1651411838338937, (-23.011000000000003, 14.807999999999996, -101.815))]
data['cbeta'] = [('B', ' 534 ', 'ASP', ' ', 0.26337658907591255, (-26.106, 21.927, -23.357999999999997))]
data['probe'] = [(' B  27  CYS  SG ', ' B 869  HOH  O  ', -1.194, (8.131, -5.21, -42.418)), (' B   5  CYS  HG ', ' B 704   ZN ZN  ', -0.953, (6.159, 0.085, -35.315)), (' B  47  PRO  O  ', ' B 801  HOH  O  ', -0.925, (-3.551, -9.06, -50.354)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.815, (-32.753, 34.791, -21.919)), (' B  12  THR HG21', ' B  25  LEU  O  ', -0.786, (3.721, -1.79, -40.257)), (' A  60  VAL  HB ', ' A 914  HOH  O  ', -0.76, (-0.833, 57.935, -56.601)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.742, (9.766, -0.433, -32.583)), (' B  51  ASN  OD1', ' B 802  HOH  O  ', -0.725, (-2.144, -11.097, -54.179)), (' B   5  CYS  SG ', ' B 704   ZN ZN  ', -0.702, (5.628, 0.451, -34.861)), (' A 368  ALA  O  ', ' A 393  ALA  HA ', -0.69, (1.026, 14.394, -56.51)), (' A 275  GLN  O  ', ' A 395  HIS  ND1', -0.675, (6.525, 12.519, -63.969)), (' B   7  LEU HD12', ' B 103  VAL HG22', -0.672, (2.582, -0.833, -29.834)), (' B   8  CYS  SG ', ' B  99  GLY  O  ', -0.669, (8.822, -0.1, -31.053)), (' B   7  LEU  CD1', ' B 103  VAL HG22', -0.66, (1.599, -1.027, -29.869)), (' A 367  THR  HA ', ' A 392  ARG  O  ', -0.648, (-0.728, 16.096, -54.186)), (' B 279  THR  HB ', ' B 429  MET  HE2', -0.641, (-6.179, 28.027, -20.553)), (' B 508  LYS  HD3', ' B 990  HOH  O  ', -0.634, (-36.34, 41.233, -17.872)), (' A 534  ASP  OD2', ' A 802  HOH  O  ', -0.63, (-21.55, 25.022, -80.242)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.63, (2.618, 42.053, -29.395)), (' A 276  LYS  O  ', ' A 395  HIS  HA ', -0.619, (4.271, 14.664, -62.919)), (' B  32  ASP  O  ', ' B  36  SER  OG ', -0.617, (-1.119, -7.559, -29.507)), (' B 376  ILE HG22', ' B 400  GLY  HA3', -0.616, (-11.266, 27.576, -23.151)), (' A 146  LYS  NZ ', ' A 228  THR  O  ', -0.614, (-22.72, 34.217, -62.008)), (' A  13  SER  OG ', ' A  44  SER  HB2', -0.612, (2.556, 51.108, -48.572)), (' A   7  LEU HD13', ' A 103  VAL HG22', -0.612, (5.697, 45.824, -65.081)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.607, (-26.357, 11.402, -80.223)), (' A 269  TYR  OH ', ' A 294  GLY  HA3', -0.604, (-3.879, 3.39, -69.9)), (' A 304  ILE HG12', ' A 370  ILE  HB ', -0.604, (-1.927, 8.645, -61.014)), (' B 702  VVG  F1 ', ' B 702  VVG  O1 ', -0.598, (11.916, -13.329, -42.481)), (' B  12  THR HG21', ' B  26  CYS  HA ', -0.594, (5.54, -1.699, -39.393)), (' A  37  THR  OG1', ' A  39  HIS  HB2', -0.593, (-2.372, 52.543, -64.759)), (' B 220  ASN  N  ', ' B 220  ASN  OD1', -0.592, (-42.861, 19.401, -49.466)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.591, (5.991, -1.403, -40.122)), (' B 277  TYR  HA ', ' B 396  TYR  O  ', -0.58, (-0.267, 30.167, -26.924)), (' B  48  TYR  O  ', ' B 804  HOH  O  ', -0.578, (-4.629, -10.095, -44.185)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.568, (-26.195, 19.398, -87.043)), (' B  13  SER  O  ', ' B  44  SER  HA ', -0.567, (1.667, -2.054, -46.207)), (' A  21  ARG  NH1', ' A 812  HOH  O  ', -0.562, (-11.448, 41.015, -57.631)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.561, (-31.132, 20.898, -79.393)), (' A 235  LEU HD21', ' A 382  TYR  CE2', -0.548, (-8.252, 32.22, -60.384)), (' A 334  ILE HD12', ' A 348  VAL HG13', -0.546, (-20.384, 12.133, -53.997)), (' B   2  VAL  N  ', ' B 820  HOH  O  ', -0.543, (1.928, 1.745, -48.243)), (' A 327  ILE  O  ', ' A 803  HOH  O  ', -0.542, (-16.237, 2.719, -55.003)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.539, (-31.45, 20.752, -79.633)), (' A 152  ALA  HB2', ' A 167  TRP  CZ3', -0.533, (-34.567, 37.688, -66.883)), (' B   7  LEU HD21', ' B 106  PHE  HB2', -0.529, (-0.258, 2.364, -30.174)), (' B 152  ALA  HB2', ' B 167  TRP  CH2', -0.525, (-36.051, 10.337, -38.021)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.521, (-13.232, 7.254, -52.536)), (' A 163  LEU HD23', ' A 211  TYR  CD2', -0.517, (-40.655, 27.992, -65.166)), (' A 561  PHE  CD2', ' A 581  LEU HD22', -0.516, (-15.704, 21.549, -91.552)), (' A 304  ILE  HA ', ' A 370  ILE  O  ', -0.515, (-3.547, 10.553, -59.543)), (' B 195  ILE  O  ', ' B 195  ILE HG23', -0.512, (-34.183, 21.483, -46.743)), (' B 152  ALA  HB2', ' B 167  TRP  CZ3', -0.507, (-36.257, 10.026, -38.715)), (' A  83  LEU  O  ', ' A  89  VAL  HA ', -0.506, (7.386, 58.062, -56.867)), (' A   4  ALA  O  ', ' A  24  PHE  HB2', -0.505, (2.843, 42.7, -54.601)), (' B   5  CYS  HB2', ' B  26  CYS  HB3', -0.504, (6.43, 0.648, -37.531)), (' B 447  GLU  OE2', ' B 805  HOH  O  ', -0.504, (-29.422, 37.393, -2.173)), (' A  31  TYR  CE2', ' A  87  GLY  HA2', -0.502, (10.159, 56.456, -64.33)), (' B 377  SER  O  ', ' B 406  PRO  HA ', -0.501, (-15.703, 21.352, -23.899)), (' A 582  TYR  OH ', ' A 589  SER  HB2', -0.5, (-22.407, 17.43, -102.54)), (' A 281  GLN  HG3', ' A 402  PRO  HD2', -0.498, (-4.359, 18.162, -79.271)), (' B   5  CYS  O  ', ' B   9  ASN  N  ', -0.498, (6.164, 5.056, -35.267)), (' B 376  ILE HG12', ' B 425  VAL HG11', -0.495, (-7.291, 25.09, -24.155)), (' B  47  PRO  O  ', ' B  49  VAL HG12', -0.495, (-5.042, -9.685, -49.458)), (' B 279  THR  HB ', ' B 429  MET  CE ', -0.493, (-6.158, 27.401, -20.83)), (' B 333  ILE  HB ', ' B 358  CYS  SG ', -0.49, (-12.07, 30.707, -41.555)), (' A 277  TYR  HA ', ' A 396  TYR  O  ', -0.488, (2.227, 16.25, -66.032)), (' A  34  VAL  HA ', ' A  39  HIS  O  ', -0.487, (-0.871, 55.011, -63.458)), (' A  16  CYS  SG ', ' A  18  ALA  HB3', -0.486, (-4.489, 51.597, -60.985)), (' A 333  ILE  HB ', ' A 358  CYS  SG ', -0.482, (-14.29, 15.902, -56.083)), (' A 303  ARG  NH1', ' A 353  GLU  O  ', -0.48, (-7.363, 9.323, -52.614)), (' A 280  LEU HD11', ' A 438  LEU  HG ', -0.479, (-2.84, 10.212, -76.941)), (' B 211  TYR  CD1', ' B 211  TYR  O  ', -0.478, (-39.479, 23.392, -38.215)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.477, (-38.755, 28.549, -2.74)), (' A 151  ILE HG12', ' A 226  VAL HG22', -0.476, (-31.421, 40.122, -60.558)), (' A 175  PRO  HG2', ' A 180  TYR  CE1', -0.475, (-26.002, 33.783, -72.717)), (' B  26  CYS  O  ', ' B  29  CYS  N  ', -0.474, (5.284, -3.755, -35.762)), (' B 184  GLY  C  ', ' B 195  ILE HG22', -0.474, (-33.503, 18.365, -47.494)), (' A 296  ALA  O  ', ' A 300  PRO  HA ', -0.473, (-2.447, 1.123, -61.108)), (' B 512  ILE  O  ', ' B 546  PHE  HA ', -0.471, (-34.347, 26.345, -15.185)), (' A 406  PRO  HB3', ' A 422  PHE  CD2', -0.47, (-9.584, 26.754, -76.771)), (' A  33  HIS  HA ', ' A 107  ASN  OD1', -0.469, (1.548, 50.71, -65.857)), (' A 406  PRO  HB3', ' A 422  PHE  CE2', -0.468, (-10.509, 26.633, -77.057)), (' A 261  GLU  OE1', ' A 324  TYR  OH ', -0.466, (-11.161, -2.263, -72.208)), (' A 307  THR  HA ', ' A 358  CYS  O  ', -0.465, (-11.498, 16.445, -61.642)), (' B 372  VAL  CG1', ' B 399  ILE HD12', -0.462, (-9.003, 34.156, -27.082)), (' B 445  PRO  HG2', ' B 448  ILE HD12', -0.461, (-27.343, 36.016, -9.513)), (' B  26  CYS  O  ', ' B  27  CYS  C  ', -0.46, (5.991, -4.611, -36.834)), (' B 103  VAL  CG1', ' B 103  VAL  O  ', -0.457, (-0.42, -2.464, -27.938)), (' A   5  CYS  HB2', ' A  26  CYS  HB3', -0.457, (8.163, 45.143, -56.868)), (' A 376  ILE HG12', ' A 425  VAL HG11', -0.457, (-3.841, 20.422, -70.938)), (' A 282  GLY  O  ', ' A 288  LYS  HD3', -0.457, (-7.955, 13.604, -77.351)), (' B 254  PRO  HB3', ' B 298  TYR  CE2', -0.456, (2.09, 45.251, -24.96)), (' A 128  GLU  OE2', ' A 239  THR  N  ', -0.456, (1.141, 28.595, -64.092)), (' A   7  LEU HD21', ' A 106  PHE  HB2', -0.456, (2.93, 43.379, -65.527)), (' A 183  THR  N  ', ' A 226  VAL  O  ', -0.455, (-29.704, 33.129, -60.582)), (' A  12  THR HG21', ' A  25  LEU  O  ', -0.454, (5.653, 48.501, -55.368)), (' B 502  ARG  NH2', ' B 832  HOH  O  ', -0.451, (-44.963, 29.278, -5.441)), (' A 558  VAL HG13', ' A 961  HOH  O  ', -0.45, (-12.089, 27.604, -88.951)), (' A 127  THR HG22', ' A 130  LEU  HB2', -0.45, (4.107, 38.389, -66.882)), (' B 103  VAL  O  ', ' B 103  VAL HG13', -0.449, (-0.66, -2.402, -28.126)), (' B  14  LEU  HB2', ' B  25  LEU  O  ', -0.448, (3.184, -2.051, -40.31)), (' B 510  VAL HG21', ' B 541  TYR  CG ', -0.446, (-32.305, 34.565, -20.734)), (' B 280  LEU HD11', ' B 438  LEU  HG ', -0.439, (-8.79, 35.552, -18.442)), (' A  59  ASP  OD1', ' A  61  THR  OG1', -0.438, (-0.13, 62.053, -61.784)), (' A 260  ASP  HA ', ' A 263  SER  OG ', -0.435, (-1.03, -5.777, -73.825)), (' B 378  MET  O  ', ' B 407  ALA  HB2', -0.434, (-16.218, 20.434, -28.081)), (' A 181  VAL HG11', ' A 197  GLU  OE1', -0.432, (-26.51, 26.873, -61.516)), (' B 270  GLN  O  ', ' B 274  MET  HG3', -0.431, (5.284, 38.274, -22.255)), (' A 405  LEU HD13', ' A 534  ASP  OD1', -0.431, (-18.533, 24.615, -78.299)), (' A 585  LEU HD22', ' A 587  PHE  CZ ', -0.431, (-18.14, 15.672, -93.306)), (' B 516  ASN  ND2', ' B 835  HOH  O  ', -0.43, (-33.136, 16.311, -24.221)), (' A   4  ALA  O  ', ' A  24  PHE  CB ', -0.43, (3.396, 42.693, -54.602)), (' A 289  SER  O  ', ' A 293  ILE HG12', -0.43, (-9.665, 5.934, -68.602)), (' B 452  VAL HG13', ' B 565  ILE HD11', -0.428, (-23.294, 28.883, -9.262)), (' A 283  PRO  HG2', ' A 461  LEU HD13', -0.426, (-5.928, 12.585, -83.809)), (' A  44  SER  O  ', ' A  46  ASN  N  ', -0.426, (-1.615, 52.841, -46.937)), (' A  44  SER  O  ', ' A  45  VAL  C  ', -0.425, (-1.886, 52.431, -46.7)), (' A 451  THR HG21', ' A 585  LEU HD23', -0.423, (-15.856, 17.051, -93.48)), (' A 308  ALA  O  ', ' A 359  THR  HA ', -0.422, (-13.729, 19.036, -62.912)), (' B  77  PRO  HB2', ' B  78  PRO  HD2', -0.419, (4.283, -23.557, -54.718)), (' B 505  ALA  O  ', ' B 508  LYS  HG2', -0.419, (-39.878, 39.921, -14.933)), (' B   7  LEU HD12', ' B 103  VAL  CG2', -0.419, (2.526, -1.273, -29.699)), (' B 367  THR  HA ', ' B 392  ARG  O  ', -0.417, (1.473, 30.692, -38.766)), (' B 278  SER  HB2', ' B 436  MET  HE2', -0.416, (-1.964, 32.966, -21.58)), (' B 284  PRO  HG2', ' B 566  THR HG21', -0.416, (-20.835, 30.999, -13.806)), (' A  64  TYR  O  ', ' A  70  TYR  HA ', -0.416, (3.447, 63.829, -49.907)), (' A  12  THR  OG1', ' A  26  CYS  HA ', -0.416, (7.585, 47.074, -55.127)), (' B  16  CYS  O  ', ' B  22  ARG  HA ', -0.415, (-5.696, 0.08, -40.506)), (' A 512  ILE  HA ', ' A 531  GLN  O  ', -0.413, (-26.944, 19.421, -81.699)), (' A 117  ALA  O  ', ' A 120  TYR  N  ', -0.411, (-6.728, 38.227, -75.845)), (' A 217  TYR  CE1', ' B 217  TYR  HD1', -0.41, (-38.624, 24.712, -50.647)), (' B 133  PHE  HA ', ' B 849  HOH  O  ', -0.41, (-4.165, 8.607, -35.054)), (' B  12  THR HG22', ' B  14  LEU  H  ', -0.409, (3.902, -1.313, -42.552)), (' A 510  VAL HG21', ' A 541  TYR  CG ', -0.409, (-25.901, 11.329, -80.233)), (' B 254  PRO  HB3', ' B 298  TYR  CZ ', -0.409, (2.425, 45.958, -24.727)), (' A 252  LEU  HB3', ' A 299  TYR  CD2', -0.408, (4.34, 4.566, -61.639)), (' B  15  ARG  HG3', ' B  24  PHE  CD2', -0.407, (-0.088, 1.753, -43.245)), (' A 351  THR HG23', ' A 364  PRO  HG3', -0.406, (-10.703, 15.393, -51.339)), (' A 490  ARG  HB2', ' A 491  PRO  HD3', -0.406, (-37.115, 27.696, -92.413)), (' B 160  ASP  OD2', ' B 161  ARG  N  ', -0.405, (-43.674, 25.677, -40.503)), (' B  28  LYS  O  ', ' B  32  ASP  OD1', -0.405, (5.08, -6.256, -32.219)), (' B 136  GLU  OE2', ' B 235  LEU  N  ', -0.404, (-5.316, 11.896, -38.692)), (' B 544  VAL  O  ', ' B 572  ILE  HA ', -0.403, (-33.591, 32.636, -12.104)), (' B 115  THR  HA ', ' B 411  LEU  O  ', -0.403, (-20.474, 5.548, -25.229)), (' B 414  LYS  NZ ', ' B 845  HOH  O  ', -0.402, (-18.965, -1.526, -21.22)), (' A  18  ALA  HB1', ' A  39  HIS  CD2', -0.402, (-5.954, 52.454, -62.904)), (' B  50  CYS  SG ', ' B  71  TYR  HA ', -0.402, (-4.225, -17.784, -49.99)), (' B 177  ASN  HB3', ' B 516  ASN  ND2', -0.402, (-33.417, 16.936, -26.609)), (' B 307  THR  HA ', ' B 358  CYS  O  ', -0.4, (-11.858, 31.15, -35.847)), (' B   5  CYS  SG ', ' B  29  CYS  HB2', -0.4, (4.537, -0.722, -35.378))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
