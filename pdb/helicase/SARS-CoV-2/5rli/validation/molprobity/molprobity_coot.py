# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '   6 ', 'VAL', 0.058537757389587664, (3.556000000000002, 41.147000000000006, -59.11899999999999)), ('A', '   9 ', 'ASN', 0.020950600079899042, (8.932000000000006, 40.119, -56.82099999999999)), ('A', '  48 ', 'TYR', 0.0068866393942389, (-0.7120000000000042, 58.460999999999984, -51.61699999999999)), ('A', '  67 ', 'GLY', 0.060623231826982385, (8.596000000000004, 65.343, -44.38699999999999)), ('A', ' 195 ', 'ILE', 0.09651183157694126, (-34.654999999999994, 28.871, -53.787)), ('A', ' 218 ', 'LYS', 0.017904973046766314, (-43.39499999999999, 24.952999999999996, -57.45399999999999)), ('A', ' 484 ', 'VAL', 0.005306900852146487, (-32.76, 37.744, -80.292)), ('B', '  92 ', 'LEU', 0.03589935423765824, (8.763000000000002, -3.2670000000000012, -46.644)), ('B', ' 103 ', 'VAL', 0.029565760177178872, (1.5770000000000026, -1.5229999999999997, -27.292999999999996)), ('B', ' 215 ', 'THR', 0.001842311766641131, (-33.25500000000001, 27.543999999999997, -43.65299999999999))]
data['omega'] = []
data['rota'] = [('A', '   7 ', 'LEU', 0.12663506892479978, (6.2250000000000005, 41.56, -61.899)), ('A', '  12 ', 'THR', 0.0, (7.002000000000002, 47.029, -51.356999999999985)), ('A', '  20 ', 'ILE', 0.11460809052406666, (-9.189999999999992, 46.286, -59.755)), ('A', '  22 ', 'ARG', 0.1423835387448596, (-4.700999999999997, 46.101, -56.17099999999999)), ('A', '  35 ', 'ILE', 0.04037217940424937, (3.419999999999998, 57.277, -65.99)), ('A', '  46 ', 'ASN', 0.18386516004135348, (-2.1880000000000015, 54.866, -46.29)), ('A', '  81 ', 'PHE', 0.10037341244546955, (10.321000000000002, 65.457, -52.676)), ('A', ' 148 ', 'SER', 0.21797891209295006, (-24.864999999999995, 45.095, -64.94)), ('A', ' 156 ', 'GLU', 0.14400082473083972, (-47.182999999999986, 33.661, -64.766)), ('A', ' 173 ', 'ARG', 0.0, (-31.52799999999999, 41.135000000000005, -70.484)), ('A', ' 183 ', 'THR', 0.2627435586212786, (-29.944000000000003, 32.077, -58.743)), ('A', ' 201 ', 'GLU', 0.1674571126409981, (-34.455, 28.046, -72.743)), ('A', ' 209 ', 'VAL', 0.037897640879329286, (-39.495999999999995, 30.166000000000004, -71.686)), ('A', ' 217 ', 'TYR', 0.06835832218930724, (-39.766999999999996, 24.08, -56.391)), ('A', ' 236 ', 'SER', 0.005359990245779045, (-0.7509999999999977, 31.852000000000004, -55.748999999999995)), ('A', ' 255 ', 'THR', 0.011532401662370684, (3.7790000000000026, -3.399999999999995, -62.98899999999998)), ('A', ' 289 ', 'SER', 0.09164146764703068, (-10.246999999999996, 8.156, -70.897)), ('A', ' 344 ', 'ASP', 0.03841825021496665, (-23.607, 7.911, -58.328999999999986)), ('A', ' 502 ', 'ARG', 0.057832621052528045, (-36.53, 8.415000000000006, -96.521)), ('A', ' 530 ', 'THR', 0.02219948638348623, (-30.976, 17.78000000000001, -79.292)), ('A', ' 592 ', 'ILE', 0.005740122530653331, (-33.31400000000001, 18.514000000000003, -102.90599999999998)), ('B', '   7 ', 'LEU', 0.13310556150467176, (3.6020000000000008, 3.982000000000002, -32.672)), ('B', '  11 ', 'GLN', 0.28268196311941357, (8.363000000000001, 3.3340000000000014, -42.172)), ('B', '  12 ', 'THR', 0.03533294796373441, (5.9570000000000025, 0.5609999999999982, -43.468)), ('B', '  68 ', 'MET', 0.0004556059161335004, (4.1760000000000055, -13.195000000000004, -55.340999999999994)), ('B', '  96 ', 'THR', 0.1391691082276137, (14.016000000000002, -0.3119999999999976, -39.995)), ('B', ' 124 ', 'ASN', 0.15561494153587474, (-6.060999999999996, 12.066, -22.927)), ('B', ' 158 ', 'LEU', 0.0700578148311741, (-49.571, 18.696, -40.326)), ('B', ' 188 ', 'THR', 0.29519982397299943, (-35.241, 14.441000000000006, -57.451)), ('B', ' 191 ', 'SER', 0.29983545931745886, (-31.246999999999986, 11.358, -57.047999999999995)), ('B', ' 192 ', 'LYS', 0.0, (-31.61699999999999, 13.667000000000002, -53.93)), ('B', ' 219 ', 'LEU', 0.24123504215561392, (-41.017999999999994, 21.303, -47.196)), ('B', ' 220 ', 'ASN', 0.04855061598340763, (-43.582, 18.867000000000008, -48.701)), ('B', ' 229 ', 'SER', 0.2527316437528885, (-21.901, 12.704999999999998, -41.197999999999986)), ('B', ' 247 ', 'VAL', 0.003150532575091347, (12.675, 36.177000000000014, -20.649)), ('B', ' 256 ', 'LEU', 0.2870720491715004, (2.6699999999999915, 52.823000000000015, -25.524)), ('B', ' 289 ', 'SER', 0.09590419085682048, (-13.820000000000007, 38.192, -25.522)), ('B', ' 353 ', 'GLU', 0.008684443588051309, (-6.562999999999999, 40.623, -43.249)), ('B', ' 442 ', 'ARG', 0.019047681676507285, (-19.214999999999996, 41.34, -13.567)), ('B', ' 484 ', 'VAL', 0.0008646758460833908, (-37.903, 8.422, -25.434)), ('B', ' 495 ', 'VAL', 0.2817535151841153, (-44.21, 25.17899999999999, -8.374)), ('B', ' 516 ', 'ASN', 0.12840927961741064, (-35.3, 19.689, -23.679)), ('B', ' 592 ', 'ILE', 0.10602922369488145, (-43.26300000000001, 25.074999999999992, -0.832))]
data['cbeta'] = []
data['probe'] = [(' A 352  LEU HD11', ' B 234  PRO  HD3', -0.781, (-7.766, 12.718, -44.341)), (' A  13  SER  O  ', ' A  44  SER  HA ', -0.726, (1.237, 50.811, -50.384)), (' B  12  THR HG21', ' B  25  LEU  O  ', -0.69, (3.05, -1.755, -40.929)), (' A 129  ARG  HG3', ' A 701  JFM H091', -0.653, (2.787, 36.838, -60.519)), (' B 220  ASN  ND2', ' B 223  ASP  OD2', -0.651, (-40.473, 17.348, -50.257)), (' B 425  VAL HG12', ' B 429  MET  HE3', -0.647, (-7.697, 25.304, -21.807)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.645, (2.438, 41.772, -29.025)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.642, (-31.318, 20.803, -79.364)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.642, (9.544, -0.01, -33.029)), (' B 442  ARG  HD3', ' B 701  JFM  C12', -0.632, (-15.913, 43.132, -16.658)), (' B 277  TYR  HA ', ' B 396  TYR  O  ', -0.629, (0.316, 30.337, -26.519)), (' B 278  SER  HB2', ' B 436  MET  HE2', -0.62, (-2.004, 32.893, -21.365)), (' A 129  ARG  HG3', ' A 701  JFM  C09', -0.62, (2.568, 36.003, -59.955)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.619, (-32.577, 34.772, -21.617)), (' B  12  THR HG23', ' B  26  CYS  HA ', -0.611, (5.42, -1.468, -41.12)), (' A 591  GLU  O  ', ' A 592  ILE  HB ', -0.61, (-33.259, 16.361, -102.423)), (' B 504  PRO  HB3', ' B 507  ARG  NH2', -0.591, (-47.478, 37.632, -12.837)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.59, (-26.016, 11.508, -79.455)), (' A 368  ALA  O  ', ' A 393  ALA  HA ', -0.577, (1.214, 14.591, -56.397)), (' A 287  GLY  HA2', ' A 883  HOH  O  ', -0.574, (-10.61, 6.3, -75.171)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.572, (-31.576, 20.831, -79.363)), (' B 136  GLU  HG3', ' B 702  JFM H011', -0.568, (-6.917, 8.238, -37.203)), (' B 504  PRO  HB3', ' B 507  ARG HH21', -0.567, (-47.774, 37.959, -12.993)), (' B 196  GLY  HA3', ' B 215  THR HG21', -0.566, (-31.848, 24.087, -45.627)), (' B 504  PRO  O  ', ' B 507  ARG  HG3', -0.562, (-44.331, 38.418, -14.292)), (' B 136  GLU  CD ', ' B 702  JFM H011', -0.561, (-6.574, 8.872, -37.937)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.561, (5.414, -1.043, -41.181)), (' A 492  GLN  O  ', ' A 496  VAL HG23', -0.555, (-32.811, 20.241, -92.122)), (' B   8  CYS  HB3', ' B  10  SER  OG ', -0.553, (8.752, 2.426, -35.777)), (' B  49  VAL HG23', ' B  58  THR HG22', -0.545, (-9.265, -12.023, -47.242)), (' A   7  LEU HD22', ' A 103  VAL HG22', -0.544, (6.615, 44.856, -65.249)), (' A 329  LYS  HE2', ' A 354  GLN  OE1', -0.538, (-5.882, 1.857, -55.232)), (' A 276  LYS  O  ', ' A 395  HIS  HA ', -0.533, (4.164, 14.902, -62.761)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.532, (-13.187, 7.48, -52.496)), (' B  16  CYS  O  ', ' B  22  ARG  HA ', -0.531, (-6.191, -0.278, -41.152)), (' B 136  GLU  CG ', ' B 702  JFM H011', -0.525, (-6.769, 8.482, -37.368)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.518, (-26.392, 19.52, -86.676)), (' B  92  LEU  HB3', ' B  93  TYR  CD2', -0.517, (8.881, -0.499, -46.819)), (' B   8  CYS  SG ', ' B  99  GLY  O  ', -0.515, (8.944, 0.789, -31.611)), (' A 447  GLU  HA ', ' A 853  HOH  O  ', -0.512, (-14.186, 10.199, -96.045)), (' A 308  ALA  O  ', ' A 359  THR  HA ', -0.511, (-13.935, 19.241, -62.943)), (' A  13  SER  OG ', ' A  44  SER  HB2', -0.502, (3.206, 51.487, -48.729)), (' B 451  THR HG21', ' B 585  LEU HD23', -0.501, (-25.265, 27.977, -5.987)), (' A 579  ARG  HG2', ' A 893  HOH  O  ', -0.5, (-18.974, 27.837, -103.201)), (' B 195  ILE  O  ', ' B 195  ILE HG23', -0.496, (-34.291, 21.793, -46.769)), (' B  68  MET  HA ', ' B  68  MET  HE2', -0.492, (5.168, -12.095, -54.983)), (' B  65  LEU HD23', ' B  81  PHE  CZ ', -0.492, (7.463, -13.798, -49.353)), (' A 235  LEU HD21', ' A 382  TYR  CE2', -0.491, (-7.601, 32.425, -60.089)), (' A 352  LEU  CD1', ' B 234  PRO  HD3', -0.489, (-7.836, 11.639, -44.523)), (' B  21  ARG  CB ', ' B 702  JFM H013', -0.488, (-6.959, 5.649, -37.918)), (' A 277  TYR  HA ', ' A 396  TYR  O  ', -0.486, (2.818, 16.353, -65.854)), (' A 329  LYS  CE ', ' A 354  GLN  OE1', -0.478, (-5.94, 1.07, -55.007)), (' A  44  SER  OG ', ' A  45  VAL  N  ', -0.478, (1.351, 52.589, -47.421)), (' A 127  THR HG23', ' A 130  LEU  H  ', -0.477, (4.082, 37.492, -65.719)), (' B 279  THR  HB ', ' B 429  MET  HE2', -0.477, (-6.063, 27.195, -20.821)), (' A 531  GLN  HG2', ' A 536  SER  HB3', -0.477, (-23.734, 17.798, -78.852)), (' B 133  PHE  HD1', ' B 702  JFM H012', -0.476, (-4.829, 6.315, -35.694)), (' A 139  LYS  HG2', ' A 232  VAL HG22', -0.475, (-13.752, 35.609, -60.369)), (' B 378  MET  O  ', ' B 407  ALA  HB2', -0.475, (-16.548, 20.359, -28.052)), (' B 220  ASN  O  ', ' B 223  ASP  OD2', -0.474, (-41.123, 17.325, -48.87)), (' A  60  VAL  HB ', ' A 873  HOH  O  ', -0.474, (-0.487, 58.165, -56.354)), (' A 312  ALA  HB1', ' A 973  HOH  O  ', -0.471, (-19.782, 15.393, -70.663)), (' A  37  THR  OG1', ' A  39  HIS  HB2', -0.469, (-2.002, 53.204, -64.941)), (' A 269  TYR  OH ', ' A 294  GLY  HA3', -0.468, (-3.946, 3.562, -69.664)), (' A 307  THR  HA ', ' A 358  CYS  O  ', -0.467, (-11.783, 17.003, -61.32)), (' B 102  ASN  C  ', ' B 104  THR  H  ', -0.464, (1.176, -1.754, -25.069)), (' A  23  PRO  HB3', ' A 701  JFM  C01', -0.463, (-1.527, 42.702, -59.005)), (' A 129  ARG  HG3', ' A 701  JFM  C10', -0.463, (3.159, 36.097, -59.912)), (' A 490  ARG  HB2', ' A 491  PRO  HD3', -0.462, (-37.405, 27.84, -91.684)), (' A 244  GLU  HB2', ' A 276  LYS  HB2', -0.46, (9.199, 17.677, -62.939)), (' A  21  ARG  HA ', ' A  21  ARG  HD2', -0.457, (-8.741, 42.79, -58.232)), (' A 445  PRO  HB3', ' A 468  SER  HB3', -0.456, (-18.854, 5.236, -91.468)), (' B   2  VAL  N  ', ' B 826  HOH  O  ', -0.456, (1.12, 1.559, -48.693)), (' B 120  TYR  CE2', ' B 409  ARG  HG2', -0.455, (-16.307, 11.554, -25.716)), (' A   7  LEU HD21', ' A 106  PHE  HB2', -0.452, (3.692, 44.021, -65.754)), (' A 130  LEU HD12', ' A 894  HOH  O  ', -0.451, (4.764, 39.815, -68.777)), (' B 544  VAL  O  ', ' B 572  ILE  HA ', -0.449, (-33.537, 32.85, -12.026)), (' A   7  LEU HD11', ' A 106  PHE  CG ', -0.448, (2.687, 44.931, -64.184)), (' A  22  ARG  N  ', ' A  23  PRO  CD ', -0.448, (-4.312, 45.182, -58.014)), (' A  19  CYS  HB2', ' A  23  PRO  HD2', -0.447, (-3.753, 46.714, -59.191)), (' A  37  THR  C  ', ' A  39  HIS  H  ', -0.447, (-3.036, 54.996, -65.713)), (' B 512  ILE  O  ', ' B 546  PHE  HA ', -0.445, (-34.174, 26.247, -14.974)), (' A 451  THR HG21', ' A 585  LEU HD23', -0.441, (-15.923, 17.293, -93.23)), (' A   6  VAL  HA ', ' A 129  ARG  HD3', -0.439, (4.014, 39.632, -58.884)), (' B 386  VAL  O  ', ' B 390  ARG  HG2', -0.439, (-5.095, 22.824, -38.525)), (' A 480  ILE HG21', ' A 550  THR HG22', -0.439, (-28.568, 32.587, -89.646)), (' A  59  ASP  C  ', ' A  59  ASP  OD1', -0.438, (-0.974, 61.534, -59.322)), (' A 297  LEU HD11', ' A 324  TYR  HB3', -0.438, (-8.598, -0.681, -65.72)), (' A 366  THR  OG1', ' A 367  THR  N  ', -0.437, (-3.76, 15.555, -51.392)), (' A  77  PRO  HB2', ' A 811  HOH  O  ', -0.437, (8.598, 72.035, -46.175)), (' A  14  LEU  HB2', ' A  25  LEU  O  ', -0.435, (4.931, 49.206, -55.26)), (' A  49  VAL HG23', ' A  58  THR HG22', -0.432, (-6.55, 61.594, -53.434)), (' A  64  TYR  O  ', ' A  70  TYR  HA ', -0.427, (3.419, 64.112, -49.91)), (' A 283  PRO  HG2', ' A 461  LEU HD13', -0.426, (-6.151, 12.716, -83.714)), (' A 136  GLU  OE1', ' A 701  JFM  S02', -0.426, (-3.91, 38.652, -58.273)), (' A  59  ASP  OD1', ' A  61  THR  OG1', -0.426, (0.134, 62.355, -61.508)), (' A 370  ILE  HA ', ' A 395  HIS  O  ', -0.424, (0.657, 13.249, -61.06)), (' A 304  ILE  HA ', ' A 370  ILE  O  ', -0.423, (-3.303, 10.786, -59.062)), (' A  34  VAL  HA ', ' A  39  HIS  O  ', -0.423, (-0.662, 55.19, -63.157)), (' A 278  SER  HB2', ' A 436  MET  HE2', -0.421, (2.672, 13.452, -71.271)), (' A   4  ALA  O  ', ' A  24  PHE  HB2', -0.421, (3.338, 42.46, -54.71)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.42, (-38.595, 27.96, -2.601)), (' B 376  ILE HG22', ' B 400  GLY  HA3', -0.418, (-11.527, 27.538, -22.47)), (' A 367  THR  HA ', ' A 392  ARG  O  ', -0.418, (-0.718, 16.435, -53.575)), (' A 275  GLN  O  ', ' A 395  HIS  ND1', -0.415, (6.731, 13.125, -63.27)), (' A  50  CYS  SG ', ' A  71  TYR  HA ', -0.415, (-0.769, 67.112, -50.566)), (' B 158  LEU HD13', ' B 164  HIS  HB2', -0.415, (-48.549, 15.126, -39.502)), (' A 281  GLN  HG3', ' A 402  PRO  HD2', -0.413, (-4.578, 18.324, -79.003)), (' A 143  GLU  O  ', ' A 146  LYS  HB2', -0.413, (-20.487, 39.661, -62.238)), (' A 214  THR  HB ', ' A 339  ARG  O  ', -0.411, (-28.509, 21.817, -60.027)), (' A 303  ARG  NH1', ' A 353  GLU  O  ', -0.41, (-7.651, 9.1, -52.646)), (' B  13  SER  O  ', ' B  44  SER  HA ', -0.41, (0.81, -2.727, -47.206)), (' A 281  GLN  HA ', ' A 400  GLY  O  ', -0.409, (-4.697, 16.381, -76.672)), (' B 333  ILE  HB ', ' B 358  CYS  SG ', -0.409, (-12.157, 30.988, -41.12)), (' B 149  TYR  CD2', ' B 174  PRO  HB3', -0.407, (-29.323, 9.273, -34.47)), (' A 220  ASN  HB2', ' A 223  ASP  CG ', -0.407, (-41.734, 32.992, -55.939)), (' B 376  ILE HG12', ' B 425  VAL HG11', -0.405, (-7.247, 25.284, -24.133)), (' B 455  LEU  CD1', ' B 584  LYS  HD3', -0.405, (-21.313, 22.579, -5.267)), (' A 401  ASP  HA ', ' A 402  PRO  HD2', -0.405, (-5.584, 18.644, -78.251)), (' A 151  ILE HG12', ' A 226  VAL HG22', -0.404, (-31.503, 40.403, -60.359)), (' A  34  VAL  O  ', ' A  40  LYS  NZ ', -0.402, (0.343, 57.937, -65.77)), (' A 470  GLN  O  ', ' A 571  GLY  HA2', -0.402, (-23.391, 8.331, -91.682)), (' A 462  LYS  HA ', ' A 462  LYS  HD3', -0.401, (-4.882, 8.323, -90.805)), (' B 490  ARG  HB2', ' B 491  PRO  HD3', -0.4, (-44.89, 16.869, -13.355)), (' A 483  ASP  O  ', ' A 484  VAL  HB ', -0.4, (-32.575, 35.707, -79.331))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
