# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  45 ', 'VAL', 0.017134699202175672, (-0.12600000000000744, 51.94400000000002, -45.33300000000001)), ('A', '  48 ', 'TYR', 0.006701184084212983, (-0.3790000000000049, 58.74000000000001, -51.743)), ('A', ' 195 ', 'ILE', 0.00512602, (-34.29299999999999, 28.642000000000007, -53.93)), ('A', ' 218 ', 'LYS', 0.04344154697234119, (-43.355, 25.331000000000003, -56.473)), ('A', ' 351 ', 'THR', 0.0015110862281501483, (-11.017, 12.808, -50.433)), ('A', ' 484 ', 'VAL', 0.010218941830006982, (-32.38399999999999, 37.90600000000001, -80.561)), ('B', '   6 ', 'VAL', 0.009993942306433919, (2.084000000000002, 5.554, -34.679)), ('B', '  10 ', 'SER', 0.021129222995848178, (9.629999999999999, 3.3010000000000046, -37.44)), ('B', '  27 ', 'CYS', 0.01386020518584019, (6.656, -5.1, -38.368)), ('B', '  48 ', 'TYR', 0.016099350856450957, (-2.455999999999995, -9.425000000000002, -46.837)), ('B', '  97 ', 'CYS', 0.01356607701562254, (11.79, -1.1979999999999968, -36.604000000000006)), ('B', ' 195 ', 'ILE', 0.08195068751920286, (-32.41599999999998, 21.646000000000008, -48.67200000000001)), ('B', ' 221 ', 'VAL', 0.05008880131951443, (-44.21699999999999, 14.773000000000005, -48.156)), ('B', ' 283 ', 'PRO', 0.09695984606765955, (-15.320000000000002, 32.329, -15.721000000000004))]
data['omega'] = []
data['rota'] = [('B', '   7 ', 'LEU', 0.08843614914587379, (3.892000000000001, 3.674000000000003, -31.746000000000006)), ('B', '  12 ', 'THR', 0.2271178538023057, (6.593000000000002, 0.7629999999999963, -42.32)), ('B', '  56 ', 'ASP', 0.1865867057356863, (-12.040999999999993, -16.204999999999995, -47.388)), ('B', '  96 ', 'THR', 0.02496806390751673, (14.357000000000006, -0.49600000000000044, -39.417)), ('B', ' 103 ', 'VAL', 0.042793616239780334, (1.2220000000000009, -1.7489999999999988, -26.917)), ('B', ' 104 ', 'THR', 0.07831900029947558, (-1.668999999999997, -1.9179999999999993, -24.38)), ('B', ' 124 ', 'ASN', 0.17593689877931476, (-6.046999999999999, 12.216000000000001, -22.998)), ('B', ' 155 ', 'ARG', 0.16311255864723845, (-45.234999999999985, 11.561, -44.09)), ('B', ' 188 ', 'THR', 0.2822710885332141, (-35.2, 14.231000000000003, -57.71300000000001)), ('B', ' 191 ', 'SER', 0.1611198024314506, (-30.710999999999995, 11.529000000000003, -57.16900000000001)), ('B', ' 192 ', 'LYS', 0.0, (-31.212, 13.914000000000001, -54.131000000000014)), ('B', ' 215 ', 'THR', 0.006506296310160796, (-33.622, 28.036, -44.034)), ('B', ' 229 ', 'SER', 0.008430911316939967, (-21.653999999999996, 12.893000000000002, -41.43900000000001)), ('B', ' 231 ', 'THR', 0.08228851463144929, (-14.879999999999999, 12.573000000000002, -43.86500000000001)), ('B', ' 247 ', 'VAL', 0.170593762490583, (12.744, 36.266, -20.959000000000003)), ('B', ' 259 ', 'SER', 0.02495919357777879, (-7.327000000000005, 52.64800000000002, -22.957)), ('B', ' 327 ', 'ILE', 0.09636627116792729, (-13.267000000000005, 47.09200000000001, -39.935)), ('B', ' 359 ', 'THR', 0.1394367924047401, (-13.953999999999997, 28.461, -37.233)), ('B', ' 474 ', 'MET', 0.12926982334144638, (-36.635999999999996, 25.378, -3.394000000000001)), ('B', ' 486 ', 'SER', 0.16795226948881642, (-35.606, 13.155000000000003, -22.169)), ('B', ' 495 ', 'VAL', 0.08580977674059027, (-44.328, 25.243000000000006, -8.581)), ('A', '  12 ', 'THR', 0.15603722105689455, (7.417999999999992, 46.93500000000002, -51.89800000000001)), ('A', '  26 ', 'CYS', 0.04590565513465866, (8.088999999999995, 47.917, -57.032)), ('A', '  35 ', 'ILE', 0.2735076331389753, (3.8149999999999977, 57.338, -66.22)), ('A', '  46 ', 'ASN', 0.293225564575245, (-1.6490000000000018, 55.37700000000001, -46.22600000000001)), ('A', '  51 ', 'ASN', 0.13752906003320006, (-2.668, 65.568, -46.966)), ('A', ' 148 ', 'SER', 0.13882898094700363, (-24.336, 44.915, -65.202)), ('A', ' 156 ', 'GLU', 0.1314467930607141, (-46.706, 34.38300000000002, -63.742)), ('A', ' 168 ', 'GLU', 0.2850173837353956, (-35.64699999999999, 45.112000000000016, -65.109)), ('A', ' 183 ', 'THR', 0.12164728180243843, (-29.825000000000003, 32.111000000000004, -58.823)), ('A', ' 201 ', 'GLU', 0.22593132757274653, (-34.702999999999996, 28.525000000000006, -72.90200000000002)), ('A', ' 255 ', 'THR', 0.02099255595041563, (3.821000000000007, -3.133999999999997, -63.25600000000001)), ('A', ' 259 ', 'SER', 0.032050614041967615, (-3.140999999999994, -5.9219999999999935, -69.636)), ('A', ' 485 ', 'SER', 0.07747587831683354, (-28.80100000000001, 37.003000000000014, -81.766)), ('A', ' 502 ', 'ARG', 0.02088455822615895, (-36.27099999999999, 8.491000000000003, -96.89800000000001)), ('A', ' 530 ', 'THR', 0.021758937509730458, (-30.72400000000001, 17.913000000000007, -79.54)), ('A', ' 591 ', 'GLU', 0.09352862666981385, (-29.202, 16.56300000000001, -104.18000000000002))]
data['cbeta'] = [('B', ' 404 ', 'GLN', ' ', 0.2761683890158871, (-18.038000000000004, 26.568000000000005, -19.009)), ('B', ' 534 ', 'ASP', ' ', 0.25495493272274533, (-25.970999999999997, 22.057000000000002, -23.495000000000008))]
data['probe'] = [(' B 593  PRO  HG3', ' B 701  S7J  F2 ', -1.058, (-45.172, 27.748, -5.096)), (' B  27  CYS  SG ', ' B 917  HOH  O  ', -0.942, (8.246, -5.098, -42.427)), (' B  12  THR HG21', ' B  25  LEU  O  ', -0.917, (3.752, -1.611, -40.566)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.815, (9.803, -0.224, -32.451)), (' B 279  THR  HB ', ' B 429  MET  HE2', -0.812, (-5.464, 27.574, -20.683)), (' B  47  PRO  O  ', ' B 801  HOH  O  ', -0.81, (-3.707, -8.457, -50.672)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.774, (-32.919, 34.333, -21.576)), (' A 235  LEU HD21', ' A 382  TYR  CE2', -0.772, (-7.217, 32.876, -60.563)), (' B  13  SER  O  ', ' B  44  SER  HA ', -0.771, (1.957, -1.737, -46.468)), (' B  51  ASN  OD1', ' B 802  HOH  O  ', -0.76, (-1.811, -11.36, -54.74)), (' B   7  LEU HD12', ' B 103  VAL HG22', -0.751, (2.175, -0.445, -30.26)), (' B   2  VAL  N  ', ' B 806  HOH  O  ', -0.735, (2.489, 2.11, -48.598)), (' B 133  PHE  HA ', ' B 889  HOH  O  ', -0.709, (-4.904, 8.597, -35.493)), (' B   8  CYS  SG ', ' B  99  GLY  O  ', -0.697, (8.607, 0.074, -30.923)), (' A 480  ILE HG12', ' A 550  THR HG22', -0.683, (-27.701, 32.235, -91.428)), (' A   7  LEU HD21', ' A 106  PHE  HB2', -0.681, (3.443, 43.598, -66.043)), (' B   7  LEU  CD1', ' B 103  VAL HG22', -0.673, (1.589, -0.399, -30.052)), (' B 277  TYR  HA ', ' B 396  TYR  O  ', -0.671, (-0.368, 30.065, -26.809)), (' B 376  ILE HG22', ' B 400  GLY  HA3', -0.66, (-11.816, 27.758, -22.93)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.651, (6.065, -1.181, -40.181)), (' A  13  SER  OG ', ' A  44  SER  HB2', -0.624, (3.009, 51.088, -48.732)), (' A 236  SER  OG ', ' A 801  HOH  O  ', -0.622, (-2.975, 30.228, -54.58)), (' B 510  VAL HG21', ' B 541  TYR  CG ', -0.619, (-32.598, 34.214, -20.774)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.603, (3.321, 42.14, -29.244)), (' B 508  LYS  HD3', ' B 959  HOH  O  ', -0.602, (-36.288, 41.355, -17.763)), (' B 477  LYS  NZ ', ' B 551  GLU  OE2', -0.601, (-33.949, 14.009, -4.671)), (' A 275  GLN  O  ', ' A 395  HIS  ND1', -0.599, (6.653, 12.954, -64.027)), (' A 368  ALA  O  ', ' A 393  ALA  HA ', -0.598, (1.717, 14.149, -56.596)), (' A   7  LEU HD13', ' A 103  VAL HG22', -0.585, (6.306, 46.037, -65.409)), (' A 551  GLU  HB3', ' A 830  HOH  O  ', -0.579, (-20.337, 31.999, -94.765)), (' B  12  THR HG21', ' B  26  CYS  HA ', -0.576, (5.359, -1.068, -39.943)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.574, (-25.795, 11.548, -79.958)), (' B  26  CYS  O  ', ' B  29  CYS  N  ', -0.566, (5.328, -3.606, -35.865)), (' A 163  LEU HD23', ' A 211  TYR  CD2', -0.565, (-40.479, 28.453, -65.243)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.564, (-31.064, 21.11, -79.825)), (' A  60  VAL  HB ', ' A 901  HOH  O  ', -0.564, (-0.202, 58.652, -56.705)), (' B 376  ILE HG12', ' B 425  VAL HG11', -0.561, (-7.214, 25.437, -24.278)), (' A 296  ALA  O  ', ' A 300  PRO  HA ', -0.56, (-2.272, 1.371, -61.215)), (' A   4  ALA  O  ', ' A  24  PHE  HB2', -0.556, (3.641, 42.664, -55.251)), (' B 518  GLN  HA ', ' B 518  GLN  OE1', -0.552, (-40.131, 18.966, -17.998)), (' B 533  VAL HG11', ' B 560  ARG  O  ', -0.548, (-25.435, 23.943, -17.052)), (' A 334  ILE HD12', ' A 348  VAL HG13', -0.547, (-20.012, 12.819, -54.58)), (' B 103  VAL  CG1', ' B 103  VAL  O  ', -0.546, (-0.514, -2.294, -28.273)), (' B 550  THR  O  ', ' B 555  SER  OG ', -0.541, (-31.147, 16.176, -11.99)), (' A 235  LEU HD21', ' A 382  TYR  CD2', -0.541, (-7.4, 32.686, -61.106)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.535, (-26.463, 19.909, -86.815)), (' A  64  TYR  O  ', ' A  70  TYR  HA ', -0.535, (3.846, 64.369, -50.576)), (' A 276  LYS  O  ', ' A 395  HIS  HA ', -0.534, (4.577, 15.383, -63.49)), (' B 200  PHE  O  ', ' B 805  HOH  O  ', -0.529, (-34.59, 19.126, -31.914)), (' B 409  ARG  NH2', ' B 821  HOH  O  ', -0.526, (-13.399, 15.104, -27.051)), (' A  37  THR  OG1', ' A  39  HIS  HB2', -0.526, (-1.765, 53.523, -65.422)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.526, (-31.38, 21.178, -79.573)), (' B 220  ASN  O  ', ' B 223  ASP  OD2', -0.521, (-41.032, 17.291, -49.301)), (' B 152  ALA  HB2', ' B 167  TRP  CH2', -0.521, (-35.856, 10.548, -38.158)), (' B 279  THR  HB ', ' B 429  MET  CE ', -0.52, (-5.954, 27.43, -20.758)), (' A   7  LEU HD21', ' A 130  LEU HD21', -0.516, (3.15, 42.479, -65.481)), (' B   7  LEU  CD2', ' B 130  LEU HD21', -0.497, (0.085, 4.209, -30.635)), (' A 152  ALA  HB2', ' A 167  TRP  CZ3', -0.493, (-34.419, 38.001, -66.588)), (' A 283  PRO  HG3', ' A 457  TYR  CE1', -0.491, (-6.472, 15.976, -83.459)), (' A  63  LEU  HB3', ' A  83  LEU HD12', -0.489, (3.056, 62.289, -54.054)), (' B 184  GLY  C  ', ' B 195  ILE HG22', -0.489, (-33.169, 18.178, -47.599)), (' A 185  TYR  HE2', ' A 194  GLN  HG3', -0.489, (-29.849, 33.12, -52.419)), (' B  44  SER  N  ', ' B  46  ASN  O  ', -0.488, (-0.944, -4.126, -47.543)), (' A 251  GLY  HA3', ' A 394  LYS  HD3', -0.488, (6.831, 10.085, -57.3)), (' B 201  GLU  OE2', ' B 807  HOH  O  ', -0.488, (-37.907, 22.161, -26.255)), (' A 181  VAL HG11', ' A 197  GLU  OE1', -0.487, (-26.04, 27.043, -61.584)), (' A 376  ILE HG12', ' A 425  VAL HG11', -0.485, (-3.121, 20.789, -71.315)), (' A 351  THR HG23', ' A 364  PRO  HG3', -0.484, (-10.06, 15.736, -51.396)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.483, (-38.056, 28.073, -2.806)), (' B 215  THR  OG1', ' B 216  THR  N  ', -0.479, (-35.028, 28.415, -45.832)), (' A 277  TYR  HA ', ' A 396  TYR  O  ', -0.479, (3.042, 16.697, -66.128)), (' B 333  ILE  HB ', ' B 358  CYS  SG ', -0.479, (-11.873, 30.94, -41.56)), (' A 533  VAL HG11', ' A 560  ARG  HG3', -0.479, (-19.012, 23.007, -83.007)), (' A 112  CYS  SG ', ' A 114  TRP  CE2', -0.475, (-7.708, 42.657, -70.088)), (' A 561  PHE  CD2', ' A 581  LEU HD22', -0.474, (-15.619, 22.119, -91.547)), (' B 453  SER  HA ', ' B 457  TYR  HB2', -0.474, (-15.548, 29.909, -7.848)), (' B  26  CYS  O  ', ' B  27  CYS  C  ', -0.471, (6.082, -4.37, -36.835)), (' A 139  LYS  HG2', ' A 232  VAL HG22', -0.47, (-13.2, 35.766, -60.747)), (' B 473  LYS  HE3', ' B 582  TYR  CZ ', -0.47, (-31.964, 25.476, -0.209)), (' B 371  VAL HG23', ' B 393  ALA  HB2', -0.469, (-1.207, 31.273, -34.591)), (' A 249  ILE HD11', ' A 270  GLN  HG2', -0.468, (8.523, 3.997, -67.168)), (' B 152  ALA  HB2', ' B 167  TRP  CZ3', -0.468, (-36.072, 10.224, -38.808)), (' B 377  SER  O  ', ' B 406  PRO  HA ', -0.468, (-16.041, 21.247, -23.447)), (' A 318  CYS  HB3', ' A 343  PHE  CD2', -0.462, (-17.645, 7.854, -61.92)), (' A 329  LYS  HE2', ' A 354  GLN  OE1', -0.462, (-6.22, 1.52, -55.419)), (' A  59  ASP  OD1', ' A  61  THR  OG1', -0.461, (0.385, 62.478, -61.928)), (' B   5  CYS  O  ', ' B   9  ASN  N  ', -0.46, (6.186, 5.276, -34.922)), (' A 471  CYS  O  ', ' A 587  PHE  HB3', -0.459, (-20.813, 12.525, -97.017)), (' A  34  VAL  HA ', ' A  39  HIS  O  ', -0.457, (-0.342, 55.441, -63.326)), (' B   7  LEU HD21', ' B 106  PHE  HB2', -0.457, (-0.499, 2.477, -29.723)), (' A  44  SER  O  ', ' A  45  VAL  C  ', -0.457, (-1.367, 52.791, -46.594)), (' B 429  MET  O  ', ' B 433  GLY  HA2', -0.456, (-4.906, 24.98, -13.804)), (' A 304  ILE HG12', ' A 370  ILE  HB ', -0.454, (-1.929, 9.197, -61.113)), (' B 177  ASN  HB3', ' B 516  ASN  ND2', -0.453, (-33.331, 17.074, -26.674)), (' A   7  LEU HD11', ' A 106  PHE  CG ', -0.452, (3.477, 45.688, -64.464)), (' B 401  ASP  OD2', ' B 457  TYR  OH ', -0.45, (-16.482, 28.838, -15.103)), (' A 367  THR  HA ', ' A 392  ARG  O  ', -0.448, (-0.255, 16.476, -53.633)), (' B  13  SER  HB2', ' B  92  LEU  HB2', -0.448, (6.796, -1.271, -47.04)), (' A 293  ILE HG13', ' A 320  LYS  CG ', -0.446, (-11.295, 4.843, -68.234)), (' B  85  ALA  O  ', ' B  86  ASN  HB2', -0.445, (9.405, -13.662, -37.971)), (' B 511  PHE  O  ', ' B 530  THR  HA ', -0.444, (-35.883, 28.144, -20.802)), (' A 289  SER  HB3', ' A 896  HOH  O  ', -0.443, (-11.208, 7.285, -73.768)), (' B 333  ILE HG12', ' B 358  CYS  HB2', -0.441, (-11.395, 32.665, -41.059)), (' A  31  TYR  CE2', ' A  87  GLY  HA2', -0.439, (10.493, 56.902, -64.351)), (' B 474 BMET  HB3', ' B 474 BMET  HE3', -0.438, (-39.028, 24.485, -3.368)), (' B 385  SER  OG ', ' B 804  HOH  O  ', -0.437, (-3.258, 17.224, -36.321)), (' B 544  VAL  O  ', ' B 572  ILE  HA ', -0.436, (-33.578, 32.586, -12.015)), (' A 289  SER  O  ', ' A 293  ILE HG12', -0.436, (-9.421, 6.566, -69.082)), (' A 540  GLU  HA ', ' A 567  ARG  O  ', -0.435, (-20.264, 10.844, -81.418)), (' A  19  CYS  HB2', ' A  23  PRO  HD2', -0.431, (-3.438, 46.919, -59.367)), (' A 353  GLU  HA ', ' A 353  GLU  OE2', -0.431, (-10.126, 5.717, -50.83)), (' B 262  PHE  CE2', ' B 297  LEU HD12', -0.431, (-9.32, 47.492, -26.374)), (' A  46  ASN  N  ', ' A  46  ASN  OD1', -0.43, (0.068, 54.722, -46.088)), (' B 593  PRO  CG ', ' B 701  S7J  F2 ', -0.43, (-44.803, 27.094, -4.469)), (' B  13  SER  O  ', ' B  44  SER  CA ', -0.429, (1.699, -2.379, -46.742)), (' B  48  TYR  OH ', ' B  90  PHE  O  ', -0.427, (3.555, -7.383, -45.447)), (' A 151  ILE HG12', ' A 226  VAL HG22', -0.425, (-30.928, 40.345, -60.373)), (' A 239  THR  O  ', ' A 388  ASN  ND2', -0.422, (0.094, 25.095, -63.263)), (' B 372  VAL  CG1', ' B 399  ILE HD12', -0.422, (-8.806, 34.291, -27.344)), (' A  31  TYR  CZ ', ' A  35  ILE HD12', -0.422, (8.328, 58.315, -65.848)), (' A 406  PRO  HB3', ' A 422  PHE  CD2', -0.421, (-9.331, 26.981, -76.814)), (' B  77  PRO  HB2', ' B  78  PRO  HD2', -0.421, (4.605, -22.89, -54.6)), (' A 582  TYR  OH ', ' A 589  SER  HB2', -0.421, (-22.385, 17.786, -102.328)), (' A 252  LEU  HB3', ' A 299  TYR  CD2', -0.42, (4.861, 5.207, -61.586)), (' B   7  LEU HD21', ' B 130  LEU HD21', -0.419, (0.115, 3.601, -30.258)), (' A 241  VAL HG22', ' A 832  HOH  O  ', -0.419, (2.79, 22.073, -62.971)), (' B 404  GLN  NE2', ' B 706  PO4  O2 ', -0.419, (-19.9, 30.131, -19.696)), (' B  12  THR  CG2', ' B  25  LEU  O  ', -0.419, (4.358, -1.002, -40.706)), (' A 453  SER  OG ', ' A 459  ASN  HA ', -0.418, (-4.582, 14.246, -91.444)), (' B 269  TYR  CD1', ' B 295  LEU HD13', -0.417, (-3.472, 40.265, -24.391)), (' A 280  LEU HD12', ' A 436  MET  O  ', -0.416, (-0.402, 12.801, -76.262)), (' B  72  CYS  O  ', ' B  76  LYS  HB3', -0.416, (-0.977, -21.137, -48.153)), (' A 152  ALA  HB2', ' A 167  TRP  CE3', -0.415, (-34.58, 38.518, -66.52)), (' A 510  VAL HG21', ' A 541  TYR  CG ', -0.414, (-25.656, 11.791, -80.202)), (' A  72  CYS  SG ', ' A  74  SER  HB2', -0.412, (-1.795, 72.197, -54.453)), (' B 219  LEU  O  ', ' B 219  LEU HD12', -0.412, (-42.806, 20.421, -46.018)), (' B  12  THR  OG1', ' B  26  CYS  HA ', -0.412, (6.123, -0.153, -39.525)), (' A  37  THR  C  ', ' A  39  HIS  H  ', -0.411, (-2.768, 55.258, -66.067)), (' A 352  LEU HD11', ' B 234  PRO  HD3', -0.411, (-7.457, 11.599, -43.924)), (' A 533  VAL  CG1', ' A 560  ARG  HG3', -0.41, (-19.203, 22.989, -82.503)), (' B 451  THR HG23', ' B 584  LYS  O  ', -0.41, (-23.753, 27.414, -3.86)), (' B 159  SER  OG ', ' B 160  ASP  O  ', -0.41, (-46.873, 23.708, -38.252)), (' B 269  TYR  O  ', ' B 299  TYR  OH ', -0.409, (2.027, 40.303, -24.445)), (' B 492  GLN  O  ', ' B 496  VAL HG23', -0.409, (-41.494, 24.763, -11.278)), (' A 480  ILE HG21', ' A 550  THR HG22', -0.409, (-27.841, 32.982, -90.124)), (' B 280  LEU HD11', ' B 438  LEU  HG ', -0.409, (-8.683, 35.723, -18.163)), (' B 542  ASP  OD1', ' B 569  LYS  HE3', -0.409, (-29.887, 41.124, -17.835)), (' B  71  TYR  CD2', ' B  77  PRO  HD3', -0.407, (1.033, -19.599, -52.823)), (' B  72  CYS  SG ', ' B  74  SER  HB2', -0.407, (-5.922, -22.401, -47.629)), (' B 136  GLU  CD ', ' B 234  PRO  HA ', -0.407, (-6.156, 10.836, -38.707)), (' A  33  HIS  HA ', ' A 107  ASN  OD1', -0.406, (2.187, 50.965, -66.088)), (' B   8  CYS  SG ', ' B  99  GLY  CA ', -0.405, (8.607, -0.556, -31.717)), (' A 358  CYS  HB3', ' A 363  LEU HD23', -0.405, (-10.713, 17.566, -57.395)), (' B  15  ARG  HD3', ' B  24  PHE  CE2', -0.402, (-0.535, 3.535, -44.474)), (' A 289  SER  HB2', ' A 919  HOH  O  ', -0.402, (-12.431, 9.652, -71.092)), (' B  16  CYS  O  ', ' B  22  ARG  HA ', -0.401, (-5.687, 0.259, -40.394)), (' A 130  LEU  HA ', ' A 130  LEU HD23', -0.401, (1.261, 39.746, -64.854)), (' B 504  PRO  HB3', ' B 507  ARG  NH2', -0.401, (-47.888, 38.025, -12.764)), (' A 269  TYR  CD1', ' A 295  LEU HD13', -0.4, (0.271, 7.236, -68.945))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
