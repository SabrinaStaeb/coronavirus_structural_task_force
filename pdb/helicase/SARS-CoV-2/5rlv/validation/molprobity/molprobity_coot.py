# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '   6 ', 'VAL', 0.006284978818783181, (4.738000000000001, 41.521, -59.689)), ('A', '  10 ', 'SER', 0.019403944831868167, (11.995, 43.52400000000001, -55.582000000000015)), ('A', ' 196 ', 'GLY', 0.07639164316830793, (-30.485999999999997, 27.479, -56.27000000000002)), ('A', ' 283 ', 'PRO', 0.04124771337740886, (-7.323000000000006, 14.155, -81.58700000000002)), ('A', ' 484 ', 'VAL', 0.01079263378532381, (-31.825999999999993, 38.128, -80.79)), ('B', '  11 ', 'GLN', 0.00420057088305412, (8.815, 3.244999999999999, -42.444)), ('B', '  45 ', 'VAL', 0.05226252477843163, (0.33199999999999985, -2.584999999999999, -51.841)), ('B', ' 103 ', 'VAL', 0.00512602, (1.8290000000000002, -1.5600000000000005, -27.448)), ('B', ' 221 ', 'VAL', 0.056337746155332005, (-44.141, 14.863, -48.33))]
data['omega'] = []
data['rota'] = [('A', '  12 ', 'THR', 0.008159601566148922, (8.098000000000003, 47.367000000000004, -51.940000000000005)), ('A', '  35 ', 'ILE', 0.014150407331647526, (4.289999999999995, 57.684, -66.46900000000001)), ('A', '  46 ', 'ASN', 0.08986710843563847, (-1.1910000000000043, 55.382, -46.522000000000006)), ('A', '  51 ', 'ASN', 0.12505096151306644, (-2.1080000000000076, 65.638, -47.14900000000001)), ('A', '  69 ', 'SER', 0.05696208531588297, (3.8580000000000014, 63.537, -45.46)), ('A', '  79 ', 'ILE', 0.08839498546743232, (12.259000000000004, 71.493, -48.618)), ('A', '  81 ', 'PHE', 0.022927549033127624, (11.342999999999996, 65.933, -52.972000000000016)), ('A', ' 157 ', 'VAL', 0.003150532575091347, (-45.452, 30.266, -64.828)), ('A', ' 162 ', 'GLU', 0.16186207753352488, (-41.954, 26.953000000000003, -69.34600000000002)), ('A', ' 173 ', 'ARG', 0.0, (-30.73600000000001, 41.36, -71.389)), ('A', ' 194 ', 'GLN', 1.98289458627148e-05, (-32.00699999999999, 31.875, -52.362)), ('A', ' 209 ', 'VAL', 0.017526069223358903, (-38.91199999999999, 30.378, -72.72100000000002)), ('A', ' 217 ', 'TYR', 0.03475224018485297, (-38.833, 24.309, -56.906)), ('A', ' 247 ', 'VAL', 0.10232617089483667, (17.197000000000006, 9.954, -66.293)), ('A', ' 255 ', 'THR', 0.012420192946087325, (4.290999999999999, -3.0760000000000076, -63.34300000000001)), ('A', ' 337 ', 'ARG', 0.24460629149701418, (-23.157999999999994, 23.751999999999995, -53.89500000000001)), ('A', ' 344 ', 'ASP', 0.09905353281642335, (-22.75700000000001, 8.311000000000007, -58.554)), ('A', ' 366 ', 'THR', 0.08513699749037168, (-3.811, 17.425, -51.487)), ('A', ' 367 ', 'THR', 0.0920762514179726, (-0.6110000000000007, 15.690000000000001, -52.68300000000001)), ('A', ' 442 ', 'ARG', 0.12799409461127148, (-10.607, 4.707000000000001, -83.74)), ('A', ' 498 ', 'GLU', 0.003761309686033775, (-36.660000000000004, 15.502999999999997, -96.396)), ('A', ' 502 ', 'ARG', 0.24652017560135944, (-35.565999999999995, 8.564999999999998, -97.31300000000002)), ('A', ' 530 ', 'THR', 0.02765647483833043, (-30.060000000000002, 18.226999999999993, -79.918)), ('A', ' 531 ', 'GLN', 0.019599486106054633, (-26.50699999999999, 19.386999999999993, -79.073)), ('B', '   7 ', 'LEU', 0.15776053134219475, (4.2059999999999995, 4.081, -32.771)), ('B', '  11 ', 'GLN', 0.03685182634770047, (8.815, 3.244999999999999, -42.444)), ('B', '  12 ', 'THR', 0.008159601566148922, (6.407000000000002, 0.4070000000000018, -43.516000000000005)), ('B', '  13 ', 'SER', 0.11693561133497817, (4.302999999999998, -1.096, -46.347)), ('B', '  69 ', 'SER', 0.21432055167677316, (1.1590000000000025, -13.354000000000003, -54.165)), ('B', '  96 ', 'THR', 0.028290272682820923, (14.435000000000002, -0.2040000000000024, -40.105)), ('B', ' 124 ', 'ASN', 0.2177422669550603, (-5.8149999999999995, 12.250999999999998, -23.181)), ('B', ' 158 ', 'LEU', 0.11499715579478959, (-49.247, 18.764, -40.827)), ('B', ' 160 ', 'ASP', 0.022079458592845012, (-45.882999999999996, 25.142000000000003, -41.057000000000016)), ('B', ' 179 ', 'ASN', 0.20389392648021004, (-27.552000000000007, 18.555, -30.575000000000006)), ('B', ' 191 ', 'SER', 0.21348034943604746, (-30.63300000000001, 11.679, -57.374)), ('B', ' 195 ', 'ILE', 0.014344118752869901, (-32.65999999999998, 21.398, -49.026)), ('B', ' 219 ', 'LEU', 0.21390166703177121, (-41.121, 21.248, -47.699)), ('B', ' 220 ', 'ASN', 0.010231623479408706, (-43.46600000000001, 18.576, -49.175000000000004)), ('B', ' 247 ', 'VAL', 0.17039181693852185, (13.065999999999999, 36.433, -20.964)), ('B', ' 259 ', 'SER', 0.020055794119045015, (-7.140000000000008, 52.695000000000014, -22.91)), ('B', ' 347 ', 'LYS', 0.21984113613351514, (-14.779000000000005, 41.52300000000001, -45.89400000000001)), ('B', ' 351 ', 'THR', 0.021758937509730458, (-6.943000000000001, 35.398, -45.533)), ('B', ' 484 ', 'VAL', 0.03856629976210053, (-37.59000000000002, 8.383999999999997, -25.596))]
data['cbeta'] = []
data['probe'] = [(' B  27  CYS  SG ', ' B 874  HOH  O  ', -1.029, (8.262, -5.2, -43.257)), (' B 701  VWJ  N2 ', ' B 802  HOH  O  ', -0.813, (-25.306, 9.306, -11.523)), (' A 368  ALA  O  ', ' A 393  ALA  HA ', -0.744, (1.9, 14.336, -57.087)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.74, (-32.509, 35.0, -21.864)), (' B 279  THR  HB ', ' B 429  MET  HE2', -0.728, (-5.392, 27.452, -20.818)), (' B 278  SER  HB2', ' B 436  MET  HE2', -0.699, (-1.696, 33.322, -21.643)), (' B 124  ASN  OD1', ' B 381  ASN  ND2', -0.691, (-7.265, 14.774, -25.689)), (' A  60  VAL  HB ', ' A 930  HOH  O  ', -0.685, (0.436, 58.401, -57.044)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.682, (-30.085, 21.39, -79.843)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.647, (-12.881, 8.03, -53.157)), (' A 329  LYS  HE2', ' A 354  GLN  OE1', -0.647, (-5.296, 2.219, -56.033)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.643, (-25.056, 12.142, -80.119)), (' B 504  PRO  HB3', ' B 507  ARG HH21', -0.642, (-46.967, 38.591, -13.398)), (' B  13  SER  OG ', ' B  44  SER  OG ', -0.64, (3.097, -3.421, -48.723)), (' B   8  CYS  SG ', ' B  99  GLY  O  ', -0.628, (9.007, 0.575, -32.156)), (' B  92  LEU  HB3', ' B  93  TYR  CD2', -0.626, (9.116, -0.324, -46.768)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.612, (5.97, -1.217, -41.121)), (' A 269  TYR  OH ', ' A 294  GLY  HA3', -0.602, (-3.192, 3.928, -70.223)), (' B   7  LEU HD22', ' B 103  VAL HG23', -0.6, (2.548, -0.28, -30.514)), (' B 277  TYR  HA ', ' B 396  TYR  O  ', -0.598, (-0.128, 30.112, -26.86)), (' B  12  THR HG21', ' B  26  CYS  HA ', -0.593, (5.54, -1.469, -41.026)), (' B 195  ILE  O  ', ' B 195  ILE HG23', -0.589, (-34.314, 21.688, -47.647)), (' B 183  THR  OG1', ' B 228  THR  OG1', -0.585, (-26.481, 17.508, -42.504)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.582, (-30.661, 21.272, -80.082)), (' A  13  SER  OG ', ' A  44  SER  OG ', -0.579, (4.178, 52.287, -48.429)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.568, (2.841, 42.169, -28.954)), (' A 326  PRO  HD2', ' A 329  LYS  HZ1', -0.563, (-7.718, 0.015, -58.584)), (' B 187  VAL HG23', ' B 862  HOH  O  ', -0.55, (-38.709, 12.834, -52.173)), (' A 277  TYR  HA ', ' A 396  TYR  O  ', -0.548, (3.497, 17.006, -66.198)), (' A 275  GLN  O  ', ' A 395  HIS  ND1', -0.547, (7.29, 13.11, -64.049)), (' A 235  LEU HD21', ' A 382  TYR  CE2', -0.544, (-7.18, 32.62, -60.736)), (' A 200  PHE  N  ', ' A 806  HOH  O  ', -0.543, (-30.949, 30.079, -69.168)), (' B 460  LYS  NZ ', ' B 801  HOH  O  ', -0.538, (-7.395, 28.624, -11.309)), (' A 127  THR  O  ', ' A 131  LYS  HG3', -0.533, (3.351, 35.478, -68.284)), (' B 102  ASN  C  ', ' B 104  THR  H  ', -0.532, (1.974, -1.509, -25.18)), (' B  34  VAL  O  ', ' B  40  LYS  NZ ', -0.532, (-4.349, -11.297, -33.237)), (' A 139  LYS  O  ', ' A 143  GLU  HG2', -0.53, (-14.623, 37.334, -63.077)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.526, (-25.463, 19.858, -87.408)), (' A   6  VAL  O  ', ' A   6  VAL HG23', -0.524, (3.461, 42.242, -61.901)), (' A 158  LEU HD12', ' A 162  GLU  HB3', -0.52, (-44.286, 28.406, -70.855)), (' A  20  ILE HD11', ' A 140  ALA  HB3', -0.507, (-10.289, 42.376, -62.767)), (' B 474 AMET  SD ', ' B 495  VAL HG11', -0.503, (-40.801, 24.847, -6.163)), (' B   8  CYS  O  ', ' B   9  ASN  HB2', -0.5, (9.199, 6.4, -35.748)), (' B  10  SER  O  ', ' B  11  GLN  O  ', -0.491, (8.404, 1.553, -41.151)), (' A 177  ASN  ND2', ' A 179  ASN HD22', -0.489, (-24.3, 30.293, -75.076)), (' A 296  ALA  O  ', ' A 300  PRO  HA ', -0.482, (-1.865, 1.504, -61.295)), (' B 451  THR HG21', ' B 585  LEU HD23', -0.482, (-25.101, 27.777, -6.11)), (' A 445  PRO  HD2', ' A 448  ILE HD12', -0.482, (-17.384, 9.626, -89.312)), (' B 163  LEU  HG ', ' B 211  TYR  CD2', -0.48, (-41.964, 20.121, -40.727)), (' B 195  ILE  CG2', ' B 195  ILE  O  ', -0.479, (-34.13, 21.513, -47.655)), (' B 477  LYS  NZ ', ' B 551  GLU  OE2', -0.479, (-33.665, 13.612, -4.61)), (' B 376  ILE HG22', ' B 400  GLY  HA3', -0.478, (-11.028, 27.62, -22.848)), (' A 367  THR HG22', ' A 392  ARG  HB3', -0.477, (1.611, 17.939, -52.759)), (' A  59  ASP  OD1', ' A  61  THR  OG1', -0.477, (1.057, 62.582, -62.062)), (' B 510  VAL HG21', ' B 541  TYR  CG ', -0.476, (-32.061, 34.774, -20.679)), (' B 508  LYS  HD2', ' B 961  HOH  O  ', -0.475, (-35.977, 41.624, -17.775)), (' B 177  ASN  HB2', ' B 516  ASN  ND2', -0.471, (-32.687, 18.606, -27.056)), (' B 425  VAL HG12', ' B 429  MET  HE3', -0.469, (-6.874, 25.838, -21.791)), (' B 115  THR  HA ', ' B 411  LEU  O  ', -0.468, (-20.19, 5.936, -25.652)), (' B   8  CYS  HB3', ' B  10  SER  OG ', -0.464, (9.627, 2.45, -35.543)), (' A 327  ILE HD11', ' A 345  LYS  O  ', -0.462, (-19.041, 2.716, -58.015)), (' A 290  HIS  HA ', ' A 320  LYS  HE2', -0.458, (-9.431, 4.056, -71.541)), (' B  13  SER  O  ', ' B  44  SER  HA ', -0.457, (1.431, -2.201, -47.216)), (' A  19  CYS  HB2', ' A  23  PRO  HD2', -0.456, (-2.872, 47.001, -59.594)), (' B 371  VAL HG23', ' B 393  ALA  HB2', -0.456, (-0.626, 31.511, -34.789)), (' B 167  TRP  CZ3', ' B 174  PRO  HD2', -0.455, (-34.171, 9.41, -36.712)), (' B 429  MET  O  ', ' B 433  GLY  HA2', -0.451, (-4.967, 24.568, -13.95)), (' A 140  ALA  O  ', ' A 144  THR HG23', -0.45, (-14.245, 41.911, -62.232)), (' A  63  LEU  HB2', ' A  83  LEU HD12', -0.45, (3.417, 62.306, -55.0)), (' B 443  ARG  O  ', ' B 569  LYS  HA ', -0.448, (-25.538, 39.131, -13.942)), (' A 490  ARG  HB2', ' A 491  PRO  HD3', -0.447, (-36.182, 28.198, -92.389)), (' A 276  LYS  O  ', ' A 395  HIS  HA ', -0.446, (5.146, 15.294, -63.004)), (' B 347  LYS  HD2', ' B 353  GLU  OE2', -0.439, (-9.157, 42.323, -45.989)), (' B  83  LEU  O  ', ' B  89  VAL  HA ', -0.438, (4.624, -11.173, -40.887)), (' A 304  ILE  HA ', ' A 370  ILE  O  ', -0.437, (-2.568, 11.084, -59.419)), (' B 563  VAL  O  ', ' B 567  ARG  HG2', -0.437, (-25.875, 29.792, -17.258)), (' B   2  VAL  N  ', ' B 831  HOH  O  ', -0.437, (1.711, 1.89, -48.417)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.436, (9.697, -0.009, -32.706)), (' B  10  SER  O  ', ' B  11  GLN  C  ', -0.436, (7.99, 2.029, -40.891)), (' A 244  GLU  HB2', ' A 276  LYS  HB2', -0.434, (10.009, 18.106, -63.309)), (' A   4  ALA  O  ', ' A  24  PHE  HB2', -0.432, (4.525, 42.865, -55.263)), (' A 303  ARG  NH1', ' A 353  GLU  O  ', -0.431, (-6.748, 9.468, -52.92)), (' A  31  TYR  CD2', ' A  87  GLY  HA2', -0.431, (11.302, 56.723, -63.795)), (' B  31  TYR  CD2', ' B  87  GLY  HA2', -0.43, (5.61, -10.744, -33.377)), (' B  14  LEU  HB2', ' B  25  LEU  O  ', -0.429, (3.035, -2.178, -41.352)), (' A 376  ILE HG12', ' A 425  VAL HG11', -0.428, (-2.546, 21.186, -71.332)), (' B  31  TYR  CE2', ' B  87  GLY  HA2', -0.427, (6.063, -11.148, -33.143)), (' B  46  ASN  HB2', ' B  70  TYR  HE1', -0.426, (-0.439, -8.073, -51.757)), (' A 456  VAL HG23', ' A 457  TYR  CD2', -0.422, (-7.049, 18.12, -86.654)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.422, (-38.424, 28.211, -3.037)), (' B 503  ASN  N  ', ' B 504  PRO  CD ', -0.422, (-45.672, 37.837, -9.205)), (' B 376  ILE HG12', ' B 425  VAL HG11', -0.421, (-7.014, 25.45, -24.181)), (' A  14  LEU  HB2', ' A  25  LEU  O  ', -0.42, (5.542, 49.757, -55.398)), (' A  72  CYS  SG ', ' A  74  SER  HB2', -0.42, (-1.107, 71.937, -54.7)), (' A 304  ILE HG12', ' A 370  ILE  HB ', -0.417, (-1.375, 9.395, -61.109)), (' A  63  LEU  CB ', ' A  83  LEU HD12', -0.417, (2.962, 62.772, -54.729)), (' A 367  THR  HA ', ' A 392  ARG  O  ', -0.417, (0.338, 16.545, -53.757)), (' B 512  ILE  O  ', ' B 546  PHE  HA ', -0.414, (-33.951, 26.183, -15.062)), (' B   4  ALA  O  ', ' B  24  PHE  HB2', -0.414, (2.59, 5.002, -40.485)), (' B  50  CYS  SG ', ' B  71  TYR  HA ', -0.412, (-3.541, -17.729, -50.131)), (' B  28  LYS  O  ', ' B  32  ASP  OD1', -0.412, (5.613, -5.894, -32.454)), (' A 127  THR HG22', ' A 130  LEU HD12', -0.409, (5.579, 39.548, -67.777)), (' B 177  ASN  CB ', ' B 516  ASN  ND2', -0.407, (-32.72, 18.023, -27.332)), (' A 531  GLN  HA ', ' A 531  GLN HE21', -0.407, (-26.584, 19.255, -77.487)), (' B  64  TYR  CD1', ' B  64  TYR  N  ', -0.407, (0.807, -17.942, -45.604)), (' A   7  LEU HD22', ' A 103  VAL HG22', -0.406, (7.71, 46.002, -65.59)), (' A  83  LEU  O  ', ' A  89  VAL  HA ', -0.406, (8.462, 58.687, -57.109)), (' B 262  PHE  CE2', ' B 297  LEU HD12', -0.406, (-9.12, 47.76, -26.316)), (' A 175  PRO  HD2', ' A 180  TYR  CE2', -0.405, (-24.983, 36.619, -71.651)), (' A   9  ASN  O  ', ' A  10  SER  C  ', -0.403, (10.362, 42.797, -54.745)), (' B 368  ALA  O  ', ' B 393  ALA  HA ', -0.401, (2.064, 32.849, -35.722)), (' B 304  ILE  HA ', ' B 370  ILE  O  ', -0.401, (-3.048, 36.167, -34.125)), (' B 531  GLN  OE1', ' B 535  SER  OG ', -0.4, (-30.162, 27.455, -25.256)), (' A  31  TYR  CE2', ' A  87  GLY  HA2', -0.4, (11.122, 57.117, -64.305)), (' A 512  ILE  HA ', ' A 531  GLN  O  ', -0.4, (-26.382, 20.393, -82.292))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
