# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 196 ', 'GLY', 0.049422814040970306, (-30.911, 27.894999999999992, -56.137)), ('A', ' 218 ', 'LYS', 0.010763427297804471, (-42.607000000000006, 25.628999999999998, -57.559)), ('A', ' 219 ', 'LEU', 0.016508595973813833, (-41.730999999999995, 28.694999999999986, -59.761)), ('A', ' 339 ', 'ARG', 0.018517206572941466, (-25.389999999999997, 22.785, -59.14)), ('A', ' 484 ', 'VAL', 0.07626900716256425, (-31.933000000000007, 38.33499999999999, -80.279))]
data['omega'] = []
data['rota'] = [('A', '   7 ', 'LEU', 0.25728971003326334, (7.052, 42.666, -62.44)), ('A', '  12 ', 'THR', 0.0013599335943581536, (7.84900000000001, 47.597999999999985, -51.744)), ('A', '  46 ', 'ASN', 0.04798643777330327, (-0.8990000000000062, 55.773, -46.436)), ('A', '  72 ', 'CYS', 0.07783092013381941, (0.6939999999999991, 68.81, -54.328)), ('A', '  81 ', 'PHE', 0.07906347445353235, (11.018000000000004, 66.341, -53.152)), ('A', '  92 ', 'LEU', 0.08745470441295747, (10.667000000000005, 51.78, -49.26)), ('A', ' 162 ', 'GLU', 0.04362877139191496, (-42.34300000000001, 26.921999999999997, -69.161)), ('A', ' 173 ', 'ARG', 0.05038016970701523, (-30.833000000000006, 41.637, -71.09)), ('A', ' 209 ', 'VAL', 0.0075525999068312855, (-39.408999999999985, 30.494999999999997, -72.468)), ('A', ' 217 ', 'TYR', 0.23168090613838915, (-39.036, 24.603, -56.556)), ('A', ' 226 ', 'VAL', 0.10039351978907664, (-29.557000000000002, 37.824, -60.49400000000001)), ('A', ' 230 ', 'HIS', 0.03347335828914054, (-18.207, 34.974, -57.557)), ('A', ' 247 ', 'VAL', 0.034064640902156135, (16.776000000000003, 10.218999999999996, -65.904)), ('A', ' 255 ', 'THR', 0.0013599335943581536, (4.1169999999999956, -2.8600000000000065, -63.502)), ('A', ' 259 ', 'SER', 0.22869208739466051, (-2.5219999999999967, -5.5120000000000005, -70.006)), ('A', ' 329 ', 'LYS', 0.03524468846338388, (-10.544000000000004, 3.5009999999999923, -54.205)), ('A', ' 344 ', 'ASP', 0.010751748343251785, (-23.333000000000002, 8.793999999999997, -58.861000000000004)), ('A', ' 376 ', 'ILE', 0.23517220698172073, (-7.093000000000002, 21.257, -71.557)), ('A', ' 440 ', 'THR', 0.04044693420225593, (-5.172000000000004, 7.136999999999993, -84.697)), ('A', ' 502 ', 'ARG', 0.20407458559820357, (-36.289, 9.426999999999985, -97.032)), ('A', ' 516 ', 'ASN', 0.0, (-29.296, 27.073, -79.385)), ('A', ' 530 ', 'THR', 0.05848783741997737, (-30.45299999999999, 18.479, -79.657)), ('A', ' 531 ', 'GLN', 0.05928051782397066, (-26.879999999999995, 19.586999999999993, -78.789)), ('A', ' 584 ', 'LYS', 0.06142968010915294, (-13.422000000000002, 20.722999999999992, -97.60900000000001)), ('A', ' 592 ', 'ILE', 0.06009175176924223, (-32.455999999999996, 19.101, -103.593)), ('B', '   8 ', 'CYS', 0.20495623368189847, (7.35, 4.038999999999996, -33.622)), ('B', '  12 ', 'THR', 0.018315692166428504, (6.122999999999998, 0.814999999999996, -43.514)), ('B', '  35 ', 'ILE', 0.0716524360034052, (-1.3850000000000011, -10.928000000000004, -32.127)), ('B', '  68 ', 'MET', 0.15655351259296807, (4.5749999999999975, -12.642000000000007, -55.345)), ('B', '  69 ', 'SER', 0.00833517320298481, (0.9659999999999958, -13.507999999999992, -54.321)), ('B', '  72 ', 'CYS', 0.08217671342658954, (-3.508999999999997, -19.363, -46.653000000000006)), ('B', '  76 ', 'LYS', 0.27999175589385106, (0.15299999999999425, -21.778, -50.21)), ('B', '  95 ', 'ASN', 0.06322672733073831, (15.323999999999998, -3.7410000000000068, -41.445)), ('B', ' 103 ', 'VAL', 0.18502474070568845, (1.5029999999999997, -1.2469999999999999, -27.463)), ('B', ' 124 ', 'ASN', 0.1359728731954388, (-5.762, 12.332, -23.096)), ('B', ' 160 ', 'ASP', 0.19513187966383608, (-45.90600000000001, 25.245, -40.531)), ('B', ' 162 ', 'GLU', 0.10223349840108432, (-45.27399999999999, 20.919999999999995, -37.513)), ('B', ' 179 ', 'ASN', 0.032094184963784106, (-27.748999999999995, 18.986, -30.578000000000003)), ('B', ' 187 ', 'VAL', 0.1738460924000075, (-36.676, 13.625, -54.342000000000006)), ('B', ' 188 ', 'THR', 0.07211494510422475, (-35.199, 14.799, -57.753)), ('B', ' 191 ', 'SER', 0.17834503194779247, (-31.039, 11.898999999999996, -57.27300000000002)), ('B', ' 192 ', 'LYS', 0.009456642025406466, (-31.451999999999998, 14.256000000000004, -54.15800000000001)), ('B', ' 195 ', 'ILE', 0.13978216779944114, (-32.772000000000006, 21.680999999999997, -48.87400000000001)), ('B', ' 219 ', 'LEU', 0.09945436286372285, (-41.39399999999999, 21.323, -47.361)), ('B', ' 231 ', 'THR', 0.24761359205047495, (-15.162, 12.988999999999997, -43.818000000000005)), ('B', ' 247 ', 'VAL', 0.06242444294024757, (12.744999999999992, 36.216000000000015, -20.954000000000004)), ('B', ' 256 ', 'LEU', 0.002150808392413147, (2.7739999999999956, 52.93599999999999, -25.379)), ('B', ' 353 ', 'GLU', 0.16377548204691045, (-6.352999999999999, 41.06499999999998, -43.329)), ('B', ' 376 ', 'ILE', 0.2221586599771101, (-11.536, 26.068, -25.097)), ('B', ' 458 ', 'ASP', 0.01795729302280336, (-11.246, 27.261, -5.322)), ('B', ' 484 ', 'VAL', 0.0, (-37.803, 8.485999999999997, -25.852)), ('B', ' 486 ', 'SER', 0.14341118437809208, (-35.029, 13.467, -21.868)), ('B', ' 531 ', 'GLN', 0.058688907351486984, (-33.059, 27.319, -22.972)), ('B', ' 584 ', 'LYS', 0.026014522532470056, (-24.355999999999998, 24.428, -1.832)), ('B', ' 592 ', 'ILE', 0.1340326241443191, (-43.349, 24.904000000000007, -0.98))]
data['cbeta'] = [('A', '  81 ', 'PHE', ' ', 0.26688252333699153, (11.616, 65.11, -52.47)), ('A', ' 484 ', 'VAL', ' ', 0.2665091426978068, (-31.815, 38.113, -78.729)), ('A', ' 592 ', 'ILE', ' ', 0.2953802075255668, (-33.304, 18.385000000000005, -102.44500000000002)), ('B', ' 256 ', 'LEU', ' ', 0.25148452703396734, (3.893000000000009, 53.95999999999999, -25.720000000000002))]
data['probe'] = [(' B  27  CYS  SG ', ' B 856  HOH  O  ', -0.85, (7.898, -4.783, -43.316)), (' A 326  PRO  CG ', ' A 329  LYS  HZ1', -0.829, (-8.684, -0.608, -57.835)), (' B 146  LYS  NZ ', ' B 229  SER  HA ', -0.673, (-22.321, 14.013, -39.592)), (' B 279  THR  HB ', ' B 429  MET  HE2', -0.659, (-6.006, 27.732, -20.82)), (' A 326  PRO  HB2', ' A 329  LYS  NZ ', -0.651, (-9.699, -0.241, -56.943)), (' A 326  PRO  CD ', ' A 329  LYS  HZ1', -0.647, (-8.993, -0.155, -58.149)), (' B 511  PHE  HB3', ' B 530  THR HG22', -0.645, (-38.131, 28.248, -20.595)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.617, (-12.907, 8.201, -53.038)), (' A 326  PRO  HG2', ' A 329  LYS  HZ1', -0.616, (-8.675, -0.817, -57.121)), (' A  14  LEU  HB2', ' A  25  LEU  O  ', -0.613, (5.692, 49.966, -55.81)), (' A 326  PRO  HD2', ' A 329  LYS  NZ ', -0.612, (-8.535, 0.628, -58.245)), (' A 156  GLU  HG2', ' A 164  HIS  HB2', -0.612, (-46.231, 34.519, -68.386)), (' A 280  LEU HD11', ' A 438  LEU  HG ', -0.607, (-2.372, 11.605, -76.91)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.607, (-31.023, 21.797, -79.993)), (' A 445  PRO  HD2', ' A 448  ILE HD12', -0.606, (-17.903, 10.028, -89.339)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.604, (-32.504, 34.768, -21.581)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.601, (5.766, -0.891, -41.123)), (' B 146  LYS  HZ1', ' B 229  SER  HA ', -0.598, (-22.311, 14.323, -39.75)), (' A 279  THR  HB ', ' A 429  MET  HE2', -0.597, (-0.365, 18.801, -74.508)), (' B  13  SER  HB2', ' B  92  LEU  HB2', -0.591, (6.498, -1.75, -47.978)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.582, (8.922, 0.372, -33.056)), (' A 326  PRO  HD2', ' A 329  LYS  HZ1', -0.581, (-8.498, 0.28, -58.22)), (' A 326  PRO  CB ', ' A 329  LYS  HZ1', -0.58, (-9.595, -0.254, -57.596)), (' B 445  PRO  HD2', ' B 448  ILE HD12', -0.577, (-26.817, 36.321, -10.25)), (' B  12  THR HG21', ' B  26  CYS  HA ', -0.573, (5.341, -1.478, -40.915)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.569, (-26.237, 11.978, -80.041)), (' A 297  LEU HD11', ' A 324  TYR  HB3', -0.551, (-8.169, -0.452, -66.521)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.549, (-30.502, 21.825, -79.992)), (' A 425  VAL HG12', ' A 429  MET  HE3', -0.539, (-1.568, 21.084, -73.743)), (' B  77  PRO  HB2', ' B  78  PRO  HD2', -0.532, (4.441, -23.419, -54.737)), (' A 245  HIS  HE1', ' A 275  GLN  NE2', -0.532, (10.316, 16.369, -71.369)), (' B 297  LEU HD11', ' B 324  TYR  HB3', -0.531, (-10.315, 47.732, -29.175)), (' B 280  LEU HD11', ' B 438  LEU  HG ', -0.525, (-8.628, 35.739, -18.094)), (' A 409  ARG  NH2', ' A 422  PHE  O  ', -0.525, (-7.537, 30.739, -73.205)), (' A 158  LEU HD12', ' A 162  GLU  HB3', -0.524, (-44.696, 28.304, -70.365)), (' A 214  THR HG22', ' A 340  VAL HG12', -0.524, (-28.299, 22.78, -63.112)), (' B 249  ILE HG23', ' B 273  GLY  HA3', -0.521, (4.91, 39.087, -25.93)), (' B  13  SER  OG ', ' B  44  SER  OG ', -0.513, (2.756, -3.497, -48.492)), (' B  13  SER  HG ', ' B  44  SER  HG ', -0.51, (3.186, -3.289, -48.068)), (' B 233  MET  HE3', ' B 234  PRO  HD2', -0.508, (-6.828, 14.011, -44.209)), (' A 249  ILE HG23', ' A 273  GLY  HA3', -0.505, (7.478, 7.781, -64.367)), (' A  19  CYS  HB2', ' A  23  PRO  HD2', -0.502, (-3.323, 47.689, -59.969)), (' A 376  ILE HG22', ' A 400  GLY  HA3', -0.501, (-6.163, 19.104, -74.036)), (' A 245  HIS  CE1', ' A 275  GLN  NE2', -0.5, (10.761, 16.096, -71.381)), (' B 376  ILE HG22', ' B 400  GLY  HA3', -0.498, (-11.293, 27.61, -22.846)), (' A 158  LEU HD11', ' A 164  HIS  CE1', -0.498, (-45.46, 30.968, -71.432)), (' B  19  CYS  HB2', ' B  23  PRO  HD2', -0.495, (-6.2, 0.462, -38.152)), (' A 326  PRO  HB2', ' A 329  LYS  HZ2', -0.494, (-9.927, 0.639, -56.478)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.491, (-38.528, 28.605, -2.689)), (' A 533  VAL HG11', ' A 560  ARG  HG3', -0.491, (-18.505, 23.476, -83.102)), (' B 425  VAL HG12', ' B 429  MET  HE3', -0.489, (-7.141, 25.973, -21.699)), (' B 533  VAL HG11', ' B 560  ARG  HG3', -0.487, (-26.156, 23.06, -17.548)), (' A 163  LEU HD11', ' A 200  PHE  HE2', -0.487, (-38.31, 31.243, -67.024)), (' B 451  THR HG21', ' B 585  LEU HD23', -0.487, (-25.581, 27.545, -6.092)), (' B 551  GLU  HG2', ' B 577  SER  HB3', -0.486, (-32.936, 15.382, -7.771)), (' B 409  ARG  NH2', ' B 422  PHE  O  ', -0.484, (-12.506, 16.531, -25.021)), (' A 127  THR HG23', ' A 130  LEU  H  ', -0.483, (4.723, 38.058, -66.152)), (' A 451  THR HG21', ' A 585  LEU HD23', -0.481, (-15.584, 17.921, -93.833)), (' B 278  SER  HB2', ' B 436  MET  HE2', -0.48, (-1.939, 32.766, -21.115)), (' A 371  VAL HG23', ' A 393  ALA  HB2', -0.477, (-0.642, 16.189, -59.029)), (' A 551  GLU  HG2', ' A 577  SER  HB3', -0.477, (-23.17, 30.13, -94.981)), (' B 363  LEU HD22', ' B 391  LEU HD21', -0.476, (-6.29, 29.489, -39.143)), (' B  57  VAL HG11', ' B  72  CYS  HB2', -0.473, (-5.482, -18.551, -45.138)), (' A 326  PRO  CB ', ' A 329  LYS  NZ ', -0.472, (-9.753, -0.134, -57.191)), (' B 182  PHE  HB2', ' B 198  TYR  O  ', -0.469, (-32.802, 18.705, -39.019)), (' B 371  VAL HG23', ' B 393  ALA  HB2', -0.468, (-1.129, 31.581, -34.568)), (' B  12  THR HG21', ' B  25  LEU  O  ', -0.467, (3.777, -1.629, -40.824)), (' A 519  ASN  HB3', ' A 530  THR HG21', -0.465, (-31.5, 22.159, -79.494)), (' A 561  PHE  CZ ', ' A 585  LEU HD21', -0.459, (-17.788, 19.856, -92.404)), (' B 561  PHE  CZ ', ' B 585  LEU HD21', -0.456, (-27.23, 25.9, -7.793)), (' A 443  ARG  HG3', ' A 569  LYS  HG2', -0.453, (-17.822, 7.205, -82.508)), (' B 365  GLU  HG2', ' B 390  ARG  CZ ', -0.452, (-4.544, 24.509, -44.658)), (' A   7  LEU HD22', ' A 103  VAL HG22', -0.446, (7.659, 45.178, -65.807)), (' A 145  PHE  O  ', ' A 148  SER  OG ', -0.446, (-21.643, 44.6, -66.213)), (' B   7  LEU HD13', ' B 103  VAL HG22', -0.445, (2.366, -0.069, -30.743)), (' A 278  SER  HB2', ' A 436  MET  HE2', -0.445, (3.252, 13.854, -71.751)), (' B 443  ARG  HG3', ' B 569  LYS  HG2', -0.44, (-25.085, 39.078, -16.343)), (' B 474 BMET  HB3', ' B 474 BMET  HE2', -0.439, (-39.22, 25.034, -3.737)), (' A 584  LYS  NZ ', ' A 813  HOH  O  ', -0.439, (-11.118, 26.608, -94.215)), (' A 386  VAL HG13', ' A 390  ARG  NE ', -0.438, (-8.253, 26.243, -56.53)), (' A  57  VAL HG11', ' A  72  CYS  HB2', -0.436, (-1.138, 68.001, -56.108)), (' A 474  MET  HE2', ' A 590  LEU  HB2', -0.434, (-27.897, 16.117, -99.394)), (' B 303  ARG  NH1', ' B 353  GLU  O  ', -0.428, (-4.598, 38.594, -41.511)), (' B 249  ILE HD11', ' B 270  GLN  HG2', -0.425, (4.431, 42.957, -21.968)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.423, (-26.172, 20.259, -86.733)), (' A 363  LEU HD22', ' A 391  LEU HD21', -0.423, (-7.356, 18.835, -56.97)), (' A 249  ILE HD11', ' A 270  GLN  HG2', -0.423, (8.566, 4.043, -67.232)), (' B  16  CYS  O  ', ' B  22  ARG  HA ', -0.422, (-6.11, 0.433, -40.72)), (' A  15  ARG  HG3', ' A  24  PHE  CD1', -0.421, (1.23, 46.799, -52.709)), (' B  19  CYS  CB ', ' B  23  PRO  HD2', -0.419, (-6.109, 1.131, -38.062)), (' B  49  VAL HG23', ' B  58  THR HG22', -0.419, (-9.262, -11.989, -46.972)), (' A 263  SER  O  ', ' A 266  VAL HG22', -0.418, (3.076, 0.01, -74.711)), (' B 181  VAL HG12', ' B 197  GLU  HB3', -0.418, (-29.017, 21.354, -39.984)), (' A  49  VAL HG23', ' A  58  THR HG22', -0.418, (-5.479, 62.346, -53.463)), (' B 163  LEU HD11', ' B 219  LEU HD11', -0.417, (-41.065, 19.278, -42.657)), (' B 151  ILE HG12', ' B 226  VAL  CG2', -0.416, (-31.724, 9.296, -44.196)), (' B  13  SER  O  ', ' B  44  SER  HA ', -0.416, (1.032, -1.808, -46.917)), (' B 442  ARG HH11', ' B 464  HIS  CE1', -0.413, (-16.406, 46.649, -11.747)), (' A 157  VAL HG21', ' A 219  LEU  O  ', -0.413, (-43.987, 30.175, -60.455)), (' B 512  ILE  O  ', ' B 546  PHE  HA ', -0.411, (-34.026, 26.195, -14.865)), (' B 195  ILE  O  ', ' B 195  ILE HG23', -0.409, (-34.544, 21.718, -47.279)), (' A 328  ASP  OD1', ' A 329  LYS  HG3', -0.406, (-10.033, 0.668, -53.483)), (' A  19  CYS  CB ', ' A  23  PRO  HD2', -0.406, (-3.239, 47.24, -59.756)), (' A 121  ILE HG23', ' A 421  TYR  CE1', -0.405, (-0.898, 35.461, -79.121)), (' B 332  ARG  HB3', ' B 873  HOH  O  ', -0.402, (-17.311, 38.483, -41.992)), (' B  65  LEU HD23', ' B  81  PHE  CZ ', -0.401, (8.212, -13.654, -49.228)), (' B 258  ILE HG13', ' B 259  SER  N  ', -0.4, (-5.459, 50.769, -24.143)), (' A 198  TYR  HE2', ' A 211  TYR  HD1', -0.4, (-37.245, 26.957, -62.905))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
