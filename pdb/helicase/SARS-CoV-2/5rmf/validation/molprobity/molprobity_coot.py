# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 218 ', 'LYS', 0.010271463789178726, (-43.53999999999999, 24.860999999999997, -57.101)), ('A', ' 484 ', 'VAL', 0.009852453041900158, (-32.684999999999995, 37.544, -80.846)), ('B', '  27 ', 'CYS', 0.037414525690769335, (6.820999999999999, -5.047999999999995, -38.391)), ('B', '  48 ', 'TYR', 0.023890030764064672, (-2.549999999999998, -9.625999999999996, -46.86099999999999)), ('B', ' 158 ', 'LEU', 0.037007125621647756, (-49.38399999999998, 18.847, -40.421)), ('B', ' 189 ', 'LYS', 0.029997356825719114, (-35.646999999999984, 12.572000000000003, -61.07)), ('B', ' 215 ', 'THR', 0.026498538338155353, (-33.578, 27.756, -44.079))]
data['omega'] = []
data['rota'] = [('A', '  12 ', 'THR', 0.08348770517538319, (7.404999999999999, 46.592, -52.192)), ('A', '  26 ', 'CYS', 0.23944594947565306, (7.9180000000000055, 47.689, -57.198)), ('A', '  35 ', 'ILE', 0.012158799043097605, (3.5089999999999986, 57.09900000000001, -66.399)), ('A', '  46 ', 'ASN', 0.05310224710832498, (-2.203999999999989, 54.636, -46.796)), ('A', '  65 ', 'LEU', 0.06758676192894147, (6.569000000000009, 63.598, -49.912)), ('A', '  69 ', 'SER', 0.24111717155271334, (3.162000000000006, 62.938, -45.51)), ('A', '  76 ', 'LYS', 0.02567573310147629, (3.889000000000003, 70.72, -50.714)), ('A', ' 156 ', 'GLU', 0.04824583008557827, (-47.19599999999999, 33.753000000000014, -64.958)), ('A', ' 173 ', 'ARG', 0.10119075986536584, (-31.230999999999987, 40.534, -71.224)), ('A', ' 209 ', 'VAL', 0.011551952047739178, (-39.974, 30.077, -72.197)), ('A', ' 217 ', 'TYR', 0.22578467886819262, (-39.80499999999999, 23.993, -56.657999999999994)), ('A', ' 247 ', 'VAL', 0.07904219337919524, (16.510999999999996, 9.830000000000004, -66.231)), ('A', ' 255 ', 'THR', 0.0249272356659516, (3.6960000000000015, -3.4179999999999957, -63.371)), ('A', ' 342 ', 'CYS', 0.11558387631118805, (-23.541, 13.479000000000006, -60.899)), ('A', ' 344 ', 'ASP', 0.22801471532109294, (-23.433999999999997, 7.811999999999999, -58.333)), ('A', ' 365 ', 'GLU', 0.26820526644286724, (-6.256999999999996, 20.580000000000005, -50.61800000000001)), ('A', ' 502 ', 'ARG', 0.06649918995911616, (-36.441, 8.206000000000007, -97.176)), ('A', ' 516 ', 'ASN', 0.001641672870513011, (-29.915, 26.142000000000007, -79.449)), ('A', ' 530 ', 'THR', 0.022941219693650997, (-31.07499999999999, 17.719, -79.816)), ('A', ' 531 ', 'GLN', 0.27961790997879843, (-27.508999999999993, 18.877000000000002, -79.016)), ('A', ' 592 ', 'ILE', 0.014286754737570137, (-32.389, 18.831000000000003, -103.952)), ('B', '  12 ', 'THR', 0.07795228179494537, (6.678000000000001, 0.7910000000000021, -42.565999999999995)), ('B', '  76 ', 'LYS', 0.10506179141905367, (0.378999999999996, -21.781999999999996, -50.483)), ('B', '  95 ', 'ASN', 0.0031547530791149222, (15.620999999999999, -3.853999999999999, -40.578)), ('B', ' 103 ', 'VAL', 0.15418216395526105, (1.472999999999999, -1.8799999999999963, -26.938)), ('B', ' 124 ', 'ASN', 0.06310166772016416, (-6.027999999999997, 12.178, -23.040999999999997)), ('B', ' 144 ', 'THR', 0.0722798028094315, (-20.090999999999998, 5.974000000000002, -38.614)), ('B', ' 160 ', 'ASP', 0.09803129039914779, (-45.96999999999998, 25.248, -40.639)), ('B', ' 192 ', 'LYS', 0.045125800381239554, (-31.59399999999999, 13.814000000000004, -54.288)), ('B', ' 195 ', 'ILE', 0.11940553396944718, (-32.68, 21.181, -48.867)), ('B', ' 220 ', 'ASN', 0.13521555793585627, (-43.647999999999996, 18.703, -49.076)), ('B', ' 231 ', 'THR', 0.166701370189634, (-15.200999999999993, 12.313, -43.781)), ('B', ' 301 ', 'SER', 0.23657207427684618, (0.8539999999999988, 45.415, -35.481)), ('B', ' 458 ', 'ASP', 0.13760543472110892, (-11.575999999999997, 27.179, -5.461)), ('B', ' 484 ', 'VAL', 0.04513629309141666, (-38.03499999999998, 8.281, -25.541)), ('B', ' 486 ', 'SER', 0.2313159257765614, (-35.59999999999998, 13.047, -22.168)), ('B', ' 551 ', 'GLU', 0.016752817888621815, (-31.162999999999986, 14.051999999999996, -9.76))]
data['cbeta'] = []
data['probe'] = [(' B  12  THR HG21', ' B  26  CYS  HA ', -0.714, (5.954, -1.722, -39.488)), (' B 279  THR  HB ', ' B 429  MET  HE2', -0.691, (-6.228, 27.399, -20.702)), (' B  48  TYR  O  ', ' B 801  HOH  O  ', -0.676, (-4.324, -9.8, -44.483)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.668, (-33.075, 34.117, -21.613)), (' A  60  VAL  HB ', ' A 936  HOH  O  ', -0.667, (-0.533, 58.239, -57.05)), (' B   2  VAL  N  ', ' B 803  HOH  O  ', -0.661, (2.105, 2.319, -49.123)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.656, (6.268, -1.481, -39.612)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.65, (-31.065, 20.939, -79.588)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.646, (-26.63, 11.22, -80.341)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.646, (-31.441, 20.619, -80.042)), (' B 195  ILE  O  ', ' B 195  ILE HG23', -0.638, (-34.344, 21.941, -47.384)), (' B 278  SER  HB2', ' B 436  MET  HE2', -0.617, (-1.703, 32.734, -21.649)), (' B 277  TYR  HA ', ' B 396  TYR  O  ', -0.615, (0.279, 30.207, -26.639)), (' B  86  ASN  HB3', ' B1027  HOH  O  ', -0.593, (13.281, -13.667, -35.054)), (' B  13  SER  OG ', ' B  44  SER  OG ', -0.586, (3.821, -2.778, -47.713)), (' A 368  ALA  O  ', ' A 393  ALA  HA ', -0.581, (1.104, 14.725, -56.795)), (' B 477  LYS  HD3', ' B 551  GLU  OE2', -0.572, (-34.579, 13.813, -5.731)), (' A  12  THR HG21', ' A  26  CYS  HA ', -0.571, (7.253, 48.386, -55.387)), (' B  12  THR HG21', ' B  25  LEU  O  ', -0.563, (4.555, -1.753, -40.372)), (' B 124  ASN  OD1', ' B 381  ASN  ND2', -0.561, (-7.741, 14.355, -25.095)), (' A 293  ILE HG13', ' A 320  LYS  HB3', -0.557, (-11.659, 5.247, -67.857)), (' B  14  LEU  HB2', ' B  25  LEU  O  ', -0.553, (3.054, -1.784, -40.321)), (' A 215  THR HG22', ' B 193  VAL HG21', -0.552, (-30.878, 21.247, -55.704)), (' A 255  THR HG23', ' A 300  PRO  HG3', -0.536, (1.017, -2.535, -61.122)), (' A 277  TYR  HA ', ' A 396  TYR  O  ', -0.534, (2.792, 16.757, -66.274)), (' B 303  ARG  NH1', ' B 353  GLU  O  ', -0.534, (-4.234, 38.058, -42.122)), (' B   4  ALA  O  ', ' B  24  PHE  HB2', -0.53, (2.532, 5.147, -40.008)), (' B 103  VAL  CG1', ' B 103  VAL  O  ', -0.529, (-0.333, -2.02, -28.406)), (' B 280  LEU HD11', ' B 438  LEU  HG ', -0.528, (-9.16, 35.705, -18.301)), (' B 185  TYR  CE2', ' B 194  GLN  HG2', -0.528, (-28.388, 16.267, -49.489)), (' B 183  THR  HG1', ' B 228  THR  HG1', -0.523, (-26.602, 16.703, -44.206)), (' A  59  ASP  OD1', ' A  61  THR  OG1', -0.509, (0.212, 62.214, -62.105)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.508, (-38.936, 28.219, -2.799)), (' B   8  CYS  SG ', ' B  29  CYS  SG ', -0.503, (7.281, 0.122, -32.442)), (' A 376  ILE HG12', ' A 425  VAL HG11', -0.5, (-3.401, 20.491, -71.337)), (' B 451  THR HG21', ' B 585  LEU HD23', -0.499, (-25.353, 27.708, -6.249)), (' A 304  ILE  HA ', ' A 370  ILE  O  ', -0.498, (-2.995, 11.119, -59.726)), (' A 319  GLU  HA ', ' A 319  GLU  OE2', -0.498, (-18.68, 4.693, -66.385)), (' A 480  ILE HG21', ' A 550  THR HG22', -0.497, (-28.001, 32.197, -90.096)), (' B 551  GLU  HG2', ' B 577  SER  HB3', -0.497, (-33.779, 15.332, -8.339)), (' B  15  ARG  HG3', ' B  24  PHE  CD2', -0.493, (0.049, 2.527, -43.519)), (' B 220  ASN  O  ', ' B 223  ASP  OD2', -0.492, (-41.255, 17.016, -49.314)), (' A 275  GLN  O  ', ' A 395  HIS  ND1', -0.49, (6.649, 12.903, -64.062)), (' B 333  ILE  HB ', ' B 358  CYS  SG ', -0.489, (-11.815, 30.868, -41.599)), (' B 378  MET  O  ', ' B 407  ALA  HB2', -0.488, (-16.207, 20.098, -28.055)), (' A 378  MET  O  ', ' A 407  ALA  HB2', -0.485, (-12.583, 26.002, -70.731)), (' A 472  PHE  HA ', ' A 588  THR  O  ', -0.483, (-23.24, 12.438, -98.847)), (' B  92  LEU  HB3', ' B  93  TYR  CD2', -0.482, (9.58, -0.2, -46.342)), (' A 516  ASN  H  ', ' A 516  ASN  ND2', -0.479, (-28.428, 27.841, -78.901)), (' B 512  ILE  O  ', ' B 546  PHE  HA ', -0.476, (-34.269, 26.289, -15.223)), (' A 304  ILE HG12', ' A 370  ILE  HB ', -0.476, (-1.679, 9.428, -61.267)), (' B 442  ARG  NH1', ' B 464  HIS  CE1', -0.476, (-17.629, 46.529, -12.453)), (' A 269  TYR  OH ', ' A 294  GLY  HA3', -0.475, (-3.87, 3.376, -69.93)), (' B 259  SER  OG ', ' B 261  GLU  HB2', -0.475, (-10.31, 50.421, -23.15)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.471, (2.694, 41.942, -28.893)), (' A 512  ILE  HA ', ' A 531  GLN  O  ', -0.469, (-27.088, 19.729, -81.952)), (' B 472  PHE  HA ', ' B 588  THR  O  ', -0.468, (-34.026, 31.319, -2.891)), (' B 460  LYS  CE ', ' B 823  HOH  O  ', -0.467, (-8.549, 28.759, -9.961)), (' A 157  VAL HG21', ' A 219  LEU  O  ', -0.465, (-44.727, 29.407, -60.133)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.464, (-26.128, 19.333, -87.052)), (' A 533  VAL HG11', ' A 560  ARG  HG3', -0.463, (-19.102, 22.636, -83.008)), (' B  13  SER  HB2', ' B  92  LEU  HB2', -0.462, (6.725, -1.482, -47.01)), (' B 504  PRO  HB3', ' B 507  ARG HH21', -0.462, (-47.644, 38.194, -12.961)), (' A  12  THR  CG2', ' A  26  CYS  HA ', -0.46, (7.419, 47.934, -55.108)), (' A  14  LEU  HB2', ' A  25  LEU  O  ', -0.459, (4.826, 49.13, -55.969)), (' B 177  ASN  HB3', ' B 516  ASN  ND2', -0.458, (-33.136, 17.108, -26.835)), (' A 451  THR HG21', ' A 585  LEU HD23', -0.457, (-15.932, 16.953, -93.701)), (' B 257  ASN  HB2', ' B 874  HOH  O  ', -0.456, (-1.601, 54.633, -27.809)), (' A 151  ILE HG12', ' A 226  VAL HG22', -0.456, (-31.649, 40.174, -60.886)), (' B 152  ALA  HB2', ' B 167  TRP  CZ3', -0.456, (-35.979, 9.777, -38.558)), (' B 533  VAL HG11', ' B 560  ARG  O  ', -0.456, (-25.553, 23.964, -16.516)), (' A 332  ARG  NH2', ' A 342  CYS  SG ', -0.455, (-20.139, 14.881, -61.088)), (' A 239  THR  O  ', ' A 388  ASN  ND2', -0.454, (-0.363, 24.926, -63.775)), (' A 139  LYS  O  ', ' A 143  GLU  HG2', -0.454, (-15.378, 36.93, -62.818)), (' A   4  ALA  O  ', ' A  24  PHE  HB2', -0.454, (3.558, 42.357, -55.351)), (' B  16  CYS  O  ', ' B  22  ARG  HA ', -0.453, (-5.75, -0.297, -40.376)), (' B 386  VAL  O  ', ' B 390  ARG  HG2', -0.453, (-5.433, 22.595, -39.155)), (' A 280  LEU HD11', ' A 438  LEU  HG ', -0.451, (-2.61, 10.623, -76.746)), (' B  46  ASN  HB3', ' B  47  PRO  HD2', -0.449, (-4.018, -6.632, -52.169)), (' B 385  SER  OG ', ' B 802  HOH  O  ', -0.449, (-3.247, 17.334, -36.317)), (' B 293  ILE HG13', ' B 320  LYS  HB3', -0.448, (-13.905, 41.621, -29.683)), (' B 133  PHE  HA ', ' B 913  HOH  O  ', -0.447, (-4.474, 8.64, -35.096)), (' B  13  SER  O  ', ' B  44  SER  HA ', -0.447, (1.612, -1.798, -46.306)), (' A 244  GLU  HB2', ' A 276  LYS  HB2', -0.444, (9.687, 17.697, -63.33)), (' A 276  LYS  O  ', ' A 395  HIS  HA ', -0.442, (4.407, 15.367, -63.429)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.441, (-13.183, 7.54, -52.763)), (' A  21  ARG  NH1', ' A 817  HOH  O  ', -0.439, (-11.023, 41.345, -57.944)), (' A 582  TYR  OH ', ' A 589  SER  HB2', -0.436, (-22.536, 17.343, -102.327)), (' A 585  LEU HD22', ' A 587  PHE  CZ ', -0.432, (-18.35, 15.23, -93.322)), (' A 367  THR  HA ', ' A 392  ARG  O  ', -0.429, (-0.385, 16.169, -53.834)), (' A 269  TYR  CD1', ' A 295  LEU HD13', -0.429, (0.138, 6.33, -68.778)), (' A 296  ALA  O  ', ' A 300  PRO  HA ', -0.426, (-2.252, 1.258, -61.212)), (' B  49  VAL HG23', ' B  58  THR HG22', -0.425, (-8.758, -12.088, -47.132)), (' A 139  LYS  HG2', ' A 232  VAL HG22', -0.424, (-13.471, 35.397, -61.168)), (' B 195  ILE  CG2', ' B 195  ILE  O  ', -0.424, (-34.008, 21.004, -47.345)), (' A 255  THR  HB ', ' A 257  ASN  H  ', -0.423, (2.534, -5.193, -64.619)), (' A  19  CYS  HB2', ' A  23  PRO  HD2', -0.417, (-3.975, 46.994, -59.745)), (' B  29  CYS  SG ', ' B  99  GLY  HA2', -0.416, (7.319, -1.585, -32.009)), (' B 367  THR  HA ', ' B 392  ARG  O  ', -0.416, (1.612, 30.745, -38.58)), (' A 308  ALA  O  ', ' A 359  THR  HA ', -0.416, (-13.545, 19.06, -63.056)), (' A  77  PRO  HB2', ' A 849  HOH  O  ', -0.413, (8.682, 71.885, -46.423)), (' A 163  LEU  HG ', ' A 211  TYR  CD2', -0.412, (-40.985, 28.407, -66.244)), (' A  16  CYS  O  ', ' A  22  ARG  HA ', -0.412, (-4.398, 48.068, -57.375)), (' B 176  LEU HD22', ' B 200  PHE  HB2', -0.412, (-36.383, 15.449, -34.54)), (' A 200  PHE  HA ', ' A 210  VAL  O  ', -0.411, (-35.525, 27.85, -69.521)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.408, (8.97, 0.193, -32.214)), (' B   9  ASN  O  ', ' B  10  SER  C  ', -0.407, (8.669, 4.499, -38.709)), (' B   4  ALA  HB1', ' B   9  ASN  OD1', -0.407, (6.209, 7.789, -38.489)), (' B  16  CYS  HB2', ' B  25  LEU HD12', -0.406, (-2.064, -2.386, -37.359)), (' B 456  VAL HG23', ' B 457  TYR  CE2', -0.406, (-16.661, 28.076, -11.567)), (' B 384  LEU  HA ', ' B 384  LEU HD23', -0.404, (-6.871, 22.626, -30.466)), (' A 333  ILE  HB ', ' A 358  CYS  SG ', -0.402, (-13.965, 16.459, -56.296)), (' B 183  THR  O  ', ' B 225  PHE  HA ', -0.401, (-32.394, 15.025, -44.087)), (' A   6  VAL  HA ', ' A 129  ARG  HD2', -0.401, (4.321, 38.999, -59.669)), (' A 585  LEU HD22', ' A 587  PHE  CE2', -0.401, (-18.981, 15.539, -93.558)), (' A 516  ASN  H  ', ' A 516  ASN HD22', -0.4, (-28.356, 28.052, -79.036))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
