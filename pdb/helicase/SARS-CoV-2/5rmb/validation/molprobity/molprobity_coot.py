# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 195 ', 'ILE', 0.04458556482178022, (-34.195, 29.11800000000001, -54.297)), ('A', ' 228 ', 'THR', 0.01667284708732274, (-23.841000000000008, 34.473, -59.728999999999985)), ('A', ' 339 ', 'ARG', 0.031208093746428037, (-25.191000000000006, 22.618000000000013, -58.739)), ('A', ' 484 ', 'VAL', 0.007424765606825289, (-32.00800000000002, 38.303000000000026, -80.506))]
data['omega'] = []
data['rota'] = [('A', '  12 ', 'THR', 0.0013599335943581536, (7.802999999999999, 47.318, -51.928)), ('A', '  20 ', 'ILE', 0.15561113901281753, (-8.545000000000009, 46.68500000000003, -60.208)), ('A', '  35 ', 'ILE', 0.02241337252188753, (4.161000000000001, 57.726, -66.386)), ('A', '  46 ', 'ASN', 0.0774408248344512, (-1.1469999999999976, 55.557, -46.462999999999994)), ('A', '  81 ', 'PHE', 0.042020655230336, (11.221, 66.17, -52.887)), ('A', ' 162 ', 'GLU', 0.12710513297973539, (-42.409, 27.030000000000015, -68.983)), ('A', ' 163 ', 'LEU', 0.14627951022468155, (-42.60300000000001, 30.643000000000008, -67.623)), ('A', ' 173 ', 'ARG', 0.10775431895081332, (-30.586, 41.545, -70.87)), ('A', ' 209 ', 'VAL', 0.18325474944605344, (-39.467, 30.642000000000007, -72.383)), ('A', ' 217 ', 'TYR', 0.09024552357036822, (-39.04600000000001, 24.530000000000005, -56.49199999999999)), ('A', ' 247 ', 'VAL', 0.026383737518625355, (16.85, 10.387000000000008, -66.237)), ('A', ' 255 ', 'THR', 0.02015679731679747, (4.009000000000004, -2.771999999999995, -63.36899999999999)), ('A', ' 289 ', 'SER', 0.07574221835478327, (-9.786000000000001, 8.685000000000011, -71.326)), ('A', ' 329 ', 'LYS', 0.018611679389346707, (-10.399999999999999, 3.2250000000000103, -54.105999999999995)), ('A', ' 485 ', 'SER', 0.05581918775839224, (-28.491000000000014, 37.311000000000014, -81.87599999999999)), ('A', ' 495 ', 'VAL', 0.08472507273684589, (-34.147, 19.947000000000003, -95.61299999999997)), ('A', ' 498 ', 'GLU', 0.04305937292794767, (-37.20399999999999, 15.78300000000001, -95.874)), ('A', ' 516 ', 'ASN', 0.0, (-29.227999999999994, 26.955000000000013, -79.153)), ('A', ' 530 ', 'THR', 0.025786755626447985, (-30.49500000000001, 18.47100000000001, -79.56)), ('A', ' 531 ', 'GLN', 0.033004968300938076, (-26.944000000000003, 19.565000000000015, -78.678)), ('B', '   8 ', 'CYS', 0.2113220136860495, (7.551000000000004, 4.0750000000000055, -33.47)), ('B', '  12 ', 'THR', 0.0010696193945983275, (6.394000000000003, 0.9510000000000076, -43.18399999999999)), ('B', ' 124 ', 'ASN', 0.051417741154002404, (-5.866, 12.338000000000005, -23.053)), ('B', ' 144 ', 'THR', 0.10563904184787413, (-20.00000000000001, 6.533000000000009, -38.691)), ('B', ' 158 ', 'LEU', 0.13162723229227094, (-49.37600000000001, 18.637000000000008, -40.342)), ('B', ' 164 ', 'HIS', 0.1270155694709407, (-45.67400000000001, 13.928000000000004, -39.054)), ('B', ' 177 ', 'ASN', 0.1774394856767087, (-32.518, 17.638000000000005, -29.258)), ('B', ' 188 ', 'THR', 0.12688412827394732, (-35.336, 14.406000000000011, -57.946999999999996)), ('B', ' 192 ', 'LYS', 0.06126825423042964, (-31.417999999999992, 13.945000000000007, -54.16999999999999)), ('B', ' 195 ', 'ILE', 0.009276747648348366, (-32.666000000000004, 21.515000000000008, -48.847)), ('B', ' 219 ', 'LEU', 0.0419164129402502, (-41.661, 21.173000000000005, -47.421)), ('B', ' 220 ', 'ASN', 0.01744785893198601, (-43.823, 18.50600000000001, -48.896)), ('B', ' 228 ', 'THR', 0.07955828008254395, (-24.843999999999998, 14.899000000000008, -42.272)), ('B', ' 289 ', 'SER', 0.031306261992001164, (-13.894999999999998, 38.633, -25.358)), ('B', ' 353 ', 'GLU', 0.23998349497620255, (-6.0850000000000035, 40.74700000000001, -43.29499999999999)), ('B', ' 484 ', 'VAL', 0.011670194584314177, (-37.833000000000006, 8.559000000000003, -25.525999999999996)), ('B', ' 495 ', 'VAL', 0.08035601028453464, (-44.152000000000015, 25.23100000000001, -8.502)), ('B', ' 498 ', 'GLU', 0.06575305680815918, (-47.349, 29.271, -8.612)), ('B', ' 507 ', 'ARG', 0.11022507393949937, (-42.339, 37.046, -16.247)), ('B', ' 551 ', 'GLU', 0.27494800584981344, (-31.104000000000003, 13.981000000000002, -9.784))]
data['cbeta'] = [('A', ' 484 ', 'VAL', ' ', 0.2656735683435044, (-31.79100000000001, 38.161000000000016, -78.955)), ('A', ' 545 ', 'ILE', ' ', 0.2902468593847767, (-28.769, 15.64700000000001, -88.49899999999998)), ('B', ' 481 ', 'THR', ' ', 0.2595614194511643, (-43.063, 11.784000000000004, -16.57)), ('B', ' 545 ', 'ILE', ' ', 0.2903629132158308, (-37.38600000000002, 30.294, -13.628))]
data['probe'] = [(' A 158  LEU HD11', ' A 164  HIS  CE1', -0.861, (-45.853, 31.215, -71.508)), (' A 326  PRO  HD2', ' A 329  LYS  HZ1', -0.824, (-8.512, 0.256, -58.366)), (' A 130  LEU HD12', ' A 903  HOH  O  ', -0.752, (4.79, 40.846, -69.375)), (' B 279  THR  HB ', ' B 429  MET  HE2', -0.736, (-5.926, 27.564, -20.853)), (' A   7  LEU HD21', ' A 106  PHE  HB2', -0.725, (4.66, 44.392, -66.058)), (' B  12  THR HG21', ' B  26  CYS  HA ', -0.723, (6.336, -1.005, -40.512)), (' A  12  THR HG21', ' A  26  CYS  HA ', -0.718, (8.18, 49.218, -55.178)), (' A 244  GLU  HB2', ' A 276  LYS  HB2', -0.71, (10.077, 18.397, -63.718)), (' B   7  LEU HD21', ' B 106  PHE  HB2', -0.707, (-0.052, 2.639, -30.316)), (' A 279  THR  HB ', ' A 429  MET  HE2', -0.698, (-0.481, 18.826, -74.377)), (' B 244  GLU  HB2', ' B 276  LYS  HB2', -0.679, (7.092, 28.657, -27.125)), (' A 326  PRO  CD ', ' A 329  LYS  HZ1', -0.673, (-8.107, -0.042, -58.379)), (' B  13  SER  HG ', ' B  44  SER  HG ', -0.652, (3.49, -2.689, -48.504)), (' B 162  GLU  HG2', ' B 210  VAL HG22', -0.648, (-43.992, 21.007, -33.859)), (' B 177  ASN  HB3', ' B 516  ASN  ND2', -0.636, (-33.384, 17.815, -26.387)), (' A 326  PRO  HD2', ' A 329  LYS  NZ ', -0.633, (-8.761, 0.844, -57.727)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.629, (-30.805, 22.072, -79.989)), (' A 326  PRO  HB2', ' A 329  LYS  HZ2', -0.624, (-9.59, -0.059, -56.894)), (' A 445  PRO  HD2', ' A 448  ILE HD12', -0.622, (-17.292, 9.593, -89.098)), (' A 176  LEU HD22', ' A 200  PHE  HB2', -0.621, (-33.23, 31.951, -70.446)), (' B  12  THR HG22', ' B 859  HOH  O  ', -0.611, (6.586, -2.101, -43.553)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.611, (-31.07, 21.661, -79.615)), (' B 445  PRO  HD2', ' B 448  ILE HD12', -0.608, (-26.577, 35.737, -10.437)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.606, (-32.616, 34.815, -21.823)), (' A 516  ASN  ND2', ' A 803  HOH  O  ', -0.591, (-27.392, 30.081, -78.649)), (' A 313  ALA  O  ', ' A 801  HOH  O  ', -0.589, (-13.934, 13.8, -68.651)), (' B 183  THR  OG1', ' B 228  THR  OG1', -0.57, (-27.178, 17.526, -43.094)), (' A 376  ILE HG12', ' A 425  VAL HG11', -0.567, (-2.847, 21.2, -71.227)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.564, (-25.663, 12.256, -79.754)), (' A 533  VAL HG11', ' A 560  ARG  HG3', -0.564, (-18.408, 23.308, -83.026)), (' B 195  ILE  O  ', ' B 195  ILE HG23', -0.562, (-34.588, 21.986, -47.456)), (' B 103  VAL  O  ', ' B 103  VAL HG12', -0.559, (-0.992, -1.552, -28.264)), (' B 376  ILE HG12', ' B 425  VAL HG11', -0.549, (-7.357, 25.827, -24.643)), (' A 158  LEU HD21', ' A 164  HIS  CE1', -0.542, (-46.991, 31.605, -70.224)), (' A 326  PRO  CG ', ' A 329  LYS  HZ1', -0.541, (-8.17, -0.338, -57.978)), (' A 425  VAL HG12', ' A 429  MET  HE3', -0.538, (-1.589, 21.13, -73.553)), (' A 289  SER  HB3', ' A 320  LYS  HD3', -0.537, (-11.937, 6.441, -71.757)), (' B 533  VAL HG11', ' B 560  ARG  HG3', -0.535, (-26.3, 23.141, -17.636)), (' B 124  ASN  O  ', ' B 131  LYS  HE2', -0.53, (-3.447, 12.904, -23.196)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.528, (2.797, 42.043, -28.822)), (' A 158  LEU HD12', ' A 162  GLU  HB3', -0.521, (-44.169, 28.316, -70.435)), (' A 367  THR HG22', ' A 392  ARG  HB3', -0.513, (1.343, 18.529, -52.861)), (' A 163  LEU  HG ', ' A 211  TYR  HB3', -0.51, (-39.08, 29.353, -66.682)), (' A 326  PRO  CG ', ' A 329  LYS  NZ ', -0.51, (-8.579, 0.25, -57.541)), (' B 474 BMET  HG3', ' B 590  LEU  HB2', -0.509, (-38.386, 28.342, -3.33)), (' B  49  VAL HG23', ' B  58  THR HG22', -0.508, (-8.982, -11.498, -47.074)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.506, (5.906, -0.753, -40.607)), (' A 297  LEU HD11', ' A 324  TYR  HB3', -0.506, (-7.751, -0.485, -66.076)), (' A 255  THR HG23', ' A 300  PRO  HG3', -0.503, (1.015, -2.188, -61.418)), (' A 329  LYS  HB2', ' A 329  LYS  NZ ', -0.499, (-8.554, 1.825, -56.259)), (' B 158  LEU HD13', ' B 164  HIS  ND1', -0.495, (-48.899, 14.461, -38.189)), (' A 293  ILE HG13', ' A 320  LYS  HB3', -0.491, (-11.399, 6.009, -67.765)), (' B 163  LEU HD21', ' B 219  LEU HD13', -0.489, (-43.047, 19.602, -43.286)), (' B 425  VAL HG12', ' B 429  MET  HE3', -0.489, (-7.186, 25.922, -21.576)), (' B 372  VAL HG13', ' B 399  ILE HD12', -0.487, (-8.258, 34.328, -27.28)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.485, (-12.519, 7.886, -52.533)), (' A  12  THR  CG2', ' A  26  CYS  HA ', -0.484, (8.743, 48.564, -54.908)), (' A 122  LEU HD23', ' A 928  HOH  O  ', -0.484, (-2.479, 42.865, -73.138)), (' B  13  SER  O  ', ' B  44  SER  HA ', -0.484, (1.145, -1.428, -46.543)), (' A 386  VAL HG13', ' A 390  ARG  NE ', -0.484, (-8.321, 25.794, -56.514)), (' B 293  ILE HG13', ' B 320  LYS  HB3', -0.479, (-14.158, 41.563, -29.631)), (' A 182  PHE  HB3', ' A 225  PHE  HB3', -0.476, (-31.743, 33.897, -62.301)), (' B   8  CYS  SG ', ' B  99  GLY  O  ', -0.475, (8.961, 0.802, -31.789)), (' B 185  TYR  CE2', ' B 194  GLN  HG2', -0.475, (-28.22, 16.831, -49.573)), (' A  49  VAL HG23', ' A  58  THR HG22', -0.475, (-5.456, 62.329, -53.146)), (' A 215  THR HG22', ' B 193  VAL HG21', -0.467, (-31.343, 21.433, -55.345)), (' B 365  GLU  HG2', ' B 390  ARG  CZ ', -0.466, (-4.61, 24.347, -44.714)), (' B 297  LEU HD11', ' B 324  TYR  HB3', -0.463, (-10.403, 47.708, -29.292)), (' A 372  VAL HG13', ' A 399  ILE HD12', -0.459, (-4.712, 13.303, -67.878)), (' A 326  PRO  HG2', ' A 329  LYS  NZ ', -0.458, (-8.183, -0.461, -57.276)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.457, (9.752, 0.174, -32.707)), (' A 158  LEU HD11', ' A 164  HIS  HE1', -0.453, (-46.274, 31.245, -71.13)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.449, (-25.806, 19.915, -86.838)), (' A 326  PRO  HG2', ' A 329  LYS  HZ1', -0.449, (-7.85, -0.449, -57.484)), (' B 451  THR HG21', ' B 585  LEU HD23', -0.448, (-25.672, 27.649, -6.136)), (' A 464  HIS  HD2', ' A 879  HOH  O  ', -0.448, (-12.164, 1.38, -84.843)), (' B 512  ILE  O  ', ' B 546  PHE  HA ', -0.444, (-34.089, 26.002, -15.367)), (' A  19  CYS  CB ', ' A  23  PRO  HD2', -0.442, (-3.351, 47.433, -59.982)), (' A 451  THR HG21', ' A 585  LEU HD23', -0.441, (-15.591, 17.878, -93.548)), (' A 158  LEU HD21', ' A 164  HIS  ND1', -0.441, (-46.705, 31.924, -69.733)), (' B 152  ALA  HB2', ' B 167  TRP  CZ3', -0.44, (-35.75, 10.127, -38.659)), (' A  14  LEU  HB2', ' A  25  LEU  O  ', -0.436, (5.307, 50.025, -55.465)), (' A 249  ILE HD11', ' A 270  GLN  HG2', -0.436, (8.599, 4.349, -67.344)), (' B 195  ILE HG12', ' B 217  TYR  CE1', -0.435, (-35.505, 23.468, -50.245)), (' B 195  ILE  CG2', ' B 195  ILE  O  ', -0.434, (-34.044, 21.469, -47.479)), (' B  39  HIS  NE2', ' B 111  THR HG22', -0.433, (-9.507, -3.598, -32.232)), (' B  13  SER  OG ', ' B  44  SER  OG ', -0.433, (3.263, -2.659, -47.659)), (' B  14  LEU  HB2', ' B  25  LEU  O  ', -0.432, (3.177, -1.658, -40.586)), (' B 508  LYS  HD3', ' B 843  HOH  O  ', -0.432, (-36.087, 41.788, -18.337)), (' B  19  CYS  CB ', ' B  23  PRO  HD2', -0.432, (-5.899, 1.157, -38.069)), (' B   4  ALA  O  ', ' B  24  PHE  HB2', -0.431, (2.146, 4.93, -40.333)), (' A 280  LEU HD11', ' A 438  LEU  HG ', -0.43, (-2.511, 10.833, -76.73)), (' B 192  LYS  H  ', ' B 192  LYS  HD2', -0.428, (-29.788, 12.635, -54.748)), (' A  39  HIS  NE2', ' A 111  THR HG22', -0.425, (-5.106, 51.514, -66.313)), (' A 376  ILE  HA ', ' A 376  ILE HD12', -0.425, (-7.131, 21.766, -69.826)), (' A 326  PRO  CB ', ' A 329  LYS  HZ2', -0.425, (-9.386, -0.213, -56.9)), (' A 278  SER  HB2', ' A 436  MET  HE2', -0.425, (3.111, 13.948, -71.636)), (' B 442  ARG  HA ', ' B 464  HIS  HB3', -0.423, (-18.887, 42.348, -11.496)), (' A 151  ILE HG12', ' A 226  VAL HG22', -0.42, (-30.919, 40.883, -60.314)), (' B 278  SER  HB2', ' B 436  MET  HE2', -0.419, (-1.9, 33.041, -21.161)), (' A 284  PRO  HA ', ' A 706  PO4  O2 ', -0.418, (-11.705, 13.789, -79.112)), (' B 371  VAL HG23', ' B 393  ALA  HB2', -0.418, (-1.081, 31.86, -34.558)), (' B 185  TYR  HE2', ' B 194  GLN  HG2', -0.416, (-27.88, 17.168, -49.705)), (' B 130  LEU  HA ', ' B 130  LEU HD23', -0.408, (-1.808, 7.111, -30.629)), (' A 277  TYR  HA ', ' A 396  TYR  O  ', -0.406, (3.274, 16.897, -65.921)), (' B 120  TYR  CE1', ' B 412  LEU  HB2', -0.404, (-17.095, 8.957, -24.234)), (' A 442  ARG  HA ', ' A 464  HIS  HB3', -0.402, (-10.186, 4.004, -85.344)), (' A 139  LYS  O  ', ' A 143  GLU  HG2', -0.4, (-14.553, 37.818, -62.763)), (' A 120  TYR  CE1', ' A 412  LEU  HB2', -0.4, (-11.291, 38.523, -75.109))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
