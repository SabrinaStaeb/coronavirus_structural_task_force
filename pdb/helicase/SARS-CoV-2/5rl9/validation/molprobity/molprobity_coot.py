# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 195 ', 'ILE', 0.0892633646863449, (-34.510999999999996, 28.540999999999993, -54.548)), ('A', ' 484 ', 'VAL', 0.006852650319469433, (-32.4, 37.613, -80.926))]
data['omega'] = []
data['rota'] = [('A', '  12 ', 'THR', 0.031206738848567284, (7.456000000000007, 47.024, -51.74)), ('A', '  35 ', 'ILE', 0.0, (3.6560000000000166, 57.114000000000004, -66.345)), ('A', '  46 ', 'ASN', 0.0721920922807998, (-2.1339999999999932, 55.16799999999999, -46.393)), ('A', '  69 ', 'SER', 0.26318300877542805, (3.1970000000000036, 63.24999999999999, -45.493)), ('A', '  79 ', 'ILE', 0.28383998473444777, (11.587000000000025, 70.86399999999998, -48.591)), ('A', '  81 ', 'PHE', 0.0245373540350349, (10.677000000000016, 65.465, -53.13700000000001)), ('A', '  86 ', 'ASN', 0.25507791405956914, (14.00200000000001, 59.167, -61.83)), ('A', ' 153 ', 'THR', 0.14428167972746195, (-39.13999999999998, 38.24799999999999, -62.44400000000001)), ('A', ' 162 ', 'GLU', 0.1712396323462387, (-42.644000000000005, 26.488999999999997, -69.144)), ('A', ' 173 ', 'ARG', 0.110542016172767, (-31.098, 40.842, -71.07)), ('A', ' 209 ', 'VAL', 0.030148434051621962, (-39.872, 30.142999999999994, -72.298)), ('A', ' 215 ', 'THR', 0.17614191466793355, (-33.801, 21.903, -57.34)), ('A', ' 217 ', 'TYR', 0.15593298989703283, (-39.499, 23.85, -56.866)), ('A', ' 255 ', 'THR', 0.037960045250809274, (3.866000000000003, -3.245000000000001, -63.475)), ('A', ' 416 ', 'THR', 0.1131732169392636, (-11.059999999999993, 34.94, -82.957)), ('A', ' 442 ', 'ARG', 0.07782268685417873, (-11.166999999999996, 4.321999999999992, -83.558)), ('A', ' 502 ', 'ARG', 0.1709318501378293, (-36.155, 8.259999999999991, -97.086)), ('A', ' 517 ', 'SER', 0.2702437505612587, (-32.585999999999984, 28.147999999999985, -81.294)), ('A', ' 530 ', 'THR', 0.021758937509730458, (-30.667999999999992, 17.662999999999993, -79.834)), ('A', ' 591 ', 'GLU', 0.0035205771708814253, (-28.943999999999992, 16.246999999999986, -104.58)), ('A', ' 592 ', 'ILE', 0.008797866121371739, (-31.60199999999999, 19.085, -103.99099999999999)), ('B', '   8 ', 'CYS', 0.27530793118019, (7.418000000000004, 3.905999999999998, -33.699)), ('B', '   9 ', 'ASN', 0.27447366547271124, (7.652000000000003, 6.2839999999999945, -36.619)), ('B', '  12 ', 'THR', 0.005919092136790746, (6.4140000000000015, 0.7129999999999956, -43.278)), ('B', '  13 ', 'SER', 0.17715351001337018, (4.416000000000003, -0.9600000000000009, -46.059)), ('B', '  68 ', 'MET', 0.04956618484472375, (4.787, -12.514, -55.171)), ('B', '  92 ', 'LEU', 0.2733638100069088, (8.911000000000001, -3.3810000000000002, -46.558)), ('B', '  95 ', 'ASN', 0.11487179212448406, (15.567000000000004, -3.7989999999999995, -41.119)), ('B', ' 103 ', 'VAL', 0.029404970700852573, (1.6180000000000008, -1.6950000000000038, -27.331)), ('B', ' 124 ', 'ASN', 0.07359303687748527, (-6.013999999999996, 12.21, -23.066)), ('B', ' 191 ', 'SER', 0.21969197672248086, (-31.162999999999986, 11.44299999999999, -57.48799999999999)), ('B', ' 192 ', 'LYS', 0.0018408853405302969, (-31.750999999999998, 13.754999999999997, -54.382)), ('B', ' 195 ', 'ILE', 0.15602411383656486, (-32.84499999999999, 21.145999999999997, -48.978)), ('B', ' 219 ', 'LEU', 0.021055970216230905, (-41.353000000000016, 20.967, -47.446)), ('B', ' 247 ', 'VAL', 0.003150532575091347, (12.85400000000001, 36.207, -20.965)), ('B', ' 353 ', 'GLU', 0.09996796873082633, (-6.255999999999994, 40.562, -43.454)), ('B', ' 484 ', 'VAL', 0.03769935367433688, (-37.94100000000001, 8.346999999999996, -25.644000000000002))]
data['cbeta'] = [('A', '  81 ', 'PHE', ' ', 0.28110317120387995, (11.246000000000013, 64.18799999999997, -52.507)), ('A', ' 484 ', 'VAL', ' ', 0.2892070214726669, (-32.175999999999995, 37.55799999999999, -79.371)), ('A', ' 530 ', 'THR', ' ', 0.2943965088518818, (-31.811, 18.714, -79.827)), ('A', ' 592 ', 'ILE', ' ', 0.3231001888324849, (-32.79, 18.579, -103.065))]
data['probe'] = [(' B  12  THR HG21', ' B  26  CYS  HA ', -0.951, (5.914, -1.832, -40.104)), (' A 158  LEU HD21', ' A 164  HIS  ND1', -0.901, (-46.907, 32.022, -70.425)), (' A 467  LYS  NZ ', ' A 801  HOH  O  ', -0.884, (-14.057, 9.299, -99.469)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.841, (5.822, -1.156, -40.983)), (' A 442  ARG HH11', ' A 464  HIS  CE1', -0.745, (-7.886, -0.535, -85.519)), (' A 352  LEU HD11', ' B 234  PRO  HD3', -0.732, (-7.553, 12.187, -44.153)), (' A 158  LEU HD21', ' A 164  HIS  CE1', -0.702, (-47.165, 31.438, -70.827)), (' A 255  THR HG23', ' A 300  PRO  HG3', -0.679, (0.715, -2.901, -61.135)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.642, (-13.451, 7.42, -52.955)), (' A 176  LEU HD22', ' A 200  PHE  HB2', -0.619, (-33.533, 31.577, -70.567)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.581, (-39.018, 28.397, -2.914)), (' B 228  THR HG22', ' B 230  HIS  NE2', -0.578, (-22.312, 16.3, -43.47)), (' A 158  LEU HD12', ' A 162  GLU  HB3', -0.577, (-44.92, 27.802, -70.932)), (' B 279  THR  HB ', ' B 429  MET  HE2', -0.577, (-6.219, 27.859, -20.628)), (' A 215  THR HG22', ' B 193  VAL HG21', -0.544, (-31.303, 21.51, -55.923)), (' A  12  THR HG21', ' A  26  CYS  HA ', -0.543, (7.782, 48.914, -55.018)), (' A   7  LEU HD22', ' A 103  VAL HG22', -0.54, (6.676, 45.431, -65.905)), (' B 511  PHE  HB3', ' B 530  THR HG22', -0.538, (-38.282, 27.934, -20.8)), (' B   7  LEU HD21', ' B 106  PHE  HB2', -0.528, (0.361, 1.647, -29.821)), (' B 371  VAL HG23', ' B 393  ALA  HB2', -0.516, (-0.756, 31.386, -34.903)), (' A   7  LEU HD21', ' A 106  PHE  HB2', -0.511, (3.766, 43.715, -66.264)), (' B 155  ARG  HE ', ' B 164  HIS  HD2', -0.507, (-47.801, 10.26, -40.356)), (' B  13  SER  O  ', ' B  44  SER  HA ', -0.503, (1.603, -2.231, -46.885)), (' A 279  THR  HB ', ' A 429  MET  HE2', -0.502, (-0.606, 18.16, -74.475)), (' B 185  TYR  CE2', ' B 194  GLN  HG2', -0.49, (-28.34, 16.418, -49.718)), (' A  19  CYS  HB2', ' A  23  PRO  HD2', -0.489, (-3.859, 46.974, -59.966)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.487, (-30.886, 21.06, -79.573)), (' B 228  THR  CG2', ' B 230  HIS  NE2', -0.487, (-22.075, 16.805, -43.757)), (' B  13  SER  HB3', ' B  92  LEU  H  ', -0.486, (6.644, -3.239, -46.507)), (' B 158  LEU HD13', ' B 164  HIS  HB2', -0.47, (-48.078, 14.601, -39.951)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.469, (-31.204, 20.836, -79.79)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.462, (-32.543, 34.652, -21.709)), (' B  19  CYS  HB2', ' B  23  PRO  HD2', -0.458, (-5.891, 0.81, -38.255)), (' A 163  LEU HD11', ' A 200  PHE  HE2', -0.452, (-38.471, 30.691, -66.598)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.452, (9.599, 0.028, -32.72)), (' A 445  PRO  HB3', ' A 468  SER  HB3', -0.442, (-18.472, 4.783, -91.686)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.438, (-26.203, 11.326, -79.714)), (' B 177  ASN  OD1', ' B 179  ASN  HB2', -0.433, (-28.556, 16.848, -29.171)), (' A 163  LEU  HG ', ' A 211  TYR  CD2', -0.426, (-40.64, 28.388, -66.215)), (' A 551  GLU  HG3', ' A 577  SER  HB3', -0.426, (-24.052, 29.241, -94.851)), (' B  16  CYS  O  ', ' B  22  ARG  HA ', -0.422, (-5.957, -0.224, -40.631)), (' B 445  PRO  HB3', ' B 468  SER  HB3', -0.421, (-28.256, 40.059, -7.544)), (' B 185  TYR  HE2', ' B 194  GLN  HG2', -0.419, (-28.087, 16.348, -49.721)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.419, (-26.139, 19.242, -87.072)), (' A  14  LEU  HB2', ' A  25  LEU  O  ', -0.418, (4.846, 49.307, -55.647)), (' B 279  THR  HB ', ' B 429  MET  CE ', -0.418, (-6.217, 27.597, -20.639)), (' A 163  LEU HD11', ' A 200  PHE  CE2', -0.412, (-38.444, 30.888, -66.626)), (' B 512  ILE  O  ', ' B 546  PHE  HA ', -0.408, (-34.187, 25.837, -15.419)), (' A 320  LYS  HE3', ' A 324  TYR  HE1', -0.407, (-11.839, 1.094, -70.54)), (' A 280  LEU HD11', ' A 438  LEU  HG ', -0.406, (-2.7, 10.23, -76.799)), (' A 252  LEU  HB3', ' A 299  TYR  CD2', -0.403, (4.48, 4.687, -61.938)), (' A 505  ALA  O  ', ' A 508  LYS  HG2', -0.403, (-31.119, 5.429, -86.746)), (' B 551  GLU  HG3', ' B 577  SER  HB3', -0.402, (-33.793, 15.338, -7.885)), (' B 269  TYR  CD1', ' B 295  LEU HD13', -0.402, (-3.355, 40.089, -24.341)), (' A 289  SER  HB3', ' A 975  HOH  O  ', -0.401, (-12.672, 9.858, -71.036)), (' A  19  CYS  CB ', ' A  23  PRO  HD2', -0.4, (-3.519, 46.298, -60.373)), (' B 175  PRO  HD2', ' B 180  TYR  CE2', -0.4, (-29.003, 11.137, -31.618))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
