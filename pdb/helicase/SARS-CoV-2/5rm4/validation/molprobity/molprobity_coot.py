# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '   6 ', 'VAL', 0.005793987760934604, (4.178999999999997, 40.948, -59.714)), ('A', '  22 ', 'ARG', 0.049758437476082114, (-4.333000000000006, 46.021, -56.722)), ('A', '  44 ', 'SER', 0.04619696540518038, (0.7329999999999934, 51.387000000000015, -49.385999999999996)), ('A', ' 195 ', 'ILE', 0.009533548369572752, (-34.199000000000005, 28.394000000000013, -54.447)), ('A', ' 218 ', 'LYS', 0.0029651139955561264, (-43.161, 25.189000000000007, -56.814)), ('A', ' 249 ', 'ILE', 0.010567032977839985, (10.99599999999999, 6.633000000000003, -63.996)), ('A', ' 283 ', 'PRO', 0.09206990675673601, (-7.775000000000013, 13.584000000000003, -81.8)), ('A', ' 351 ', 'THR', 0.002428673607107054, (-10.75100000000001, 12.380000000000006, -50.621)), ('A', ' 484 ', 'VAL', 0.008564845195577969, (-32.30400000000002, 37.427, -80.866)), ('A', ' 523 ', 'SER', 0.03043996272161906, (-36.538, 18.915, -81.855)), ('B', '  10 ', 'SER', 0.019563866815345905, (9.730999999999993, 3.0930000000000026, -37.595)), ('B', '  97 ', 'CYS', 0.01295251951751813, (11.777999999999995, -1.5629999999999953, -36.862)), ('B', ' 214 ', 'THR', 0.024882589744340527, (-31.612000000000005, 26.38800000000001, -41.37)), ('B', ' 221 ', 'VAL', 0.07589958842263693, (-44.159, 14.436000000000007, -48.39))]
data['omega'] = []
data['rota'] = [('B', '  96 ', 'THR', 0.02519266046302584, (14.490999999999993, -0.6689999999999934, -39.452)), ('B', ' 100 ', 'SER', 0.128912598021637, (7.574999999999997, -0.7679999999999989, -27.909)), ('B', ' 103 ', 'VAL', 0.06345414220292103, (1.3349999999999977, -1.7899999999999983, -26.915)), ('B', ' 104 ', 'THR', 0.07496813116685916, (-1.4250000000000043, -2.0369999999999955, -24.246)), ('B', ' 116 ', 'ASN', 0.01320189925763289, (-16.987999999999996, 4.047000000000002, -21.031)), ('B', ' 164 ', 'HIS', 0.21612575762496822, (-45.542000000000016, 13.740000000000002, -39.457)), ('B', ' 188 ', 'THR', 0.06447941792428084, (-35.00000000000001, 13.818000000000007, -57.944)), ('B', ' 191 ', 'SER', 0.05822433684259954, (-30.70800000000001, 11.177000000000007, -57.392)), ('B', ' 192 ', 'LYS', 0.0, (-31.266, 13.717000000000004, -54.467)), ('B', ' 215 ', 'THR', 0.0013599335943581536, (-33.512, 27.925000000000004, -44.35999999999999)), ('B', ' 220 ', 'ASN', 0.06765933576050724, (-43.593, 18.250000000000007, -48.742)), ('B', ' 229 ', 'SER', 0.09942379305168622, (-21.514999999999997, 12.635000000000002, -41.59100000000001)), ('B', ' 247 ', 'VAL', 0.1508620692314746, (12.758999999999997, 36.25400000000001, -21.123)), ('B', ' 259 ', 'SER', 0.19684303895799304, (-7.123000000000003, 52.744, -23.103)), ('B', ' 275 ', 'GLN', 0.16625084265490256, (5.507000000000001, 31.934000000000008, -23.985)), ('B', ' 293 ', 'ILE', 0.19894293693766674, (-10.018, 41.753, -28.989)), ('B', ' 513 ', 'SER', 0.15967741107622374, (-33.69200000000001, 23.01300000000001, -17.612)), ('A', '   8 ', 'CYS', 0.26070958929736776, (10.393999999999988, 41.345, -60.884)), ('A', '  12 ', 'THR', 0.08147943952349905, (7.379999999999994, 46.573, -51.959)), ('A', '  86 ', 'ASN', 0.20770238366033578, (14.725999999999992, 58.881000000000014, -61.748)), ('A', ' 127 ', 'THR', 0.023271170080633827, (5.992999999999986, 35.88, -68.525)), ('A', ' 156 ', 'GLU', 0.15166914708349147, (-46.51600000000001, 34.128000000000014, -64.308)), ('A', ' 166 ', 'SER', 0.011826652940641655, (-40.352, 40.059, -67.156)), ('A', ' 255 ', 'THR', 0.13160548271598516, (4.109999999999989, -3.5149999999999935, -63.546)), ('A', ' 259 ', 'SER', 0.20267508792694264, (-2.7100000000000044, -6.398999999999994, -70.13)), ('A', ' 278 ', 'SER', 0.29218017784062855, (3.59499999999999, 15.602000000000007, -69.888)), ('A', ' 366 ', 'THR', 0.14136223151067195, (-4.143000000000008, 17.03, -51.387)), ('A', ' 376 ', 'ILE', 0.2800864069696835, (-7.269000000000014, 20.417000000000016, -71.599)), ('A', ' 440 ', 'THR', 0.03182598635879712, (-5.105000000000011, 6.692000000000014, -85.313)), ('A', ' 502 ', 'ARG', 0.023195797409743715, (-36.000000000000014, 7.840000000000007, -97.537)), ('A', ' 523 ', 'SER', 0.0486104360211731, (-36.538, 18.915, -81.855)), ('A', ' 530 ', 'THR', 0.02991853980347514, (-30.589000000000013, 17.381, -80.023)), ('A', ' 550 ', 'THR', 0.1057129154148626, (-25.28800000000001, 30.10500000000001, -91.03799999999998))]
data['cbeta'] = []
data['probe'] = [(' B 271  LYS  NZ ', ' B 801  HOH  O  ', -0.953, (3.323, 32.064, -17.524)), (' B   5  CYS  HG ', ' B 702   ZN ZN  ', -0.911, (6.325, 0.019, -35.452)), (' A  13  SER  OG ', ' A  44  SER  HB2', -0.872, (3.604, 50.912, -49.35)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.87, (-32.783, 34.507, -22.11)), (' A 126  CYS  HB2', ' A 965  HOH  O  ', -0.78, (3.795, 39.426, -70.979)), (' B   7  LEU  CD1', ' B 103  VAL HG22', -0.752, (2.09, -1.385, -30.206)), (' A 235  LEU HD21', ' A 382  TYR  CE2', -0.747, (-7.747, 32.201, -61.002)), (' A 368  ALA  O  ', ' A 393  ALA  HA ', -0.741, (1.483, 14.416, -57.128)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.722, (-25.823, 11.51, -80.751)), (' A 269  TYR  CD1', ' A 295  LEU HD13', -0.697, (0.134, 6.395, -68.767)), (' B 531  GLN  OE1', ' B 535  SER  OG ', -0.691, (-30.73, 27.161, -25.653)), (' A 319  GLU  HA ', ' A 319  GLU  OE2', -0.689, (-18.253, 4.867, -66.583)), (' B  12  THR HG21', ' B  26  CYS  HA ', -0.687, (5.518, -1.279, -40.158)), (' B   5  CYS  SG ', ' B 702   ZN ZN  ', -0.687, (5.93, 0.622, -35.041)), (' B 270  GLN  O  ', ' B 274  MET  HG3', -0.668, (5.375, 38.216, -22.797)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.668, (9.059, -0.976, -32.593)), (' B 408  PRO  O  ', ' B 803  HOH  O  ', -0.662, (-18.908, 15.02, -28.919)), (' B 552  THR  HB ', ' B 939  HOH  O  ', -0.659, (-28.593, 11.679, -15.683)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.643, (-31.042, 20.636, -80.306)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.64, (-30.979, 21.093, -80.626)), (' B 425  VAL HG12', ' B 429  MET  HE3', -0.639, (-7.874, 25.015, -21.867)), (' A 365  GLU  HB3', ' A 701  PK4  F13', -0.632, (-4.105, 21.963, -49.136)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.629, (-26.333, 19.265, -86.987)), (' A  37  THR  OG1', ' A  39  HIS  HB2', -0.627, (-2.06, 52.629, -65.186)), (' B   8  CYS  SG ', ' B  99  GLY  O  ', -0.624, (8.976, 0.176, -31.723)), (' B 350  SER  HB2', ' B 918  HOH  O  ', -0.617, (-11.314, 38.676, -48.911)), (' B 277  TYR  HA ', ' B 396  TYR  O  ', -0.612, (-0.243, 30.194, -27.077)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.611, (6.224, -1.392, -40.396)), (' A 445  PRO  HD3', ' A 569  LYS  O  ', -0.609, (-18.1, 5.652, -88.363)), (' A 580  ASP  OD1', ' A 584  LYS  HE2', -0.6, (-11.847, 25.144, -97.112)), (' A 510  VAL HG21', ' A 541  TYR  CE1', -0.597, (-25.615, 11.422, -79.714)), (' B  12  THR HG21', ' B  25  LEU  O  ', -0.591, (4.085, -2.127, -40.169)), (' B  13  SER  O  ', ' B  44  SER  HA ', -0.587, (1.796, -2.006, -46.515)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.583, (2.551, 42.17, -29.522)), (' B 376  ILE HG22', ' B 400  GLY  HA3', -0.578, (-11.254, 27.849, -23.218)), (' A 409  ARG  NH2', ' A 422  PHE  O  ', -0.573, (-7.642, 30.194, -73.496)), (' B  44  SER  N  ', ' B  46  ASN  O  ', -0.57, (-0.936, -4.025, -47.893)), (' A 183  THR  N  ', ' A 226  VAL  O  ', -0.567, (-28.908, 33.077, -60.983)), (' A 275  GLN  O  ', ' A 395  HIS  ND1', -0.566, (7.448, 12.577, -64.072)), (' B  55  CYS  SG ', ' B  57  VAL HG23', -0.564, (-8.915, -18.942, -47.028)), (' B 280  LEU HD11', ' B 438  LEU  HG ', -0.563, (-8.814, 35.596, -18.654)), (' A 152  ALA  HB2', ' A 167  TRP  CZ3', -0.557, (-34.39, 37.714, -67.011)), (' A 701  PK4  C11', ' B 390  ARG  NH1', -0.549, (-4.727, 22.257, -45.472)), (' A 235  LEU HD21', ' A 382  TYR  CZ ', -0.544, (-8.083, 31.773, -60.076)), (' A  64  TYR  O  ', ' A  70  TYR  HA ', -0.543, (3.93, 63.793, -50.36)), (' A   6  VAL  O  ', ' A   6  VAL HG23', -0.543, (2.847, 41.396, -61.923)), (' B 480  ILE HD11', ' B 875  HOH  O  ', -0.542, (-36.685, 14.529, -10.059)), (' B   7  LEU HD12', ' B 103  VAL HG22', -0.541, (2.201, -1.049, -30.557)), (' B 533  VAL HG11', ' B 560  ARG  HG3', -0.538, (-26.308, 23.027, -17.808)), (' B  50  CYS  SG ', ' B  71  TYR  HA ', -0.538, (-3.963, -18.135, -50.443)), (' B 508  LYS  HD3', ' B 812  HOH  O  ', -0.537, (-35.875, 41.82, -17.664)), (' A 251  GLY  HA3', ' A 394  LYS  HD3', -0.536, (7.173, 10.069, -57.612)), (' B 585  LEU HD22', ' B 587  PHE  CE2', -0.535, (-28.116, 28.804, -6.706)), (' A  59  ASP  OD1', ' A  61  THR  OG1', -0.528, (0.439, 62.51, -61.915)), (' A 585  LEU HD22', ' A 587  PHE  CE2', -0.528, (-18.119, 15.768, -94.393)), (' A 163  LEU HD23', ' A 211  TYR  CD2', -0.526, (-40.118, 27.868, -65.692)), (' B  12  THR  OG1', ' B  26  CYS  HA ', -0.525, (6.353, -0.513, -39.953)), (' B 220  ASN  N  ', ' B 220  ASN  OD1', -0.524, (-42.103, 18.912, -49.592)), (' A 551  GLU  HB3', ' A 870  HOH  O  ', -0.521, (-19.856, 31.899, -94.887)), (' B 510  VAL HG21', ' B 541  TYR  CG ', -0.52, (-32.405, 34.688, -20.737)), (' B 124  ASN HD22', ' B 421  TYR  HA ', -0.519, (-8.726, 14.805, -20.682)), (' A 533  VAL HG11', ' A 560  ARG  HG3', -0.519, (-18.612, 22.966, -83.435)), (' A 152  ALA  HB2', ' A 167  TRP  CE3', -0.518, (-34.459, 38.466, -67.41)), (' B 120  TYR  CE2', ' B 409  ARG  HG2', -0.514, (-16.273, 11.393, -25.732)), (' B 475  PHE  CZ ', ' B 477  LYS  HE2', -0.513, (-34.943, 16.509, -2.33)), (' B 386  VAL  O  ', ' B 390  ARG  HG2', -0.513, (-5.243, 22.588, -38.631)), (' B 453  SER  OG ', ' B 459  ASN  HA ', -0.506, (-14.448, 31.541, -5.042)), (' A   7  LEU HD13', ' A 103  VAL HG22', -0.502, (6.089, 45.284, -65.181)), (' A 283  PRO  HG2', ' A 461  LEU HD13', -0.501, (-5.522, 12.517, -84.885)), (' A 304  ILE  HA ', ' A 370  ILE  O  ', -0.498, (-2.749, 10.829, -59.855)), (' A 585  LEU HD22', ' A 587  PHE  CZ ', -0.498, (-18.017, 15.148, -93.976)), (' A 281  GLN  HG3', ' A 402  PRO  HD2', -0.497, (-4.269, 18.641, -79.714)), (' B 103  VAL  CG1', ' B 103  VAL  O  ', -0.495, (-0.416, -2.323, -28.203)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.494, (-12.454, 7.188, -52.694)), (' A 277  TYR  HA ', ' A 396  TYR  O  ', -0.493, (2.953, 15.887, -66.185)), (' A 200  PHE  HA ', ' A 210  VAL  O  ', -0.492, (-35.06, 27.911, -69.775)), (' B 216  THR  O  ', ' B 217  TYR  CD2', -0.491, (-36.519, 26.671, -47.593)), (' B 245  HIS  HE1', ' B 813  HOH  O  ', -0.491, (3.985, 28.547, -19.279)), (' B 371  VAL HG23', ' B 393  ALA  HB2', -0.488, (-1.201, 31.126, -34.756)), (' A  60  VAL  HB ', ' A 893  HOH  O  ', -0.485, (0.212, 58.19, -56.682)), (' B  12  THR HG22', ' B  14  LEU  H  ', -0.484, (4.394, -1.351, -42.725)), (' A 471  CYS  O  ', ' A 587  PHE  HB3', -0.483, (-20.343, 12.447, -97.44)), (' B 512  ILE  O  ', ' B 546  PHE  HA ', -0.481, (-34.227, 26.416, -15.215)), (' B 128  GLU  OE2', ' B 239  THR  N  ', -0.481, (-0.932, 17.541, -29.606)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.48, (-38.874, 28.416, -2.509)), (' B  77  PRO  HB2', ' B  78  PRO  HD2', -0.479, (4.286, -23.559, -55.068)), (' A  21  ARG  O  ', ' A  22  ARG  HB2', -0.479, (-5.683, 44.478, -55.755)), (' A 472  PHE  HB3', ' A 590  LEU  HG ', -0.478, (-25.453, 12.712, -99.256)), (' B 188  THR HG23', ' B 192  LYS  HA ', -0.478, (-32.326, 14.41, -55.283)), (' B  20  ILE  N  ', ' B 834  HOH  O  ', -0.478, (-9.631, 2.132, -37.027)), (' A 443  ARG  O  ', ' A 569  LYS  HA ', -0.477, (-16.988, 5.946, -85.803)), (' A 366  THR  OG1', ' A 367  THR  N  ', -0.477, (-3.261, 15.181, -52.194)), (' B 152  ALA  HB2', ' B 167  TRP  CZ3', -0.474, (-35.931, 9.972, -38.407)), (' B 269  TYR  CD1', ' B 295  LEU HD13', -0.473, (-3.481, 40.207, -24.784)), (' A 293  ILE HG13', ' A 320  LYS  CG ', -0.473, (-10.775, 4.919, -68.169)), (' B  14  LEU  HB2', ' B  25  LEU  O  ', -0.468, (3.139, -2.178, -40.384)), (' A 127  THR HG22', ' A 130  LEU  HB2', -0.468, (4.21, 37.897, -67.109)), (' A 304  ILE HG12', ' A 370  ILE  HB ', -0.467, (-1.492, 9.179, -61.05)), (' B 455  LEU  HG ', ' B 456  VAL HG13', -0.467, (-18.949, 24.001, -9.061)), (' B 479  VAL  HB ', ' B 491  PRO  HG2', -0.467, (-44.936, 15.46, -10.39)), (' B 403  ALA  C  ', ' B 559  ASN  ND2', -0.465, (-16.852, 23.074, -16.498)), (' B 402  PRO  O  ', ' B 419  PRO  HB3', -0.464, (-13.684, 21.609, -16.823)), (' A 521  VAL HG12', ' A 525  ILE HD12', -0.464, (-38.112, 23.083, -87.009)), (' A 373  PHE  HE1', ' A 384  LEU HD23', -0.463, (-5.067, 23.098, -66.558)), (' A 280  LEU HD11', ' A 438  LEU  HG ', -0.461, (-2.419, 10.312, -77.382)), (' A 113  ASP  OD1', ' A 115  THR  OG1', -0.46, (-12.364, 45.073, -75.161)), (' B  65  LEU HD11', ' B  68  MET  HA ', -0.458, (5.159, -13.059, -53.596)), (' A 701  PK4  C11', ' B 390  ARG HH12', -0.457, (-4.505, 22.393, -45.466)), (' A 367  THR HG22', ' A 392  ARG  HB3', -0.456, (0.991, 17.329, -52.404)), (' B 484  VAL HG23', ' B 849  HOH  O  ', -0.456, (-37.956, 11.408, -26.712)), (' A 181  VAL HG11', ' A 197  GLU  OE1', -0.452, (-26.093, 26.878, -61.888)), (' A 103  VAL  HA ', ' A 106  PHE  HB3', -0.451, (4.151, 45.161, -67.285)), (' B 195  ILE  O  ', ' B 195  ILE HG23', -0.451, (-33.916, 20.686, -47.088)), (' A 350  SER  O  ', ' A 352  LEU  N  ', -0.45, (-10.443, 10.051, -50.329)), (' A 261  GLU  OE1', ' A 324  TYR  OH ', -0.448, (-10.866, -2.529, -72.56)), (' B   8  CYS  O  ', ' B   9  ASN  CB ', -0.447, (8.654, 6.294, -34.423)), (' A 276  LYS  O  ', ' A 395  HIS  HA ', -0.447, (5.056, 14.613, -63.375)), (' B 445  PRO  HB3', ' B 468  SER  HB3', -0.446, (-28.064, 39.719, -7.813)), (' B   5  CYS  HA ', ' B  24  PHE  O  ', -0.444, (2.461, 2.366, -37.761)), (' B  95  ASN  N  ', ' B  95  ASN  OD1', -0.444, (14.983, -3.854, -42.312)), (' B 473  LYS  NZ ', ' B 582  TYR  O  ', -0.443, (-29.03, 25.55, -0.951)), (' B 152  ALA  HB2', ' B 167  TRP  CH2', -0.441, (-35.964, 10.538, -38.616)), (' B  16  CYS  O  ', ' B  22  ARG  HA ', -0.441, (-5.608, 0.066, -40.575)), (' A 269  TYR  O  ', ' A 299  TYR  OH ', -0.44, (5.498, 5.347, -66.974)), (' B 548  GLN  HG2', ' B 550  THR  O  ', -0.44, (-32.142, 17.619, -11.347)), (' B 215  THR  OG1', ' B 216  THR  N  ', -0.44, (-35.093, 27.964, -45.967)), (' A 358  CYS  HB3', ' A 363  LEU HD23', -0.439, (-10.758, 16.987, -57.95)), (' A 492  GLN  O  ', ' A 496  VAL HG23', -0.439, (-31.626, 19.674, -92.672)), (' A  19  CYS  HB2', ' A  23  PRO  HD2', -0.438, (-3.38, 46.653, -59.541)), (' A 296  ALA  O  ', ' A 300  PRO  HA ', -0.438, (-2.07, 1.01, -61.36)), (' B 163  LEU HD11', ' B 219  LEU HD11', -0.437, (-41.265, 19.081, -43.207)), (' A 141  THR HG23', ' A 831  HOH  O  ', -0.436, (-12.061, 44.458, -66.285)), (' A 249  ILE HD11', ' A 270  GLN  HG2', -0.435, (8.694, 3.175, -67.912)), (' A 376  ILE HG12', ' A 425  VAL HG11', -0.435, (-3.402, 20.509, -71.144)), (' A 443  ARG  HA ', ' A 964  HOH  O  ', -0.434, (-15.159, 4.435, -82.684)), (' B 303  ARG  NH2', ' B 366  THR  OG1', -0.434, (-2.738, 33.385, -42.547)), (' B  31  TYR  HA ', ' B  34  VAL HG22', -0.433, (0.83, -8.992, -35.532)), (' B 335  PRO  HG3', ' B 968  HOH  O  ', -0.432, (-17.227, 25.374, -42.755)), (' B 288  LYS  O  ', ' B 291  PHE  HB3', -0.431, (-10.71, 37.959, -23.796)), (' B 129  ARG  HA ', ' B 129  ARG  HD2', -0.431, (0.58, 10.971, -33.034)), (' B 409  ARG  NE ', ' B 846  HOH  O  ', -0.43, (-14.47, 14.064, -26.932)), (' B  49  VAL  O  ', ' B  70  TYR  HB2', -0.43, (-3.117, -12.876, -49.83)), (' B 410  THR HG23', ' B 831  HOH  O  ', -0.43, (-21.067, 12.765, -30.059)), (' B  31  TYR  CE2', ' B  87  GLY  HA2', -0.428, (5.855, -11.854, -32.672)), (' A 283  PRO  HG3', ' A 457  TYR  CE1', -0.426, (-5.92, 15.218, -83.736)), (' A 318  CYS  HB3', ' A 343  PHE  CD2', -0.425, (-17.435, 7.359, -62.387)), (' A 367  THR  HA ', ' A 392  ARG  O  ', -0.424, (0.157, 16.041, -54.278)), (' A  86  ASN  N  ', ' A  86  ASN HD22', -0.423, (14.327, 60.478, -60.685)), (' B 544  VAL  O  ', ' B 572  ILE  HA ', -0.422, (-33.556, 32.829, -11.761)), (' B 115  THR  O  ', ' B 412  LEU HD12', -0.422, (-19.095, 6.359, -21.759)), (' B 428  LEU  HA ', ' B 428  LEU HD23', -0.422, (-1.746, 20.633, -18.15)), (' A 307  THR  HA ', ' A 358  CYS  O  ', -0.422, (-10.809, 16.425, -61.898)), (' B 283  PRO  HD2', ' B 438  LEU  O  ', -0.42, (-12.305, 34.67, -14.662)), (' B 365  GLU  HA ', ' B 390  ARG  O  ', -0.42, (-2.557, 26.481, -42.536)), (' A 539  SER  O  ', ' A 567  ARG  HD3', -0.419, (-18.904, 13.025, -79.841)), (' B 249  ILE HD11', ' B 270  GLN  HG2', -0.418, (4.238, 42.714, -22.608)), (' A 139  LYS  O  ', ' A 143  GLU  HG2', -0.418, (-14.466, 37.194, -63.075)), (' A 333  ILE HD11', ' A 356  VAL HG13', -0.418, (-11.951, 12.392, -54.196)), (' A  13  SER  OG ', ' A  44  SER  CB ', -0.417, (3.28, 51.451, -49.242)), (' B 479  VAL  O  ', ' B 489  ASN  HA ', -0.417, (-41.626, 15.746, -13.226)), (' A 106  PHE  HD1', ' A 130  LEU HD21', -0.417, (1.728, 42.726, -65.179)), (' B 510  VAL  CG2', ' B 541  TYR  CD1', -0.417, (-33.268, 34.78, -21.178)), (' A 510  VAL  CG2', ' A 541  TYR  CD1', -0.415, (-26.311, 11.083, -80.553)), (' B  12  THR HG21', ' B  26  CYS  CA ', -0.415, (5.381, -1.652, -39.331)), (' B 460  LYS  CE ', ' B 861  HOH  O  ', -0.415, (-8.829, 28.66, -9.504)), (' A 474  MET  SD ', ' A 495  VAL HG11', -0.415, (-30.416, 18.889, -98.576)), (' B 182  PHE  N  ', ' B 198  TYR  O  ', -0.415, (-30.499, 18.419, -38.522)), (' A 406  PRO  HG3', ' A 422  PHE  CE1', -0.414, (-10.18, 28.114, -78.728)), (' B 492  GLN  O  ', ' B 496  VAL HG23', -0.414, (-41.597, 24.759, -11.247)), (' A 578  ASP  OD2', ' A 580  ASP  HB3', -0.414, (-15.774, 27.663, -96.169)), (' A 260  ASP  HA ', ' A 263  SER  OG ', -0.413, (-0.35, -5.804, -74.098)), (' A  13  SER  O  ', ' A  44  SER  HA ', -0.412, (1.785, 49.816, -50.208)), (' B 288  LYS  HE2', ' B 996  HOH  O  ', -0.412, (-16.613, 33.473, -22.954)), (' A 224  TYR  OH ', ' A 801  HOH  O  ', -0.412, (-32.502, 38.571, -53.744)), (' A 420  GLU  HG3', ' A 421  TYR  CE1', -0.409, (-0.707, 31.891, -79.875)), (' A 236  SER  OG ', ' A 237  ALA  N  ', -0.408, (-0.318, 29.726, -56.35)), (' A 390  ARG  O  ', ' A 391  LEU HD23', -0.407, (-4.747, 19.29, -54.811)), (' B 543  TYR  HA ', ' B 571  GLY  O  ', -0.407, (-32.884, 36.092, -12.896)), (' A   5  CYS  HA ', ' A  24  PHE  O  ', -0.406, (4.488, 43.703, -56.977)), (' B 443  ARG  O  ', ' B 569  LYS  HA ', -0.405, (-25.915, 39.477, -14.09)), (' B 262  PHE  CD1', ' B 294  GLY  HA3', -0.404, (-8.434, 44.529, -25.218)), (' B 589  SER  O  ', ' B 590  LEU HD23', -0.403, (-37.095, 31.315, 0.736)), (' A 241  VAL HG21', ' A 276  LYS  HE3', -0.403, (5.858, 20.427, -61.381)), (' A 281  GLN  HA ', ' A 400  GLY  O  ', -0.402, (-4.517, 16.196, -77.146)), (' A 162  GLU  HA ', ' A 209  VAL  O  ', -0.402, (-41.13, 27.602, -69.699)), (' A 329  LYS  CE ', ' A 354  GLN  OE1', -0.401, (-5.478, 1.068, -55.102)), (' A  72  CYS  SG ', ' A  74  SER  HB2', -0.401, (-1.345, 71.476, -54.799)), (' A 130  LEU  HA ', ' A 130  LEU HD23', -0.401, (1.301, 39.322, -64.911)), (' B   7  LEU  CD2', ' B 130  LEU HD21', -0.401, (0.221, 3.81, -30.364)), (' A 490  ARG  HB2', ' A 491  PRO  HD3', -0.4, (-37.197, 27.643, -92.779)), (' B  15  ARG  HA ', ' B  23  PRO  O  ', -0.4, (-1.487, 0.43, -40.312))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
