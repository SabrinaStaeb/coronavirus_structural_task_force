# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 195 ', 'ILE', 0.01568535856930748, (-34.29499999999999, 28.90800000000001, -54.172000000000004)), ('A', ' 219 ', 'LEU', 0.027655183878237732, (-42.355999999999995, 28.331999999999994, -59.614)), ('A', ' 484 ', 'VAL', 0.006928373895139777, (-32.342, 38.02000000000001, -80.519)), ('B', ' 215 ', 'THR', 0.0283625779395519, (-33.83099999999999, 27.742999999999995, -43.871))]
data['omega'] = []
data['rota'] = [('A', '  12 ', 'THR', 0.0013599335943581536, (7.560000000000012, 47.316, -51.898)), ('A', '  76 ', 'LYS', 0.11531664552531355, (4.0430000000000135, 71.308, -50.686)), ('A', '  81 ', 'PHE', 0.10345538077914773, (10.872, 66.07, -53.121)), ('A', ' 162 ', 'GLU', 0.027913299257137515, (-42.657999999999994, 26.755, -69.102)), ('A', ' 173 ', 'ARG', 0.12769311380787787, (-30.821, 41.23, -71.01)), ('A', ' 179 ', 'ASN', 0.0, (-23.928999999999995, 29.169000000000004, -70.652)), ('A', ' 209 ', 'VAL', 0.026904318381890384, (-39.96000000000001, 30.412000000000006, -72.619)), ('A', ' 217 ', 'TYR', 0.04411017688814288, (-39.448, 24.337, -56.63)), ('A', ' 255 ', 'THR', 0.0671941130386094, (3.8319999999999927, -3.122, -63.542)), ('A', ' 289 ', 'SER', 0.23298563504851677, (-10.059999999999999, 8.329000000000004, -71.401)), ('A', ' 301 ', 'SER', 0.01071998049155809, (0.29600000000000026, 1.9720000000000013, -56.406)), ('A', ' 344 ', 'ASP', 0.05536383490814775, (-23.437999999999995, 8.375000000000004, -58.733)), ('A', ' 432 ', 'ILE', 0.13931666256967998, (6.761000000000001, 23.151, -79.379)), ('A', ' 516 ', 'ASN', 0.0, (-29.651, 26.775000000000006, -79.337)), ('A', ' 530 ', 'THR', 0.0258387386566028, (-30.783, 18.058000000000007, -79.684)), ('A', ' 531 ', 'GLN', 0.03444692741768134, (-27.255999999999986, 19.303000000000008, -78.829)), ('A', ' 551 ', 'GLU', 0.04511903976856236, (-22.135999999999996, 31.358999999999998, -92.32000000000001)), ('A', ' 589 ', 'SER', 0.23359411412819642, (-23.166, 15.091000000000006, -101.87700000000002)), ('A', ' 592 ', 'ILE', 0.0, (-32.56399999999999, 19.203000000000003, -103.645)), ('B', '  11 ', 'GLN', 0.17779478283110653, (8.642, 3.418000000000001, -42.302)), ('B', '  12 ', 'THR', 0.0013599335943581536, (6.292, 0.6280000000000037, -43.532000000000004)), ('B', '  69 ', 'SER', 0.02907405819116114, (0.9239999999999924, -13.767, -54.43)), ('B', '  76 ', 'LYS', 0.047136027019368386, (0.13899999999999224, -22.029999999999987, -50.367)), ('B', '  92 ', 'LEU', 0.0005416392560453181, (8.660999999999996, -3.1609999999999996, -46.476)), ('B', '  95 ', 'ASN', 0.0003226582257854655, (15.422000000000002, -3.751999999999999, -41.307)), ('B', '  96 ', 'THR', 0.09691357508871028, (14.225999999999999, -0.3409999999999975, -39.974)), ('B', '  98 ', 'VAL', 0.01257887059855553, (12.118999999999996, -0.3670000000000009, -33.249)), ('B', ' 103 ', 'VAL', 0.038624006693794635, (1.5489999999999982, -1.6790000000000003, -27.34)), ('B', ' 124 ', 'ASN', 0.051179935221564596, (-5.843, 12.209, -23.119000000000003)), ('B', ' 155 ', 'ARG', 0.14659729332653057, (-45.702, 11.672, -44.14)), ('B', ' 158 ', 'LEU', 0.14490650069007352, (-49.662000000000006, 18.706, -40.572)), ('B', ' 188 ', 'THR', 0.11566384768042738, (-35.408, 14.54, -57.825)), ('B', ' 192 ', 'LYS', 0.0, (-31.62700000000001, 14.018, -54.231)), ('B', ' 195 ', 'ILE', 0.007213481769062101, (-33.1, 21.485, -48.776)), ('B', ' 199 ', 'THR', 0.05794743388103098, (-33.74499999999998, 20.427, -35.878)), ('B', ' 219 ', 'LEU', 0.14189350557808386, (-41.315999999999995, 21.028999999999996, -47.29)), ('B', ' 289 ', 'SER', 0.11198871574780352, (-14.035999999999994, 38.563, -25.573)), ('B', ' 301 ', 'SER', 0.010167386505266836, (1.1200000000000063, 45.646, -35.26)), ('B', ' 353 ', 'GLU', 0.05566270212086519, (-6.286999999999989, 40.837, -43.446)), ('B', ' 432 ', 'ILE', 0.13360705525554167, (-0.6789999999999967, 22.688000000000006, -13.648000000000003)), ('B', ' 486 ', 'SER', 0.1581500981306573, (-35.659, 13.099, -22.033)), ('B', ' 551 ', 'GLU', 0.0396741937040348, (-31.179, 14.028999999999996, -9.805))]
data['cbeta'] = [('A', '  81 ', 'PHE', ' ', 0.2583092837420014, (11.472000000000005, 64.855, -52.42100000000001)), ('A', ' 183 ', 'THR', ' ', 0.2616492324891263, (-28.156999999999996, 32.474, -58.223)), ('A', ' 484 ', 'VAL', ' ', 0.2677629728629876, (-32.153999999999996, 37.936, -78.958)), ('A', ' 592 ', 'ILE', ' ', 0.2999935593752079, (-33.617000000000004, 18.487000000000002, -102.70000000000002)), ('B', ' 483 ', 'ASP', ' ', 0.2683924803421363, (-40.982, 11.129999999999999, -23.483000000000004))]
data['probe'] = [(' B  27  CYS  SG ', ' B 899  HOH  O  ', -1.015, (8.022, -4.984, -43.184)), (' A 326  PRO  HB2', ' A 329  LYS  HZ3', -0.737, (-9.323, -0.399, -56.73)), (' A 326  PRO  HG2', ' A 329  LYS  NZ ', -0.716, (-8.185, -1.27, -57.083)), (' B  12  THR HG21', ' B  26  CYS  HA ', -0.689, (6.015, -1.467, -40.944)), (' A  12  THR HG21', ' A  26  CYS  HA ', -0.688, (7.64, 49.124, -55.065)), (' B 162  GLU  HG2', ' B 210  VAL HG22', -0.685, (-44.331, 20.998, -34.001)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.67, (-13.023, 7.861, -53.164)), (' B 163  LEU HD11', ' B 219  LEU HD11', -0.663, (-40.714, 18.723, -42.324)), (' A 163  LEU HD11', ' A 200  PHE  HE2', -0.639, (-38.64, 30.861, -67.204)), (' A 326  PRO  HG2', ' A 329  LYS  HZ1', -0.615, (-8.046, -1.835, -56.44)), (' B  13  SER  O  ', ' B  44  SER  HA ', -0.615, (1.149, -2.504, -47.237)), (' A 158  LEU HD11', ' A 164  HIS  CE1', -0.59, (-46.064, 31.407, -71.352)), (' A 326  PRO  CB ', ' A 329  LYS  HZ3', -0.575, (-9.421, -1.076, -56.995)), (' B 228  THR HG22', ' B 230  HIS  CE1', -0.563, (-22.781, 15.986, -44.54)), (' A 579  ARG  HG2', ' A 973  HOH  O  ', -0.563, (-19.263, 28.489, -103.659)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.556, (5.767, -1.033, -41.031)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.555, (-38.568, 28.682, -2.788)), (' B 157  VAL HG23', ' B 221  VAL HG23', -0.55, (-46.596, 16.743, -47.096)), (' A  12  THR  CG2', ' A  26  CYS  HA ', -0.537, (8.016, 48.786, -54.781)), (' A 466  ASP  OD1', ' A 701  GQJ  H8 ', -0.535, (-12.918, 1.815, -96.748)), (' A 326  PRO  HB2', ' A 329  LYS  NZ ', -0.532, (-9.398, -1.21, -56.027)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.529, (-33.015, 34.462, -21.461)), (' B  16  CYS  O  ', ' B  22  ARG  HA ', -0.522, (-6.154, 0.303, -41.081)), (' A 498  GLU  HG3', ' A 502  ARG  NH2', -0.521, (-38.447, 14.963, -99.821)), (' A 132  LEU  O  ', ' A 136  GLU  HG3', -0.515, (-4.184, 36.645, -62.187)), (' A 176  LEU HD22', ' A 200  PHE  HB2', -0.514, (-32.611, 31.8, -69.754)), (' B 100  SER  HB2', ' B 103  VAL HG23', -0.508, (4.359, -0.912, -29.016)), (' B 511  PHE  HB3', ' B 530  THR HG22', -0.498, (-38.555, 28.071, -20.567)), (' A 163  LEU HD11', ' A 200  PHE  CE2', -0.494, (-37.976, 31.4, -67.096)), (' B 371  VAL HG23', ' B 393  ALA  HB2', -0.492, (-1.184, 31.519, -34.635)), (' A 326  PRO  CG ', ' A 329  LYS  HZ3', -0.489, (-8.99, -0.63, -56.822)), (' B 451  THR HG21', ' B 585  LEU HD23', -0.489, (-25.702, 27.566, -6.169)), (' B 279  THR  HB ', ' B 429  MET  CE ', -0.487, (-6.279, 27.602, -20.61)), (' A 326  PRO  HG2', ' A 329  LYS  HZ3', -0.483, (-8.864, -0.761, -56.692)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.481, (-25.963, 11.793, -79.829)), (' A 244  GLU  HB2', ' A 276  LYS  HB2', -0.481, (9.511, 17.829, -63.458)), (' B  15  ARG  HG3', ' B  24  PHE  CD2', -0.479, (-0.145, 2.327, -44.097)), (' A 326  PRO  CG ', ' A 329  LYS  NZ ', -0.477, (-8.997, -1.32, -56.982)), (' B 228  THR HG22', ' B 230  HIS  NE2', -0.476, (-22.454, 16.694, -44.067)), (' A  16  CYS  O  ', ' A  22  ARG  HA ', -0.475, (-4.072, 48.538, -57.54)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.475, (9.139, 0.351, -32.752)), (' A 215  THR HG22', ' B 193  VAL HG21', -0.475, (-31.452, 21.543, -55.546)), (' B 279  THR  HB ', ' B 429  MET  HE2', -0.474, (-5.75, 27.927, -20.225)), (' A 198  TYR  HE2', ' A 211  TYR  HD1', -0.471, (-37.53, 27.107, -62.757)), (' A 371  VAL HG23', ' A 393  ALA  HB2', -0.469, (-0.972, 15.714, -58.865)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.467, (-31.199, 21.44, -79.535)), (' A 140  ALA  HA ', ' A 232  VAL HG21', -0.467, (-13.159, 38.854, -61.265)), (' B 195  ILE  O  ', ' B 195  ILE HG23', -0.465, (-34.906, 21.811, -47.177)), (' B 480  ILE HD11', ' B 838  HOH  O  ', -0.462, (-37.249, 14.477, -9.309)), (' B 196  GLY  HA3', ' B 215  THR HG21', -0.461, (-32.81, 24.426, -45.903)), (' A 531  GLN  HG3', ' A 535  SER  OG ', -0.46, (-24.947, 20.089, -76.75)), (' A 120  TYR  CE2', ' A 409  ARG  HG2', -0.459, (-10.954, 35.263, -73.272)), (' A   7  LEU HD13', ' A 103  VAL HG22', -0.457, (6.628, 45.462, -65.416)), (' B  65  LEU HD23', ' B  81  PHE  CZ ', -0.455, (7.859, -13.414, -49.44)), (' A 451  THR HG21', ' A 585  LEU HD23', -0.453, (-15.5, 17.539, -93.654)), (' B 185  TYR  CE2', ' B 194  GLN  HG2', -0.453, (-28.623, 16.761, -49.164)), (' A  14  LEU  HB2', ' A  25  LEU  O  ', -0.452, (5.172, 49.568, -55.632)), (' B 244  GLU  HB2', ' B 276  LYS  HB2', -0.452, (7.13, 28.533, -26.803)), (' B  77  PRO  HB2', ' B  78  PRO  HD2', -0.452, (4.14, -23.832, -54.924)), (' A 279  THR  HB ', ' A 429  MET  CE ', -0.449, (-0.73, 18.605, -74.42)), (' B 445  PRO  HB3', ' B 468  SER  HB3', -0.448, (-28.355, 40.251, -7.584)), (' A 280  LEU HD11', ' A 438  LEU  HG ', -0.448, (-2.633, 10.672, -77.177)), (' B  13  SER  HB3', ' B  92  LEU  HB2', -0.446, (6.536, -1.799, -47.625)), (' A 158  LEU HD11', ' A 164  HIS  ND1', -0.445, (-45.631, 31.317, -70.5)), (' A 445  PRO  HB3', ' A 468  SER  HB3', -0.442, (-18.633, 5.542, -91.359)), (' A 284  PRO  HA ', ' A 706  PO4  O2 ', -0.441, (-11.808, 13.336, -79.704)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.44, (-30.939, 21.49, -79.532)), (' B  14  LEU  HB2', ' B  25  LEU  O  ', -0.439, (2.924, -2.199, -41.192)), (' A 367  THR HG22', ' A 392  ARG  HB3', -0.437, (1.083, 17.993, -52.469)), (' A 297  LEU HD11', ' A 324  TYR  HB3', -0.436, (-8.053, -0.505, -66.214)), (' B 182  PHE  HB3', ' B 225  PHE  HB3', -0.434, (-33.077, 15.855, -41.039)), (' A 163  LEU  HG ', ' A 211  TYR  HB3', -0.434, (-39.51, 29.072, -66.44)), (' A 151  ILE HG12', ' A 226  VAL HG22', -0.433, (-31.18, 40.883, -60.662)), (' B 120  TYR  CE2', ' B 409  ARG  HG2', -0.43, (-15.824, 11.472, -25.772)), (' B 228  THR  CG2', ' B 230  HIS  CE1', -0.429, (-22.979, 16.346, -44.783)), (' A 255  THR HG23', ' A 300  PRO  HG3', -0.428, (1.028, -2.507, -61.11)), (' A 326  PRO  CB ', ' A 329  LYS  NZ ', -0.426, (-9.218, -1.337, -56.278)), (' B 333  ILE  HB ', ' B 358  CYS  SG ', -0.426, (-12.209, 31.484, -41.754)), (' A 140  ALA  O  ', ' A 144  THR HG23', -0.426, (-15.102, 41.936, -62.142)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.426, (2.928, 42.252, -28.877)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.425, (-26.307, 19.609, -86.961)), (' A 263  SER  HA ', ' A 266  VAL HG13', -0.423, (1.513, -1.078, -72.734)), (' B 474 BMET  HB3', ' B 474 BMET  HE2', -0.422, (-39.372, 24.967, -3.612)), (' A  31  TYR  O  ', ' A  35  ILE HG22', -0.416, (5.779, 55.553, -65.033)), (' A 376  ILE HG12', ' A 425  VAL HG11', -0.414, (-3.348, 21.193, -71.011)), (' B 297  LEU HD11', ' B 324  TYR  HB3', -0.411, (-10.66, 47.791, -29.119)), (' B 376  ILE HG12', ' B 425  VAL HG11', -0.409, (-7.372, 25.608, -24.149)), (' A 279  THR  HB ', ' A 429  MET  HE2', -0.408, (-0.204, 18.485, -74.389)), (' B  49  VAL HG23', ' B  58  THR HG22', -0.407, (-9.237, -12.045, -47.011)), (' A 591  GLU  O  ', ' A 592  ILE  HB ', -0.404, (-32.575, 17.181, -102.695)), (' B 512  ILE  O  ', ' B 546  PHE  HA ', -0.402, (-34.301, 26.161, -14.934))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
