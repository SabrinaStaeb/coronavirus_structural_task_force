# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  10 ', 'SER', 0.02750394006313549, (11.257999999999988, 42.693, -55.767)), ('A', ' 195 ', 'ILE', 0.02317921968478512, (-34.27000000000002, 28.411999999999992, -54.435999999999986)), ('A', ' 218 ', 'LYS', 0.016528485876040007, (-42.97200000000001, 25.299999999999997, -56.919999999999995)), ('A', ' 219 ', 'LEU', 0.02707034537829376, (-41.675000000000004, 28.235, -59.12899999999999)), ('A', ' 283 ', 'PRO', 0.039073349279333945, (-7.799000000000014, 13.591999999999986, -81.634)), ('A', ' 484 ', 'VAL', 0.010491776535407697, (-32.38900000000002, 37.168, -80.857)), ('B', '  27 ', 'CYS', 0.032225522210754975, (6.703999999999994, -5.386000000000006, -38.546)), ('B', '  48 ', 'TYR', 0.009457643135378635, (-2.6740000000000155, -10.029000000000002, -46.93399999999998))]
data['omega'] = []
data['rota'] = [('A', '  12 ', 'THR', 0.0027198671887163073, (7.657999999999987, 46.752, -52.115)), ('A', '  35 ', 'ILE', 0.0, (3.827999999999985, 57.053000000000004, -66.491)), ('A', '  46 ', 'ASN', 0.029799541716594095, (-1.6440000000000072, 54.709, -46.64)), ('A', '  51 ', 'ASN', 0.06578110438058007, (-2.7379999999999924, 65.127, -47.248999999999995)), ('A', '  79 ', 'ILE', 0.02721571089834577, (11.745999999999997, 70.658, -48.719)), ('A', ' 156 ', 'GLU', 0.15513754755955667, (-47.0, 33.65099999999999, -65.035)), ('A', ' 157 ', 'VAL', 0.2412597608022082, (-46.280000000000015, 29.87999999999998, -64.299)), ('A', ' 162 ', 'GLU', 0.02837079122324985, (-42.530000000000015, 26.46099999999999, -69.001)), ('A', ' 173 ', 'ARG', 0.14162506661888372, (-30.983999999999998, 40.545, -71.331)), ('A', ' 209 ', 'VAL', 0.011551952047739178, (-39.745, 30.100999999999985, -72.226)), ('A', ' 226 ', 'VAL', 0.1294262370976317, (-29.80300000000001, 36.788, -61.013999999999996)), ('A', ' 247 ', 'VAL', 0.03470890731298843, (16.893999999999995, 9.665999999999993, -66.188)), ('A', ' 255 ', 'THR', 0.017785056418636504, (4.128999999999991, -3.668000000000003, -63.52699999999999)), ('A', ' 344 ', 'ASP', 0.0804013317674785, (-23.306000000000004, 7.662999999999997, -58.609999999999985)), ('A', ' 365 ', 'GLU', 0.11705402143996312, (-6.013000000000009, 20.354999999999997, -50.90399999999999)), ('A', ' 485 ', 'SER', 0.0509804775357524, (-28.841, 36.223, -82.167)), ('A', ' 502 ', 'ARG', 0.1579350543318664, (-36.00400000000002, 7.704999999999988, -97.456)), ('A', ' 517 ', 'SER', 0.16206341078045355, (-32.517000000000024, 27.745999999999984, -81.382)), ('A', ' 530 ', 'THR', 0.029126317261060512, (-30.459000000000003, 17.304999999999986, -80.04)), ('B', '  12 ', 'THR', 0.005324936235370125, (6.531999999999995, 0.3179999999999925, -42.92999999999999)), ('B', '  51 ', 'ASN', 0.09802654967739292, (-5.1080000000000005, -15.298000000000007, -53.501)), ('B', '  69 ', 'SER', 0.16463608337092384, (0.9949999999999912, -13.808000000000003, -54.297999999999995)), ('B', '  92 ', 'LEU', 0.16476219857657534, (8.970999999999993, -3.6560000000000077, -46.196999999999996)), ('B', '  96 ', 'THR', 0.10643920367259035, (14.488999999999995, -0.49100000000000676, -39.839)), ('B', ' 103 ', 'VAL', 0.03780638799071312, (1.5849999999999977, -2.019000000000003, -27.195)), ('B', ' 124 ', 'ASN', 0.05317987683025947, (-6.013000000000001, 11.977, -23.054999999999996)), ('B', ' 144 ', 'THR', 0.028558605117723346, (-20.194000000000006, 5.803999999999997, -38.437)), ('B', ' 164 ', 'HIS', 0.04367458492584494, (-45.690999999999995, 13.539999999999992, -39.332)), ('B', ' 177 ', 'ASN', 0.09736068942874515, (-32.98, 17.417, -29.416)), ('B', ' 179 ', 'ASN', 0.050995858518793555, (-27.93700000000001, 18.239999999999995, -30.380999999999997)), ('B', ' 191 ', 'SER', 0.17581113610206817, (-30.927000000000003, 11.222999999999994, -57.318)), ('B', ' 192 ', 'LYS', 0.0, (-31.40100000000001, 13.532999999999994, -54.22699999999998)), ('B', ' 195 ', 'ILE', 0.05909498581121609, (-32.812, 21.151, -48.784)), ('B', ' 256 ', 'LEU', 0.016271483901160833, (2.594999999999999, 52.74199999999999, -25.898999999999997)), ('B', ' 275 ', 'GLN', 0.06124740212709814, (5.503000000000003, 31.822999999999993, -23.877)), ('B', ' 278 ', 'SER', 0.1420166685121347, (-0.816000000000003, 30.28, -22.824)), ('B', ' 289 ', 'SER', 0.2021250524319024, (-13.925, 38.061, -25.730999999999995)), ('B', ' 301 ', 'SER', 0.13171521832469088, (0.857000000000002, 45.30599999999999, -35.729)), ('B', ' 353 ', 'GLU', 0.16775195889776517, (-6.441000000000003, 40.167, -43.691)), ('B', ' 361 ', 'ASN', 0.15676926478218617, (-12.808000000000005, 22.923999999999992, -39.795)), ('B', ' 484 ', 'VAL', 0.04541814123224726, (-38.043000000000006, 8.179999999999996, -25.544999999999995)), ('B', ' 592 ', 'ILE', 0.27093701374808976, (-43.558, 24.871, -1.082))]
data['cbeta'] = []
data['probe'] = [(' A  60  VAL  HB ', ' A 897  HOH  O  ', -0.761, (-0.309, 57.936, -57.391)), (' B 271  LYS  NZ ', ' B 802  HOH  O  ', -0.758, (2.759, 31.353, -17.286)), (' B 279  THR  HB ', ' B 429  MET  HE2', -0.74, (-6.177, 27.723, -20.868)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.727, (-26.189, 11.002, -80.676)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.709, (-32.728, 34.574, -22.07)), (' B  12  THR HG21', ' B  26  CYS  HA ', -0.707, (5.874, -1.263, -39.91)), (' B  48  TYR  O  ', ' B 801  HOH  O  ', -0.656, (-4.452, -10.219, -44.548)), (' B  27  CYS  SG ', ' B 879  HOH  O  ', -0.641, (8.406, -5.103, -42.543)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.633, (-31.474, 20.982, -80.425)), (' B 195  ILE  O  ', ' B 195  ILE HG23', -0.624, (-34.444, 21.484, -47.427)), (' B 508  LYS  HD3', ' B 862  HOH  O  ', -0.622, (-36.244, 41.241, -18.299)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.622, (-30.976, 20.996, -80.545)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.61, (2.425, 41.774, -29.341)), (' B   2  VAL  N  ', ' B 812  HOH  O  ', -0.603, (1.581, 2.132, -49.173)), (' A 277  TYR  HA ', ' A 396  TYR  O  ', -0.602, (2.745, 16.084, -66.528)), (' A 368  ALA  O  ', ' A 393  ALA  HA ', -0.593, (1.45, 14.425, -56.854)), (' B 512  ILE  O  ', ' B 546  PHE  HA ', -0.58, (-34.504, 26.307, -15.22)), (' B 220  ASN  O  ', ' B 223  ASP  OD2', -0.575, (-41.686, 16.377, -49.039)), (' B   7  LEU HD13', ' B 103  VAL HG22', -0.571, (2.127, -0.628, -30.737)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.554, (6.063, -1.462, -40.396)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.552, (9.46, 0.033, -32.608)), (' B 278  SER  HB2', ' B 436  MET  HE2', -0.546, (-1.642, 32.795, -21.915)), (' B  86  ASN  HB3', ' B1009  HOH  O  ', -0.546, (13.01, -12.799, -34.871)), (' A 275  GLN  O  ', ' A 395  HIS  ND1', -0.543, (6.763, 12.607, -64.377)), (' B 504  PRO  HB3', ' B 507  ARG HH21', -0.543, (-47.449, 38.458, -13.652)), (' B 157  VAL HG21', ' B 220  ASN  HA ', -0.532, (-45.202, 18.713, -46.998)), (' A 304  ILE  HA ', ' A 370  ILE  O  ', -0.526, (-3.043, 10.958, -59.902)), (' A 312  ALA  HB1', ' A 973  HOH  O  ', -0.525, (-19.887, 15.452, -71.12)), (' A 200  PHE  N  ', ' A 804  HOH  O  ', -0.524, (-31.916, 29.647, -69.097)), (' B  32  ASP  O  ', ' B  36  SER  OG ', -0.522, (-0.916, -7.985, -29.636)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.521, (-38.66, 27.832, -3.035)), (' A 352  LEU HD11', ' B 234  PRO  HD3', -0.521, (-7.175, 11.565, -44.68)), (' B 504  PRO  HB3', ' B 507  ARG  NH2', -0.52, (-47.703, 38.174, -13.287)), (' B 177  ASN  HB3', ' B 516  ASN  ND2', -0.51, (-33.754, 16.785, -26.562)), (' A 329  LYS  HE2', ' A 354  GLN  OE1', -0.509, (-5.976, 1.014, -55.582)), (' B 315  ASP  O  ', ' B 318  CYS  HB2', -0.505, (-18.719, 37.774, -34.926)), (' B 133  PHE  HA ', ' B 938  HOH  O  ', -0.499, (-4.579, 8.202, -35.298)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.495, (-26.266, 19.232, -87.148)), (' B  15  ARG  HG3', ' B  24  PHE  CD2', -0.492, (-0.006, 1.971, -43.981)), (' A 445  PRO  HD2', ' A 448  ILE HD12', -0.49, (-17.592, 9.163, -89.423)), (' B 277  TYR  HA ', ' B 396  TYR  O  ', -0.489, (-0.281, 29.983, -26.952)), (' B 254  PRO  HB3', ' B 298  TYR  CE2', -0.487, (2.053, 44.805, -25.344)), (' A   7  LEU HD13', ' A 103  VAL HG22', -0.486, (6.46, 45.725, -65.708)), (' A  59  ASP  OD1', ' A  61  THR  OG1', -0.482, (0.452, 61.976, -62.09)), (' B  14  LEU  HB2', ' B  25  LEU  O  ', -0.48, (3.145, -2.142, -41.032)), (' A 163  LEU HD12', ' A 209  VAL HG12', -0.477, (-39.965, 30.856, -69.081)), (' A 329  LYS  HB2', ' A 329  LYS  HZ3', -0.474, (-9.01, 0.994, -55.67)), (' A 139  LYS  O  ', ' A 143  GLU  HG2', -0.472, (-15.086, 36.716, -62.872)), (' A  19  CYS  HB2', ' A  23  PRO  HD2', -0.462, (-3.219, 46.711, -59.677)), (' B 195  ILE  CG2', ' B 195  ILE  O  ', -0.462, (-34.26, 21.309, -47.435)), (' B 279  THR  HB ', ' B 429  MET  CE ', -0.462, (-6.177, 27.208, -20.891)), (' B 510  VAL HG21', ' B 541  TYR  CG ', -0.46, (-32.449, 34.543, -20.877)), (' B 459  ASN  HA ', ' B 814  HOH  O  ', -0.459, (-14.958, 31.021, -3.748)), (' B 377  SER  O  ', ' B 406  PRO  HA ', -0.456, (-15.983, 20.686, -23.562)), (' A 319  GLU  HA ', ' A 319  GLU  OE2', -0.455, (-18.526, 4.605, -66.463)), (' B  19  CYS  SG ', ' B 110  ALA  HB1', -0.455, (-6.991, -0.648, -34.024)), (' A 269  TYR  OH ', ' A 294  GLY  HA3', -0.452, (-3.376, 3.06, -70.208)), (' B 115  THR  HA ', ' B 411  LEU  O  ', -0.452, (-20.305, 5.381, -25.596)), (' A 280  LEU HD11', ' A 438  LEU  HG ', -0.451, (-2.261, 10.075, -77.189)), (' A 376  ILE HG12', ' A 425  VAL HG11', -0.45, (-2.988, 20.527, -71.449)), (' A 235  LEU HD21', ' A 382  TYR  CE2', -0.449, (-7.268, 31.998, -60.667)), (' A 297  LEU HD11', ' A 324  TYR  HB3', -0.448, (-8.227, -1.155, -66.205)), (' B 167  TRP  CZ3', ' B 174  PRO  HD2', -0.447, (-34.395, 8.838, -36.608)), (' B  64  TYR  CD1', ' B  64  TYR  N  ', -0.446, (0.859, -18.245, -45.53)), (' B 448  ILE HD13', ' B 565  ILE  O  ', -0.443, (-26.69, 32.485, -11.849)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.435, (-12.856, 7.076, -52.524)), (' A 252  LEU  HB3', ' A 299  TYR  CD2', -0.435, (4.789, 4.809, -61.851)), (' B 154  VAL HG13', ' B 163  LEU HD22', -0.431, (-43.602, 16.569, -43.092)), (' A 451  THR HG21', ' A 585  LEU HD23', -0.431, (-15.014, 17.034, -93.595)), (' A 519  ASN  HB3', ' A 530  THR HG21', -0.43, (-31.765, 20.811, -79.894)), (' A 276  LYS  O  ', ' A 395  HIS  HA ', -0.43, (4.682, 15.144, -63.495)), (' B 333  ILE  HB ', ' B 358  CYS  SG ', -0.43, (-12.251, 30.543, -41.627)), (' B 451  THR HG21', ' B 585  LEU HD23', -0.429, (-25.368, 27.651, -6.28)), (' A 367  THR  HA ', ' A 392  ARG  O  ', -0.428, (0.195, 16.273, -54.096)), (' A 200  PHE  HA ', ' A 210  VAL  O  ', -0.428, (-35.26, 27.768, -69.584)), (' B 505  ALA  O  ', ' B 508  LYS  HG2', -0.427, (-39.852, 39.692, -15.209)), (' B 269  TYR  CD1', ' B 295  LEU HD13', -0.426, (-3.498, 39.661, -24.873)), (' A  16  CYS  O  ', ' A  22  ARG  HA ', -0.424, (-3.902, 47.879, -57.658)), (' B 183  THR  O  ', ' B 225  PHE  HA ', -0.421, (-32.416, 14.939, -43.796)), (' B 492  GLN  O  ', ' B 496  VAL HG23', -0.42, (-41.289, 25.019, -11.582)), (' A 376  ILE  HA ', ' A 376  ILE HD12', -0.42, (-7.163, 20.649, -69.958)), (' A 333  ILE  HB ', ' A 358  CYS  SG ', -0.418, (-13.79, 16.319, -56.559)), (' B 544  VAL  O  ', ' B 572  ILE  HA ', -0.418, (-33.674, 32.538, -12.196)), (' B  49  VAL HG23', ' B  58  THR HG22', -0.417, (-8.71, -12.34, -47.003)), (' A 287  GLY  HA2', ' A 866  HOH  O  ', -0.415, (-9.568, 6.211, -75.683)), (' A 269  TYR  CD1', ' A 295  LEU HD13', -0.415, (0.298, 6.1, -68.884)), (' A 215  THR HG22', ' B 193  VAL HG21', -0.414, (-31.718, 21.215, -55.694)), (' A  14  LEU  HB2', ' A  25  LEU  O  ', -0.412, (5.323, 48.979, -55.741)), (' A   1  ALA  HB3', ' A 989  HOH  O  ', -0.411, (1.49, 47.122, -44.762)), (' B 103  VAL  CG1', ' B 103  VAL  O  ', -0.41, (-0.131, -2.558, -28.205)), (' B 102  ASN  C  ', ' B 104  THR  H  ', -0.409, (1.387, -2.028, -24.816)), (' A 533  VAL HG11', ' A 560  ARG  O  ', -0.407, (-18.31, 21.426, -83.782)), (' A  12  THR HG21', ' A  26  CYS  HA ', -0.407, (8.021, 48.326, -55.251)), (' A   4  ALA  O  ', ' A  24  PHE  HB2', -0.407, (3.656, 42.137, -55.298)), (' B 386  VAL  O  ', ' B 390  ARG  HG2', -0.407, (-5.724, 22.713, -39.089)), (' A 158  LEU HD12', ' A 162  GLU  HB3', -0.406, (-44.576, 27.525, -70.29)), (' A 254  PRO  HA ', ' A 298  TYR  O  ', -0.406, (3.522, 0.27, -63.516)), (' A 409  ARG  NH2', ' A 422  PHE  O  ', -0.405, (-7.762, 29.927, -73.035)), (' B  83  LEU  O  ', ' B  89  VAL  HA ', -0.404, (4.666, -11.054, -40.395)), (' A 130  LEU  HA ', ' A 130  LEU HD23', -0.401, (1.323, 39.294, -64.816)), (' B 376  ILE HG12', ' B 425  VAL HG11', -0.4, (-7.64, 25.234, -24.52))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
