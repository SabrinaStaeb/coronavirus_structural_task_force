# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 195 ', 'ILE', 0.06346542569064238, (-34.324999999999996, 28.455, -54.328)), ('A', ' 228 ', 'THR', 0.014041550519930729, (-23.930000000000003, 34.047, -60.469)), ('A', ' 484 ', 'VAL', 0.06850610004701561, (-31.97200000000001, 37.449, -80.596)), ('B', ' 103 ', 'VAL', 0.037031964916685, (1.8379999999999987, -1.6600000000000001, -27.102))]
data['omega'] = []
data['rota'] = [('A', '   7 ', 'LEU', 0.2087840606982036, (6.908000000000006, 42.053, -61.78300000000001)), ('A', '   9 ', 'ASN', 0.2006457417410584, (9.211000000000006, 40.191, -56.37)), ('A', '  12 ', 'THR', 0.13331780339185464, (7.408, 46.884, -51.322)), ('A', '  20 ', 'ILE', 0.017033831855784436, (-8.920000000000002, 46.10199999999999, -59.789)), ('A', '  35 ', 'ILE', 0.06791512696524137, (3.9510000000000014, 57.049, -65.945)), ('A', '  36 ', 'SER', 0.09255625481076116, (2.461999999999998, 55.067, -68.883)), ('A', '  51 ', 'ASN', 0.09876919419857916, (-2.9049999999999994, 65.538, -46.768)), ('A', '  69 ', 'SER', 0.055784977267628225, (3.3149999999999995, 63.224999999999994, -45.125)), ('A', '  79 ', 'ILE', 0.03947591967650017, (11.455999999999984, 71.15100000000002, -48.446)), ('A', '  81 ', 'PHE', 0.28732876142575053, (10.63199999999999, 65.573, -52.79599999999999)), ('A', ' 162 ', 'GLU', 0.031582883011059354, (-42.175000000000026, 26.437, -68.684)), ('A', ' 173 ', 'ARG', 0.013803632356150695, (-30.980000000000004, 40.75399999999999, -71.16)), ('A', ' 209 ', 'VAL', 0.012012154974501027, (-39.587, 30.442999999999994, -72.034)), ('A', ' 217 ', 'TYR', 0.13566457250138597, (-39.192000000000014, 23.971000000000007, -56.703)), ('A', ' 255 ', 'THR', 0.0027198671887163073, (4.020999999999998, -3.380999999999993, -62.977)), ('A', ' 289 ', 'SER', 0.08428507664849959, (-9.652000000000001, 7.982999999999999, -71.31)), ('A', ' 337 ', 'ARG', 0.0796215438147193, (-23.765000000000008, 23.52499999999999, -54.079)), ('A', ' 344 ', 'ASP', 0.23658092248762516, (-23.159999999999997, 7.754, -58.561)), ('A', ' 365 ', 'GLU', 0.020026865493177268, (-6.225000000000003, 20.567, -50.368)), ('A', ' 376 ', 'ILE', 0.1558313422579398, (-7.011999999999997, 20.544999999999995, -71.234)), ('A', ' 397 ', 'VAL', 0.21569398344563048, (-0.32000000000000206, 14.810999999999996, -66.738)), ('A', ' 442 ', 'ARG', 0.03825478252164173, (-10.575000000000001, 4.157999999999994, -83.295)), ('A', ' 458 ', 'ASP', 0.11374951291999644, (-1.2580000000000027, 18.148000000000003, -90.079)), ('A', ' 460 ', 'LYS', 0.0018371091100839055, (-0.7779999999999987, 12.885999999999996, -88.552)), ('A', ' 486 ', 'SER', 0.14562254212790224, (-28.756, 32.29399999999999, -81.65000000000002)), ('A', ' 495 ', 'VAL', 0.15441462722095176, (-33.695000000000014, 19.192, -95.872)), ('A', ' 516 ', 'ASN', 0.0, (-29.140000000000008, 26.221999999999994, -79.414)), ('A', ' 530 ', 'THR', 0.08425560563539783, (-30.141000000000002, 17.582, -79.683)), ('A', ' 551 ', 'GLU', 0.10869076225184766, (-21.46200000000001, 30.855, -92.354)), ('A', ' 591 ', 'GLU', 0.1960770681378104, (-28.526, 16.588999999999984, -104.041)), ('A', ' 592 ', 'ILE', 0.12520792465547123, (-32.081000000000024, 18.131, -103.18599999999999)), ('B', '   7 ', 'LEU', 0.25336629555152035, (4.009, 3.5140000000000002, -32.341)), ('B', '   9 ', 'ASN', 0.20612405924734065, (7.774000000000002, 5.852999999999998, -36.59)), ('B', '  12 ', 'THR', 0.12543189135607943, (6.5969999999999995, 0.4299999999999997, -43.211)), ('B', '  20 ', 'ILE', 0.01901454782514139, (-11.092999999999998, 1.625999999999996, -38.726)), ('B', '  36 ', 'SER', 0.08657095354277516, (-2.917, -9.736, -28.971)), ('B', '  51 ', 'ASN', 0.1161992996440768, (-5.117999999999999, -15.214000000000002, -53.591)), ('B', '  68 ', 'MET', 0.0, (4.619999999999998, -12.966000000000001, -55.136)), ('B', '  69 ', 'SER', 0.006097842218817138, (0.9980000000000011, -13.69, -54.086)), ('B', '  79 ', 'ILE', 0.23280523798174077, (8.293000000000001, -22.398000000000003, -51.726)), ('B', '  92 ', 'LEU', 0.054992210653176846, (9.092000000000004, -3.4580000000000055, -46.215)), ('B', '  97 ', 'CYS', 0.13893557293542003, (12.455000000000005, -1.9000000000000057, -36.971)), ('B', ' 124 ', 'ASN', 0.07127889359074101, (-5.652000000000002, 11.935999999999996, -23.062)), ('B', ' 164 ', 'HIS', 0.08427403010154581, (-45.83800000000001, 13.807999999999996, -39.118)), ('B', ' 166 ', 'SER', 0.11199450292884539, (-42.263, 7.914999999999998, -40.949)), ('B', ' 179 ', 'ASN', 0.0004068631843931977, (-28.040000000000013, 18.872, -30.331)), ('B', ' 187 ', 'VAL', 0.02948440644207499, (-36.38900000000001, 12.746999999999996, -54.355)), ('B', ' 188 ', 'THR', 0.1898720802409903, (-35.234000000000016, 13.938999999999997, -57.92699999999999)), ('B', ' 191 ', 'SER', 0.059920922871372996, (-30.861000000000008, 11.318999999999999, -57.17399999999999)), ('B', ' 192 ', 'LYS', 0.0, (-31.46600000000001, 13.714, -54.152)), ('B', ' 195 ', 'ILE', 0.0005795095648156107, (-33.131, 21.290999999999997, -48.813)), ('B', ' 202 ', 'LYS', 0.1632252873816433, (-41.798, 16.248000000000005, -29.993)), ('B', ' 219 ', 'LEU', 0.026644295500015326, (-41.793, 21.077, -47.286)), ('B', ' 220 ', 'ASN', 0.15861097031323984, (-43.513, 18.583, -49.48500000000001)), ('B', ' 221 ', 'VAL', 0.17148574223971724, (-44.268, 15.006, -48.406)), ('B', ' 247 ', 'VAL', 0.0064999227277489895, (12.954000000000004, 36.05, -21.343999999999998)), ('B', ' 323 ', 'LYS', 0.29758416012200994, (-16.569, 47.431, -31.817)), ('B', ' 353 ', 'GLU', 0.02459356878994069, (-6.384000000000005, 40.156, -43.675)), ('B', ' 365 ', 'GLU', 0.024002586480288923, (-3.0550000000000033, 26.744999999999997, -44.36099999999999)), ('B', ' 376 ', 'ILE', 0.14987032882806342, (-11.469000000000003, 25.668, -25.253)), ('B', ' 397 ', 'VAL', 0.21673938722467267, (-3.5870000000000015, 31.458, -26.76)), ('B', ' 458 ', 'ASP', 0.06578055149690563, (-11.413, 27.11, -5.623)), ('B', ' 483 ', 'ASP', 0.04867766302631981, (-39.735, 9.887999999999996, -22.772)), ('B', ' 484 ', 'VAL', 0.008343632587634467, (-37.563, 8.241, -25.559)), ('B', ' 495 ', 'VAL', 0.14325956845682897, (-44.205000000000005, 25.178000000000008, -8.772)), ('B', ' 516 ', 'ASN', 0.18587103263811744, (-35.242, 19.601, -23.895)), ('B', ' 551 ', 'GLU', 0.10668603938561695, (-31.141999999999996, 13.996, -9.711))]
data['cbeta'] = [('A', '  20 ', 'ILE', ' ', 0.25665444268363513, (-10.139999999999997, 45.700999999999986, -60.71)), ('A', ' 592 ', 'ILE', ' ', 0.3442823061452768, (-33.006, 17.113999999999997, -102.42599999999999)), ('B', '  20 ', 'ILE', ' ', 0.2623617302564739, (-12.49900000000001, 2.003, -38.157))]
data['probe'] = [(' B  12  THR HG21', ' B  26  CYS  HA ', -0.932, (6.353, -1.794, -40.529)), (' A  12  THR HG21', ' A  26  CYS  HA ', -0.904, (8.351, 48.741, -54.581)), (' A 326  PRO  HB2', ' A 329  LYS  HZ3', -0.76, (-9.091, -0.859, -56.147)), (' A 280  LEU HD11', ' A 438  LEU  HG ', -0.72, (-1.94, 10.338, -76.985)), (' A 151  ILE HG12', ' A 226  VAL HG22', -0.712, (-31.832, 40.327, -61.064)), (' A 326  PRO  HG2', ' A 329  LYS  NZ ', -0.708, (-8.42, -1.556, -56.656)), (' A 326  PRO  HG2', ' A 329  LYS  HZ1', -0.704, (-7.906, -2.271, -55.992)), (' A 311  HIS  HE2', ' A 339  ARG  NH2', -0.675, (-19.444, 20.838, -60.159)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.673, (-30.779, 21.237, -80.337)), (' A 158  LEU HD21', ' A 164  HIS  ND1', -0.665, (-46.471, 31.876, -70.308)), (' B 280  LEU HD11', ' B 438  LEU  HG ', -0.633, (-8.53, 35.668, -18.689)), (' A 320  LYS  NZ ', ' A 701  VWG  N1 ', -0.625, (-12.111, 3.547, -74.741)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.616, (-29.94, 21.051, -80.153)), (' B 279  THR  HB ', ' B 429  MET  HE3', -0.61, (-5.924, 27.129, -20.792)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.609, (-37.994, 28.363, -3.2)), (' A 279  THR  HB ', ' A 429  MET  HE3', -0.605, (0.199, 18.407, -73.82)), (' B 100  SER  HB2', ' B 103  VAL HG22', -0.603, (4.806, -0.89, -29.048)), (' A 445  PRO  HD2', ' A 448  ILE HD12', -0.599, (-17.079, 9.305, -89.717)), (' B 442  ARG HH11', ' B 464  HIS  CE1', -0.597, (-17.632, 46.807, -12.673)), (' A 326  PRO  CB ', ' A 329  LYS  HZ3', -0.595, (-9.403, -1.23, -56.497)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.593, (6.224, -1.137, -40.579)), (' A  12  THR  CG2', ' A  26  CYS  HA ', -0.589, (8.416, 47.66, -54.33)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.584, (-13.026, 7.33, -52.746)), (' B 162  GLU  HG2', ' B 210  VAL HG22', -0.573, (-44.611, 20.587, -33.872)), (' A 163  LEU  HG ', ' A 211  TYR  CD2', -0.565, (-40.749, 28.462, -66.073)), (' B 228  THR HG22', ' B 230  HIS  NE2', -0.562, (-22.265, 16.74, -42.774)), (' B 445  PRO  HD2', ' B 448  ILE HD12', -0.56, (-26.495, 35.936, -10.553)), (' A   7  LEU HD22', ' A 103  VAL HG22', -0.552, (7.365, 44.477, -65.437)), (' A 158  LEU HD12', ' A 162  GLU  HB3', -0.545, (-43.997, 27.429, -70.342)), (' A 289  SER  HB3', ' A 320  LYS  HD3', -0.536, (-11.953, 5.728, -71.569)), (' A 158  LEU HD21', ' A 164  HIS  CE1', -0.534, (-46.782, 31.432, -70.833)), (' A 198  TYR  HA ', ' A 213  GLY  HA2', -0.528, (-32.541, 26.285, -62.85)), (' B 167  TRP  CD1', ' B 173  ARG  NH1', -0.519, (-40.585, 7.165, -36.132)), (' A 519  ASN  HB3', ' A 530  THR HG21', -0.511, (-31.144, 21.502, -79.927)), (' B 280  LEU  HB2', ' B 436  MET  HE3', -0.508, (-5.177, 33.369, -21.174)), (' B 103  VAL  O  ', ' B 103  VAL HG12', -0.507, (-0.422, -1.709, -28.308)), (' B 109  ILE HD13', ' B 134  ALA  HB2', -0.505, (-5.84, 6.965, -28.573)), (' A 109  ILE HD13', ' A 134  ALA  HB2', -0.504, (-1.63, 38.793, -67.934)), (' B 157  VAL HG23', ' B 221  VAL HG23', -0.502, (-46.514, 16.799, -46.607)), (' B 445  PRO  HB3', ' B 468  SER  HB3', -0.499, (-28.07, 39.744, -7.956)), (' A 504  PRO  O  ', ' A 507  ARG  HB2', -0.495, (-34.488, 5.693, -88.759)), (' B 504  PRO  HA ', ' B 507  ARG  HD2', -0.495, (-45.267, 38.141, -13.542)), (' A  19  CYS  HB2', ' A  23  PRO  HD2', -0.491, (-3.223, 46.917, -59.276)), (' B 198  TYR  HA ', ' B 213  GLY  HA2', -0.485, (-34.463, 22.969, -39.872)), (' A 162  GLU  HG3', ' A 210  VAL  HA ', -0.485, (-40.175, 26.569, -70.853)), (' A  49  VAL HG23', ' A  58  THR HG22', -0.484, (-6.035, 62.082, -53.22)), (' B  49  VAL HG23', ' B  58  THR HG22', -0.48, (-9.064, -12.591, -46.849)), (' B  19  CYS  HB2', ' B  23  PRO  HD2', -0.478, (-5.641, 0.391, -38.28)), (' B 228  THR  CG2', ' B 230  HIS  NE2', -0.474, (-22.35, 16.99, -43.019)), (' A 280  LEU  HB2', ' A 436  MET  HE3', -0.472, (0.63, 12.269, -72.88)), (' A 146  LYS  HE2', ' A 227  LEU  HB3', -0.472, (-24.377, 35.978, -63.717)), (' A 498  GLU  HG3', ' A 502  ARG  NH2', -0.471, (-37.594, 14.466, -99.492)), (' A 326  PRO  CG ', ' A 329  LYS  NZ ', -0.468, (-8.86, -1.819, -56.502)), (' B 531  GLN  OE1', ' B 535  SER  OG ', -0.467, (-30.289, 26.825, -25.289)), (' B 182  PHE  HB3', ' B 225  PHE  HB3', -0.467, (-33.187, 15.993, -41.016)), (' A 442  ARG  HD2', ' A 701  VWG  C6 ', -0.464, (-7.644, 3.26, -80.692)), (' B  31  TYR  CZ ', ' B  35  ILE HG21', -0.461, (2.769, -12.696, -32.872)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.459, (3.373, 41.58, -29.35)), (' B 533  VAL HG11', ' B 560  ARG  HG3', -0.457, (-25.8, 22.51, -17.575)), (' A 151  ILE HG12', ' A 226  VAL  CG2', -0.454, (-31.067, 40.09, -60.213)), (' A 533  VAL HG11', ' A 560  ARG  HG3', -0.453, (-18.562, 22.613, -83.135)), (' B  15  ARG  HG3', ' B  24  PHE  CD2', -0.451, (-0.041, 1.696, -43.663)), (' A 156  GLU  HG2', ' A 164  HIS  HB2', -0.451, (-46.349, 33.451, -67.904)), (' A 445  PRO  HB3', ' A 468  SER  HB3', -0.448, (-17.726, 5.091, -91.748)), (' B 585  LEU HD22', ' B 587  PHE  CE2', -0.446, (-28.461, 29.061, -6.759)), (' B 279  THR  HB ', ' B 429  MET  CE ', -0.445, (-6.085, 27.479, -20.271)), (' B 452  VAL HG13', ' B 565  ILE HD11', -0.444, (-22.791, 29.077, -9.324)), (' A 140  ALA  O  ', ' A 144  THR HG23', -0.444, (-15.008, 41.985, -61.697)), (' B 177  ASN  HB3', ' B 516  ASN  OD1', -0.444, (-34.477, 16.963, -27.021)), (' A 326  PRO  CB ', ' A 329  LYS  NZ ', -0.442, (-9.088, -1.599, -55.871)), (' A 244  GLU  HB2', ' A 276  LYS  HB2', -0.442, (9.761, 17.727, -62.765)), (' A 448  ILE HD11', ' A 572  ILE  CG2', -0.44, (-19.342, 11.446, -90.638)), (' B  16  CYS  O  ', ' B  22  ARG  HA ', -0.439, (-5.956, -0.062, -40.453)), (' A 163  LEU HD11', ' A 200  PHE  HE2', -0.436, (-38.193, 30.766, -66.345)), (' B 448  ILE HD11', ' B 572  ILE  CG2', -0.436, (-29.166, 33.323, -9.704)), (' A 127  THR HG23', ' A 130  LEU  H  ', -0.435, (4.276, 37.069, -65.032)), (' B 185  TYR  HE2', ' B 194  GLN  HG2', -0.43, (-28.518, 17.214, -50.014)), (' B 449  VAL  O  ', ' B 453  SER  HB2', -0.428, (-17.592, 32.375, -6.668)), (' B 249  ILE HG23', ' B 273  GLY  HA3', -0.427, (5.045, 38.929, -26.012)), (' A 337  ARG  NH1', ' B 336  ALA  O  ', -0.427, (-21.506, 25.954, -48.941)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.426, (9.722, -0.414, -32.459)), (' B 195  ILE  O  ', ' B 195  ILE HG23', -0.423, (-34.832, 21.716, -47.073)), (' B 244  GLU  HB2', ' B 276  LYS  HB2', -0.42, (7.67, 28.478, -26.903)), (' A 279  THR  HB ', ' A 429  MET  CE ', -0.419, (-0.27, 18.371, -74.061)), (' A 585  LEU HD22', ' A 587  PHE  CE2', -0.415, (-17.72, 16.067, -93.57)), (' A 333  ILE  HB ', ' A 358  CYS  SG ', -0.415, (-13.663, 16.531, -56.046)), (' B 333  ILE  HB ', ' B 358  CYS  SG ', -0.414, (-12.113, 30.94, -41.891)), (' B 249  ILE HD11', ' B 270  GLN  HG2', -0.414, (4.758, 42.469, -22.693)), (' B 376  ILE  HA ', ' B 376  ILE HD12', -0.414, (-10.946, 25.145, -26.842)), (' A 173  ARG  HA ', ' A 174  PRO  HD3', -0.411, (-31.086, 40.166, -69.557)), (' A 249  ILE HD11', ' A 270  GLN  HG2', -0.407, (8.672, 3.488, -66.656)), (' B 371  VAL HG23', ' B 393  ALA  HB2', -0.407, (-0.668, 31.242, -34.882)), (' A 184  GLY  HA2', ' A 225  PHE  HA ', -0.407, (-32.784, 33.771, -59.104)), (' B   7  LEU HD11', ' B 106  PHE  CG ', -0.406, (-0.066, 0.578, -31.387)), (' B 504  PRO  HB3', ' B 507  ARG HH21', -0.405, (-47.175, 38.866, -13.016)), (' A 376  ILE HG22', ' A 400  GLY  HA3', -0.404, (-5.893, 18.797, -73.389)), (' A   7  LEU HD11', ' A 106  PHE  CG ', -0.403, (3.581, 45.07, -64.005)), (' B 102  ASN  C  ', ' B 104  THR  H  ', -0.403, (1.911, -1.817, -24.837)), (' A 174  PRO  HG2', ' A 182  PHE  HZ ', -0.402, (-29.615, 36.897, -67.475)), (' B   8  CYS  SG ', ' B  99  GLY  O  ', -0.401, (9.126, 0.372, -31.042)), (' B 283  PRO  HG2', ' B 461  LEU HD13', -0.401, (-13.878, 32.933, -12.431)), (' A 480  ILE HG21', ' A 550  THR HG22', -0.401, (-27.728, 32.684, -90.149)), (' B 505  ALA  CB ', ' B 846  HOH  O  ', -0.4, (-39.119, 41.599, -10.655))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
