# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 195 ', 'ILE', 0.035128649983627594, (-33.87700000000001, 28.64399999999999, -54.245999999999995)), ('A', ' 219 ', 'LEU', 0.01815983051864747, (-41.443000000000005, 28.561999999999998, -59.32)), ('A', ' 484 ', 'VAL', 0.007051043609442783, (-32.098, 37.949, -80.926))]
data['omega'] = []
data['rota'] = [('A', '  12 ', 'THR', 0.0013599335943581536, (7.577999999999993, 47.257999999999996, -51.939)), ('A', '  20 ', 'ILE', 0.15274395900898213, (-8.655000000000003, 46.282, -60.401)), ('A', '  35 ', 'ILE', 0.010139322639583028, (4.047999999999992, 57.462, -66.453)), ('A', '  69 ', 'SER', 0.15450127738882094, (3.64599999999999, 63.399, -45.628)), ('A', '  81 ', 'PHE', 0.008274409777161436, (10.930999999999994, 65.904, -53.056)), ('A', ' 127 ', 'THR', 0.008159601566148922, (5.970000000000002, 36.18699999999998, -68.372)), ('A', ' 148 ', 'SER', 0.1563477193449424, (-23.979, 44.99499999999998, -65.892)), ('A', ' 149 ', 'TYR', 0.16045697893175087, (-27.132, 42.989999999999995, -66.903)), ('A', ' 158 ', 'LEU', 0.15760769744215042, (-47.43200000000001, 27.993999999999993, -67.431)), ('A', ' 173 ', 'ARG', 0.09251381915852323, (-30.81499999999999, 40.95399999999998, -71.454)), ('A', ' 179 ', 'ASN', 0.0020168924148802523, (-23.681000000000004, 29.169999999999987, -70.862)), ('A', ' 207 ', 'ASP', 0.04555388941596233, (-43.29500000000001, 34.658999999999985, -75.748)), ('A', ' 209 ', 'VAL', 0.012426256954202955, (-39.71000000000001, 30.44099999999999, -72.281)), ('A', ' 217 ', 'TYR', 0.1366023332394309, (-39.168, 24.077999999999992, -56.876)), ('A', ' 226 ', 'VAL', 0.21096899579145525, (-29.704, 36.979, -60.914)), ('A', ' 230 ', 'HIS', 0.06100112470161464, (-18.433, 34.913, -57.65)), ('A', ' 255 ', 'THR', 0.0, (4.006999999999996, -3.032000000000007, -63.28)), ('A', ' 337 ', 'ARG', 0.19411421921284921, (-23.343, 23.408999999999992, -53.706)), ('A', ' 416 ', 'THR', 0.07566149231597202, (-10.70000000000001, 35.254999999999995, -83.106)), ('A', ' 502 ', 'ARG', 0.029171662564690615, (-36.022000000000006, 8.590999999999987, -97.198)), ('A', ' 516 ', 'ASN', 0.003864033544879703, (-29.33999999999999, 26.680999999999994, -79.521)), ('A', ' 530 ', 'THR', 0.016271305089579146, (-30.458000000000002, 18.00799999999999, -79.887)), ('A', ' 592 ', 'ILE', 0.028086366141741256, (-32.164, 18.98999999999999, -103.776)), ('B', '  11 ', 'GLN', 0.09566949524786715, (8.799, 3.404999999999996, -42.088)), ('B', '  12 ', 'THR', 0.0013599335943581536, (6.4239999999999995, 0.6389999999999958, -43.367)), ('B', '  68 ', 'MET', 0.00447154499185952, (4.749999999999996, -12.483, -55.17)), ('B', '  69 ', 'SER', 0.09662222549252064, (1.1290000000000013, -13.461000000000006, -54.131)), ('B', '  92 ', 'LEU', 0.09313455881959688, (8.884, -3.370000000000008, -46.312)), ('B', '  96 ', 'THR', 0.21476912083414668, (14.606999999999998, -0.1780000000000026, -39.928)), ('B', ' 103 ', 'VAL', 0.014017987324315504, (1.602000000000002, -1.6530000000000005, -27.279)), ('B', ' 160 ', 'ASP', 0.012692135341860493, (-46.16100000000001, 24.997999999999998, -40.684)), ('B', ' 164 ', 'HIS', 0.05809420799734015, (-45.678000000000004, 13.728999999999996, -39.149)), ('B', ' 192 ', 'LYS', 0.08151721482565415, (-31.66299999999999, 13.997999999999992, -54.23199999999999)), ('B', ' 195 ', 'ILE', 0.005688848614227026, (-33.05800000000001, 21.440999999999995, -48.943)), ('B', ' 219 ', 'LEU', 0.20187193919959787, (-41.42, 21.123, -47.609)), ('B', ' 220 ', 'ASN', 0.26706649103542957, (-43.766999999999996, 18.484999999999992, -48.91)), ('B', ' 247 ', 'VAL', 0.003150532575091347, (12.988999999999999, 36.206999999999994, -20.966999999999995)), ('B', ' 259 ', 'SER', 0.11039504187889893, (-7.158999999999998, 52.541999999999994, -22.918)), ('B', ' 337 ', 'ARG', 0.11294119302106084, (-19.742, 24.489999999999995, -47.81099999999999)), ('B', ' 339 ', 'ARG', 0.0017378251051336799, (-24.910000000000007, 26.250999999999998, -44.898999999999994)), ('B', ' 344 ', 'ASP', 0.09704831583295259, (-21.513000000000012, 39.668, -42.448)), ('B', ' 347 ', 'LYS', 0.09518756605051039, (-14.625999999999998, 41.45599999999999, -45.881)), ('B', ' 353 ', 'GLU', 0.04658587797711709, (-6.1579999999999995, 40.58399999999999, -43.384)), ('B', ' 516 ', 'ASN', 0.2422774890193776, (-35.37900000000001, 19.732999999999993, -23.946000000000005))]
data['cbeta'] = [('A', ' 484 ', 'VAL', ' ', 0.26408061712117425, (-31.858000000000008, 37.887, -79.368)), ('A', ' 592 ', 'ILE', ' ', 0.3141737076171974, (-33.254999999999995, 18.232999999999986, -102.928)), ('B', ' 483 ', 'ASP', ' ', 0.2706736500732906, (-40.552, 11.130999999999997, -23.724))]
data['probe'] = [(' B  27  CYS  SG ', ' B 894  HOH  O  ', -1.055, (8.131, -5.03, -42.953)), (' A 158  LEU HD21', ' A 164  HIS  ND1', -0.809, (-46.454, 32.004, -70.777)), (' B 442  ARG HH11', ' B 464  HIS  CE1', -0.772, (-17.667, 46.145, -11.972)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.764, (-12.318, 7.943, -52.759)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.644, (-38.877, 28.491, -2.913)), (' B 279  THR  HB ', ' B 429  MET  HE3', -0.61, (-6.095, 27.514, -20.814)), (' A 215  THR HG22', ' B 193  VAL HG21', -0.595, (-31.124, 21.204, -55.88)), (' A   7  LEU HD21', ' A 106  PHE  HB2', -0.594, (4.049, 44.027, -66.108)), (' A 158  LEU HD12', ' A 162  GLU  HB3', -0.587, (-43.833, 27.793, -70.855)), (' B 335  PRO  HG3', ' B 701  NYV  N3 ', -0.58, (-16.856, 26.213, -43.252)), (' B   7  LEU HD21', ' B 106  PHE  HB2', -0.566, (-0.321, 2.529, -30.581)), (' A 326  PRO  HG2', ' A 329  LYS  HE2', -0.555, (-8.037, -0.646, -56.478)), (' A 445  PRO  HD2', ' A 448  ILE HD12', -0.552, (-17.473, 9.162, -89.357)), (' A 279  THR  HB ', ' A 429  MET  HE3', -0.551, (-0.07, 18.63, -74.191)), (' B 705  PO4  O2 ', ' B 706  PO4  O3 ', -0.536, (-19.207, 35.421, -20.613)), (' B 335  PRO  CG ', ' B 701  NYV  N3 ', -0.533, (-17.333, 26.481, -42.96)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.531, (-32.882, 34.346, -21.557)), (' A 157  VAL HG23', ' A 221  VAL HG22', -0.531, (-46.496, 31.946, -61.372)), (' B 445  PRO  HD2', ' B 448  ILE HD12', -0.529, (-26.599, 35.625, -10.32)), (' B 158  LEU HD11', ' B 164  HIS  ND1', -0.524, (-49.504, 14.245, -38.684)), (' B 183  THR  OG1', ' B 228  THR  OG1', -0.519, (-27.085, 17.565, -43.568)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.516, (2.762, 42.044, -28.852)), (' B  13  SER  O  ', ' B  44  SER  HA ', -0.515, (1.689, -2.2, -47.025)), (' A 140  ALA  O  ', ' A 144  THR HG23', -0.515, (-15.132, 42.202, -62.25)), (' B 230  HIS  CE1', ' B 339  ARG HH22', -0.511, (-21.21, 18.463, -44.75)), (' B 504  PRO  HB3', ' B 507  ARG  NH2', -0.51, (-47.536, 38.832, -12.722)), (' B 371  VAL HG23', ' B 393  ALA  HB2', -0.508, (-0.702, 31.51, -34.917)), (' A  12  THR HG21', ' A  26  CYS  HA ', -0.506, (7.516, 48.879, -55.223)), (' B 504  PRO  HB3', ' B 507  ARG HH21', -0.5, (-47.401, 39.049, -13.03)), (' B  12  THR HG21', ' B  26  CYS  HA ', -0.499, (5.944, -1.498, -40.628)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.494, (-26.264, 11.626, -80.102)), (' B 249  ILE HG23', ' B 273  GLY  HA3', -0.487, (5.208, 39.205, -26.077)), (' A  19  CYS  HB2', ' A  23  PRO  HD2', -0.484, (-3.411, 47.26, -60.021)), (' A 442  ARG HH11', ' A 464  HIS  CE1', -0.484, (-8.247, -0.442, -84.149)), (' B 228  THR HG22', ' B 230  HIS  NE2', -0.482, (-22.358, 16.776, -43.71)), (' B 335  PRO  HB2', ' B 337  ARG  HG3', -0.473, (-16.867, 25.119, -46.721)), (' B 511  PHE  HB3', ' B 530  THR HG22', -0.472, (-38.263, 28.126, -20.398)), (' A  13  SER  HB2', ' A  92  LEU HD12', -0.467, (6.437, 49.98, -47.706)), (' A 352  LEU HD11', ' B 234  PRO  HD3', -0.458, (-7.582, 11.989, -44.125)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.457, (9.669, 0.064, -32.517)), (' B 158  LEU  CD1', ' B 164  HIS  ND1', -0.455, (-49.56, 14.66, -38.926)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.454, (-30.873, 21.157, -79.83)), (' B 538  GLY  HA2', ' B 706  PO4  O1 ', -0.453, (-20.768, 32.511, -22.827)), (' A 280  LEU HD11', ' A 438  LEU  HG ', -0.447, (-2.373, 10.477, -76.911)), (' A 139  LYS  O  ', ' A 143  GLU  HG2', -0.447, (-14.598, 37.759, -62.971)), (' B 184  GLY  HA3', ' B 195  ILE HG22', -0.446, (-34.545, 19.475, -46.644)), (' B  19  CYS  HB2', ' B  23  PRO  HD2', -0.441, (-6.042, 0.517, -38.322)), (' B 442  ARG  NH1', ' B 464  HIS  CE1', -0.441, (-17.012, 46.947, -12.343)), (' A 176  LEU HD22', ' A 200  PHE  HB2', -0.436, (-32.948, 31.968, -69.86)), (' A   7  LEU HD13', ' A 103  VAL HG22', -0.433, (6.534, 46.094, -65.001)), (' A 249  ILE HG23', ' A 273  GLY  HA3', -0.433, (7.651, 7.685, -64.482)), (' A 252  LEU  HB3', ' A 299  TYR  CD2', -0.432, (4.889, 5.334, -61.96)), (' B   8  CYS  SG ', ' B  99  GLY  O  ', -0.43, (8.84, 0.936, -31.478)), (' A 297  LEU HD11', ' A 324  TYR  HB3', -0.43, (-7.744, -0.511, -66.076)), (' B 143  GLU  HA ', ' B 146  LYS  HE2', -0.43, (-20.554, 11.302, -37.909)), (' A 121  ILE HG23', ' A 421  TYR  CE1', -0.428, (-0.907, 35.021, -79.137)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.425, (-25.882, 19.528, -87.129)), (' A 266  VAL  O  ', ' A 270  GLN  HG3', -0.425, (6.293, 3.157, -70.572)), (' B 266  VAL  O  ', ' B 270  GLN  HG3', -0.424, (0.988, 43.093, -20.18)), (' A 278  SER  HB2', ' A 436  MET  HE2', -0.423, (3.244, 13.649, -71.818)), (' A   7  LEU HD12', ' A  29  CYS  HB3', -0.422, (6.486, 46.99, -62.775)), (' B 230  HIS  HE1', ' B 339  ARG HH22', -0.419, (-21.417, 18.301, -45.011)), (' A 442  ARG  NH1', ' A 464  HIS  CE1', -0.417, (-7.979, -0.425, -84.279)), (' B 453  SER  HA ', ' B 457  TYR  HB2', -0.417, (-15.029, 29.912, -8.17)), (' A 462  LYS  HA ', ' A 462  LYS  HD3', -0.414, (-4.502, 9.02, -90.867)), (' B 512  ILE  O  ', ' B 546  PHE  HA ', -0.413, (-34.1, 26.092, -15.061)), (' B 278  SER  HB2', ' B 436  MET  HE2', -0.412, (-1.512, 32.617, -21.336)), (' A 146  LYS  HE2', ' A 227  LEU  HB3', -0.412, (-24.268, 35.789, -64.464)), (' B  49  VAL HG23', ' B  58  THR HG22', -0.41, (-8.61, -12.178, -47.205)), (' B 195  ILE  O  ', ' B 195  ILE HG23', -0.405, (-34.403, 22.218, -47.215)), (' B 297  LEU HD11', ' B 324  TYR  HB3', -0.404, (-10.157, 47.639, -29.0)), (' B 175  PRO  HD2', ' B 180  TYR  CE2', -0.404, (-29.338, 11.453, -31.547)), (' B 451  THR HG21', ' B 585  LEU HD23', -0.404, (-25.307, 27.74, -5.952)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.404, (6.078, -1.214, -40.695)), (' B 460  LYS  HB2', ' B 460  LYS  HE3', -0.403, (-9.785, 30.757, -8.963)), (' A 371  VAL HG23', ' A 393  ALA  HB2', -0.401, (-0.562, 15.94, -58.461))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
