# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 339 ', 'ARG', 0.032158959785718234, (-25.238999999999997, 22.674999999999994, -59.058)), ('A', ' 484 ', 'VAL', 0.00922684, (-32.018, 38.31499999999998, -80.437))]
data['omega'] = []
data['rota'] = [('A', '   8 ', 'CYS', 0.12079318297987494, (10.665, 42.30499999999999, -60.785)), ('A', '  12 ', 'THR', 0.0, (7.937000000000001, 47.47499999999999, -51.908)), ('A', '  35 ', 'ILE', 0.012469815090361457, (4.183, 57.768, -66.289)), ('A', '  44 ', 'SER', 0.19262113921628818, (1.2440000000000015, 52.31, -49.55)), ('A', '  46 ', 'ASN', 0.022860767090082983, (-1.2239999999999984, 55.64199999999998, -46.47)), ('A', '  69 ', 'SER', 0.2778280595700407, (3.8710000000000013, 63.58, -45.459)), ('A', '  76 ', 'LYS', 0.19849212282269513, (4.187000000000003, 71.42299999999997, -50.57299999999999)), ('A', '  81 ', 'PHE', 0.018216175094392967, (11.112000000000002, 66.24899999999997, -53.006)), ('A', ' 156 ', 'GLU', 0.07184276891378072, (-46.266, 34.17499999999998, -64.286)), ('A', ' 163 ', 'LEU', 0.26526498940550325, (-42.53799999999999, 30.472999999999992, -67.496)), ('A', ' 173 ', 'ARG', 0.045792081134230674, (-30.508000000000003, 41.676999999999985, -70.842)), ('A', ' 209 ', 'VAL', 0.01063279469617136, (-39.553000000000004, 30.600999999999985, -72.344)), ('A', ' 217 ', 'TYR', 0.027759241059037838, (-38.869, 24.302999999999994, -56.62499999999999)), ('A', ' 226 ', 'VAL', 0.12523342298691537, (-29.502999999999997, 37.46999999999999, -60.27799999999999)), ('A', ' 255 ', 'THR', 0.0, (4.081000000000004, -2.779000000000007, -63.539)), ('A', ' 339 ', 'ARG', 0.047224151570831256, (-25.238999999999997, 22.674999999999994, -59.058)), ('A', ' 344 ', 'ASP', 0.011813933590227572, (-23.376000000000012, 8.648999999999992, -58.624)), ('A', ' 502 ', 'ARG', 0.22330530015286426, (-36.241, 9.145999999999987, -96.875)), ('A', ' 530 ', 'THR', 0.016319203132297844, (-30.372999999999994, 18.397999999999993, -79.554)), ('A', ' 531 ', 'GLN', 0.014682331142554007, (-26.900999999999993, 19.606, -78.65)), ('A', ' 592 ', 'ILE', 0.07554053152179459, (-32.27600000000001, 19.432999999999982, -103.64099999999999)), ('B', '   8 ', 'CYS', 0.061023980379104614, (7.329000000000002, 4.070999999999994, -33.74)), ('B', '   9 ', 'ASN', 0.27463528617134014, (7.556000000000003, 6.300999999999995, -36.799)), ('B', '  12 ', 'THR', 0.0, (6.32, 0.7329999999999952, -43.295)), ('B', '  35 ', 'ILE', 0.2940792916956316, (-1.3840000000000017, -11.032999999999998, -32.074)), ('B', '  68 ', 'MET', 0.0879119214101769, (4.530999999999994, -12.893, -55.242000000000004)), ('B', '  69 ', 'SER', 0.005688493088722625, (0.8640000000000017, -13.573999999999998, -54.24399999999999)), ('B', '  76 ', 'LYS', 0.14050852967879737, (0.18600000000000083, -21.811, -50.245)), ('B', '  95 ', 'ASN', 0.1648903861832029, (15.557000000000002, -3.635, -41.278)), ('B', '  96 ', 'THR', 0.15194127984518796, (14.442999999999998, -0.2490000000000041, -39.742)), ('B', ' 100 ', 'SER', 0.05811257637918174, (7.286, -0.35700000000000287, -28.394)), ('B', ' 103 ', 'VAL', 0.06767339586588178, (1.4929999999999999, -1.5130000000000035, -27.416)), ('B', ' 124 ', 'ASN', 0.07826718987652834, (-5.816000000000001, 12.294999999999998, -22.978999999999996)), ('B', ' 158 ', 'LEU', 0.03647727543281633, (-49.68699999999999, 18.868999999999993, -40.475)), ('B', ' 160 ', 'ASP', 0.22322825475698233, (-46.26300000000001, 25.131, -40.528)), ('B', ' 164 ', 'HIS', 0.013262601012488327, (-45.885, 13.822999999999997, -39.175)), ('B', ' 179 ', 'ASN', 0.24754246191287615, (-27.770000000000007, 18.859999999999992, -30.37)), ('B', ' 187 ', 'VAL', 0.28633487662865775, (-36.59, 13.343999999999996, -54.36)), ('B', ' 191 ', 'SER', 0.10579930168621988, (-31.104999999999997, 11.763999999999992, -57.316)), ('B', ' 192 ', 'LYS', 0.0533055781769956, (-31.523999999999997, 14.034999999999997, -54.124)), ('B', ' 195 ', 'ILE', 0.00876644898242201, (-33.07600000000001, 21.511999999999993, -48.812)), ('B', ' 202 ', 'LYS', 0.1163835666876003, (-41.72700000000001, 16.353, -29.921)), ('B', ' 219 ', 'LEU', 0.00884335210915651, (-41.704, 21.116999999999997, -47.387)), ('B', ' 220 ', 'ASN', 0.006123563718271367, (-43.66099999999999, 18.599999999999994, -49.31)), ('B', ' 228 ', 'THR', 0.11624529193139024, (-24.988, 15.034999999999995, -42.10199999999999)), ('B', ' 231 ', 'THR', 0.24090575690926286, (-15.105, 12.911999999999994, -43.817)), ('B', ' 247 ', 'VAL', 0.00643481386346687, (12.886000000000003, 36.36999999999998, -20.75)), ('B', ' 275 ', 'GLN', 0.0, (5.621, 32.148, -23.604)), ('B', ' 353 ', 'GLU', 0.0, (-6.231000000000003, 40.73, -43.211999999999996)), ('B', ' 458 ', 'ASP', 0.004041615558210354, (-11.38, 27.184, -5.311)), ('B', ' 484 ', 'VAL', 0.035715785161837224, (-37.72400000000001, 8.567999999999994, -25.480999999999998)), ('B', ' 486 ', 'SER', 0.16931772922943095, (-35.427000000000014, 13.070999999999996, -22.058000000000003)), ('B', ' 502 ', 'ARG', 0.2052224624676719, (-46.951, 35.55999999999999, -6.687)), ('B', ' 507 ', 'ARG', 0.18147501337336516, (-42.362, 36.985, -16.198)), ('B', ' 508 ', 'LYS', 0.10543180166514216, (-39.338, 38.45, -17.969)), ('B', ' 516 ', 'ASN', 0.012833406249576731, (-35.195000000000014, 19.715, -23.798))]
data['cbeta'] = [('A', '  81 ', 'PHE', ' ', 0.2622863595702844, (11.794999999999995, 65.121, -52.231)), ('A', ' 484 ', 'VAL', ' ', 0.2797587138106219, (-31.842, 38.319999999999986, -78.88)), ('A', ' 592 ', 'ILE', ' ', 0.3154691573888578, (-33.463, 18.694999999999993, -102.89)), ('B', '  20 ', 'ILE', ' ', 0.25590196644681357, (-12.600999999999996, 2.643999999999993, -38.051)), ('B', ' 483 ', 'ASP', ' ', 0.27009915066678997, (-40.588, 11.259999999999996, -23.431))]
data['probe'] = [(' A 467  LYS  NZ ', ' A 801  HOH  O  ', -1.012, (-14.245, 10.116, -98.707)), (' B  27  CYS  SG ', ' B 910  HOH  O  ', -0.949, (8.257, -4.565, -42.793)), (' A 352  LEU HD11', ' B 234  PRO  HD3', -0.798, (-7.153, 12.062, -44.706)), (' A 163  LEU  HG ', ' A 211  TYR  HB3', -0.785, (-39.054, 29.436, -66.845)), (' A 326  PRO  HG2', ' A 329  LYS  HZ2', -0.759, (-7.777, -1.057, -57.756)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.745, (-12.926, 8.127, -53.043)), (' B 591  GLU  N  ', ' B 701  MUK  N1 ', -0.725, (-40.341, 29.029, 0.491)), (' B  13  SER  HB2', ' B  92  LEU  HB2', -0.706, (6.271, -1.637, -47.778)), (' B 474 BMET  HG3', ' B 590  LEU  HB2', -0.705, (-38.353, 28.032, -3.062)), (' B 442  ARG HH11', ' B 464  HIS  CE1', -0.705, (-17.567, 46.227, -11.72)), (' A 326  PRO  HD2', ' A 329  LYS  NZ ', -0.663, (-8.435, 0.721, -58.251)), (' B 279  THR  HB ', ' B 429  MET  HE2', -0.628, (-5.618, 27.997, -20.676)), (' A 158  LEU HD11', ' A 164  HIS  CE1', -0.623, (-45.277, 31.273, -71.291)), (' A 146  LYS  HE2', ' A 227  LEU  HB3', -0.622, (-23.769, 36.653, -62.938)), (' A 326  PRO  HG2', ' A 329  LYS  NZ ', -0.614, (-8.131, -0.275, -56.953)), (' A 158  LEU HD11', ' A 164  HIS  ND1', -0.597, (-45.073, 31.719, -70.661)), (' A 279  THR  HB ', ' A 429  MET  HE2', -0.595, (-0.466, 19.002, -74.277)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.58, (-30.608, 21.569, -79.545)), (' A 445  PRO  HB3', ' A 468  SER  HB3', -0.563, (-18.404, 5.506, -91.621)), (' A 425  VAL HG12', ' A 429  MET  HE3', -0.562, (-1.82, 21.223, -73.797)), (' B 445  PRO  HB3', ' B 468  SER  HB3', -0.551, (-28.339, 40.161, -7.844)), (' B 538  GLY  HA2', ' B 706  PO4  O1 ', -0.548, (-20.281, 32.732, -22.558)), (' B  12  THR HG21', ' B  26  CYS  HA ', -0.547, (5.652, -1.079, -40.285)), (' A 519  ASN  HB3', ' A 530  THR HG21', -0.545, (-31.547, 21.874, -79.298)), (' B 183  THR  OG1', ' B 228  THR  OG1', -0.54, (-27.367, 17.384, -43.065)), (' A 139  LYS  O  ', ' A 143  GLU  HG2', -0.538, (-14.79, 37.491, -62.742)), (' A 293  ILE HG13', ' A 320  LYS  HB3', -0.535, (-11.518, 5.869, -67.77)), (' A  12  THR HG21', ' A  26  CYS  HA ', -0.532, (8.441, 49.277, -55.157)), (' A 120  TYR  CE2', ' A 409  ARG  HG2', -0.531, (-10.767, 36.104, -73.199)), (' A 132  LEU  O  ', ' A 136  GLU  HG3', -0.531, (-4.034, 36.789, -62.111)), (' A 244  GLU  HB2', ' A 276  LYS  HB2', -0.526, (9.599, 17.958, -63.252)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.525, (-32.542, 34.804, -21.457)), (' B 451  THR HG21', ' B 585  LEU HD23', -0.52, (-25.544, 27.508, -6.199)), (' A 451  THR HG21', ' A 585  LEU HD23', -0.519, (-15.073, 17.739, -93.762)), (' A 297  LEU HD11', ' A 324  TYR  HB3', -0.519, (-7.839, -0.143, -66.297)), (' B 371  VAL HG23', ' B 393  ALA  HB2', -0.513, (-1.149, 31.795, -34.751)), (' B 293  ILE HG13', ' B 320  LYS  HB3', -0.512, (-14.151, 41.362, -29.354)), (' B  15  ARG  HG3', ' B  24  PHE  CD2', -0.511, (-0.07, 2.481, -44.11)), (' B 120  TYR  CE2', ' B 409  ARG  HG2', -0.51, (-15.827, 11.517, -26.165)), (' A 462  LYS  NZ ', ' A 805  HOH  O  ', -0.508, (-3.399, 11.442, -93.307)), (' A  19  CYS  CB ', ' A  23  PRO  HD2', -0.507, (-3.211, 47.114, -60.196)), (' B 244  GLU  HB2', ' B 276  LYS  HB2', -0.507, (7.632, 28.617, -26.755)), (' B  16  CYS  HB2', ' B  25  LEU HD12', -0.507, (-2.384, -2.246, -37.802)), (' A 480  ILE HG21', ' A 550  THR HG22', -0.501, (-27.646, 32.993, -90.181)), (' B  19  CYS  CB ', ' B  23  PRO  HD2', -0.499, (-6.267, 0.808, -37.898)), (' B 425  VAL HG12', ' B 429  MET  HE3', -0.493, (-6.993, 25.563, -21.81)), (' B 156  GLU  HB3', ' B 164  HIS  HB2', -0.489, (-47.868, 14.139, -41.151)), (' A 531  GLN  HG2', ' A 536  SER  HB3', -0.488, (-23.529, 17.964, -78.697)), (' A 371  VAL HG23', ' A 393  ALA  HB2', -0.486, (-0.527, 16.324, -58.579)), (' B 158  LEU HD13', ' B 164  HIS  ND1', -0.484, (-49.71, 15.041, -39.56)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.483, (-26.068, 12.204, -79.823)), (' A 326  PRO  CD ', ' A 329  LYS  NZ ', -0.482, (-8.231, -0.009, -58.283)), (' A 195  ILE  HB ', ' A 217  TYR  HD2', -0.479, (-36.649, 28.508, -55.049)), (' A 280  LEU HD11', ' A 438  LEU  HG ', -0.479, (-2.385, 11.011, -77.08)), (' B 297  LEU HD11', ' B 324  TYR  HB3', -0.477, (-10.021, 47.459, -29.052)), (' A 176  LEU HD22', ' A 200  PHE  HB2', -0.473, (-32.547, 32.452, -70.286)), (' A 278  SER  HB2', ' A 436  MET  HE2', -0.471, (3.245, 14.154, -71.249)), (' A 198  TYR  HE2', ' A 211  TYR  HD1', -0.469, (-37.225, 27.718, -62.639)), (' A  16  CYS  HB2', ' A  25  LEU HD12', -0.468, (1.249, 49.864, -59.815)), (' A 326  PRO  CG ', ' A 329  LYS  NZ ', -0.468, (-8.341, -0.572, -57.707)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.461, (2.923, 42.18, -28.771)), (' B 158  LEU  CD1', ' B 164  HIS  ND1', -0.46, (-49.929, 14.662, -39.138)), (' A 442  ARG HH11', ' A 464  HIS  CE1', -0.46, (-8.377, -0.167, -84.083)), (' A 163  LEU  CG ', ' A 211  TYR  HB3', -0.459, (-39.303, 29.92, -66.267)), (' B 278  SER  HB2', ' B 436  MET  HE2', -0.457, (-1.27, 32.952, -21.253)), (' B 551  GLU  HG3', ' B 577  SER  HB3', -0.453, (-32.818, 15.334, -7.948)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.452, (9.516, 0.169, -32.699)), (' B  12  THR  OG1', ' B  26  CYS  HA ', -0.444, (5.589, 0.023, -40.31)), (' B 185  TYR  CE2', ' B 194  GLN  HG2', -0.441, (-28.639, 17.375, -49.406)), (' B 303  ARG  NH1', ' B 353  GLU  O  ', -0.438, (-4.079, 38.599, -41.652)), (' B 249  ILE HG23', ' B 273  GLY  HA3', -0.436, (5.053, 39.114, -25.606)), (' B 195  ILE  O  ', ' B 195  ILE HG23', -0.436, (-34.815, 21.846, -47.181)), (' B 539  SER  O  ', ' B 567  ARG  HD3', -0.436, (-25.874, 32.87, -20.188)), (' B 184  GLY  HA3', ' B 195  ILE HG22', -0.433, (-34.389, 19.181, -46.331)), (' B 462  LYS  HA ', ' B 462  LYS  HD3', -0.432, (-14.7, 36.902, -4.847)), (' A 352  LEU  CD1', ' B 234  PRO  HD3', -0.429, (-7.411, 11.446, -44.356)), (' B   8  CYS  SG ', ' B  99  GLY  O  ', -0.428, (8.616, 1.001, -31.912)), (' A  77  PRO  HB2', ' A 880  HOH  O  ', -0.427, (9.054, 72.16, -46.14)), (' A 263  SER  HA ', ' A 266  VAL HG13', -0.425, (1.895, -0.787, -72.876)), (' B  16  CYS  O  ', ' B  22  ARG  HA ', -0.425, (-5.965, 0.494, -40.717)), (' A 214  THR  HB ', ' A 339  ARG  O  ', -0.423, (-28.36, 22.493, -60.095)), (' B   4  ALA  O  ', ' B  24  PHE  HB2', -0.42, (2.378, 5.212, -40.324)), (' A 367  THR HG22', ' A 392  ARG  HB3', -0.42, (1.261, 18.271, -52.6)), (' A 508  LYS  HB2', ' A 508  LYS  HE3', -0.419, (-29.783, 5.973, -82.227)), (' A 121  ILE HG23', ' A 421  TYR  CE1', -0.419, (-0.774, 35.354, -78.995)), (' A 163  LEU HD11', ' A 200  PHE  HE2', -0.418, (-37.913, 31.136, -66.639)), (' A 462  LYS  HA ', ' A 462  LYS  HD3', -0.418, (-4.562, 8.816, -91.039)), (' B 376  ILE HG12', ' B 425  VAL HG11', -0.417, (-7.251, 25.701, -24.032)), (' A 158  LEU HD12', ' A 162  GLU  HB3', -0.413, (-44.059, 28.215, -70.012)), (' A  12  THR  OG1', ' A  26  CYS  HA ', -0.413, (8.124, 47.683, -55.056)), (' A 539  SER  O  ', ' A 567  ARG  HD3', -0.409, (-18.954, 13.822, -79.295)), (' A 445  PRO  HG2', ' A 448  ILE HD12', -0.409, (-17.767, 9.636, -89.899)), (' B 202  LYS  HZ1', ' B 484  VAL HG22', -0.408, (-40.472, 10.554, -27.325)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.408, (6.148, -1.108, -40.658)), (' A 376  ILE  HA ', ' A 376  ILE HD12', -0.407, (-7.076, 21.691, -69.846)), (' A  19  CYS  HB2', ' A  23  PRO  HD2', -0.407, (-2.867, 47.373, -59.605)), (' A 326  PRO  HD2', ' A 329  LYS  HZ3', -0.406, (-8.631, 0.561, -57.51)), (' B 445  PRO  HG2', ' B 448  ILE HD12', -0.406, (-27.029, 35.851, -9.439)), (' A  14  LEU  HB2', ' A  25  LEU  O  ', -0.405, (5.538, 49.753, -55.703)), (' B 533  VAL HG11', ' B 560  ARG  O  ', -0.404, (-25.432, 24.176, -16.305)), (' A 452  VAL HG11', ' A 566  THR HG23', -0.403, (-13.661, 16.046, -86.814)), (' B  14  LEU  HB2', ' B  25  LEU  O  ', -0.402, (3.034, -1.789, -40.643)), (' A 480  ILE  CG2', ' A 550  THR HG22', -0.401, (-28.196, 33.098, -89.904)), (' B 452  VAL HG11', ' B 566  THR HG23', -0.4, (-22.438, 29.569, -11.817)), (' A 376  ILE HG12', ' A 425  VAL HG11', -0.4, (-2.838, 21.644, -71.19))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
