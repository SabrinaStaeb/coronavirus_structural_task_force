# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 484 ', 'VAL', 0.012594312886978948, (-32.51200000000001, 37.061000000000014, -80.793)), ('B', ' 219 ', 'LEU', 0.023142369946522533, (-41.242, 21.146, -47.577))]
data['omega'] = []
data['rota'] = [('A', '  12 ', 'THR', 0.0027198671887163073, (7.274999999999998, 46.34200000000001, -52.34200000000001)), ('A', '  20 ', 'ILE', 0.055650729453262784, (-9.334999999999997, 45.728000000000016, -60.34000000000001)), ('A', '  35 ', 'ILE', 0.0, (3.5100000000000007, 56.754000000000005, -66.336)), ('A', '  46 ', 'ASN', 0.2776580044418576, (-2.1870000000000003, 54.429000000000016, -46.708)), ('A', '  51 ', 'ASN', 0.19120241664804724, (-3.0740000000000025, 64.76800000000003, -47.143)), ('A', '  81 ', 'PHE', 0.06171412880448853, (10.544000000000002, 65.05700000000003, -53.10100000000001)), ('A', ' 127 ', 'THR', 0.2425680286713903, (5.385999999999998, 35.56900000000002, -68.306)), ('A', ' 129 ', 'ARG', 0.022056456890083058, (3.2069999999999954, 35.663, -63.166)), ('A', ' 173 ', 'ARG', 0.08427704441300482, (-31.288999999999994, 40.006, -71.019)), ('A', ' 201 ', 'GLU', 0.286852080678547, (-34.914, 27.95600000000001, -73.102)), ('A', ' 207 ', 'ASP', 0.08653341375012194, (-43.679, 34.20900000000003, -74.976)), ('A', ' 209 ', 'VAL', 0.04347012733868364, (-40.277, 29.930000000000014, -71.771)), ('A', ' 231 ', 'THR', 0.008159601566148922, (-16.128, 36.036, -55.842)), ('A', ' 255 ', 'THR', 0.007105605043945695, (3.672999999999994, -3.384999999999984, -63.20400000000001)), ('A', ' 365 ', 'GLU', 0.28172838768931124, (-6.276999999999998, 20.370000000000008, -50.863)), ('A', ' 530 ', 'THR', 0.02336942580095963, (-30.953000000000003, 17.300000000000015, -79.797)), ('A', ' 592 ', 'ILE', 0.022278616695505002, (-32.153999999999996, 18.560000000000016, -103.906)), ('B', '  12 ', 'THR', 0.004996526349691523, (7.3019999999999925, 0.8730000000000047, -41.183)), ('B', '  69 ', 'SER', 0.003081274828741427, (1.8499999999999952, -12.671, -53.39000000000001)), ('B', '  95 ', 'ASN', 0.0, (16.015, -3.644999999999998, -39.645)), ('B', ' 124 ', 'ASN', 0.0849598510960179, (-6.224, 12.130000000000004, -22.801)), ('B', ' 156 ', 'GLU', 0.006234514083249773, (-47.675999999999995, 14.393000000000008, -44.001000000000005)), ('B', ' 158 ', 'LEU', 0.03837114054819841, (-49.35799999999999, 18.560000000000006, -40.65)), ('B', ' 160 ', 'ASP', 0.010982953249560067, (-46.03999999999997, 24.907000000000004, -40.752)), ('B', ' 164 ', 'HIS', 0.2284875044600973, (-45.573, 13.659000000000008, -39.331)), ('B', ' 192 ', 'LYS', 0.07184555924437871, (-31.536999999999992, 13.35800000000001, -54.370000000000005)), ('B', ' 195 ', 'ILE', 0.010000194699030346, (-32.735, 20.877000000000006, -48.933)), ('B', ' 220 ', 'ASN', 0.03811891696136655, (-43.388999999999996, 18.397000000000006, -49.078)), ('B', ' 231 ', 'THR', 0.004594116105021565, (-15.048, 12.290000000000003, -43.774)), ('B', ' 247 ', 'VAL', 0.01753108434946287, (12.694999999999999, 35.991, -20.837000000000003)), ('B', ' 271 ', 'LYS', 0.26401595518252785, (2.321000000000001, 36.85500000000001, -20.158)), ('B', ' 289 ', 'SER', 0.2831577819057537, (-14.117, 38.22600000000001, -25.7)), ('B', ' 353 ', 'GLU', 0.010519067570389277, (-6.132999999999999, 40.22200000000001, -43.449)), ('B', ' 484 ', 'VAL', 0.2762238982295865, (-38.126, 8.219000000000007, -25.712)), ('B', ' 516 ', 'ASN', 0.03671791431087299, (-35.771, 19.516, -24.037))]
data['cbeta'] = [('A', '  81 ', 'PHE', ' ', 0.2876661302610478, (11.107000000000003, 63.766000000000005, -52.507)), ('A', ' 484 ', 'VAL', ' ', 0.26892104511767934, (-32.284000000000006, 37.00800000000002, -79.244)), ('A', ' 592 ', 'ILE', ' ', 0.3181402992545407, (-33.166, 18.029000000000018, -102.82300000000001))]
data['probe'] = [(' B  12  THR  CG2', ' B  26  CYS  HA ', -0.793, (6.831, -0.581, -38.242)), (' A  12  THR  CG2', ' A  26  CYS  HA ', -0.778, (7.38, 47.731, -55.907)), (' A 255  THR HG23', ' A 300  PRO  HG3', -0.737, (0.548, -2.848, -61.134)), (' B  12  THR HG21', ' B  26  CYS  HA ', -0.713, (6.076, -1.591, -38.698)), (' A  12  THR HG21', ' A  26  CYS  HA ', -0.698, (6.887, 47.849, -55.393)), (' B 293  ILE HG13', ' B 320  LYS  HB3', -0.677, (-14.402, 41.332, -30.188)), (' B  13  SER  HB2', ' B  92  LEU  HB2', -0.658, (7.983, -1.278, -46.095)), (' A 352  LEU HD11', ' B 234  PRO  HD3', -0.656, (-7.408, 11.742, -44.634)), (' A 293  ILE HG13', ' A 320  LYS  HB3', -0.653, (-11.181, 4.938, -67.498)), (' B  12  THR HG21', ' B  25  LEU  O  ', -0.653, (4.541, -1.723, -38.782)), (' A  12  THR HG21', ' A  25  LEU  O  ', -0.648, (6.384, 48.043, -55.922)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.636, (-38.694, 27.837, -3.154)), (' A  19  CYS  HB2', ' A  23  PRO  HD2', -0.635, (-3.505, 46.346, -59.885)), (' B 279  THR  HB ', ' B 429  MET  HE3', -0.631, (-6.358, 27.392, -20.822)), (' B  12  THR HG22', ' B 811  HOH  O  ', -0.614, (7.038, -1.98, -41.229)), (' A 158  LEU HD11', ' A 164  HIS  CE1', -0.592, (-46.193, 30.593, -71.009)), (' A 279  THR  HB ', ' A 429  MET  HE3', -0.572, (-0.517, 18.077, -74.107)), (' A 215  THR HG22', ' B 193  VAL HG21', -0.57, (-32.134, 20.889, -55.578)), (' B  12  THR HG23', ' B  26  CYS  HA ', -0.564, (7.218, -1.006, -38.673)), (' A 157  VAL HG21', ' A 219  LEU  O  ', -0.562, (-44.729, 29.102, -59.71)), (' B 269  TYR  CD1', ' B 295  LEU HD13', -0.561, (-4.004, 40.076, -24.47)), (' A 269  TYR  CD1', ' A 295  LEU HD13', -0.55, (0.247, 6.281, -68.688)), (' B 504  PRO  HB3', ' B 507  ARG HH21', -0.545, (-47.731, 37.885, -13.198)), (' A 280  LEU HD11', ' A 438  LEU  HG ', -0.542, (-2.59, 10.318, -76.54)), (' B 103  VAL  O  ', ' B 103  VAL HG12', -0.53, (-0.817, -2.129, -27.684)), (' B 156  GLU  HG2', ' B 158  LEU HD12', -0.529, (-49.582, 15.613, -40.832)), (' B 271  LYS  NZ ', ' B 806  HOH  O  ', -0.528, (1.945, 31.151, -16.22)), (' A 442  ARG  NH1', ' A 464  HIS  CE1', -0.527, (-7.989, -1.046, -84.221)), (' B 445  PRO  HB3', ' B 468  SER  HB3', -0.526, (-28.795, 39.853, -7.956)), (' A  12  THR HG23', ' A  26  CYS  HA ', -0.524, (8.08, 47.608, -55.105)), (' B  12  THR  CG2', ' B 811  HOH  O  ', -0.515, (7.362, -2.101, -40.463)), (' A 445  PRO  HB3', ' A 468  SER  HB3', -0.513, (-18.521, 4.904, -91.497)), (' B  16  CYS  O  ', ' B  22  ARG  HA ', -0.512, (-5.063, -0.023, -39.978)), (' A   7  LEU HD22', ' A 103  VAL HG22', -0.506, (6.697, 45.615, -66.114)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.505, (-33.365, 34.501, -21.631)), (' B   6  VAL HG11', ' B 701  RY4  C1 ', -0.505, (-1.14, 5.686, -35.574)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.503, (-31.417, 20.502, -79.661)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.503, (-26.213, 10.929, -79.86)), (' B  93  TYR  HB3', ' B  96  THR  OG1', -0.501, (13.168, 0.86, -41.237)), (' B 249  ILE HG23', ' B 273  GLY  HA3', -0.497, (4.783, 39.169, -26.04)), (' B 280  LEU HD11', ' B 438  LEU  HG ', -0.489, (-8.819, 35.713, -18.392)), (' A  82  PRO  HG2', ' A  85  ALA  HB2', -0.489, (11.015, 62.709, -58.272)), (' A 158  LEU HD11', ' A 164  HIS  ND1', -0.487, (-45.92, 30.8, -70.306)), (' A 140  ALA  O  ', ' A 144  THR HG23', -0.482, (-15.424, 41.127, -62.354)), (' B 451  THR HG21', ' B 585  LEU HD23', -0.474, (-25.88, 27.205, -6.252)), (' B 158  LEU  CD1', ' B 164  HIS  ND1', -0.473, (-48.989, 14.066, -38.761)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.466, (-31.225, 20.871, -80.005)), (' A   7  LEU HD11', ' A 106  PHE  CG ', -0.466, (2.72, 44.806, -64.847)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.461, (2.706, 42.002, -28.926)), (' A 163  LEU  HG ', ' A 211  TYR  CD2', -0.456, (-40.977, 27.837, -65.935)), (' A 326  PRO  HG2', ' A 329  LYS  NZ ', -0.447, (-7.769, -2.019, -56.056)), (' B  13  SER  O  ', ' B  44  SER  HA ', -0.434, (2.501, -1.78, -45.015)), (' A 249  ILE HG23', ' A 273  GLY  HA3', -0.433, (7.293, 7.254, -64.328)), (' A 377  SER  O  ', ' A 406  PRO  HA ', -0.432, (-11.273, 24.886, -74.743)), (' B 377  SER  O  ', ' B 406  PRO  HA ', -0.431, (-15.835, 21.384, -23.636)), (' A  13  SER  O  ', ' A  44  SER  HA ', -0.43, (2.232, 50.262, -50.577)), (' A 158  LEU  HG ', ' A 163  LEU  HA ', -0.428, (-45.333, 29.67, -67.543)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.428, (-26.637, 19.109, -86.797)), (' B 512  ILE  O  ', ' B 546  PHE  HA ', -0.427, (-34.497, 25.7, -15.495)), (' B 163  LEU HD21', ' B 219  LEU  CD1', -0.426, (-42.681, 18.996, -43.486)), (' A 451  THR HG21', ' A 585  LEU HD23', -0.423, (-15.902, 16.78, -93.673)), (' B  19  CYS  HB2', ' B  23  PRO  HD2', -0.42, (-5.656, 0.274, -37.482)), (' B 158  LEU HD11', ' B 164  HIS  ND1', -0.416, (-49.767, 14.248, -38.67)), (' B 149  TYR  HB3', ' B 174  PRO  HD3', -0.416, (-31.537, 7.77, -36.418)), (' A 350  SER  HB3', ' A 353  GLU  HG2', -0.408, (-13.094, 7.924, -50.694)), (' A 252  LEU  HB3', ' A 299  TYR  CD2', -0.407, (4.615, 4.728, -61.654)), (' B 376  ILE HG12', ' B 425  VAL HG11', -0.406, (-7.557, 25.258, -24.175)), (' B 103  VAL  CG1', ' B 103  VAL  O  ', -0.401, (-0.581, -2.158, -27.529)), (' A 376  ILE HG12', ' A 425  VAL HG11', -0.401, (-3.778, 20.598, -70.804)), (' A 304  ILE HG12', ' A 370  ILE  HB ', -0.401, (-1.689, 9.237, -60.86))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
