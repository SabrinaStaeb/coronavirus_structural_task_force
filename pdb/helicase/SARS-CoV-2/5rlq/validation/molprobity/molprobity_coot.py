# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  44 ', 'SER', 0.0427902771785928, (1.4680000000000053, 52.117999999999995, -49.888000000000005)), ('A', ' 484 ', 'VAL', 0.009027822782107774, (-32.091, 38.15, -80.764))]
data['omega'] = []
data['rota'] = [('A', '  12 ', 'THR', 0.017508639246846567, (8.045000000000002, 47.211, -52.153)), ('A', '  46 ', 'ASN', 0.011084652562711272, (-1.135999999999994, 55.46499999999999, -46.842)), ('A', '  51 ', 'ASN', 0.143745281750726, (-2.278999999999985, 65.962, -47.339)), ('A', '  65 ', 'LEU', 0.16373206784102082, (7.522000000000003, 64.566, -50.119)), ('A', '  81 ', 'PHE', 0.09855597049233124, (11.389000000000003, 66.18, -53.34199999999999)), ('A', ' 136 ', 'GLU', 0.15260278522417364, (-7.081999999999993, 37.423, -62.243)), ('A', ' 156 ', 'GLU', 0.04682601646052493, (-46.709999999999994, 34.18299999999999, -65.109)), ('A', ' 158 ', 'LEU', 0.18460597370156526, (-47.64600000000001, 28.114000000000004, -67.413)), ('A', ' 162 ', 'GLU', 0.03290748247706937, (-42.406, 26.745, -69.136)), ('A', ' 173 ', 'ARG', 0.0, (-30.912999999999997, 41.408, -71.746)), ('A', ' 209 ', 'VAL', 0.02205372729804367, (-39.76599999999999, 30.498, -72.681)), ('A', ' 217 ', 'TYR', 0.003924822871045262, (-39.465999999999994, 24.320000000000007, -56.893)), ('A', ' 226 ', 'VAL', 0.15290123730038538, (-29.85099999999999, 37.391999999999996, -61.164)), ('A', ' 255 ', 'THR', 0.014032114410684225, (3.983000000000003, -3.0849999999999937, -63.685)), ('A', ' 289 ', 'SER', 0.2336645668878797, (-9.716000000000005, 8.454000000000011, -71.751)), ('A', ' 344 ', 'ASP', 0.08116339098283644, (-23.278999999999996, 8.367000000000004, -58.937)), ('A', ' 432 ', 'ILE', 0.1289961890582373, (7.042000000000005, 23.216000000000008, -79.56)), ('A', ' 495 ', 'VAL', 0.15763340996299754, (-34.113, 19.753999999999998, -96.10200000000002)), ('A', ' 502 ', 'ARG', 0.012417358994728617, (-36.099000000000004, 8.754000000000001, -97.513)), ('A', ' 530 ', 'THR', 0.028393625234483147, (-30.463999999999988, 18.223999999999993, -80.073)), ('A', ' 591 ', 'GLU', 0.1434700689557735, (-29.127, 16.762, -104.652)), ('A', ' 592 ', 'ILE', 0.028815962039472617, (-32.2, 19.082, -103.951)), ('B', '   8 ', 'CYS', 0.1522963575079003, (7.6030000000000015, 3.8659999999999997, -33.484)), ('B', '  12 ', 'THR', 0.014499874155300638, (6.622, 0.719000000000003, -43.197)), ('B', '  51 ', 'ASN', 0.15830062605389125, (-5.375000000000003, -15.150999999999998, -53.595)), ('B', '  65 ', 'LEU', 0.27455813702782883, (3.960999999999996, -15.464999999999991, -49.52400000000001)), ('B', '  68 ', 'MET', 0.011027124717535409, (4.961, -13.012, -55.359)), ('B', '  69 ', 'SER', 0.020192238261608313, (1.3249999999999984, -13.612999999999989, -54.203)), ('B', '  92 ', 'LEU', 0.250578887470032, (8.898, -3.262999999999998, -46.419000000000004)), ('B', '  97 ', 'CYS', 0.2140812921021956, (12.221999999999998, -1.5229999999999961, -37.03)), ('B', ' 124 ', 'ASN', 0.06562490330583153, (-5.8269999999999955, 12.282999999999998, -23.175)), ('B', ' 148 ', 'SER', 0.29311807901495157, (-26.661, 3.7610000000000037, -37.829)), ('B', ' 158 ', 'LEU', 0.12013675936278331, (-49.593, 18.793, -40.758)), ('B', ' 187 ', 'VAL', 0.14520151369544063, (-36.627, 13.198000000000004, -54.573)), ('B', ' 188 ', 'THR', 0.11230847651100449, (-35.412, 14.487000000000004, -58.055)), ('B', ' 191 ', 'SER', 0.16182129988902447, (-31.176, 11.684999999999997, -57.565)), ('B', ' 192 ', 'LYS', 0.0, (-31.554, 13.984, -54.396)), ('B', ' 195 ', 'ILE', 0.005873777513230531, (-33.07499999999999, 21.341000000000008, -49.006)), ('B', ' 202 ', 'LYS', 0.14498235023053713, (-41.888999999999996, 16.387999999999998, -30.06)), ('B', ' 219 ', 'LEU', 0.05251081911886497, (-41.508, 21.146, -47.514)), ('B', ' 220 ', 'ASN', 0.07598590426930292, (-43.785, 18.669, -49.212)), ('B', ' 229 ', 'SER', 0.0021066952136800368, (-21.698999999999998, 13.160000000000004, -41.67)), ('B', ' 231 ', 'THR', 0.26529881084799767, (-15.161999999999995, 12.862999999999994, -43.811)), ('B', ' 289 ', 'SER', 0.11645445614582299, (-13.979999999999993, 38.606, -25.466)), ('B', ' 353 ', 'GLU', 0.09371991409262198, (-6.257999999999995, 40.821, -43.565999999999995)), ('B', ' 432 ', 'ILE', 0.13684751007581478, (-0.6079999999999979, 22.797999999999995, -13.606000000000002)), ('B', ' 458 ', 'ASP', 0.009547139697573304, (-11.507999999999992, 27.392, -5.335)), ('B', ' 484 ', 'VAL', 0.1787955477652759, (-37.859000000000016, 8.36, -25.428)), ('B', ' 495 ', 'VAL', 0.14529866568303915, (-44.309, 25.283, -8.582))]
data['cbeta'] = [('A', '  81 ', 'PHE', ' ', 0.2983264975625562, (11.950000000000014, 64.935, -52.657)), ('A', ' 484 ', 'VAL', ' ', 0.26037909985562013, (-31.82500000000001, 37.982, -79.215)), ('A', ' 592 ', 'ILE', ' ', 0.324240128497729, (-33.19800000000001, 18.499000000000002, -102.867)), ('B', ' 248 ', 'ARG', ' ', 0.2502114023874126, (12.394999999999998, 39.845, -24.105)), ('B', ' 483 ', 'ASP', ' ', 0.2809539600949986, (-40.755, 11.180999999999996, -23.581000000000003))]
data['probe'] = [(' B  12  THR HG21', ' B  26  CYS  HA ', -0.86, (5.85, -0.899, -40.178)), (' A  12  THR HG21', ' A  26  CYS  HA ', -0.679, (8.674, 48.994, -56.029)), (' B 279  THR  HB ', ' B 429  MET  HE2', -0.662, (-5.531, 27.803, -20.724)), (' B 183  THR  HG1', ' B 228  THR  HG1', -0.64, (-26.796, 17.149, -42.938)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.636, (-31.078, 21.354, -80.352)), (' B 474 BMET  HG3', ' B 590  LEU  HB2', -0.636, (-38.273, 28.254, -3.039)), (' A 158  LEU HD11', ' A 164  HIS  CE1', -0.625, (-45.828, 31.064, -71.637)), (' A 146  LYS  HE2', ' A 227  LEU  HB3', -0.625, (-23.731, 36.584, -64.398)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.622, (-30.616, 21.411, -80.1)), (' A 326  PRO  HD2', ' A 329  LYS  NZ ', -0.619, (-8.057, 0.46, -58.106)), (' B 442  ARG HH11', ' B 464  HIS  CE1', -0.619, (-17.63, 46.835, -12.115)), (' A 279  THR  HB ', ' A 429  MET  HE2', -0.618, (0.209, 18.845, -74.555)), (' A 326  PRO  HD2', ' A 329  LYS  HZ1', -0.616, (-8.053, 0.146, -58.751)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.605, (6.016, -0.98, -40.701)), (' A 367  THR HG22', ' A 392  ARG  HB3', -0.589, (1.185, 18.365, -53.069)), (' A 163  LEU HD11', ' A 200  PHE  HE2', -0.558, (-37.72, 31.166, -67.225)), (' A 244  GLU  HB2', ' A 276  LYS  HB2', -0.558, (10.212, 17.861, -63.591)), (' A 445  PRO  HD2', ' A 448  ILE HD12', -0.552, (-17.629, 9.777, -89.759)), (' B 202  LYS  NZ ', ' B 484  VAL HG22', -0.547, (-40.266, 10.633, -27.498)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.544, (-13.052, 7.816, -53.104)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.542, (-32.638, 34.936, -21.713)), (' B 504  PRO  HB3', ' B 507  ARG HH21', -0.537, (-47.442, 38.72, -13.002)), (' A 326  PRO  HG2', ' A 329  LYS  NZ ', -0.534, (-8.211, -0.962, -57.569)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.531, (9.918, 0.054, -32.611)), (' B 244  GLU  HB2', ' B 276  LYS  HB2', -0.529, (7.272, 28.763, -27.165)), (' B 445  PRO  HD2', ' B 448  ILE HD12', -0.528, (-26.833, 35.899, -10.42)), (' A 326  PRO  CG ', ' A 329  LYS  NZ ', -0.52, (-8.603, -0.274, -57.499)), (' A 386  VAL HG13', ' A 390  ARG  NE ', -0.515, (-8.097, 25.695, -56.803)), (' B  12  THR HG22', ' B 870  HOH  O  ', -0.515, (6.748, -2.228, -43.458)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.512, (-25.969, 11.883, -80.485)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.503, (2.803, 42.161, -29.075)), (' A 103  VAL  O  ', ' A 103  VAL HG12', -0.503, (4.486, 48.149, -68.695)), (' A 326  PRO  HB2', ' A 329  LYS  HZ2', -0.499, (-9.395, -0.657, -56.92)), (' B 451  THR HG21', ' B 585  LEU HD23', -0.497, (-25.598, 27.62, -6.213)), (' B 376  ILE HG12', ' B 425  VAL HG11', -0.487, (-7.429, 25.779, -24.693)), (' B 511  PHE  HB3', ' B 530  THR HG22', -0.486, (-38.412, 28.217, -20.243)), (' B 103  VAL  O  ', ' B 103  VAL HG12', -0.485, (-0.708, -1.737, -28.668)), (' B 228  THR HG22', ' B 230  HIS  NE2', -0.481, (-22.199, 17.119, -43.438)), (' A 297  LEU HD11', ' A 324  TYR  HB3', -0.48, (-7.715, -0.872, -66.349)), (' A 376  ILE HG12', ' A 425  VAL HG11', -0.479, (-2.78, 21.464, -71.424)), (' A 451  THR HG21', ' A 585  LEU HD23', -0.477, (-15.42, 17.717, -94.16)), (' A 326  PRO  CG ', ' A 329  LYS  HZ2', -0.468, (-8.744, -0.866, -57.4)), (' B  12  THR HG21', ' B  26  CYS  CA ', -0.467, (6.269, -1.738, -39.631)), (' A 289  SER  HB3', ' A 320  LYS  HD3', -0.466, (-11.626, 6.19, -72.077)), (' A   6  VAL  HA ', ' A 129  ARG  HD2', -0.464, (4.788, 40.045, -59.876)), (' B   7  LEU HD21', ' B 106  PHE  CD1', -0.461, (-0.878, 2.57, -31.885)), (' B  16  CYS  O  ', ' B  22  ARG  HA ', -0.457, (-5.535, -0.015, -40.926)), (' A 326  PRO  CD ', ' A 329  LYS  NZ ', -0.455, (-8.499, -0.224, -58.38)), (' A 280  LEU HD11', ' A 438  LEU  HG ', -0.455, (-2.195, 10.989, -76.951)), (' A 386  VAL HG13', ' A 390  ARG  HE ', -0.452, (-8.11, 26.125, -56.706)), (' A  63  LEU  HB2', ' A  83  LEU HD12', -0.45, (3.267, 62.307, -55.197)), (' A 177  ASN  ND2', ' A 179  ASN  ND2', -0.45, (-24.374, 30.263, -75.142)), (' B 297  LEU HD11', ' B 324  TYR  HB3', -0.447, (-10.003, 48.007, -29.339)), (' B 198  TYR  HA ', ' B 213  GLY  HA2', -0.447, (-33.677, 22.739, -39.88)), (' B 184  GLY  HA3', ' B 195  ILE HG22', -0.445, (-34.594, 19.453, -46.658)), (' B 154  VAL HG13', ' B 163  LEU HD22', -0.444, (-43.914, 16.873, -43.206)), (' A 176  LEU HD22', ' A 200  PHE  HB2', -0.443, (-32.852, 32.197, -70.097)), (' A 409  ARG  NH2', ' A 422  PHE  O  ', -0.442, (-7.395, 30.698, -73.175)), (' A   7  LEU HD21', ' A 106  PHE  CD1', -0.441, (3.466, 44.253, -64.774)), (' A 519  ASN  HB3', ' A 530  THR HG21', -0.437, (-31.555, 21.716, -79.853)), (' B 157  VAL HG23', ' B 221  VAL HG23', -0.432, (-46.634, 16.966, -46.664)), (' A 442  ARG HH11', ' A 464  HIS  CE1', -0.43, (-7.851, -0.545, -84.654)), (' A 163  LEU  HG ', ' A 211  TYR  HB3', -0.429, (-39.264, 29.131, -66.857)), (' A 326  PRO  CD ', ' A 329  LYS  HZ1', -0.428, (-8.198, -0.456, -58.444)), (' B 533  VAL HG11', ' B 560  ARG  HG3', -0.428, (-26.09, 23.252, -17.695)), (' A 278  SER  HB2', ' A 436  MET  HE2', -0.427, (3.266, 13.607, -71.878)), (' B 278  SER  HB2', ' B 436  MET  HE2', -0.426, (-1.5, 32.863, -21.45)), (' B 228  THR HG22', ' B 230  HIS  CE1', -0.424, (-22.318, 16.585, -43.813)), (' B   2  VAL  CG1', ' B   3  GLY  N  ', -0.424, (5.226, 4.297, -46.001)), (' A 326  PRO  HG2', ' A 329  LYS  HZ2', -0.423, (-8.45, -0.634, -56.972)), (' A 533  VAL HG11', ' A 560  ARG  HG3', -0.423, (-18.617, 23.1, -83.402)), (' A 255  THR HG23', ' A 300  PRO  HG3', -0.421, (1.182, -2.6, -61.277)), (' A  16  CYS  O  ', ' A  22  ARG  HA ', -0.419, (-3.344, 48.604, -57.474)), (' A 371  VAL HG23', ' A 393  ALA  HB2', -0.418, (-0.319, 15.918, -58.7)), (' B   8  CYS  SG ', ' B  99  GLY  O  ', -0.416, (8.879, 0.884, -31.533)), (' A 158  LEU HD12', ' A 162  GLU  HB3', -0.416, (-44.537, 28.297, -70.332)), (' A 311  HIS  HE2', ' A 339  ARG  NH2', -0.415, (-19.742, 21.446, -60.362)), (' B 371  VAL HG23', ' B 393  ALA  HB2', -0.414, (-0.54, 31.663, -34.809)), (' B 551  GLU  HG3', ' B 577  SER  HB3', -0.412, (-33.292, 15.218, -8.112)), (' A 217  TYR  HA ', ' A 217  TYR  HD1', -0.41, (-39.894, 23.783, -55.334)), (' B 280  LEU HD11', ' B 438  LEU  HG ', -0.408, (-8.633, 35.747, -18.221)), (' B 452  VAL HG13', ' B 565  ILE HD11', -0.404, (-22.993, 29.244, -9.191)), (' B 167  TRP  CZ3', ' B 174  PRO  HD2', -0.404, (-34.423, 9.21, -36.743)), (' B 376  ILE  HA ', ' B 376  ILE HD12', -0.404, (-11.025, 25.697, -26.826)), (' A 462  LYS  HA ', ' A 462  LYS  HD3', -0.401, (-4.476, 8.874, -91.421))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
