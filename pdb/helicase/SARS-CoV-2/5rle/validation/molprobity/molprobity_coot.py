# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  44 ', 'SER', 0.02293976561863238, (2.0890000000000013, 51.988000000000014, -50.124)), ('A', ' 195 ', 'ILE', 0.03297527262839206, (-34.105000000000004, 29.457, -54.634999999999984)), ('A', ' 218 ', 'LYS', 0.02128407272529664, (-42.67999999999999, 25.797000000000004, -57.551)), ('A', ' 339 ', 'ARG', 0.04229538166544864, (-25.267000000000003, 22.873999999999995, -59.44)), ('A', ' 484 ', 'VAL', 0.02167998892989854, (-32.226, 38.35600000000001, -80.823)), ('B', '  10 ', 'SER', 0.022100185901157247, (9.619999999999996, 3.2330000000000005, -37.837)), ('B', ' 189 ', 'LYS', 0.006417757713620497, (-35.230999999999995, 13.357, -61.499)), ('B', ' 194 ', 'GLN', 0.02884255709501652, (-29.716000000000005, 19.903, -50.39099999999999))]
data['omega'] = []
data['rota'] = [('A', '  12 ', 'THR', 0.0013599335943581536, (8.385000000000002, 47.285, -52.642999999999994)), ('A', '  13 ', 'SER', 0.10980677894300095, (5.646999999999999, 48.932000000000016, -50.579)), ('A', '  35 ', 'ILE', 0.0986160015222137, (4.3800000000000034, 57.89699999999999, -66.844)), ('A', '  36 ', 'SER', 0.07321746143505621, (3.0419999999999945, 55.879000000000005, -69.84)), ('A', '  46 ', 'ASN', 0.04878171767703953, (-0.4240000000000004, 55.319, -46.952)), ('A', '  51 ', 'ASN', 0.15871209946631737, (-2.1730000000000063, 65.62100000000002, -47.362)), ('A', '  81 ', 'PHE', 0.025563217981030787, (11.48799999999999, 66.16600000000003, -53.211999999999996)), ('A', ' 158 ', 'LEU', 0.004297636744057411, (-47.409, 28.714999999999996, -67.492)), ('A', ' 173 ', 'ARG', 0.013789681308584283, (-30.60200000000001, 41.86699999999999, -71.135)), ('A', ' 207 ', 'ASP', 0.1556830589173413, (-42.68499999999999, 34.59399999999999, -76.083)), ('A', ' 209 ', 'VAL', 0.015109260059396471, (-39.25500000000001, 30.647999999999993, -73.006)), ('A', ' 217 ', 'TYR', 0.01159455181878991, (-39.1, 24.772999999999996, -56.596)), ('A', ' 247 ', 'VAL', 0.0, (16.926000000000002, 10.416, -66.73)), ('A', ' 255 ', 'THR', 0.059110237642207075, (4.236, -2.690000000000005, -63.89299999999999)), ('A', ' 278 ', 'SER', 0.11823890460304129, (3.785999999999996, 16.496, -70.209)), ('A', ' 304 ', 'ILE', 0.04611493040478186, (-3.8350000000000026, 10.144000000000002, -59.429)), ('A', ' 337 ', 'ARG', 0.24231422887090798, (-23.281999999999996, 23.879, -53.882)), ('A', ' 365 ', 'GLU', 0.2804628150289756, (-5.763999999999997, 21.417999999999996, -51.151999999999994)), ('A', ' 376 ', 'ILE', 0.26262714724152847, (-6.989000000000006, 21.36, -71.836)), ('A', ' 416 ', 'THR', 0.29511531897879717, (-10.806999999999995, 35.801, -83.224)), ('A', ' 486 ', 'SER', 0.05447006923990567, (-28.848, 33.416, -81.871)), ('A', ' 502 ', 'ARG', 0.014853875761960376, (-36.136, 9.147000000000002, -97.38799999999999)), ('A', ' 516 ', 'ASN', 0.0, (-29.321000000000005, 27.042, -79.557)), ('A', ' 530 ', 'THR', 0.028232414520260693, (-30.416, 18.552999999999997, -79.927)), ('A', ' 531 ', 'GLN', 0.052344357381739155, (-26.883000000000017, 19.717, -79.023)), ('A', ' 589 ', 'SER', 0.1510820193352288, (-22.67800000000001, 15.716000000000005, -102.148)), ('B', '   8 ', 'CYS', 0.134964823055073, (7.530999999999999, 3.971999999999996, -33.164)), ('B', '  35 ', 'ILE', 0.21169789156821736, (-1.320000000000002, -11.089, -31.831999999999997)), ('B', '  36 ', 'SER', 0.09915021946850743, (-3.0230000000000032, -9.34, -28.830999999999996)), ('B', '  68 ', 'MET', 0.018154831090202748, (4.883000000000001, -12.446999999999996, -55.067)), ('B', '  73 ', 'LYS', 0.0, (-1.7340000000000009, -22.942, -45.268)), ('B', '  74 ', 'SER', 0.20673363377849602, (-4.223000000000008, -24.674000000000007, -47.701999999999984)), ('B', '  92 ', 'LEU', 0.21721263285202427, (8.886, -3.228999999999994, -46.329)), ('B', ' 124 ', 'ASN', 0.05462870185327447, (-5.852999999999998, 12.096999999999998, -23.108999999999998)), ('B', ' 164 ', 'HIS', 0.015676470591099334, (-45.839, 13.726000000000004, -39.286)), ('B', ' 177 ', 'ASN', 0.08757216329717446, (-33.520999999999994, 17.93, -29.918)), ('B', ' 179 ', 'ASN', 0.17761139863791384, (-28.27, 18.918, -30.294)), ('B', ' 192 ', 'LYS', 0.0, (-31.238999999999987, 14.286999999999999, -54.115)), ('B', ' 195 ', 'ILE', 0.005814730459008091, (-32.919000000000004, 21.459000000000003, -48.918)), ('B', ' 201 ', 'GLU', 0.20784507538155703, (-38.701999999999984, 18.17, -30.955)), ('B', ' 209 ', 'VAL', 0.05717492799053285, (-43.225, 16.253, -34.78)), ('B', ' 220 ', 'ASN', 0.0, (-43.46, 18.572, -49.155)), ('B', ' 257 ', 'ASN', 0.004857994577077215, (-0.7720000000000016, 53.976, -24.725)), ('B', ' 278 ', 'SER', 0.1424176205915615, (-0.8419999999999987, 30.448, -22.739)), ('B', ' 304 ', 'ILE', 0.045374488302251326, (-4.275999999999996, 37.769, -34.864)), ('B', ' 320 ', 'LYS', 0.2498628443563158, (-16.477, 42.511, -29.825)), ('B', ' 323 ', 'LYS', 0.05995767934916601, (-16.474, 47.7, -31.481)), ('B', ' 344 ', 'ASP', 0.0033589102207206233, (-21.811, 39.588, -42.338)), ('B', ' 345 ', 'LYS', 0.23807438194242522, (-20.096, 42.855, -41.27)), ('B', ' 353 ', 'GLU', 0.2640061105379564, (-6.397000000000003, 40.594, -43.6)), ('B', ' 361 ', 'ASN', 0.061400128844875376, (-12.878999999999998, 23.306, -39.592)), ('B', ' 365 ', 'GLU', 0.2561802149339869, (-3.3080000000000007, 27.135999999999996, -44.06199999999999)), ('B', ' 376 ', 'ILE', 0.27472833364054033, (-11.613, 25.922, -25.106)), ('B', ' 458 ', 'ASP', 0.0027626378001723625, (-11.709999999999997, 26.982, -5.349)), ('B', ' 466 ', 'ASP', 0.04344779683313805, (-23.595, 43.191, -4.911)), ('B', ' 486 ', 'SER', 0.06124119657316382, (-35.625, 13.186, -22.029)), ('B', ' 516 ', 'ASN', 0.24476609047631684, (-35.50999999999999, 19.672, -23.744)), ('B', ' 589 ', 'SER', 0.1497929594480624, (-34.59000000000001, 29.219, 0.6459999999999998)), ('B', ' 592 ', 'ILE', 0.02822897881501254, (-43.46199999999999, 24.767, -0.8399999999999999))]
data['cbeta'] = [('A', ' 484 ', 'VAL', ' ', 0.26842896173767467, (-32.088, 38.245, -79.258)), ('A', ' 530 ', 'THR', ' ', 0.2684974582639201, (-31.49599999999999, 19.619999999999994, -79.94)), ('A', ' 592 ', 'ILE', ' ', 0.276450442434677, (-33.693, 18.302, -102.478)), ('B', ' 452 ', 'VAL', ' ', 0.259541826206796, (-20.21, 29.326, -9.655)), ('B', ' 483 ', 'ASP', ' ', 0.26710733284261184, (-40.63699999999999, 11.320999999999998, -23.709999999999997))]
data['probe'] = [(' B 486  SER  HB3', ' B 517  SER  HB2', -0.818, (-37.311, 15.133, -22.872)), (' A 158  LEU HD21', ' A 164  HIS  ND1', -0.807, (-45.954, 32.592, -70.629)), (' A   6  VAL  HA ', ' A 129  ARG  HD2', -0.769, (5.53, 40.074, -60.873)), (' B  13  SER  HB2', ' B  92  LEU  HB2', -0.755, (6.349, -1.919, -47.226)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.719, (-30.773, 21.587, -80.222)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.712, (-11.994, 8.346, -52.871)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.68, (-30.455, 21.947, -79.517)), (' A 326  PRO  HB2', ' A 329  LYS  NZ ', -0.68, (-8.627, 0.093, -56.781)), (' B 442  ARG HH11', ' B 464  HIS  CE1', -0.672, (-17.277, 46.487, -12.417)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.67, (-38.649, 28.5, -2.909)), (' B  12  THR HG21', ' B  25  LEU  O  ', -0.658, (3.741, -0.752, -40.554)), (' B 511  PHE  HB3', ' B 530  THR HG22', -0.625, (-38.09, 27.825, -20.719)), (' A 486  SER  HB3', ' A 517  SER  OG ', -0.613, (-30.435, 31.597, -81.938)), (' B 228  THR HG22', ' B 230  HIS  NE2', -0.613, (-21.801, 17.204, -43.486)), (' A 326  PRO  HG2', ' A 329  LYS  NZ ', -0.609, (-7.91, -0.762, -57.486)), (' A 326  PRO  HB2', ' A 329  LYS  HZ3', -0.605, (-8.821, 0.329, -57.276)), (' B 158  LEU HD22', ' B 164  HIS  ND1', -0.603, (-48.885, 15.061, -38.723)), (' A 326  PRO  HG2', ' A 329  LYS  HZ1', -0.592, (-7.509, -0.626, -56.864)), (' B   2  VAL HG22', ' B  13  SER  HA ', -0.589, (4.928, 0.397, -46.768)), (' A 367  THR HG22', ' A 392  ARG  HB3', -0.585, (1.272, 18.822, -53.151)), (' A 163  LEU HD11', ' A 200  PHE  HE2', -0.584, (-38.153, 31.399, -67.461)), (' A 445  PRO  HD2', ' A 448  ILE HD12', -0.556, (-17.259, 9.835, -89.795)), (' B 305  VAL HG22', ' B 356  VAL  HB ', -0.555, (-6.724, 35.171, -39.464)), (' B 387  VAL HG13', ' B 391  LEU HD12', -0.552, (-5.321, 27.326, -35.078)), (' A 139  LYS  O  ', ' A 143  GLU  HG2', -0.552, (-14.671, 37.603, -63.114)), (' B 445  PRO  HD2', ' B 448  ILE HD12', -0.552, (-26.685, 35.597, -10.146)), (' A 387  VAL HG13', ' A 391  LEU HD12', -0.547, (-4.409, 19.867, -60.322)), (' A 305  VAL HG22', ' A 356  VAL  HB ', -0.545, (-7.72, 12.933, -56.811)), (' B 158  LEU HD13', ' B 164  HIS  ND1', -0.544, (-49.658, 14.689, -39.428)), (' B  49  VAL HG23', ' B  58  THR HG22', -0.54, (-9.202, -12.109, -46.938)), (' A  49  VAL HG23', ' A  58  THR HG22', -0.539, (-5.221, 61.914, -54.227)), (' B  32  ASP  O  ', ' B  36  SER  OG ', -0.533, (-0.533, -7.77, -29.284)), (' B 705  PO4  O2 ', ' B 706  PO4  O1 ', -0.529, (-18.966, 34.427, -21.492)), (' A 163  LEU HD11', ' A 200  PHE  CE2', -0.524, (-37.545, 31.56, -67.455)), (' A 519  ASN  HB3', ' A 530  THR HG21', -0.523, (-31.512, 21.963, -79.723)), (' A 533  VAL HG11', ' A 560  ARG  HG3', -0.518, (-18.717, 23.989, -83.668)), (' B 297  LEU HD11', ' B 324  TYR  HB3', -0.515, (-10.484, 47.726, -29.427)), (' A 297  LEU HD11', ' A 324  TYR  HB3', -0.515, (-7.556, -0.573, -66.449)), (' B 480  ILE HG12', ' B 550  THR HG22', -0.515, (-36.852, 12.976, -12.758)), (' A 326  PRO  CG ', ' A 329  LYS  HZ3', -0.509, (-8.362, 0.13, -57.528)), (' A 480  ILE HG12', ' A 550  THR HG22', -0.509, (-27.356, 32.684, -90.891)), (' B 328  ASP  HA ', ' B 347  LYS  HZ1', -0.502, (-12.057, 46.229, -43.835)), (' B 486  SER  HB3', ' B 517  SER  CB ', -0.499, (-38.095, 15.117, -22.817)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.498, (2.791, 42.061, -29.047)), (' B 167  TRP  CD1', ' B 173  ARG  NH1', -0.497, (-40.542, 7.604, -36.692)), (' A 326  PRO  CG ', ' A 329  LYS  NZ ', -0.497, (-8.164, -0.709, -57.484)), (' A 326  PRO  CB ', ' A 329  LYS  NZ ', -0.496, (-8.83, -0.673, -57.107)), (' B   7  LEU HD13', ' B 103  VAL HG22', -0.496, (2.965, -0.633, -30.206)), (' A 326  PRO  CB ', ' A 329  LYS  HZ3', -0.494, (-8.908, -0.19, -57.587)), (' A 378  MET  O  ', ' A 407  ALA  HB2', -0.489, (-11.967, 27.062, -71.259)), (' A 163  LEU  HG ', ' A 211  TYR  HB3', -0.488, (-39.605, 29.507, -67.249)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.483, (-32.57, 34.715, -21.576)), (' B 451  THR HG21', ' B 585  LEU HD23', -0.481, (-25.278, 27.738, -6.21)), (' B 378  MET  O  ', ' B 407  ALA  HB2', -0.478, (-16.148, 20.876, -28.059)), (' B 183  THR  HG1', ' B 228  THR  HG1', -0.476, (-26.738, 17.479, -42.748)), (' B 228  THR  CG2', ' B 230  HIS  NE2', -0.472, (-22.373, 17.327, -43.532)), (' B  12  THR  OG1', ' B  26  CYS  HA ', -0.467, (6.112, -0.095, -39.966)), (' A  12  THR HG21', ' A  26  CYS  HA ', -0.465, (8.651, 48.937, -56.201)), (' A  63  LEU  HB2', ' A  83  LEU HD12', -0.459, (3.599, 62.286, -55.03)), (' A 402  PRO  O  ', ' A 419  PRO  HB3', -0.457, (-6.235, 25.484, -80.938)), (' A 280  LEU HD11', ' A 438  LEU  HG ', -0.455, (-2.279, 11.282, -77.491)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.454, (-25.61, 12.287, -79.953)), (' B 533  VAL HG11', ' B 560  ARG  HG3', -0.452, (-26.176, 22.55, -17.469)), (' B 167  TRP  CZ3', ' B 174  PRO  HD2', -0.452, (-34.145, 9.193, -36.367)), (' B 154  VAL HG22', ' B 163  LEU HD13', -0.452, (-41.325, 16.346, -42.875)), (' B 151  ILE HG12', ' B 226  VAL HG22', -0.446, (-31.134, 9.54, -44.058)), (' A 452  VAL HG11', ' A 566  THR HG23', -0.443, (-13.33, 16.581, -87.495)), (' B  18  ALA  HB3', ' B  39  HIS  ND1', -0.442, (-8.042, -4.34, -36.869)), (' A 295  LEU HD21', ' A 370  ILE HG21', -0.441, (0.071, 10.847, -64.847)), (' A  13  SER  HB3', ' A  44  SER  HB2', -0.439, (4.747, 51.707, -49.97)), (' A 182  PHE  HB3', ' A 225  PHE  HB3', -0.439, (-31.699, 34.09, -62.725)), (' B 376  ILE  HA ', ' B 376  ILE HD12', -0.439, (-11.162, 25.628, -26.74)), (' A 202  LYS  HA ', ' A 209  VAL HG23', -0.437, (-37.039, 31.868, -74.515)), (' A 151  ILE HG12', ' A 226  VAL HG22', -0.436, (-30.344, 40.626, -60.687)), (' B 474 BMET  HB3', ' B 474 BMET  HE2', -0.435, (-39.32, 24.757, -3.931)), (' A 451  THR HG21', ' A 585  LEU HD23', -0.434, (-15.087, 18.027, -93.832)), (' A 158  LEU HD21', ' A 164  HIS  CE1', -0.434, (-45.998, 32.34, -70.768)), (' B 295  LEU HD21', ' B 370  ILE HG21', -0.433, (-2.637, 36.813, -28.754)), (' B 280  LEU HD11', ' B 438  LEU  HG ', -0.433, (-8.686, 35.428, -18.107)), (' A 480  ILE HG21', ' A 550  THR HG22', -0.433, (-28.044, 33.589, -90.229)), (' A 376  ILE  HA ', ' A 376  ILE HD12', -0.431, (-7.013, 22.032, -70.251)), (' B  16  CYS  O  ', ' B  22  ARG  HA ', -0.431, (-5.759, 0.306, -40.443)), (' B 228  THR HG22', ' B 230  HIS  CE1', -0.429, (-22.115, 16.808, -43.537)), (' B  63  LEU  HB2', ' B  83  LEU HD12', -0.428, (-0.302, -13.515, -44.411)), (' B  52  ALA  HB1', ' B  75  HIS  CD2', -0.424, (-6.381, -21.296, -53.338)), (' B 182  PHE  HB3', ' B 225  PHE  HB3', -0.423, (-32.946, 15.598, -40.9)), (' B 402  PRO  O  ', ' B 419  PRO  HB3', -0.421, (-13.606, 21.171, -16.698)), (' A 110  ALA  O  ', ' A 801  HOH  O  ', -0.42, (-6.217, 47.904, -65.603)), (' A  52  ALA  HB1', ' A  75  HIS  CD2', -0.417, (-2.895, 71.854, -48.663)), (' B   8  CYS  SG ', ' B  99  GLY  O  ', -0.413, (9.224, 0.526, -30.765)), (' A  18  ALA  HB3', ' A  39  HIS  ND1', -0.413, (-4.006, 52.521, -62.748)), (' A 158  LEU  CD2', ' A 164  HIS  ND1', -0.413, (-46.305, 32.442, -69.882)), (' A 198  TYR  HE2', ' A 211  TYR  HD1', -0.413, (-37.477, 27.317, -63.391)), (' A  14  LEU  HB2', ' A  25  LEU  O  ', -0.409, (6.067, 50.011, -56.08)), (' B 492  GLN  O  ', ' B 496  VAL HG23', -0.407, (-41.373, 25.136, -11.57)), (' A 492  GLN  O  ', ' A 496  VAL HG23', -0.407, (-32.012, 20.971, -92.414)), (' A 329  LYS  HB3', ' A 354  GLN  HB3', -0.406, (-7.543, 4.377, -54.978)), (' B 480  ILE HG21', ' B 550  THR HG22', -0.405, (-36.679, 12.301, -13.526)), (' A 311  HIS  HE2', ' A 339  ARG  NH2', -0.405, (-19.412, 22.02, -60.655)), (' A 267  ALA  HB3', ' A 890  HOH  O  ', -0.404, (4.887, 5.123, -76.792)), (' B 539  SER  O  ', ' B 567  ARG  HD3', -0.402, (-26.055, 32.492, -19.756)), (' B 158  LEU  CD2', ' B 164  HIS  ND1', -0.4, (-49.497, 15.531, -38.753)), (' B 377  SER  O  ', ' B 406  PRO  HA ', -0.4, (-15.638, 21.309, -23.534))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
