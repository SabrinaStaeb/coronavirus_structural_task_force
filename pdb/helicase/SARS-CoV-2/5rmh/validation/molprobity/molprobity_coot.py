# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 484 ', 'VAL', 0.007012559490952358, (-33.095999999999975, 37.442, -80.288)), ('B', ' 103 ', 'VAL', 0.07756234257941533, (1.463999999999999, -1.7349999999999994, -27.205)), ('B', ' 187 ', 'VAL', 0.08500297615965577, (-36.824, 13.059000000000005, -53.93))]
data['omega'] = []
data['rota'] = [('A', '   7 ', 'LEU', 0.13325171146948153, (5.9650000000000105, 42.00699999999999, -62.357000000000006)), ('A', '  12 ', 'THR', 0.0013599335943581536, (7.033000000000015, 46.713, -51.867)), ('A', '  20 ', 'ILE', 0.026261238742284063, (-9.562999999999986, 46.016000000000005, -60.05)), ('A', '  46 ', 'ASN', 0.28708488618895855, (-2.2129999999999876, 54.80599999999999, -46.34)), ('A', '  51 ', 'ASN', 0.23203590268976526, (-3.250999999999986, 65.214, -46.851)), ('A', '  65 ', 'LEU', 0.1150663588110765, (6.323000000000012, 63.789, -49.628)), ('A', '  69 ', 'SER', 0.1878647643333773, (2.7710000000000115, 63.078, -45.235)), ('A', '  76 ', 'LYS', 0.22236355941959385, (3.4240000000000137, 70.795, -50.36)), ('A', '  81 ', 'PHE', 0.11551093546006252, (10.31900000000001, 65.375, -52.873000000000005)), ('A', ' 156 ', 'GLU', 0.1276478363950557, (-47.764, 33.346, -65.327)), ('A', ' 157 ', 'VAL', 0.27097436176093836, (-46.95799999999999, 29.67, -64.425)), ('A', ' 162 ', 'GLU', 0.16111963634083665, (-43.102999999999994, 26.289, -68.843)), ('A', ' 163 ', 'LEU', 0.05672617705925412, (-43.70299999999999, 29.909, -67.615)), ('A', ' 166 ', 'SER', 0.06676972258619396, (-41.476999999999975, 39.994, -67.012)), ('A', ' 173 ', 'ARG', 0.0, (-31.786999999999985, 40.772, -71.134)), ('A', ' 199 ', 'THR', 0.2832363425967655, (-32.050999999999995, 27.662, -66.283)), ('A', ' 207 ', 'ASP', 0.021999757654569893, (-43.77199999999997, 34.019, -75.907)), ('A', ' 209 ', 'VAL', 0.026583867099615237, (-40.29799999999999, 30.102, -72.009)), ('A', ' 255 ', 'THR', 0.008159601566148922, (3.329000000000004, -3.299999999999997, -63.18)), ('A', ' 259 ', 'SER', 0.11247499131801188, (-3.217999999999993, -6.041, -69.705)), ('A', ' 344 ', 'ASP', 0.05361331326974193, (-23.814, 7.982000000000003, -58.423)), ('A', ' 392 ', 'ARG', 0.0, (0.5010000000000092, 18.853, -54.783)), ('A', ' 502 ', 'ARG', 0.03255945025062755, (-36.852, 8.324000000000002, -97.036)), ('A', ' 516 ', 'ASN', 0.0, (-30.16699999999999, 26.333000000000006, -79.162)), ('A', ' 530 ', 'THR', 0.0258387386566028, (-31.289999999999985, 17.6, -79.548)), ('A', ' 531 ', 'GLN', 0.1774952839833429, (-27.811999999999998, 18.926000000000005, -78.742)), ('A', ' 589 ', 'SER', 0.2144249617853278, (-23.433999999999976, 14.876000000000003, -101.79400000000001)), ('A', ' 592 ', 'ILE', 0.23799320559565887, (-33.05599999999999, 18.80099999999999, -103.531)), ('B', '   7 ', 'LEU', 0.2493940049603186, (3.4580000000000024, 3.7299999999999995, -32.391)), ('B', '   8 ', 'CYS', 0.06552316888625934, (7.1590000000000025, 3.6460000000000017, -33.538)), ('B', '  11 ', 'GLN', 0.24299384372515145, (8.616000000000005, 3.2120000000000033, -41.96600000000001)), ('B', '  12 ', 'THR', 0.0013599335943581536, (6.147000000000004, 0.5099999999999998, -43.177)), ('B', '  68 ', 'MET', 0.008656719772989097, (4.320000000000008, -12.771, -54.99)), ('B', '  69 ', 'SER', 0.11412447097220284, (0.6480000000000015, -13.736000000000002, -54.149)), ('B', '  92 ', 'LEU', 0.0016823121361179767, (8.394000000000005, -3.560999999999998, -46.33700000000001)), ('B', '  95 ', 'ASN', 0.0, (15.228, -3.907, -41.118)), ('B', '  96 ', 'THR', 0.2467239989013682, (13.910000000000004, -0.6159999999999979, -39.522)), ('B', ' 103 ', 'VAL', 0.0888452513439653, (1.463999999999999, -1.7349999999999994, -27.205)), ('B', ' 158 ', 'LEU', 0.16957926311469207, (-49.503, 18.643, -40.119)), ('B', ' 160 ', 'ASP', 0.04346153446733494, (-46.33699999999998, 25.088, -40.316)), ('B', ' 187 ', 'VAL', 0.24904759585186478, (-36.824, 13.059000000000005, -53.93)), ('B', ' 188 ', 'THR', 0.23935430190179594, (-35.69499999999997, 14.258, -57.454)), ('B', ' 191 ', 'SER', 0.21182797981144094, (-31.261999999999993, 11.505000000000008, -57.14200000000002)), ('B', ' 192 ', 'LYS', 0.0049381090744967495, (-31.746999999999996, 13.695, -53.954)), ('B', ' 195 ', 'ILE', 0.019982826365029373, (-33.22599999999999, 21.078, -48.744)), ('B', ' 197 ', 'GLU', 0.2312653878430195, (-30.348999999999982, 21.523, -41.895)), ('B', ' 220 ', 'ASN', 0.13991578264340965, (-43.66099999999999, 18.735, -48.589)), ('B', ' 228 ', 'THR', 0.028978483761528732, (-25.268, 14.854, -41.58)), ('B', ' 247 ', 'VAL', 0.003918742385678705, (12.596000000000005, 36.24200000000001, -21.044000000000004)), ('B', ' 259 ', 'SER', 0.06675388839709812, (-7.5249999999999835, 52.60499999999998, -23.036)), ('B', ' 275 ', 'GLN', 0.0, (5.375000000000002, 32.022, -23.788)), ('B', ' 344 ', 'ASP', 0.025928910378279615, (-22.08399999999999, 39.34, -42.32800000000001)), ('B', ' 347 ', 'LYS', 0.16941145911801178, (-15.343999999999998, 41.28, -45.89600000000001)), ('B', ' 351 ', 'THR', 0.02991853980347514, (-7.436999999999991, 35.144999999999996, -45.74700000000001)), ('B', ' 353 ', 'GLU', 0.22186222869364858, (-6.591999999999989, 40.446999999999996, -43.50500000000001)), ('B', ' 484 ', 'VAL', 0.055023180653351704, (-37.929, 8.299, -25.263)), ('B', ' 486 ', 'SER', 0.1981835609396735, (-35.58199999999999, 13.091, -21.977)), ('B', ' 589 ', 'SER', 0.2513522677045108, (-34.673999999999985, 29.261, 0.719))]
data['cbeta'] = [('A', '  81 ', 'PHE', ' ', 0.2638343914812001, (10.879000000000008, 64.083, -52.276)), ('A', ' 484 ', 'VAL', ' ', 0.26183049904593225, (-32.88699999999998, 37.26299999999999, -78.731)), ('A', ' 592 ', 'ILE', ' ', 0.33620600980917087, (-34.193, 18.041, -102.764)), ('B', ' 199 ', 'THR', ' ', 0.25571054902734036, (-32.79399999999998, 20.921, -34.442))]
data['probe'] = [(' A 326  PRO  HG2', ' A 329  LYS  HZ1', -0.986, (-8.164, -1.83, -57.433)), (' A 326  PRO  HG2', ' A 329  LYS  NZ ', -0.927, (-8.187, -1.127, -56.391)), (' B  27  CYS  SG ', ' B 898  HOH  O  ', -0.848, (7.897, -5.236, -42.817)), (' B 508  LYS  HD3', ' B 904  HOH  O  ', -0.74, (-36.588, 41.648, -18.215)), (' B  12  THR HG21', ' B  26  CYS  HA ', -0.704, (5.789, -1.484, -40.555)), (' A 445  PRO  HD2', ' A 448  ILE HD12', -0.698, (-18.57, 9.322, -89.465)), (' A  12  THR HG21', ' A  26  CYS  HA ', -0.697, (7.078, 48.67, -55.103)), (' B 445  PRO  HD2', ' B 448  ILE HD12', -0.69, (-27.029, 35.773, -10.51)), (' A 215  THR HG22', ' B 193  VAL HG21', -0.661, (-31.437, 21.013, -55.51)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.625, (-31.892, 21.218, -80.077)), (' A 352  LEU HD11', ' B 234  PRO  HD3', -0.616, (-7.718, 12.136, -44.257)), (' A 519  ASN  HB3', ' A 530  THR HG21', -0.605, (-32.261, 21.372, -79.936)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.581, (-38.869, 28.493, -2.645)), (' B 451  THR HG21', ' B 585  LEU HD23', -0.577, (-25.801, 27.563, -6.259)), (' B 155  ARG  HE ', ' B 164  HIS  CD2', -0.573, (-48.06, 10.645, -39.942)), (' A  19  CYS  HB2', ' A  23  PRO  HD2', -0.554, (-3.84, 46.774, -59.503)), (' A 451  THR HG21', ' A 585  LEU HD23', -0.548, (-16.345, 17.307, -93.606)), (' A 326  PRO  HG2', ' A 329  LYS  HZ3', -0.538, (-9.029, -1.404, -56.105)), (' B  13  SER  O  ', ' B  44  SER  HA ', -0.535, (1.096, -2.146, -46.655)), (' A 163  LEU  HG ', ' A 211  TYR  CD2', -0.535, (-41.316, 28.537, -66.072)), (' B  19  CYS  HB2', ' B  23  PRO  HD2', -0.531, (-6.172, 0.687, -38.281)), (' B 163  LEU HD11', ' B 219  LEU HD11', -0.529, (-41.024, 18.867, -42.735)), (' B  65  LEU HD23', ' B  81  PHE  CZ ', -0.521, (7.384, -13.148, -49.479)), (' A 367  THR HG22', ' A 392  ARG  HB3', -0.517, (0.621, 17.215, -52.335)), (' A 151  ILE HG12', ' A 226  VAL HG22', -0.516, (-31.843, 39.96, -60.68)), (' B 704  PO4  O2 ', ' B 705  PO4  O1 ', -0.514, (-19.416, 35.198, -21.313)), (' B 154  VAL HG13', ' B 163  LEU HD22', -0.505, (-43.85, 16.845, -42.733)), (' A 140  ALA  O  ', ' A 144  THR HG23', -0.504, (-16.102, 41.708, -61.679)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.501, (-32.803, 34.558, -21.672)), (' A 579  ARG  HG2', ' A 947  HOH  O  ', -0.497, (-19.67, 28.296, -103.335)), (' A 531  GLN  HG2', ' A 536  SER  HB3', -0.493, (-24.411, 17.233, -78.721)), (' B 155  ARG  HE ', ' B 164  HIS  HD2', -0.488, (-47.782, 10.368, -39.729)), (' A  31  TYR  O  ', ' A  35  ILE HG22', -0.487, (5.063, 55.104, -65.233)), (' A 176  LEU HD22', ' A 200  PHE  HB2', -0.486, (-33.597, 31.626, -69.511)), (' B 181  VAL HG22', ' B 199  THR HG22', -0.486, (-29.72, 20.64, -35.403)), (' B 228  THR  CG2', ' B 230  HIS  NE2', -0.477, (-22.835, 17.058, -42.975)), (' B 244  GLU  HB2', ' B 276  LYS  HB2', -0.477, (7.014, 28.541, -27.254)), (' B 280  LEU HD23', ' B 399  ILE HG23', -0.476, (-9.969, 33.69, -22.374)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.475, (5.655, -1.268, -40.572)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.475, (-26.633, 11.325, -79.777)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.472, (2.604, 42.087, -29.027)), (' B 228  THR HG23', ' B 230  HIS  NE2', -0.471, (-22.56, 16.614, -42.995)), (' A  12  THR  CG2', ' A  26  CYS  HA ', -0.469, (7.703, 48.27, -54.822)), (' A  13  SER  O  ', ' A  44  SER  HA ', -0.467, (1.918, 50.142, -50.273)), (' A 244  GLU  HB2', ' A 276  LYS  HB2', -0.461, (9.484, 17.632, -63.328)), (' A  13  SER  HB2', ' A  92  LEU HD12', -0.459, (6.062, 49.87, -47.37)), (' B 185  TYR  CE2', ' B 194  GLN  HG2', -0.455, (-28.495, 16.221, -49.286)), (' B 279  THR  HB ', ' B 429  MET  HE3', -0.45, (-5.964, 27.732, -20.745)), (' A 351  THR HG23', ' A 364  PRO  HG3', -0.45, (-10.359, 15.456, -51.434)), (' A 378  MET  O  ', ' A 407  ALA  HB2', -0.448, (-12.767, 26.196, -70.443)), (' B 100  SER  HB2', ' B 103  VAL HG23', -0.447, (4.564, -1.371, -28.719)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.447, (-26.751, 19.217, -86.852)), (' B 157  VAL HG23', ' B 221  VAL HG23', -0.445, (-46.575, 17.123, -46.359)), (' B  16  CYS  O  ', ' B  22  ARG  HA ', -0.444, (-5.983, -0.277, -40.389)), (' A 260  ASP  HA ', ' A 263  SER  OG ', -0.442, (-1.093, -5.137, -73.919)), (' B 512  ILE  O  ', ' B 546  PHE  HA ', -0.441, (-34.553, 26.286, -15.04)), (' B 378  MET  O  ', ' B 407  ALA  HB2', -0.44, (-16.301, 20.139, -27.93)), (' A 279  THR  HB ', ' A 429  MET  HE3', -0.439, (-1.361, 18.706, -73.902)), (' B 333  ILE  HB ', ' B 358  CYS  HB2', -0.438, (-12.367, 31.863, -41.432)), (' A 480  ILE HG21', ' A 550  THR HG22', -0.437, (-28.996, 32.462, -89.792)), (' A 376  ILE HG22', ' A 400  GLY  HA3', -0.435, (-7.154, 18.527, -73.719)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.433, (9.357, -0.223, -32.319)), (' B 480  ILE HG21', ' B 550  THR HG22', -0.432, (-36.41, 12.847, -13.844)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.427, (-13.64, 7.424, -52.557)), (' A 130  LEU  HA ', ' A 130  LEU HD23', -0.427, (0.784, 39.406, -64.524)), (' A 127  THR HG23', ' A 130  LEU  H  ', -0.426, (3.79, 37.39, -65.677)), (' B  13  SER  HB3', ' B  92  LEU  HB2', -0.419, (6.353, -2.507, -47.058)), (' B  14  LEU  HB2', ' B  25  LEU  O  ', -0.418, (2.651, -1.959, -40.462)), (' B 254  PRO  HB3', ' B 298  TYR  CE2', -0.417, (2.221, 45.377, -25.221)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.417, (-31.311, 21.098, -79.418)), (' A  14  LEU  HB2', ' A  25  LEU  O  ', -0.416, (4.529, 49.079, -55.593)), (' B  63  LEU  HB2', ' B  83  LEU HD12', -0.416, (-0.722, -14.071, -44.278)), (' A 252  LEU  HB3', ' A 299  TYR  CD2', -0.412, (4.273, 4.987, -61.684)), (' B 143  GLU  HA ', ' B 146  LYS  HE2', -0.411, (-21.258, 11.195, -37.582)), (' B 279  THR  HB ', ' B 429  MET  CE ', -0.407, (-6.382, 27.573, -20.421)), (' A 254  PRO  HB3', ' A 298  TYR  CE2', -0.407, (5.013, 1.128, -65.409)), (' A  77  PRO  HB2', ' A 873  HOH  O  ', -0.406, (8.187, 71.636, -45.866)), (' B 271  LYS  NZ ', ' B 804  HOH  O  ', -0.404, (2.204, 31.359, -16.059)), (' A  16  CYS  O  ', ' A  22  ARG  HA ', -0.403, (-4.469, 48.064, -57.088)), (' B 511  PHE  HB3', ' B 530  THR HG22', -0.403, (-38.638, 27.748, -20.354)), (' B 202  LYS  NZ ', ' B 484  VAL HG22', -0.401, (-40.122, 10.318, -27.108))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
