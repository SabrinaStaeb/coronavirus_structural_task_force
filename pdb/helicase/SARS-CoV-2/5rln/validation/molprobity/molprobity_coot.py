# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 195 ', 'ILE', 0.006390879844795362, (-33.145999999999994, 29.18499999999999, -55.164)), ('A', ' 219 ', 'LEU', 0.00276226661876896, (-40.11899999999999, 29.56899999999999, -59.86200000000001)), ('A', ' 228 ', 'THR', 0.021701125855379384, (-23.028, 35.036999999999985, -60.20600000000002)), ('A', ' 283 ', 'PRO', 0.044214460566093246, (-6.956999999999999, 14.484999999999985, -81.581)), ('A', ' 484 ', 'VAL', 0.010676614082190897, (-31.009, 38.541, -81.135)), ('B', ' 159 ', 'SER', 0.03342679622649591, (-48.928, 22.56099999999999, -41.315)), ('B', ' 283 ', 'PRO', 0.053395505934274126, (-15.115000000000006, 32.133, -15.462000000000002))]
data['omega'] = []
data['rota'] = [('A', '  12 ', 'THR', 0.016820285602265447, (8.267999999999995, 47.763999999999996, -52.096000000000004)), ('A', '  35 ', 'ILE', 0.0, (4.799999999999992, 58.101999999999975, -66.63)), ('A', '  46 ', 'ASN', 0.02451779836376127, (-0.5660000000000052, 56.18, -46.466)), ('A', '  51 ', 'ASN', 0.0510003194229965, (-1.8719999999999999, 65.97099999999998, -47.336)), ('A', '  69 ', 'SER', 0.0527277943716772, (4.163999999999993, 63.846999999999994, -45.69000000000001)), ('A', '  81 ', 'PHE', 0.1300204531204328, (11.535999999999992, 66.43799999999999, -53.186)), ('A', ' 148 ', 'SER', 0.08724087040349743, (-23.173, 45.46299999999999, -65.902)), ('A', ' 157 ', 'VAL', 0.09722134650735789, (-44.97899999999999, 30.262999999999995, -64.683)), ('A', ' 173 ', 'ARG', 0.09932042711006885, (-29.836, 41.896999999999984, -71.747)), ('A', ' 201 ', 'GLU', 0.24135058040307641, (-32.959000000000024, 29.193999999999992, -73.858)), ('A', ' 207 ', 'ASP', 0.25144703806504215, (-42.276999999999994, 35.393999999999984, -76.049)), ('A', ' 209 ', 'VAL', 0.027036620206258306, (-38.70200000000001, 31.22699999999999, -73.039)), ('A', ' 226 ', 'VAL', 0.16236025030264412, (-28.834999999999997, 37.61, -61.07400000000001)), ('A', ' 229 ', 'SER', 0.048251760611646724, (-20.322000000000003, 37.67799999999997, -59.803)), ('A', ' 247 ', 'VAL', 0.02327657931283164, (17.60499999999999, 10.335999999999993, -66.19300000000001)), ('A', ' 255 ', 'THR', 0.030048477460452663, (4.826999999999995, -2.649000000000015, -63.617)), ('A', ' 337 ', 'ARG', 0.2440121627340436, (-22.65599999999999, 24.098999999999997, -53.984000000000016)), ('A', ' 344 ', 'ASP', 0.2150510622805438, (-22.491999999999997, 8.880999999999993, -58.76100000000002)), ('A', ' 442 ', 'ARG', 0.023738281109594445, (-10.186000000000009, 5.033999999999992, -83.723)), ('A', ' 502 ', 'ARG', 0.052989480139279906, (-35.228999999999985, 9.109999999999985, -97.409)), ('A', ' 530 ', 'THR', 0.02447880688123405, (-29.497000000000014, 18.53099999999999, -79.986)), ('A', ' 551 ', 'GLU', 0.006752349848534625, (-20.826999999999998, 31.615999999999985, -92.84000000000003)), ('A', ' 592 ', 'ILE', 0.016719451747436085, (-31.611999999999988, 18.992999999999988, -103.59500000000003)), ('B', '  11 ', 'GLN', 0.16296164055886933, (9.173999999999998, 3.4139999999999944, -42.16300000000001)), ('B', '  12 ', 'THR', 0.01721164458123645, (6.577999999999998, 0.7919999999999963, -43.291)), ('B', '  20 ', 'ILE', 0.0708184089570745, (-10.861999999999995, 2.1239999999999934, -38.90200000000001)), ('B', '  35 ', 'ILE', 0.04343449044857535, (-1.0980000000000003, -11.101000000000006, -32.11)), ('B', '  69 ', 'SER', 0.11047213346277399, (1.7369999999999965, -13.329000000000004, -54.121000000000016)), ('B', '  95 ', 'ASN', 0.004992945538800162, (15.746999999999991, -3.9290000000000056, -40.953)), ('B', ' 103 ', 'VAL', 0.028962825645767812, (1.720999999999997, -1.535000000000002, -27.343)), ('B', ' 158 ', 'LEU', 0.10202070248851597, (-49.404999999999994, 18.767999999999986, -40.901)), ('B', ' 160 ', 'ASP', 0.25606227226708256, (-46.056999999999995, 25.092999999999993, -41.189000000000014)), ('B', ' 164 ', 'HIS', 0.023177411263319805, (-45.48499999999999, 13.615999999999994, -39.410000000000004)), ('B', ' 177 ', 'ASN', 0.1967560909427105, (-32.90799999999999, 17.815, -29.794000000000004)), ('B', ' 192 ', 'LYS', 0.058170278642001604, (-31.310999999999996, 14.262999999999991, -54.412)), ('B', ' 201 ', 'GLU', 0.2858252978976698, (-38.663, 18.323999999999998, -31.225000000000005)), ('B', ' 202 ', 'LYS', 0.2471476850501792, (-41.77899999999999, 16.224999999999994, -30.198000000000008)), ('B', ' 219 ', 'LEU', 0.08674739628424216, (-41.528000000000006, 20.84299999999999, -47.598)), ('B', ' 257 ', 'ASN', 0.0, (-0.7000000000000015, 54.13, -24.819)), ('B', ' 344 ', 'ASP', 0.006073471395260999, (-21.62, 39.80099999999999, -42.145)), ('B', ' 361 ', 'ASN', 0.0, (-12.504999999999999, 23.522999999999993, -39.690000000000005)), ('B', ' 365 ', 'GLU', 0.2006787368289128, (-2.905000000000002, 27.342999999999996, -44.073000000000015)), ('B', ' 442 ', 'ARG', 0.15326316248411243, (-19.031999999999996, 41.349999999999994, -13.438000000000004)), ('B', ' 458 ', 'ASP', 0.0049623685855037895, (-11.269000000000005, 27.093, -5.493)), ('B', ' 484 ', 'VAL', 0.0442649607367637, (-37.22499999999998, 8.278999999999996, -25.642)), ('B', ' 486 ', 'SER', 0.12665413515989443, (-35.179, 13.046999999999997, -22.23)), ('B', ' 551 ', 'GLU', 0.007361244611777007, (-30.932, 13.940999999999999, -9.874))]
data['cbeta'] = [('A', ' 484 ', 'VAL', ' ', 0.2823642636734081, (-30.841, 38.563999999999986, -79.577)), ('A', ' 592 ', 'ILE', ' ', 0.3216028138465035, (-32.644999999999996, 18.064999999999998, -102.83800000000002)), ('B', '  20 ', 'ILE', ' ', 0.2851744982709415, (-12.262999999999995, 2.5409999999999933, -38.324)), ('B', ' 361 ', 'ASN', ' ', 0.2622002113878097, (-13.604, 22.459999999999994, -39.83))]
data['probe'] = [(' A 331  SER  HB2', ' A 353  GLU  HG3', -0.859, (-11.539, 8.609, -52.98)), (' A 158  LEU HD21', ' A 164  HIS  ND1', -0.826, (-45.748, 32.62, -70.922)), (' A 326  PRO  HB2', ' A 329  LYS  HZ3', -0.721, (-9.055, -0.066, -56.812)), (' A 326  PRO  HG2', ' A 329  LYS  NZ ', -0.716, (-7.084, -0.647, -56.561)), (' A 326  PRO  HG2', ' A 329  LYS  HZ1', -0.694, (-7.29, -1.035, -57.079)), (' A 158  LEU HD11', ' A 164  HIS  CE1', -0.63, (-44.264, 31.359, -71.787)), (' B 333  ILE  HB ', ' B 358  CYS  HB2', -0.624, (-11.656, 32.24, -41.604)), (' A 333  ILE  HB ', ' A 358  CYS  HB2', -0.616, (-13.183, 16.037, -56.524)), (' A 442  ARG  HD3', ' A 701  NZG  C6 ', -0.594, (-6.707, 4.103, -80.143)), (' A  19  CYS  HB2', ' A  23  PRO  HD2', -0.591, (-2.566, 47.874, -60.279)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.588, (-38.458, 27.92, -3.282)), (' B 508  LYS  HD2', ' B 874  HOH  O  ', -0.565, (-36.078, 41.645, -17.97)), (' B  19  CYS  HB2', ' B  23  PRO  HD2', -0.565, (-6.056, 0.775, -38.379)), (' A 445  PRO  HD2', ' A 448  ILE HD12', -0.562, (-16.457, 9.638, -89.25)), (' A 326  PRO  HB2', ' A 329  LYS  NZ ', -0.559, (-8.421, -0.456, -56.279)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.557, (-32.322, 34.566, -21.895)), (' A 326  PRO  CB ', ' A 329  LYS  HZ3', -0.553, (-8.614, -0.489, -57.02)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.547, (-25.459, 12.203, -80.223)), (' A 442  ARG  HA ', ' A 464  HIS  HB3', -0.541, (-9.445, 4.154, -85.566)), (' B 445  PRO  HD2', ' B 448  ILE HD12', -0.538, (-26.69, 35.712, -10.662)), (' B 505  ALA  O  ', ' B 508  LYS  HE2', -0.537, (-39.056, 40.327, -14.685)), (' A 260  ASP  HA ', ' A 263  SER  OG ', -0.536, (0.104, -4.71, -74.438)), (' B 442  ARG  HA ', ' B 464  HIS  HB3', -0.529, (-18.671, 42.509, -11.688)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.521, (-30.091, 21.809, -80.108)), (' B 203  GLY  HA3', ' B 210  VAL HG23', -0.52, (-44.594, 19.358, -32.766)), (' B 511  PHE  HB3', ' B 530  THR HG22', -0.519, (-37.863, 28.115, -20.535)), (' A 442  ARG  HD3', ' A 701  NZG  C7 ', -0.516, (-7.272, 3.957, -79.979)), (' B 387  VAL HG13', ' B 391  LEU HD12', -0.513, (-5.099, 27.839, -35.513)), (' B 414  LYS  NZ ', ' B 808  HOH  O  ', -0.512, (-19.614, -0.293, -23.374)), (' B 279  THR  HB ', ' B 429  MET  HE3', -0.51, (-5.532, 27.804, -20.642)), (' A  12  THR HG21', ' A  26  CYS  HA ', -0.503, (8.133, 49.375, -55.502)), (' B 177  ASN  HB3', ' B 516  ASN  ND2', -0.494, (-33.631, 17.16, -26.781)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.493, (9.908, 0.173, -32.765)), (' B 551  GLU  HG2', ' B 577  SER  HB3', -0.486, (-33.285, 14.937, -8.385)), (' A 290  HIS  ND1', ' A 701  NZG  C1 ', -0.485, (-8.696, 2.391, -74.312)), (' A 326  PRO  CG ', ' A 329  LYS  NZ ', -0.483, (-8.061, -0.536, -57.127)), (' A 387  VAL HG13', ' A 391  LEU HD12', -0.478, (-3.849, 20.058, -59.937)), (' A 533  VAL HG11', ' A 560  ARG  HG3', -0.477, (-17.613, 23.492, -83.412)), (' B 182  PHE  HB3', ' B 225  PHE  HB3', -0.474, (-33.154, 15.692, -41.551)), (' B  27  CYS  HB3', ' B  88  GLN  HG2', -0.469, (8.722, -6.844, -39.177)), (' B  12  THR HG23', ' B 927  HOH  O  ', -0.467, (7.921, -1.752, -41.482)), (' A  13  SER  OG ', ' A  44  SER  OG ', -0.466, (4.374, 53.064, -48.681)), (' A 279  THR  HB ', ' A 429  MET  HE3', -0.466, (0.249, 19.428, -74.33)), (' B  12  THR HG21', ' B  26  CYS  HA ', -0.464, (5.776, -1.163, -40.689)), (' A 551  GLU  HG2', ' A 577  SER  HB3', -0.463, (-22.647, 30.369, -95.077)), (' B 533  VAL HG11', ' B 560  ARG  HG3', -0.462, (-25.911, 23.014, -17.491)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.459, (3.067, 42.23, -28.846)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.458, (6.206, -0.911, -40.784)), (' B 451  THR HG21', ' B 585  LEU HD23', -0.445, (-25.524, 27.462, -5.94)), (' B  19  CYS  CB ', ' B  23  PRO  HD2', -0.445, (-5.998, 0.99, -37.887)), (' A  19  CYS  CB ', ' A  23  PRO  HD2', -0.444, (-2.586, 47.567, -60.463)), (' A 367  THR HG22', ' A 392  ARG  HB3', -0.443, (1.968, 18.687, -52.934)), (' A  12  THR  CG2', ' A  26  CYS  HA ', -0.442, (8.378, 49.115, -55.136)), (' B 280  LEU  HB2', ' B 436  MET  HE3', -0.442, (-4.727, 33.739, -20.675)), (' A 158  LEU HD11', ' A 164  HIS  ND1', -0.442, (-44.518, 32.014, -71.113)), (' A 519  ASN  HB3', ' A 530  THR HG21', -0.439, (-30.419, 22.441, -79.974)), (' A 297  LEU HD11', ' A 324  TYR  HB3', -0.439, (-7.397, -0.148, -66.153)), (' A 326  PRO  CG ', ' A 329  LYS  HZ3', -0.438, (-8.187, -0.301, -56.72)), (' A 163  LEU HD11', ' A 200  PHE  HE2', -0.436, (-37.103, 31.473, -67.378)), (' B  12  THR HG21', ' B  25  LEU  O  ', -0.435, (4.732, -1.49, -40.727)), (' B  31  TYR  CZ ', ' B  35  ILE HG21', -0.434, (2.734, -12.235, -33.112)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.432, (-29.833, 21.84, -80.107)), (' A 109  ILE HD13', ' A 134  ALA  HB2', -0.429, (-0.921, 40.001, -68.357)), (' A 184  GLY  HA2', ' A 225  PHE  HA ', -0.428, (-31.944, 34.398, -59.433)), (' A 326  PRO  CB ', ' A 329  LYS  NZ ', -0.427, (-8.29, -0.582, -56.541)), (' B   8  CYS  SG ', ' B  99  GLY  O  ', -0.426, (9.001, 1.026, -31.709)), (' B 124  ASN HD22', ' B 421  TYR  HA ', -0.425, (-8.509, 15.002, -20.842)), (' A 451  THR HG21', ' A 585  LEU HD23', -0.423, (-14.202, 17.828, -93.858)), (' B 303  ARG  NH1', ' B 353  GLU  O  ', -0.422, (-4.42, 38.739, -41.799)), (' B 157  VAL  HA ', ' B 163  LEU HD23', -0.421, (-45.865, 18.158, -42.96)), (' A 376  ILE  HA ', ' A 376  ILE HD12', -0.42, (-6.266, 22.021, -70.089)), (' B 196  GLY  HA3', ' B 215  THR HG21', -0.419, (-32.95, 24.716, -46.385)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.419, (-25.036, 20.017, -87.261)), (' A  27  CYS  HB3', ' A  88  GLN  HG2', -0.416, (12.428, 54.135, -57.503)), (' B 109  ILE HD13', ' B 134  ALA  HB2', -0.416, (-5.585, 6.895, -28.726)), (' B 508  LYS  HE3', ' B 543  TYR  CE2', -0.413, (-36.354, 41.16, -14.284)), (' A 185  TYR  HA ', ' A 194  GLN  N  ', -0.413, (-32.436, 32.838, -53.654)), (' B  13  SER  OG ', ' B  44  SER  OG ', -0.413, (3.382, -3.421, -48.308)), (' A   1  ALA  CB ', ' A  15  ARG  HE ', -0.412, (-0.227, 48.897, -49.445)), (' B 249  ILE HD11', ' B 270  GLN  HG2', -0.41, (4.911, 42.71, -22.297)), (' B 592  ILE  HA ', ' B 593  PRO  HD3', -0.409, (-43.218, 25.228, -2.714)), (' B  16  CYS  O  ', ' B  22  ARG  HA ', -0.409, (-5.584, -0.026, -40.735)), (' B 149  TYR  CD2', ' B 174  PRO  HB3', -0.408, (-29.485, 9.826, -34.952)), (' A 158  LEU HD21', ' A 164  HIS  CE1', -0.405, (-45.63, 32.228, -71.067)), (' B 512  ILE  O  ', ' B 546  PHE  HA ', -0.404, (-33.877, 26.032, -15.154)), (' A 139  LYS  O  ', ' A 143  GLU  HG2', -0.403, (-14.012, 38.018, -63.044)), (' B 279  THR  HB ', ' B 429  MET  CE ', -0.402, (-6.02, 27.585, -20.258)), (' B 297  LEU HD11', ' B 324  TYR  HB3', -0.4, (-10.035, 47.633, -28.824))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
