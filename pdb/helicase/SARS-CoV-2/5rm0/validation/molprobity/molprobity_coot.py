# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 219 ', 'LEU', 0.022227353015555874, (-42.071, 28.498999999999995, -58.890999999999984)), ('A', ' 484 ', 'VAL', 0.022720253590899447, (-32.35900000000002, 37.697999999999986, -80.43499999999999)), ('B', ' 103 ', 'VAL', 0.06986576505575581, (1.6899999999999977, -1.9360000000000017, -27.077999999999992))]
data['omega'] = []
data['rota'] = [('A', '  12 ', 'THR', 0.0013599335943581536, (7.519999999999987, 47.041999999999994, -51.65199999999999)), ('A', '  35 ', 'ILE', 0.0, (3.83499999999999, 57.28099999999999, -66.103)), ('A', '  36 ', 'SER', 0.05443939452129153, (2.5709999999999864, 55.18599999999999, -69.077)), ('A', '  46 ', 'ASN', 0.02413155936909936, (-1.9240000000000128, 55.172, -46.283)), ('A', '  51 ', 'ASN', 0.2305170922608979, (-2.778000000000014, 65.471, -46.90599999999999)), ('A', '  69 ', 'SER', 0.014739973994437605, (3.428999999999994, 63.28299999999999, -45.419999999999995)), ('A', '  81 ', 'PHE', 0.13984366136115023, (10.881, 65.646, -52.93099999999999)), ('A', ' 173 ', 'ARG', 0.003136558210386217, (-31.083, 41.003999999999984, -71.13099999999999)), ('A', ' 209 ', 'VAL', 0.022960476905141445, (-39.804000000000016, 30.348, -71.971)), ('A', ' 217 ', 'TYR', 0.07335829577538748, (-39.50000000000001, 24.132999999999992, -56.51199999999999)), ('A', ' 247 ', 'VAL', 0.12161578543786189, (16.78099999999999, 9.858999999999993, -65.894)), ('A', ' 255 ', 'THR', 0.0013599335943581536, (4.012999999999996, -3.264000000000003, -63.312999999999995)), ('A', ' 289 ', 'SER', 0.08621478350038182, (-9.783999999999999, 8.149999999999993, -71.213)), ('A', ' 329 ', 'LYS', 0.10669747136366806, (-10.490000000000006, 2.6759999999999966, -54.102)), ('A', ' 344 ', 'ASP', 0.29819746775879935, (-23.35400000000001, 7.976999999999997, -58.531)), ('A', ' 365 ', 'GLU', 0.16608330298661989, (-6.183000000000007, 20.563, -50.522)), ('A', ' 442 ', 'ARG', 0.14200213524323646, (-11.025000000000002, 4.379999999999985, -83.55799999999998)), ('A', ' 498 ', 'GLU', 0.2306787706209428, (-37.256, 15.09299999999999, -95.97899999999998)), ('A', ' 517 ', 'SER', 0.19694619759241355, (-32.456999999999994, 28.071999999999996, -80.894)), ('A', ' 530 ', 'THR', 0.01721203952955685, (-30.567000000000014, 17.645, -79.58399999999999)), ('B', '  12 ', 'THR', 0.0013599335943581536, (6.413999999999998, 0.5509999999999948, -43.15899999999999)), ('B', '  51 ', 'ASN', 0.2512058832920886, (-5.440999999999999, -15.041000000000002, -53.419)), ('B', '  68 ', 'MET', 0.002237700745379401, (4.443999999999996, -12.432000000000013, -55.12)), ('B', '  69 ', 'SER', 0.15304082010098452, (0.865999999999997, -13.490000000000006, -54.00499999999999)), ('B', '  96 ', 'THR', 0.11441859246055172, (14.418, -0.566000000000006, -39.614)), ('B', ' 103 ', 'VAL', 0.025021375562278663, (1.6899999999999977, -1.9360000000000017, -27.077999999999992)), ('B', ' 124 ', 'ASN', 0.07341139084854295, (-6.002000000000004, 12.108999999999998, -22.936)), ('B', ' 148 ', 'SER', 0.25478511844758017, (-26.631000000000004, 3.6420000000000003, -37.655)), ('B', ' 158 ', 'LEU', 0.24867331117718242, (-49.476, 18.752, -40.418)), ('B', ' 160 ', 'ASP', 0.12754023606701018, (-46.138, 25.01, -40.335)), ('B', ' 164 ', 'HIS', 0.2524636899259412, (-45.699999999999996, 13.78, -39.148)), ('B', ' 188 ', 'THR', 0.17422945517952237, (-35.31700000000001, 14.331999999999994, -57.574)), ('B', ' 191 ', 'SER', 0.10837580454229204, (-31.006000000000014, 11.541999999999993, -57.10799999999998)), ('B', ' 192 ', 'LYS', 0.0, (-31.509000000000004, 13.718999999999998, -53.922999999999995)), ('B', ' 195 ', 'ILE', 0.0167458729699857, (-32.976000000000006, 21.308999999999997, -48.700999999999986)), ('B', ' 289 ', 'SER', 0.0929686131637724, (-13.974000000000006, 38.34700000000001, -25.527)), ('B', ' 353 ', 'GLU', 0.029721110310389577, (-6.359000000000006, 40.331, -43.488)), ('B', ' 365 ', 'GLU', 0.24309898065475147, (-3.0980000000000043, 27.087, -44.18)), ('B', ' 484 ', 'VAL', 0.007351242675213143, (-38.017, 8.449999999999996, -25.573)), ('B', ' 592 ', 'ILE', 0.2975483973399506, (-43.327, 24.85, -0.8759999999999999))]
data['cbeta'] = [('A', '  81 ', 'PHE', ' ', 0.2770607637407653, (11.472999999999985, 64.397, -52.269)), ('A', ' 484 ', 'VAL', ' ', 0.2638946023068261, (-32.084, 37.59799999999999, -78.88399999999999)), ('A', ' 530 ', 'THR', ' ', 0.2549061703610841, (-31.662000000000006, 18.71099999999999, -79.682)), ('A', ' 592 ', 'ILE', ' ', 0.2779682833466079, (-33.582, 17.705, -102.042)), ('B', ' 199 ', 'THR', ' ', 0.26028110324331866, (-32.798, 20.905, -34.598))]
data['probe'] = [(' A 326  PRO  HB2', ' A 329  LYS  HZ2', -0.784, (-9.637, -0.544, -56.994)), (' A 158  LEU HD21', ' A 164  HIS  ND1', -0.762, (-46.879, 32.215, -70.123)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.76, (-12.666, 7.297, -52.675)), (' B 442  ARG HH11', ' B 464  HIS  CE1', -0.727, (-17.882, 46.061, -11.822)), (' A 326  PRO  HD2', ' A 329  LYS  HZ1', -0.719, (-7.973, -0.539, -57.863)), (' A  12  THR HG21', ' A  26  CYS  HA ', -0.7, (8.14, 48.785, -55.42)), (' B 279  THR  HB ', ' B 429  MET  HE2', -0.683, (-6.229, 27.518, -20.571)), (' B  12  THR HG21', ' B  26  CYS  HA ', -0.665, (5.61, -1.269, -40.177)), (' B 162  GLU  HG2', ' B 210  VAL HG22', -0.64, (-44.204, 21.15, -34.012)), (' A 326  PRO  CG ', ' A 329  LYS  HZ1', -0.633, (-8.22, -1.065, -58.049)), (' A 326  PRO  CD ', ' A 329  LYS  HZ1', -0.629, (-8.272, -0.631, -58.363)), (' A 158  LEU HD21', ' A 164  HIS  CE1', -0.627, (-47.078, 31.458, -70.74)), (' A 279  THR  HB ', ' A 429  MET  HE2', -0.62, (-0.473, 18.533, -74.322)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.596, (-33.136, 34.579, -21.679)), (' A 326  PRO  HD2', ' A 329  LYS  NZ ', -0.593, (-8.897, 0.14, -57.706)), (' A   7  LEU HD21', ' A 106  PHE  HB2', -0.587, (3.683, 43.737, -65.828)), (' A 326  PRO  HG2', ' A 329  LYS  HZ1', -0.573, (-7.954, -1.293, -57.335)), (' B   7  LEU HD21', ' B 106  PHE  HB2', -0.566, (-0.595, 2.049, -30.127)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.556, (-26.372, 11.29, -80.006)), (' B  13  SER  O  ', ' B  44  SER  HA ', -0.552, (1.153, -2.506, -46.937)), (' A 158  LEU HD12', ' A 162  GLU  HB3', -0.547, (-44.385, 28.126, -70.23)), (' A   6  VAL  HA ', ' A 129  ARG  HD2', -0.532, (4.819, 39.525, -59.803)), (' A 326  PRO  CG ', ' A 329  LYS  NZ ', -0.532, (-8.79, -0.409, -57.444)), (' B 183  THR  OG1', ' B 228  THR  OG1', -0.528, (-27.517, 17.03, -42.927)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.524, (2.658, 41.918, -29.019)), (' B  49  VAL HG23', ' B  58  THR HG22', -0.522, (-9.496, -12.264, -46.905)), (' B 228  THR HG22', ' B 230  HIS  NE2', -0.522, (-22.245, 17.039, -43.38)), (' A 352  LEU HD11', ' B 234  PRO  HD3', -0.517, (-7.31, 11.537, -44.025)), (' B 445  PRO  HB3', ' B 468  SER  HB3', -0.514, (-28.297, 40.162, -7.853)), (' A 215  THR HG22', ' B 193  VAL HG21', -0.514, (-31.585, 21.631, -55.591)), (' A 176  LEU HD22', ' A 200  PHE  HB2', -0.506, (-33.126, 32.256, -69.749)), (' B 442  ARG  NH1', ' B 464  HIS  CE1', -0.503, (-17.457, 46.726, -12.293)), (' B 278  SER  HB2', ' B 436  MET  HE2', -0.502, (-2.135, 32.664, -21.224)), (' A 584  LYS  NZ ', ' A 804  HOH  O  ', -0.49, (-11.032, 26.288, -93.95)), (' B 551  GLU  HG3', ' B 577  SER  HB3', -0.49, (-33.683, 15.444, -7.909)), (' B 192  LYS  H  ', ' B 192  LYS  HD2', -0.488, (-29.758, 12.423, -54.748)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.487, (9.191, 0.063, -32.411)), (' A 445  PRO  HB3', ' A 468  SER  HB3', -0.485, (-18.132, 5.411, -91.498)), (' A 280  LEU HD11', ' A 438  LEU  HG ', -0.485, (-2.409, 10.831, -76.532)), (' A 352  LEU  CD1', ' B 234  PRO  HD3', -0.484, (-7.468, 11.397, -44.48)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.484, (6.067, -1.256, -40.645)), (' A 551  GLU  HG3', ' A 577  SER  HB3', -0.475, (-23.803, 29.308, -94.525)), (' A  12  THR  CG2', ' A  26  CYS  HA ', -0.472, (7.794, 48.347, -54.513)), (' A 326  PRO  HB2', ' A 329  LYS  NZ ', -0.472, (-9.044, -0.429, -56.827)), (' A 289  SER  HB2', ' A 320  LYS  HD3', -0.468, (-11.948, 5.916, -71.58)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.465, (-31.045, 20.863, -79.5)), (' A 498  GLU  HG3', ' A 502  ARG HH22', -0.461, (-38.367, 14.389, -99.38)), (' A  63  LEU  HB2', ' A  83  LEU HD12', -0.46, (2.421, 62.096, -54.965)), (' B 371  VAL HG23', ' B 393  ALA  HB2', -0.459, (-1.236, 31.315, -34.754)), (' B  65  LEU HD23', ' B  81  PHE  CZ ', -0.456, (7.342, -13.132, -49.259)), (' B 155  ARG  HE ', ' B 164  HIS  CD2', -0.456, (-48.614, 10.659, -40.393)), (' A 304  ILE HG12', ' A 370  ILE  HB ', -0.454, (-1.489, 9.488, -61.036)), (' B 163  LEU HD21', ' B 219  LEU HD11', -0.454, (-42.07, 19.216, -43.223)), (' B 289  SER  HB2', ' B 320  LYS  HD3', -0.453, (-15.695, 40.276, -26.053)), (' A 326  PRO  CD ', ' A 329  LYS  NZ ', -0.452, (-8.648, -0.283, -57.609)), (' A 329  LYS  HB2', ' A 329  LYS  NZ ', -0.451, (-8.847, 1.441, -55.875)), (' B 184  GLY  HA3', ' B 195  ILE HG22', -0.451, (-34.234, 18.945, -46.223)), (' B   7  LEU HD13', ' B 103  VAL HG22', -0.449, (1.929, -0.586, -30.702)), (' B  13  SER  HB3', ' B  92  LEU  HB2', -0.448, (6.507, -1.639, -47.261)), (' A 278  SER  HB2', ' A 436  MET  HE2', -0.446, (3.036, 13.373, -71.553)), (' A 140  ALA  O  ', ' A 144  THR HG23', -0.444, (-15.154, 41.876, -61.507)), (' B  16  CYS  O  ', ' B  22  ARG  HA ', -0.441, (-5.982, -0.24, -40.628)), (' A  19  CYS  HB2', ' A  23  PRO  HD2', -0.439, (-3.447, 46.918, -59.304)), (' A 371  VAL HG23', ' A 393  ALA  HB2', -0.438, (-0.615, 15.723, -58.341)), (' A 326  PRO  HG2', ' A 329  LYS  NZ ', -0.437, (-8.244, -0.781, -56.947)), (' B 149  TYR  HB3', ' B 174  PRO  HD3', -0.436, (-31.077, 7.995, -36.595)), (' A  19  CYS  CB ', ' A  23  PRO  HD2', -0.434, (-3.789, 46.844, -59.828)), (' B 404  GLN  CD ', ' B 811  HOH  O  ', -0.434, (-17.971, 29.149, -20.237)), (' A 442  ARG  NH1', ' A 464  HIS  CE1', -0.434, (-8.416, -0.788, -84.814)), (' A 442  ARG HH11', ' A 464  HIS  CE1', -0.434, (-8.788, -0.854, -84.272)), (' B 404  GLN  NE2', ' B 811  HOH  O  ', -0.433, (-18.373, 29.272, -20.485)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.431, (-30.785, 20.913, -79.497)), (' B 157  VAL HG21', ' B 220  ASN  HA ', -0.431, (-44.972, 19.18, -46.723)), (' A   7  LEU HD13', ' A 103  VAL HG22', -0.43, (6.438, 45.796, -64.734)), (' B 154  VAL HG13', ' B 163  LEU HD22', -0.429, (-43.569, 16.865, -42.993)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.429, (-26.044, 19.235, -86.845)), (' B 192  LYS  HD2', ' B 192  LYS  N  ', -0.428, (-29.891, 12.161, -54.21)), (' B 154  VAL HG22', ' B 163  LEU HD13', -0.428, (-41.031, 16.557, -42.249)), (' A 252  LEU  HB3', ' A 299  TYR  CD2', -0.427, (4.803, 4.968, -61.551)), (' B 512  ILE  O  ', ' B 546  PHE  HA ', -0.426, (-34.446, 26.129, -14.965)), (' B 343  PHE  CZ ', ' B 345  LYS  HB2', -0.424, (-19.595, 42.29, -38.386)), (' B 304  ILE HG12', ' B 370  ILE  HB ', -0.423, (-2.516, 37.523, -32.017)), (' B  19  CYS  CB ', ' B  23  PRO  HD2', -0.423, (-5.944, 0.786, -37.817)), (' A 121  ILE HG23', ' A 421  TYR  CE1', -0.423, (-1.082, 34.926, -78.78)), (' B 280  LEU HD11', ' B 438  LEU  HG ', -0.421, (-9.052, 35.57, -17.906)), (' B 451  THR HG21', ' B 585  LEU HD23', -0.419, (-25.34, 27.786, -6.092)), (' B 163  LEU HD11', ' B 219  LEU HD11', -0.419, (-40.996, 18.934, -42.91)), (' B 151  ILE HG12', ' B 226  VAL  CG2', -0.416, (-31.612, 8.873, -44.215)), (' A 279  THR  HB ', ' A 429  MET  CE ', -0.416, (-0.697, 18.771, -73.871)), (' B 460  LYS  NZ ', ' B 801  HOH  O  ', -0.415, (-8.054, 28.237, -11.33)), (' A 326  PRO  CB ', ' A 329  LYS  HZ2', -0.413, (-9.436, -0.705, -57.001)), (' B 163  LEU  HG ', ' B 211  TYR  CD2', -0.412, (-42.003, 20.063, -39.966)), (' B 103  VAL  O  ', ' B 103  VAL HG13', -0.411, (-0.406, -2.328, -28.115)), (' B 511  PHE  HB3', ' B 530  THR HG22', -0.409, (-38.387, 27.989, -20.264)), (' B 279  THR  HB ', ' B 429  MET  CE ', -0.409, (-6.171, 27.263, -20.583)), (' A 376  ILE  HA ', ' A 376  ILE HD12', -0.408, (-7.311, 21.283, -69.723)), (' B 195  ILE  O  ', ' B 195  ILE HG23', -0.405, (-34.691, 21.725, -46.963)), (' A 462  LYS  HA ', ' A 462  LYS  HD3', -0.404, (-4.55, 9.007, -90.806)), (' B  19  CYS  HB2', ' B  23  PRO  HD2', -0.403, (-5.899, 0.634, -38.045))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
