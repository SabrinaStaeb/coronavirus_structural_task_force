# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 195 ', 'ILE', 0.03583966814691755, (-34.03599999999999, 28.661, -54.625)), ('A', ' 218 ', 'LYS', 0.008939827377370936, (-42.71299999999999, 25.063000000000002, -57.634)), ('A', ' 283 ', 'PRO', 0.0666951565304352, (-7.503999999999994, 13.785, -81.47800000000001)), ('A', ' 484 ', 'VAL', 0.00895868519359803, (-31.972, 37.764, -81.194)), ('B', '  11 ', 'GLN', 0.0470437901505444, (8.828999999999997, 3.2729999999999997, -42.212)), ('B', ' 103 ', 'VAL', 0.05892797547412444, (1.6929999999999992, -1.7879999999999985, -27.486000000000008))]
data['omega'] = []
data['rota'] = [('A', '  12 ', 'THR', 0.008159601566148922, (7.477000000000006, 47.071, -51.742)), ('A', '  35 ', 'ILE', 0.014753838436273526, (4.103000000000006, 57.222, -66.34)), ('A', '  46 ', 'ASN', 0.0693424535913546, (-1.6949999999999914, 55.301, -46.47600000000001)), ('A', '  51 ', 'ASN', 0.056501279598909736, (-2.5319999999999965, 65.544, -47.107000000000006)), ('A', '  65 ', 'LEU', 0.14316121584938657, (7.032000000000007, 64.17899999999997, -49.84000000000002)), ('A', '  76 ', 'LYS', 0.11107811584128338, (4.1880000000000015, 71.006, -50.84)), ('A', '  81 ', 'PHE', 0.2344418252766344, (10.989000000000003, 65.56799999999998, -52.882)), ('A', ' 156 ', 'GLU', 0.17924721679649783, (-46.606999999999985, 33.74699999999999, -65.24700000000001)), ('A', ' 162 ', 'GLU', 0.10862424209691221, (-42.229999999999976, 26.435, -69.161)), ('A', ' 173 ', 'ARG', 0.03233173623759464, (-30.648000000000003, 40.82000000000001, -71.494)), ('A', ' 209 ', 'VAL', 0.02205372729804367, (-39.49899999999999, 30.033, -72.49400000000001)), ('A', ' 215 ', 'THR', 0.15126794950704683, (-33.697, 21.908000000000005, -57.43000000000001)), ('A', ' 217 ', 'TYR', 0.09772035296894471, (-39.04900000000001, 24.115, -56.824)), ('A', ' 226 ', 'VAL', 0.14415393980044008, (-29.667, 37.153, -60.89)), ('A', ' 255 ', 'THR', 0.02678135120870647, (4.406999999999999, -3.3669999999999973, -63.48700000000001)), ('A', ' 259 ', 'SER', 0.12127833956120027, (-2.541999999999998, -6.152999999999992, -69.786)), ('A', ' 289 ', 'SER', 0.24901574283295938, (-9.718999999999992, 8.081, -71.42400000000002)), ('A', ' 344 ', 'ASP', 0.1615415648057816, (-23.188999999999997, 7.949999999999999, -58.794)), ('A', ' 432 ', 'ILE', 0.1643092913511881, (7.2200000000000015, 22.807, -79.27)), ('A', ' 502 ', 'ARG', 0.12320167949289185, (-35.70999999999999, 8.306999999999995, -97.463)), ('A', ' 530 ', 'THR', 0.025593925086294593, (-30.288999999999987, 17.800000000000008, -80.111)), ('A', ' 592 ', 'ILE', 0.008216708776478914, (-31.597, 18.883000000000006, -103.82900000000001)), ('B', '  11 ', 'GLN', 0.07359424441062568, (8.828999999999997, 3.2729999999999997, -42.212)), ('B', '  12 ', 'THR', 0.008958733464328227, (6.459999999999997, 0.4540000000000006, -43.398)), ('B', '  51 ', 'ASN', 0.05555342515319656, (-5.089, -15.107999999999995, -53.71500000000002)), ('B', '  68 ', 'MET', 0.1676618701618951, (4.875000000000001, -12.923999999999996, -55.37800000000001)), ('B', '  69 ', 'SER', 0.10419820768451493, (1.1999999999999984, -13.636999999999999, -54.262)), ('B', '  76 ', 'LYS', 0.06831918074580319, (0.35500000000000753, -21.994, -50.369)), ('B', '  96 ', 'THR', 0.05427395973749917, (14.596, -0.48299999999999876, -39.691)), ('B', ' 103 ', 'VAL', 0.040478658071103776, (1.6929999999999992, -1.7879999999999985, -27.486000000000008)), ('B', ' 124 ', 'ASN', 0.06460828565387201, (-5.8309999999999995, 12.148, -23.19)), ('B', ' 158 ', 'LEU', 0.26613027397914124, (-49.236, 18.623, -40.511)), ('B', ' 192 ', 'LYS', 0.011772576737583123, (-31.469999999999995, 13.643, -54.296)), ('B', ' 195 ', 'ILE', 0.006858346898389083, (-32.693999999999974, 21.256, -48.935)), ('B', ' 215 ', 'THR', 0.2900665888405765, (-33.261, 27.576, -44.497)), ('B', ' 219 ', 'LEU', 0.043126033250884675, (-41.18999999999998, 21.119, -47.67)), ('B', ' 228 ', 'THR', 0.011050718423587891, (-24.825, 14.803999999999997, -41.973)), ('B', ' 231 ', 'THR', 0.13641213511182232, (-14.977, 12.528999999999996, -43.936)), ('B', ' 257 ', 'ASN', 0.08200272312043302, (-0.7179999999999929, 54.138, -25.043)), ('B', ' 289 ', 'SER', 0.2451950481036691, (-13.736, 38.345, -25.643)), ('B', ' 301 ', 'SER', 0.1560688063144055, (1.1630000000000074, 45.522999999999996, -35.53600000000001)), ('B', ' 432 ', 'ILE', 0.14997603810240492, (-0.4490000000000003, 22.673, -13.661)), ('B', ' 484 ', 'VAL', 0.03299593338149289, (-37.716999999999985, 8.424, -25.709)), ('B', ' 486 ', 'SER', 0.14715958454569553, (-35.338, 13.073999999999998, -22.239))]
data['cbeta'] = []
data['probe'] = [(' B 279  THR  HB ', ' B 429  MET  HE2', -0.772, (-6.039, 27.651, -20.865)), (' A  13  SER  OG ', ' A  44  SER  OG ', -0.733, (3.437, 52.374, -48.723)), (' B  13  SER  OG ', ' B  44  SER  OG ', -0.723, (3.364, -3.906, -48.546)), (' B 460  LYS  NZ ', ' B 801  HOH  O  ', -0.699, (-7.27, 27.789, -10.746)), (' B  48  TYR  O  ', ' B 802  HOH  O  ', -0.662, (-4.184, -9.974, -44.777)), (' A 158  LEU HD12', ' A 162  GLU  HB3', -0.639, (-43.86, 27.582, -70.799)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.638, (-32.739, 34.097, -21.722)), (' B  12  THR HG21', ' B  26  CYS  HA ', -0.629, (5.564, -1.821, -40.874)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.623, (5.989, -1.234, -41.082)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.605, (-30.902, 20.977, -80.385)), (' B   8  CYS  SG ', ' B  99  GLY  O  ', -0.597, (8.88, 0.375, -32.078)), (' A 368  ALA  O  ', ' A 393  ALA  HA ', -0.594, (1.855, 14.085, -56.65)), (' A 445  PRO  HD2', ' A 448  ILE HD12', -0.593, (-17.508, 9.364, -89.54)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.581, (-12.583, 7.605, -52.512)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.579, (-30.195, 21.122, -80.129)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.568, (-25.4, 11.596, -80.285)), (' B  13  SER  HG ', ' B  44  SER  HG ', -0.555, (3.403, -3.101, -48.442)), (' A 326  PRO  HB2', ' A 329  LYS  HZ3', -0.552, (-9.517, -1.127, -56.456)), (' A 277  TYR  HA ', ' A 396  TYR  O  ', -0.55, (2.943, 16.137, -66.343)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.547, (-38.149, 28.11, -3.217)), (' B 278  SER  HB2', ' B 436  MET  HE2', -0.538, (-1.231, 32.842, -21.562)), (' B 504  PRO  HB3', ' B 507  ARG HH21', -0.534, (-47.288, 38.506, -13.193)), (' B 177  ASN  HB3', ' B 516  ASN HD21', -0.528, (-32.329, 17.053, -27.027)), (' B 277  TYR  HA ', ' B 396  TYR  O  ', -0.523, (-0.097, 30.01, -26.847)), (' B 195  ILE  O  ', ' B 195  ILE HG23', -0.522, (-34.53, 21.775, -47.316)), (' B  13  SER  O  ', ' B  44  SER  HA ', -0.509, (1.365, -2.509, -47.24)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.508, (2.928, 42.107, -29.121)), (' A 304  ILE  HA ', ' A 370  ILE  O  ', -0.504, (-2.963, 11.233, -59.66)), (' B 195  ILE  CG2', ' B 195  ILE  O  ', -0.504, (-34.104, 21.419, -47.573)), (' B 279  THR  HB ', ' B 429  MET  CE ', -0.503, (-6.026, 27.246, -20.633)), (' A  12  THR HG21', ' A  26  CYS  HA ', -0.495, (7.505, 48.682, -54.93)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.493, (-25.66, 19.473, -87.446)), (' A 512  ILE  HA ', ' A 531  GLN  O  ', -0.489, (-26.147, 19.888, -82.173)), (' A 293  ILE HG13', ' A 320  LYS  HB3', -0.487, (-10.887, 5.411, -67.6)), (' A 533  VAL HG11', ' A 560  ARG  HG3', -0.487, (-18.442, 22.858, -83.389)), (' A   7  LEU HD22', ' A 103  VAL HG22', -0.486, (7.227, 45.257, -65.667)), (' B 102  ASN  C  ', ' B 104  THR  H  ', -0.483, (1.878, -1.403, -25.164)), (' B  34  VAL  O  ', ' B  40  LYS  NZ ', -0.481, (-4.592, -11.297, -33.469)), (' B 124  ASN  OD1', ' B 381  ASN  ND2', -0.479, (-7.401, 14.769, -25.546)), (' B 120  TYR  CE2', ' B 409  ARG  HG2', -0.478, (-15.698, 11.308, -25.986)), (' A 333  ILE  HB ', ' A 358  CYS  SG ', -0.478, (-13.976, 16.592, -56.656)), (' B 103  VAL  CG1', ' B 103  VAL  O  ', -0.473, (0.158, -2.418, -28.527)), (' A  19  CYS  HB2', ' A  23  PRO  HD2', -0.472, (-3.456, 47.091, -59.92)), (' B 220  ASN  O  ', ' B 223  ASP  OD2', -0.471, (-41.263, 16.884, -49.451)), (' B 531  GLN  OE1', ' B 535  SER  OG ', -0.467, (-30.269, 27.19, -25.265)), (' A 467  LYS  NZ ', ' A 801  HOH  O  ', -0.465, (-13.814, 9.277, -98.611)), (' B 184  GLY  HA3', ' B 195  ILE HG22', -0.456, (-34.048, 19.03, -46.515)), (' B  14  LEU  HB2', ' B  25  LEU  O  ', -0.455, (3.019, -2.321, -41.209)), (' B 442  ARG HH11', ' B 464  HIS  CE1', -0.448, (-17.144, 46.253, -12.045)), (' B 303  ARG  NH1', ' B 353  GLU  O  ', -0.447, (-4.654, 38.287, -41.949)), (' B 512  ILE  O  ', ' B 546  PHE  HA ', -0.445, (-34.045, 26.048, -15.144)), (' B 167  TRP  CZ3', ' B 174  PRO  HD2', -0.443, (-34.211, 9.073, -36.766)), (' A 519  ASN  HB3', ' A 530  THR HG21', -0.442, (-31.379, 21.339, -79.886)), (' B 701  6SU  H3 ', ' B 701  6SU  O2 ', -0.442, (-6.509, 20.366, -41.508)), (' A  34  VAL  HA ', ' A  39  HIS  O  ', -0.44, (0.301, 55.149, -63.647)), (' B 390  ARG  HD3', ' B 701  6SU  H3 ', -0.438, (-6.237, 21.315, -42.345)), (' B 177  ASN  CB ', ' B 516  ASN  ND2', -0.437, (-32.252, 17.596, -27.155)), (' B  19  CYS  HB2', ' B  23  PRO  HD2', -0.435, (-5.806, 0.177, -38.145)), (' B  31  TYR  CE2', ' B  87  GLY  HA2', -0.433, (5.713, -11.682, -33.041)), (' A 157  VAL HG21', ' A 219  LEU  O  ', -0.433, (-44.425, 29.421, -60.456)), (' B 376  ILE  HA ', ' B 376  ILE HD12', -0.432, (-10.855, 25.324, -26.903)), (' A 120  TYR  CE2', ' A 409  ARG  HG2', -0.432, (-10.619, 34.994, -73.534)), (' B 154  VAL HG13', ' B 163  LEU HD22', -0.43, (-43.391, 16.691, -43.151)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.43, (9.772, -0.118, -32.884)), (' B  12  THR  OG1', ' B  26  CYS  HA ', -0.428, (6.068, -0.602, -40.253)), (' A 235  LEU HD21', ' A 382  TYR  CE2', -0.425, (-7.116, 32.251, -60.363)), (' B 511  PHE  HB3', ' B 530  THR HG22', -0.425, (-38.29, 27.698, -20.825)), (' A  31  TYR  CE2', ' A  87  GLY  HA2', -0.425, (10.724, 56.403, -64.209)), (' B 376  ILE HG12', ' B 425  VAL HG11', -0.423, (-7.505, 25.404, -24.497)), (' B 376  ILE HG22', ' B 400  GLY  HA3', -0.423, (-11.194, 27.376, -22.703)), (' A 278  SER  HB2', ' A 436  MET  HE2', -0.422, (3.122, 13.303, -71.609)), (' B 462  LYS  HA ', ' B 462  LYS  HD3', -0.421, (-14.592, 36.652, -5.115)), (' A 200  PHE  HA ', ' A 210  VAL  O  ', -0.42, (-35.099, 27.805, -69.726)), (' A  12  THR  CG2', ' A  26  CYS  HA ', -0.419, (7.85, 48.415, -54.643)), (' B 343  PHE  CZ ', ' B 345  LYS  HB2', -0.419, (-19.158, 42.338, -38.628)), (' A 376  ILE HG12', ' A 425  VAL HG11', -0.419, (-2.834, 20.857, -71.263)), (' A 308  ALA  O  ', ' A 359  THR  HA ', -0.418, (-13.123, 19.195, -63.169)), (' A  83  LEU  O  ', ' A  89  VAL  HA ', -0.418, (8.115, 57.809, -57.21)), (' B 115  THR  HA ', ' B 411  LEU  O  ', -0.416, (-20.301, 5.857, -25.691)), (' B   4  ALA  O  ', ' B  24  PHE  HB2', -0.415, (2.132, 4.766, -40.545)), (' B 177  ASN  CB ', ' B 516  ASN HD21', -0.415, (-32.39, 17.238, -26.61)), (' A 304  ILE HG12', ' A 370  ILE  HB ', -0.413, (-1.356, 9.472, -61.045)), (' A 531  GLN  HB2', ' A 531  GLN HE21', -0.413, (-26.83, 16.51, -78.543)), (' A 139  LYS  O  ', ' A 143  GLU  HG2', -0.413, (-14.643, 37.357, -63.048)), (' A 409  ARG  NH2', ' A 422  PHE  O  ', -0.413, (-7.669, 29.984, -72.765)), (' A 276  LYS  O  ', ' A 395  HIS  HA ', -0.413, (4.639, 15.16, -62.848)), (' B  92  LEU  HB3', ' B  93  TYR  CD2', -0.412, (9.379, -0.501, -46.152)), (' A 327  ILE HD11', ' A 345  LYS  O  ', -0.412, (-19.311, 2.432, -57.939)), (' B 333  ILE  HB ', ' B 358  CYS  SG ', -0.411, (-11.881, 31.026, -41.466)), (' B 373  PHE  CE1', ' B 387  VAL HG21', -0.41, (-7.861, 25.25, -32.221)), (' A 215  THR HG22', ' B 193  VAL HG21', -0.409, (-31.376, 21.086, -55.839)), (' A 275  GLN  O  ', ' A 395  HIS  ND1', -0.408, (7.059, 13.034, -63.772)), (' B 419  PRO  HA ', ' B 422  PHE  CE1', -0.407, (-14.06, 18.176, -18.6)), (' A 252  LEU  HB3', ' A 299  TYR  CD2', -0.405, (4.889, 4.999, -61.514)), (' A 551  GLU  HG3', ' A 577  SER  HB3', -0.405, (-23.504, 29.428, -94.885)), (' B  16  CYS  O  ', ' B  22  ARG  HA ', -0.404, (-5.688, 0.139, -40.816)), (' B 451  THR HG21', ' B 585  LEU HD23', -0.404, (-25.22, 27.717, -6.014)), (' A 121  ILE HG23', ' A 421  TYR  CE1', -0.403, (-0.687, 35.173, -78.978)), (' A 254  PRO  HA ', ' A 298  TYR  O  ', -0.402, (3.982, 0.538, -63.137)), (' A  19  CYS  CB ', ' A  23  PRO  HD2', -0.401, (-3.354, 46.631, -59.734)), (' B  51  ASN  ND2', ' B 830  HOH  O  ', -0.4, (-2.484, -11.673, -53.933))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
