# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 195 ', 'ILE', 0.03114847284319091, (-33.63100000000001, 29.132999999999996, -54.684999999999995)), ('A', ' 219 ', 'LEU', 0.040001253658452675, (-41.384, 28.825, -59.886)), ('A', ' 484 ', 'VAL', 0.041392126700234476, (-31.92200000000001, 38.18700000000001, -80.971))]
data['omega'] = []
data['rota'] = [('A', '  12 ', 'THR', 0.0, (8.513999999999989, 47.228, -52.307)), ('A', '  35 ', 'ILE', 0.06490536078143007, (4.610000000000001, 57.696, -66.69)), ('A', '  46 ', 'ASN', 0.03575376851520364, (-0.6340000000000066, 55.428, -46.785)), ('A', '  81 ', 'PHE', 0.14122749730800407, (11.478999999999989, 65.941, -53.101)), ('A', ' 156 ', 'GLU', 0.01858312949297122, (-45.887, 34.194, -65.225)), ('A', ' 158 ', 'LEU', 0.058531624783283435, (-47.265, 28.096000000000004, -67.486)), ('A', ' 162 ', 'GLU', 0.059259895180440975, (-41.845, 26.856, -69.48)), ('A', ' 163 ', 'LEU', 0.17482879357971545, (-42.21900000000001, 30.45, -68.125)), ('A', ' 173 ', 'ARG', 0.0019080916624438587, (-30.115000000000016, 41.65100000000001, -71.316)), ('A', ' 209 ', 'VAL', 0.026254437398165464, (-38.96600000000001, 30.35, -72.992)), ('A', ' 217 ', 'TYR', 0.08931610878924148, (-38.66900000000001, 24.511, -57.069)), ('A', ' 226 ', 'VAL', 0.038737525063326984, (-29.004, 37.679, -60.707)), ('A', ' 255 ', 'THR', 0.029874207033238672, (4.422999999999991, -2.9989999999999988, -63.663)), ('A', ' 259 ', 'SER', 0.17240744137398661, (-2.383000000000008, -5.45000000000001, -69.905)), ('A', ' 289 ', 'SER', 0.053780575906729376, (-9.276000000000002, 8.802, -71.471)), ('A', ' 339 ', 'ARG', 0.27363864752901623, (-25.02800000000001, 22.539000000000005, -59.395999999999994)), ('A', ' 344 ', 'ASP', 0.023405808532793945, (-23.00900000000001, 8.702000000000004, -58.721999999999994)), ('A', ' 483 ', 'ASP', 0.2723751065708006, (-33.571, 34.988, -82.265)), ('A', ' 485 ', 'SER', 0.0933632765272617, (-28.418000000000024, 37.159, -82.276)), ('A', ' 495 ', 'VAL', 0.18483031295885283, (-33.592, 19.706000000000003, -96.125)), ('A', ' 502 ', 'ARG', 0.016162117329464834, (-35.494, 8.698000000000008, -97.27399999999999)), ('A', ' 517 ', 'SER', 0.09309234356674599, (-31.92900000000001, 28.652000000000008, -81.526)), ('A', ' 530 ', 'THR', 0.012916183192676449, (-30.092000000000027, 18.205000000000005, -80.06)), ('A', ' 531 ', 'GLN', 0.05827236563110825, (-26.63300000000001, 19.442, -79.132)), ('A', ' 592 ', 'ILE', 0.00991400398043192, (-31.767000000000017, 19.075, -103.778)), ('B', '  20 ', 'ILE', 0.004384397291968176, (-11.055000000000007, 1.9739999999999984, -38.735)), ('B', '  68 ', 'MET', 0.01880147236416158, (4.977999999999996, -12.313999999999997, -55.187)), ('B', '  73 ', 'LYS', 0.213794739206387, (-1.828000000000002, -22.795999999999992, -45.31100000000001)), ('B', '  92 ', 'LEU', 0.06134119849014163, (9.071999999999996, -3.288999999999998, -46.61899999999999)), ('B', ' 103 ', 'VAL', 0.12870753241235772, (1.6339999999999981, -1.5280000000000022, -27.505999999999997)), ('B', ' 124 ', 'ASN', 0.05970981344776933, (-5.7730000000000015, 12.142, -23.160999999999998)), ('B', ' 158 ', 'LEU', 0.0045739627003717346, (-49.518, 18.534, -40.952)), ('B', ' 162 ', 'GLU', 0.17106118442686108, (-44.989000000000004, 20.622, -37.638)), ('B', ' 177 ', 'ASN', 0.21855688603852913, (-32.99900000000002, 17.652, -29.960999999999995)), ('B', ' 179 ', 'ASN', 0.00203768191112047, (-27.728, 18.429000000000002, -30.459)), ('B', ' 192 ', 'LYS', 0.0, (-31.278, 13.980999999999996, -54.231)), ('B', ' 195 ', 'ILE', 0.005688848614227028, (-32.66500000000001, 21.451000000000008, -49.017)), ('B', ' 199 ', 'THR', 0.07938017027446359, (-33.248000000000005, 20.204, -36.339)), ('B', ' 202 ', 'LYS', 0.284250741223883, (-41.39700000000001, 16.085, -30.175)), ('B', ' 209 ', 'VAL', 0.18679095163627002, (-42.73600000000001, 16.311, -34.711)), ('B', ' 219 ', 'LEU', 0.032409891365271296, (-41.143, 20.996000000000002, -47.584)), ('B', ' 220 ', 'ASN', 0.013423918074014838, (-43.252, 18.40800000000001, -49.34)), ('B', ' 247 ', 'VAL', 0.003150532575091347, (13.110999999999999, 36.114, -20.99)), ('B', ' 259 ', 'SER', 0.13439284110942606, (-6.851000000000004, 52.473000000000006, -23.036)), ('B', ' 345 ', 'LYS', 0.14645437592988533, (-19.81700000000001, 42.816, -41.315000000000005)), ('B', ' 347 ', 'LYS', 0.0, (-14.552000000000007, 41.526, -45.752)), ('B', ' 353 ', 'GLU', 0.01946773130059312, (-5.982000000000011, 40.543000000000006, -43.36399999999999)), ('B', ' 361 ', 'ASN', 0.0, (-12.607000000000006, 23.459, -39.733)), ('B', ' 486 ', 'SER', 0.1425073683410647, (-35.227, 13.023, -22.107)), ('B', ' 495 ', 'VAL', 0.17003945485445038, (-43.987, 25.271, -8.724)), ('B', ' 507 ', 'ARG', 0.26894504345976783, (-42.134, 37.001, -16.465))]
data['cbeta'] = [('A', '  81 ', 'PHE', ' ', 0.25186534023276935, (12.082000000000003, 64.747, -52.349999999999994)), ('A', ' 484 ', 'VAL', ' ', 0.250982352328119, (-31.73600000000002, 38.083, -79.411)), ('A', ' 592 ', 'ILE', ' ', 0.32532582052364695, (-32.82900000000003, 18.161, -103.016)), ('B', '  20 ', 'ILE', ' ', 0.2871199793481635, (-12.427000000000001, 2.3900000000000006, -38.08)), ('B', ' 483 ', 'ASP', ' ', 0.253589834481327, (-40.40900000000001, 10.954999999999998, -23.67))]
data['probe'] = [(' A 331  SER  HB2', ' A 353  GLU  HG3', -0.856, (-11.958, 8.021, -52.964)), (' B  12  THR HG22', ' B  14  LEU  H  ', -0.842, (4.047, -0.283, -43.373)), (' B  12  THR HG21', ' B  25  LEU  O  ', -0.803, (3.842, -1.422, -40.727)), (' A 146  LYS  HE2', ' A 227  LEU  HB3', -0.639, (-23.178, 36.53, -64.312)), (' A 163  LEU  HG ', ' A 211  TYR  HB3', -0.623, (-39.268, 29.393, -67.044)), (' A 163  LEU HD11', ' A 200  PHE  HE2', -0.591, (-37.298, 31.022, -67.263)), (' B  13  SER  HB2', ' B  92  LEU  HB2', -0.585, (6.665, -1.528, -47.744)), (' A 326  PRO  HG2', ' A 329  LYS  NZ ', -0.582, (-7.664, -0.439, -57.316)), (' B 279  THR  HB ', ' B 429  MET  HE3', -0.575, (-5.657, 26.91, -20.936)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.568, (-32.514, 34.14, -21.607)), (' B 279  THR  HB ', ' B 429  MET  CE ', -0.561, (-5.955, 27.482, -20.661)), (' A 326  PRO  HG2', ' A 329  LYS  HZ1', -0.553, (-7.589, -0.392, -57.564)), (' A 279  THR  HB ', ' A 429  MET  HE3', -0.545, (-0.204, 19.144, -74.125)), (' A 140  ALA  O  ', ' A 144  THR HG23', -0.543, (-14.65, 42.57, -62.562)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.532, (-25.381, 11.783, -80.282)), (' A 279  THR  HB ', ' A 429  MET  CE ', -0.532, (0.02, 18.906, -74.576)), (' A 445  PRO  HB3', ' A 468  SER  HB3', -0.528, (-17.784, 5.403, -91.861)), (' B 151  ILE HG12', ' B 226  VAL HG22', -0.521, (-31.306, 9.649, -44.083)), (' B 167  TRP  CD1', ' B 173  ARG  NH1', -0.521, (-40.103, 7.002, -36.243)), (' B 474 AMET  HE2', ' B 592  ILE  HA ', -0.52, (-42.327, 25.106, -2.615)), (' B 445  PRO  HB3', ' B 468  SER  HB3', -0.519, (-28.148, 39.899, -7.801)), (' B   7  LEU HD13', ' B 103  VAL HG22', -0.513, (2.471, -0.744, -30.977)), (' A   6  VAL  HA ', ' A 129  ARG  HD2', -0.502, (5.612, 39.759, -60.278)), (' A 297  LEU HD11', ' A 324  TYR  HB3', -0.501, (-7.975, -0.381, -66.277)), (' A 326  PRO  CG ', ' A 329  LYS  NZ ', -0.5, (-8.164, -0.522, -57.75)), (' B   8  CYS  SG ', ' B  99  GLY  O  ', -0.499, (9.509, 0.507, -31.051)), (' B 511  PHE  HB3', ' B 530  THR HG22', -0.492, (-38.018, 27.824, -20.882)), (' B 451  THR HG21', ' B 585  LEU HD23', -0.491, (-25.442, 27.248, -6.12)), (' A 280  LEU HD11', ' A 438  LEU  HG ', -0.488, (-1.984, 10.865, -77.204)), (' A 293  ILE HG13', ' A 320  LYS  HB3', -0.486, (-10.731, 5.856, -67.595)), (' A  28  LYS  O  ', ' A  32  ASP  OD2', -0.484, (10.804, 51.876, -64.137)), (' B  16  CYS  O  ', ' B  22  ARG  HA ', -0.484, (-5.437, -0.079, -40.926)), (' A 158  LEU HD11', ' A 164  HIS  CE1', -0.482, (-45.178, 31.241, -71.452)), (' A 158  LEU HD21', ' A 164  HIS  CE1', -0.472, (-46.722, 31.522, -71.026)), (' B 297  LEU HD11', ' B 324  TYR  HB3', -0.471, (-9.869, 47.704, -29.221)), (' A 451  THR HG21', ' A 585  LEU HD23', -0.471, (-15.073, 17.733, -93.9)), (' B 182  PHE  HB3', ' B 225  PHE  HB3', -0.47, (-32.823, 15.809, -41.216)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.469, (-38.717, 28.232, -2.812)), (' B 154  VAL HG13', ' B 163  LEU HD22', -0.467, (-43.27, 16.443, -43.356)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.467, (-25.534, 19.756, -87.299)), (' B 195  ILE  O  ', ' B 195  ILE HG23', -0.465, (-34.415, 21.86, -47.464)), (' B 320  LYS  HE3', ' B 323  LYS  NZ ', -0.464, (-17.211, 44.994, -25.697)), (' B 198  TYR  HA ', ' B 213  GLY  HA2', -0.464, (-33.558, 22.555, -39.921)), (' A  14  LEU  HB2', ' A  25  LEU  O  ', -0.461, (5.956, 49.86, -55.828)), (' A 333  ILE  HB ', ' A 358  CYS  HB2', -0.461, (-13.194, 16.0, -56.824)), (' B 333  ILE  HB ', ' B 358  CYS  HB2', -0.46, (-11.687, 32.296, -41.504)), (' B 185  TYR  CE2', ' B 194  GLN  HG2', -0.458, (-28.377, 17.42, -49.489)), (' A 311  HIS  HE2', ' A 339  ARG  NH2', -0.455, (-19.038, 21.951, -60.203)), (' B 442  ARG  HA ', ' B 464  HIS  HB3', -0.453, (-18.472, 42.267, -11.673)), (' A 503  ASN  HB3', ' A 506  TRP  CD1', -0.453, (-30.324, 7.973, -93.759)), (' A 442  ARG  HA ', ' A 464  HIS  HB3', -0.452, (-10.075, 4.179, -85.187)), (' B 512  ILE  O  ', ' B 546  PHE  HA ', -0.45, (-33.886, 26.259, -15.236)), (' B 293  ILE HG13', ' B 320  LYS  HB3', -0.449, (-14.017, 41.372, -29.435)), (' A  16  CYS  O  ', ' A  22  ARG  HA ', -0.448, (-3.104, 48.515, -57.668)), (' A 311  HIS  HE2', ' A 339  ARG HH21', -0.445, (-19.248, 21.578, -60.541)), (' B 154  VAL HG22', ' B 163  LEU HD13', -0.444, (-41.04, 16.46, -42.694)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.441, (-30.803, 21.459, -79.95)), (' A 462  LYS  HA ', ' A 462  LYS  HD3', -0.44, (-4.203, 9.042, -91.144)), (' B 109  ILE HD13', ' B 134  ALA  HB2', -0.439, (-5.922, 7.037, -28.684)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.437, (3.104, 42.022, -28.952)), (' B 158  LEU  CD1', ' B 164  HIS  ND1', -0.436, (-49.282, 14.333, -38.788)), (' B 280  LEU HD11', ' B 438  LEU  HG ', -0.432, (-8.696, 35.591, -17.843)), (' A 386  VAL HG13', ' A 390  ARG  HE ', -0.426, (-7.789, 26.29, -57.021)), (' B 303  ARG  NH1', ' B 353  GLU  O  ', -0.422, (-4.301, 38.504, -41.746)), (' B 503  ASN  HB3', ' B 506  TRP  CD1', -0.422, (-40.378, 37.353, -9.447)), (' A 158  LEU HD12', ' A 162  GLU  HB3', -0.421, (-43.808, 27.955, -70.575)), (' A  19  CYS  CB ', ' A  23  PRO  HD2', -0.419, (-2.724, 47.226, -60.366)), (' A 161  ARG  O  ', ' A 210  VAL HG13', -0.418, (-38.646, 24.705, -70.464)), (' A 337  ARG  NH1', ' B 336  ALA  O  ', -0.415, (-21.634, 26.814, -49.257)), (' A 163  LEU HD11', ' A 200  PHE  CE2', -0.412, (-37.19, 31.532, -67.241)), (' A 277  TYR  HA ', ' A 396  TYR  O  ', -0.412, (3.302, 16.571, -66.307)), (' B 474 BMET  CG ', ' B 590  LEU  HB2', -0.411, (-38.584, 27.889, -3.109)), (' A 409  ARG  NH2', ' A 422  PHE  O  ', -0.409, (-6.98, 30.771, -73.113)), (' B 152  ALA  HB2', ' B 167  TRP  CZ3', -0.407, (-35.982, 10.418, -38.958)), (' A   7  LEU HD13', ' A 103  VAL HG22', -0.407, (7.742, 46.663, -65.809)), (' B 278  SER  HB2', ' B 436  MET  HE2', -0.406, (-1.682, 32.813, -21.203)), (' A 376  ILE HG12', ' A 425  VAL HG11', -0.406, (-2.708, 21.485, -71.251)), (' A  12  THR HG21', ' A  26  CYS  HA ', -0.406, (9.068, 48.795, -55.845)), (' A 173  ARG  H  ', ' A 173  ARG  NH1', -0.406, (-30.117, 43.734, -73.32)), (' A 378  MET  O  ', ' A 407  ALA  HB2', -0.406, (-11.621, 26.538, -70.721)), (' A 127  THR HG23', ' A 130  LEU  H  ', -0.405, (4.947, 37.708, -65.908)), (' B  52  ALA  CB ', ' B  75  HIS  CG ', -0.404, (-5.857, -21.125, -52.44)), (' A 278  SER  HB2', ' A 436  MET  HE2', -0.404, (3.701, 14.005, -71.624)), (' B  19  CYS  CB ', ' B  23  PRO  HD2', -0.403, (-5.597, 0.918, -37.961)), (' B 249  ILE HD11', ' B 270  GLN  HG2', -0.402, (4.782, 42.663, -22.044)), (' A 367  THR HG22', ' A 392  ARG  HB3', -0.402, (1.713, 18.539, -52.697))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
