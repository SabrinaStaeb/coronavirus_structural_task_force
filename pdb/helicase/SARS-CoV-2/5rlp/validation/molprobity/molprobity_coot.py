# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 195 ', 'ILE', 0.02642941226310513, (-34.008999999999986, 28.831, -54.37)), ('A', ' 219 ', 'LEU', 0.019267682668607226, (-42.056999999999974, 28.504000000000005, -59.847)), ('A', ' 259 ', 'SER', 0.03820420114032952, (-2.7609999999999877, -5.655999999999992, -70.011)), ('A', ' 484 ', 'VAL', 0.039157268098851575, (-32.45199999999997, 37.725, -80.72))]
data['omega'] = []
data['rota'] = [('A', '   9 ', 'ASN', 0.289753732038179, (9.849000000000007, 40.72200000000001, -57.523999999999994)), ('A', '  12 ', 'THR', 0.0013599335943581536, (7.71700000000001, 47.315, -52.096)), ('A', '  35 ', 'ILE', 0.23836532983024147, (4.011000000000012, 57.572, -66.457)), ('A', '  44 ', 'SER', 0.0994359642152876, (1.3830000000000124, 52.317999999999984, -49.613)), ('A', '  46 ', 'ASN', 0.16081512737605072, (-1.3529999999999918, 55.480000000000004, -46.665000000000006)), ('A', '  65 ', 'LEU', 0.11898618793398391, (7.114000000000001, 64.332, -49.953)), ('A', '  81 ', 'PHE', 0.07845862207276741, (11.013000000000009, 66.017, -53.12899999999999)), ('A', ' 163 ', 'LEU', 0.21596748291293844, (-42.89499999999998, 30.421, -67.977)), ('A', ' 166 ', 'SER', 0.139343805792628, (-40.554, 40.436, -67.146)), ('A', ' 173 ', 'ARG', 0.0010143030561256395, (-30.917999999999978, 41.494, -71.515)), ('A', ' 179 ', 'ASN', 0.0008999014716484429, (-23.772999999999982, 29.074000000000005, -70.977)), ('A', ' 209 ', 'VAL', 0.14482075761146326, (-39.75199999999998, 30.536, -72.609)), ('A', ' 217 ', 'TYR', 0.05751223102984658, (-39.26999999999999, 24.373999999999995, -56.986000000000004)), ('A', ' 226 ', 'VAL', 0.03360568080097437, (-29.572999999999986, 37.14200000000001, -60.871)), ('A', ' 230 ', 'HIS', 0.2602232982012947, (-18.45199999999999, 34.445, -57.745)), ('A', ' 247 ', 'VAL', 0.0325648781833565, (16.659, 9.993, -66.304)), ('A', ' 255 ', 'THR', 0.0013599335943581536, (4.242000000000009, -3.308999999999987, -63.815)), ('A', ' 261 ', 'GLU', 0.2003215227899526, (-5.128999999999989, -3.3879999999999946, -74.202)), ('A', ' 329 ', 'LYS', 0.06358033319047934, (-10.594999999999992, 3.1630000000000074, -54.265)), ('A', ' 344 ', 'ASP', 0.13412627268611282, (-23.237999999999985, 8.43, -58.867000000000004)), ('A', ' 365 ', 'GLU', 0.2758648853189776, (-6.152999999999993, 20.762, -51.04599999999999)), ('A', ' 392 ', 'ARG', 0.06330668245425601, (1.066000000000007, 19.215999999999998, -55.31699999999999)), ('A', ' 432 ', 'ILE', 0.1193830882584628, (7.003000000000008, 23.102000000000007, -79.431)), ('A', ' 442 ', 'ARG', 0.05824700131325921, (-10.844999999999986, 4.531000000000006, -83.936)), ('A', ' 502 ', 'ARG', 0.04605300715323488, (-36.138999999999996, 8.625, -97.352)), ('A', ' 516 ', 'ASN', 0.0, (-29.383999999999986, 26.55999999999999, -79.575)), ('A', ' 517 ', 'SER', 0.11685083128629002, (-32.376, 28.269, -81.271)), ('A', ' 530 ', 'THR', 0.05907133945984207, (-30.561999999999976, 18.039, -79.973)), ('A', ' 531 ', 'GLN', 0.06611847246913313, (-27.03499999999999, 19.254000000000012, -79.123)), ('A', ' 592 ', 'ILE', 0.009955484711099416, (-32.39999999999998, 18.621000000000002, -103.65800000000002)), ('B', '   8 ', 'CYS', 0.07535661566460818, (7.371000000000002, 3.7620000000000022, -33.764)), ('B', '   9 ', 'ASN', 0.2829693568502122, (7.651000000000006, 5.987, -36.885)), ('B', '  12 ', 'THR', 0.0013599335943581536, (6.2030000000000065, 0.5050000000000008, -43.607)), ('B', '  20 ', 'ILE', 0.005684741113687955, (-11.407999999999992, 1.855000000000004, -38.66)), ('B', '  35 ', 'ILE', 0.15407155417875057, (-1.240999999999996, -11.260999999999996, -32.286)), ('B', '  68 ', 'MET', 0.29863088820917605, (4.584, -12.405999999999988, -55.336)), ('B', '  69 ', 'SER', 0.10467962612019331, (0.9980000000000047, -13.487999999999989, -54.33299999999999)), ('B', '  92 ', 'LEU', 0.11289860982309037, (8.684000000000003, -3.457999999999995, -46.858999999999995)), ('B', ' 124 ', 'ASN', 0.06883297139436231, (-5.868999999999996, 12.023, -23.207)), ('B', ' 144 ', 'THR', 0.13442288936486588, (-20.096, 6.052, -38.841)), ('B', ' 160 ', 'ASP', 0.02052840979160543, (-46.14299999999998, 24.972, -40.71)), ('B', ' 162 ', 'GLU', 0.07786550583494678, (-45.25799999999999, 20.801000000000002, -37.467)), ('B', ' 179 ', 'ASN', 0.23835311101634574, (-28.305999999999997, 18.739999999999995, -30.129)), ('B', ' 188 ', 'THR', 0.21693521923207668, (-35.39799999999998, 14.572, -57.786)), ('B', ' 191 ', 'SER', 0.0576355422164958, (-31.20599999999999, 11.611000000000008, -57.28)), ('B', ' 192 ', 'LYS', 0.0, (-31.662999999999972, 13.894, -54.123)), ('B', ' 194 ', 'GLN', 0.03801793013740098, (-30.184999999999995, 19.29200000000001, -50.448)), ('B', ' 195 ', 'ILE', 0.05297337671601413, (-33.02599999999999, 21.271, -48.823)), ('B', ' 199 ', 'THR', 0.07055763914758692, (-33.565, 20.49, -35.889)), ('B', ' 201 ', 'GLU', 0.27812381700302324, (-38.60099999999997, 18.339, -30.986)), ('B', ' 219 ', 'LEU', 0.021055697980271973, (-41.42799999999998, 21.027, -47.269000000000005)), ('B', ' 226 ', 'VAL', 0.029404970700852573, (-30.609999999999985, 12.365999999999996, -42.509)), ('B', ' 247 ', 'VAL', 0.2914199005063307, (12.656999999999998, 36.035, -21.125)), ('B', ' 256 ', 'LEU', 0.2498274816410866, (2.7620000000000067, 52.80799999999999, -25.640000000000004)), ('B', ' 261 ', 'GLU', 0.0645928613295519, (-10.768999999999991, 49.452, -20.529000000000003)), ('B', ' 347 ', 'LYS', 0.0, (-14.966999999999986, 41.431, -45.808)), ('B', ' 353 ', 'GLU', 0.10808666579319673, (-6.500999999999993, 40.575, -43.477)), ('B', ' 432 ', 'ILE', 0.11251116552644284, (-0.5699999999999958, 22.559999999999995, -13.788000000000002)), ('B', ' 458 ', 'ASP', 0.12022411602668247, (-11.360999999999995, 27.202999999999996, -5.3229999999999995)), ('B', ' 508 ', 'LYS', 0.25279578690904964, (-39.42199999999998, 38.463999999999984, -18.014))]
data['cbeta'] = [('A', '  81 ', 'PHE', ' ', 0.25919937283286965, (11.655000000000008, 64.843, -52.386)), ('A', ' 183 ', 'THR', ' ', 0.257262800261503, (-27.995999999999988, 32.478, -58.376)), ('A', ' 484 ', 'VAL', ' ', 0.2567056300666527, (-32.34499999999997, 37.64, -79.151)), ('A', ' 592 ', 'ILE', ' ', 0.3095898868996142, (-33.21699999999997, 17.826, -102.541)), ('B', '  20 ', 'ILE', ' ', 0.28952548566073, (-12.762, 2.2360000000000007, -37.94))]
data['probe'] = [(' A 326  PRO  HB2', ' A 329  LYS  HZ2', -0.88, (-9.65, -1.027, -56.924)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.757, (-30.947, 21.048, -80.293)), (' A 326  PRO  HB2', ' A 329  LYS  NZ ', -0.748, (-9.227, -0.559, -56.777)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.726, (-30.445, 21.187, -80.287)), (' A 158  LEU HD12', ' A 162  GLU  HB3', -0.695, (-44.646, 28.166, -71.088)), (' A 445  PRO  HD2', ' A 448  ILE HD12', -0.682, (-17.579, 9.817, -89.857)), (' B 279  THR  HB ', ' B 429  MET  HE2', -0.657, (-5.568, 27.567, -20.846)), (' A 279  THR  HB ', ' A 429  MET  HE2', -0.642, (-0.366, 18.498, -74.667)), (' B 445  PRO  HD2', ' B 448  ILE HD12', -0.637, (-26.866, 36.155, -10.469)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.62, (-13.007, 7.719, -53.264)), (' A 534  ASP  OD2', ' A 801  HOH  O  ', -0.606, (-20.943, 25.226, -80.663)), (' A 486  SER  HB3', ' A 517  SER  OG ', -0.598, (-30.604, 30.953, -81.54)), (' B 533  VAL HG11', ' B 560  ARG  HG3', -0.596, (-26.41, 22.855, -17.594)), (' A 533  VAL HG11', ' A 560  ARG  HG3', -0.584, (-18.491, 23.02, -83.342)), (' B 228  THR HG22', ' B 230  HIS  CE1', -0.583, (-22.582, 16.152, -43.965)), (' A 326  PRO  HD2', ' A 329  LYS  HZ1', -0.58, (-8.852, 0.515, -58.547)), (' A 519  ASN  HB3', ' A 530  THR HG21', -0.579, (-31.686, 21.424, -79.794)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.579, (-32.961, 34.244, -21.406)), (' B  13  SER  O  ', ' B  44  SER  HA ', -0.574, (1.494, -2.326, -47.22)), (' A 146  LYS  HE3', ' A 227  LEU  HB3', -0.561, (-24.1, 35.751, -64.059)), (' A 297  LEU HD11', ' A 324  TYR  HB3', -0.558, (-8.247, -0.678, -66.662)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.551, (-25.573, 11.584, -80.216)), (' B 531  GLN  NE2', ' B 535  SER  OG ', -0.55, (-30.383, 27.033, -25.691)), (' A 140  ALA  O  ', ' A 144  THR HG23', -0.543, (-14.737, 42.18, -62.52)), (' B 442  ARG HH11', ' B 464  HIS  CE1', -0.543, (-16.645, 46.479, -12.229)), (' B 157  VAL HG23', ' B 221  VAL HG23', -0.539, (-46.659, 17.064, -46.936)), (' B  12  THR HG21', ' B  26  CYS  HA ', -0.536, (5.703, -1.453, -41.034)), (' B  39  HIS  NE2', ' B 111  THR HG22', -0.536, (-9.465, -3.649, -32.287)), (' A 352  LEU HD11', ' B 234  PRO  HD3', -0.534, (-7.78, 11.975, -44.811)), (' B  13  SER  HB3', ' B  92  LEU  HB2', -0.534, (6.183, -1.987, -48.075)), (' A 244  GLU  HB2', ' A 276  LYS  HB2', -0.532, (10.117, 17.841, -63.604)), (' A 156  GLU  HG2', ' A 164  HIS  HB2', -0.53, (-46.418, 34.017, -68.439)), (' B 297  LEU HD11', ' B 324  TYR  HB3', -0.527, (-10.041, 47.782, -29.364)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.522, (-38.492, 28.024, -2.795)), (' A 139  LYS  O  ', ' A 143  GLU  HG2', -0.519, (-14.926, 37.51, -62.77)), (' B  68  MET  HA ', ' B  68  MET  HE2', -0.516, (5.777, -11.609, -54.693)), (' B  49  VAL HG23', ' B  58  THR HG22', -0.516, (-9.114, -12.312, -47.504)), (' A 163  LEU  HG ', ' A 211  TYR  HB3', -0.512, (-39.317, 29.026, -66.853)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.508, (2.779, 42.056, -29.14)), (' A  39  HIS  NE2', ' A 111  THR HG22', -0.506, (-5.299, 51.374, -66.705)), (' B 244  GLU  HB2', ' B 276  LYS  HB2', -0.504, (7.206, 28.419, -27.314)), (' A 151  ILE HG12', ' A 226  VAL HG23', -0.503, (-31.306, 40.561, -60.826)), (' A  49  VAL HG23', ' A  58  THR HG22', -0.491, (-5.919, 61.919, -53.952)), (' A 214  THR  HB ', ' A 339  ARG  O  ', -0.49, (-28.434, 22.032, -60.751)), (' A 326  PRO  CB ', ' A 329  LYS  NZ ', -0.488, (-9.717, -0.583, -57.542)), (' B 154  VAL HG22', ' B 163  LEU HD13', -0.476, (-41.259, 16.316, -42.774)), (' B 511  PHE  HB3', ' B 530  THR HG22', -0.474, (-38.375, 28.1, -20.314)), (' A 425  VAL HG12', ' A 429  MET  HE3', -0.473, (-1.64, 21.092, -73.462)), (' A 409  ARG  NH2', ' A 422  PHE  O  ', -0.472, (-7.394, 30.688, -73.093)), (' B 249  ILE HD11', ' B 270  GLN  HG2', -0.47, (4.399, 42.569, -22.34)), (' B 442  ARG  NH1', ' B 464  HIS  CE1', -0.465, (-16.92, 46.752, -12.348)), (' B 332  ARG  HB3', ' B 877  HOH  O  ', -0.459, (-17.49, 38.266, -42.248)), (' B 425  VAL HG12', ' B 429  MET  HE3', -0.455, (-6.88, 25.46, -22.05)), (' A 320  LYS  HE3', ' A 324  TYR  HE1', -0.453, (-11.761, 1.771, -71.251)), (' B  65  LEU HD23', ' B  81  PHE  CE2', -0.453, (8.063, -13.928, -49.522)), (' A 249  ILE HD11', ' A 270  GLN  HG2', -0.452, (8.804, 4.056, -67.527)), (' B 181  VAL HG22', ' B 199  THR HG23', -0.451, (-29.765, 21.149, -35.445)), (' B   8  CYS  SG ', ' B  99  GLY  O  ', -0.449, (8.915, 0.803, -31.459)), (' A 326  PRO  CD ', ' A 329  LYS  HZ1', -0.448, (-9.347, 0.08, -58.476)), (' A 304  ILE HG12', ' A 370  ILE  HB ', -0.446, (-1.422, 9.585, -61.338)), (' B 533  VAL  CG1', ' B 560  ARG  HG3', -0.442, (-26.211, 22.873, -17.843)), (' A 551  GLU  HG2', ' A 935  HOH  O  ', -0.441, (-24.698, 31.749, -94.994)), (' B 304  ILE HG12', ' B 370  ILE  HB ', -0.435, (-2.458, 37.646, -32.047)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.434, (9.404, 0.001, -32.84)), (' A   7  LEU HD13', ' A 103  VAL HG22', -0.434, (7.452, 46.339, -65.547)), (' B 371  VAL HG23', ' B 393  ALA  HB2', -0.434, (-0.739, 31.369, -34.768)), (' A   6  VAL  HA ', ' A 129  ARG  HD2', -0.431, (4.698, 40.023, -59.829)), (' B 376  ILE  HA ', ' B 376  ILE HD12', -0.429, (-11.091, 25.364, -26.785)), (' A 280  LEU HD11', ' A 438  LEU  HG ', -0.429, (-2.22, 10.635, -77.198)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.428, (-25.851, 19.439, -87.197)), (' B 320  LYS  HE3', ' B 324  TYR  HE1', -0.428, (-15.62, 45.34, -26.416)), (' A 177  ASN  ND2', ' A 179  ASN  ND2', -0.425, (-24.628, 30.73, -74.862)), (' A 533  VAL  CG1', ' A 560  ARG  HG3', -0.424, (-18.815, 23.076, -82.835)), (' A 202  LYS  HA ', ' A 209  VAL HG22', -0.423, (-37.574, 31.393, -74.432)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.422, (5.956, -1.444, -41.034)), (' A 319  GLU  HA ', ' A 319  GLU  OE2', -0.419, (-18.391, 5.109, -66.379)), (' A 371  VAL HG23', ' A 393  ALA  HB2', -0.418, (-0.802, 15.672, -58.92)), (' B 445  PRO  HB3', ' B 468  SER  HB3', -0.418, (-27.844, 39.59, -7.413)), (' B 102  ASN  C  ', ' B 104  THR  H  ', -0.415, (1.403, -1.9, -25.415)), (' A 519  ASN  CB ', ' A 530  THR HG23', -0.415, (-30.3, 21.861, -80.398)), (' B 151  ILE HG12', ' B 226  VAL HG23', -0.414, (-31.541, 9.25, -43.861)), (' B 512  ILE  O  ', ' B 546  PHE  HA ', -0.41, (-34.133, 25.917, -15.333)), (' B 146  LYS  NZ ', ' B 229  SER  HA ', -0.408, (-22.109, 13.815, -39.67)), (' B 200  PHE  CE1', ' B 211  TYR  HB3', -0.407, (-38.885, 19.07, -38.38)), (' B 154  VAL HG13', ' B 163  LEU HD22', -0.406, (-43.945, 16.297, -43.19)), (' A 462  LYS  HA ', ' A 462  LYS  HD3', -0.405, (-4.927, 8.779, -91.152)), (' A   9  ASN  ND2', ' A 129  ARG  NH2', -0.405, (8.779, 36.741, -58.834)), (' A  60  VAL HG22', ' A  84  CYS  SG ', -0.404, (4.441, 59.482, -58.562)), (' B 167  TRP  CD1', ' B 173  ARG  NH1', -0.403, (-40.567, 7.343, -36.342)), (' B 386  VAL  O  ', ' B 390  ARG  HG2', -0.403, (-5.557, 22.915, -39.008)), (' B 451  THR HG21', ' B 585  LEU HD23', -0.401, (-25.67, 27.448, -5.883)), (' B 195  ILE  O  ', ' B 195  ILE HG23', -0.4, (-34.695, 21.561, -46.986)), (' B  39  HIS  CD2', ' B 111  THR HG22', -0.4, (-9.109, -4.597, -32.58))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
