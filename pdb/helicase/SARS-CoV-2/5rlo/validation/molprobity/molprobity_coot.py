# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '   6 ', 'VAL', 0.05626561702815731, (4.344999999999998, 41.172, -59.362)), ('A', ' 484 ', 'VAL', 0.007839152153929493, (-32.016999999999996, 37.575, -80.97)), ('B', ' 103 ', 'VAL', 0.03353646224485381, (1.8210000000000002, -1.6229999999999993, -27.237))]
data['omega'] = []
data['rota'] = [('A', '  12 ', 'THR', 0.0013599335943581536, (7.457000000000008, 46.84499999999997, -51.657)), ('A', '  20 ', 'ILE', 0.23684230882444, (-8.76999999999999, 46.128, -59.974)), ('A', '  27 ', 'CYS', 0.03438294023892053, (9.607000000000006, 51.46599999999999, -56.78799999999999)), ('A', '  35 ', 'ILE', 0.2573029077250629, (4.000000000000009, 57.131, -66.076)), ('A', '  46 ', 'ASN', 0.10460487506919779, (-1.680999999999993, 55.19999999999999, -46.248)), ('A', '  51 ', 'ASN', 0.07816915547517282, (-2.4099999999999904, 65.26499999999997, -46.829)), ('A', '  65 ', 'LEU', 0.2966505598441627, (7.06200000000001, 63.841, -49.807)), ('A', '  69 ', 'SER', 0.026687767520296456, (3.6419999999999995, 63.278, -45.247)), ('A', '  76 ', 'LYS', 0.2612344533837927, (4.006000000000003, 71.029, -50.68999999999999)), ('A', '  81 ', 'PHE', 0.014225339009657067, (10.948000000000018, 65.665, -52.85)), ('A', '  86 ', 'ASN', 0.04819936095688561, (14.546000000000008, 59.088999999999984, -61.603)), ('A', ' 136 ', 'GLU', 0.07928014972843436, (-7.1419999999999995, 36.97999999999999, -61.824999999999996)), ('A', ' 156 ', 'GLU', 0.07633632980173431, (-46.624999999999986, 33.457999999999984, -64.636)), ('A', ' 158 ', 'LEU', 0.028026697213298684, (-47.317, 27.566999999999993, -67.144)), ('A', ' 162 ', 'GLU', 0.1475349104275579, (-42.09300000000001, 26.23699999999999, -68.87)), ('A', ' 173 ', 'ARG', 0.05069798009024215, (-30.79099999999999, 40.886, -71.43)), ('A', ' 201 ', 'GLU', 0.06887746528913004, (-33.96600000000001, 27.83899999999999, -73.048)), ('A', ' 209 ', 'VAL', 0.008362346530120725, (-39.379999999999995, 30.06299999999999, -72.235)), ('A', ' 217 ', 'TYR', 0.12232865835499908, (-39.235, 24.046, -56.812)), ('A', ' 231 ', 'THR', 0.15205678681015355, (-15.489, 36.053, -55.545)), ('A', ' 247 ', 'VAL', 0.009846712319338211, (16.832, 9.676000000000004, -65.524)), ('A', ' 255 ', 'THR', 0.006029805704407146, (3.8539999999999965, -3.3629999999999995, -62.914)), ('A', ' 344 ', 'ASP', 0.10076274346896119, (-23.32899999999999, 8.058999999999992, -58.491)), ('A', ' 365 ', 'GLU', 0.24898613371742476, (-6.343999999999998, 20.578999999999994, -50.515)), ('A', ' 495 ', 'VAL', 0.13571017514638267, (-33.761999999999986, 19.229, -95.968)), ('A', ' 502 ', 'ARG', 0.1679435692312603, (-35.704, 8.243000000000002, -97.215)), ('A', ' 516 ', 'ASN', 0.052409981316899966, (-29.143, 26.433, -79.351)), ('A', ' 530 ', 'THR', 0.0258387386566028, (-30.343, 17.762999999999995, -79.803)), ('A', ' 531 ', 'GLN', 0.05428993866223366, (-26.798000000000002, 18.881, -78.881)), ('A', ' 592 ', 'ILE', 0.0437427026026316, (-32.138999999999996, 18.285999999999987, -103.476)), ('B', '   8 ', 'CYS', 0.07917667258775218, (7.5139999999999985, 3.5739999999999963, -33.892)), ('B', '  11 ', 'GLN', 0.23676328984364794, (8.754000000000001, 3.048999999999996, -42.223)), ('B', '  12 ', 'THR', 0.0013599335943581536, (6.321, 0.35800000000000054, -43.489)), ('B', '  27 ', 'CYS', 0.036538665527659914, (6.806000000000004, -5.146000000000001, -39.03)), ('B', '  46 ', 'ASN', 0.20967624735724585, (-2.080999999999996, -5.906999999999998, -51.948)), ('B', '  51 ', 'ASN', 0.07037917413393842, (-5.241000000000002, -15.158000000000001, -53.541999999999994)), ('B', '  68 ', 'MET', 0.012058077959888912, (4.752999999999996, -12.971000000000004, -55.186)), ('B', '  69 ', 'SER', 0.0, (1.1190000000000007, -13.771000000000003, -54.15)), ('B', '  92 ', 'LEU', 0.19153671503236036, (8.895999999999999, -3.3370000000000015, -46.732)), ('B', ' 158 ', 'LEU', 0.2906720782130348, (-49.56199999999998, 18.48699999999999, -40.246)), ('B', ' 164 ', 'HIS', 0.17104879406084003, (-45.63400000000001, 13.704999999999997, -39.084)), ('B', ' 166 ', 'SER', 0.07465688626612914, (-42.13, 7.988999999999994, -40.899)), ('B', ' 188 ', 'THR', 0.02469903268975588, (-35.349, 13.693, -58.048)), ('B', ' 191 ', 'SER', 0.05841778104243784, (-30.914, 11.222, -57.340999999999994)), ('B', ' 192 ', 'LYS', 0.0, (-31.43, 13.481999999999992, -54.182)), ('B', ' 193 ', 'VAL', 0.2657065625293256, (-31.250999999999994, 17.299999999999994, -53.76999999999999)), ('B', ' 195 ', 'ILE', 0.024402550663056737, (-32.988, 21.025, -49.046)), ('B', ' 209 ', 'VAL', 0.14274685040906515, (-42.76300000000001, 16.331999999999997, -34.557)), ('B', ' 219 ', 'LEU', 0.06319751292435923, (-41.426, 20.937999999999995, -47.519999999999996)), ('B', ' 231 ', 'THR', 0.04011999114019268, (-14.935000000000002, 12.780999999999995, -43.84199999999999)), ('B', ' 289 ', 'SER', 0.16355630780797545, (-13.638, 38.22299999999999, -25.325999999999997)), ('B', ' 344 ', 'ASP', 0.005058990467582658, (-21.601999999999997, 39.48, -42.193)), ('B', ' 347 ', 'LYS', 0.0, (-14.794, 41.29599999999999, -45.586)), ('B', ' 353 ', 'GLU', 0.1073752734599583, (-6.227999999999994, 40.37499999999999, -43.410999999999994)), ('B', ' 365 ', 'GLU', 0.13133570872622685, (-3.129999999999999, 27.083, -44.213)), ('B', ' 495 ', 'VAL', 0.12855170024518955, (-44.06499999999998, 25.141, -8.756)), ('B', ' 507 ', 'ARG', 0.18961679690981967, (-42.08500000000001, 36.91999999999999, -16.502)), ('B', ' 516 ', 'ASN', 0.015087279112321626, (-34.918, 19.551999999999992, -24.034)), ('B', ' 592 ', 'ILE', 0.07746108077171722, (-42.909, 24.755999999999993, -1.026))]
data['cbeta'] = [('A', ' 484 ', 'VAL', ' ', 0.25073825330790894, (-31.81799999999999, 37.52099999999999, -79.409)), ('A', ' 530 ', 'THR', ' ', 0.25222765800008157, (-31.432999999999993, 18.841, -79.863)), ('A', ' 592 ', 'ILE', ' ', 0.3325817339625879, (-33.21599999999999, 17.33899999999999, -102.842))]
data['probe'] = [(' A 326  PRO  HG2', ' A 329  LYS  NZ ', -0.825, (-7.619, -0.887, -57.245)), (' B  13  SER  HB2', ' B  92  LEU  HB2', -0.781, (6.862, -2.14, -48.029)), (' A 158  LEU HD21', ' A 164  HIS  ND1', -0.756, (-45.767, 30.812, -70.173)), (' B  12  THR HG21', ' B  26  CYS  HA ', -0.726, (5.434, -1.708, -40.917)), (' B 103  VAL  O  ', ' B 103  VAL HG12', -0.707, (-0.123, -1.83, -28.83)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.695, (-30.709, 20.788, -80.144)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.689, (-30.175, 21.289, -79.433)), (' A 158  LEU HD12', ' A 162  GLU  HB3', -0.65, (-44.56, 27.049, -70.851)), (' B 279  THR  HB ', ' B 429  MET  HE2', -0.633, (-5.824, 27.833, -20.691)), (' A 352  LEU HD11', ' B 234  PRO  HD3', -0.616, (-7.698, 12.297, -44.192)), (' A  12  THR HG21', ' A  26  CYS  HA ', -0.612, (7.772, 48.789, -54.891)), (' A 445  PRO  HD2', ' A 448  ILE HD12', -0.602, (-17.108, 8.753, -89.232)), (' B 445  PRO  HD2', ' B 448  ILE HD12', -0.6, (-26.281, 35.564, -10.286)), (' A 367  THR HG22', ' A 392  ARG  HB3', -0.59, (1.003, 17.395, -52.141)), (' B 228  THR HG22', ' B 230  HIS  CE1', -0.588, (-22.272, 16.527, -44.448)), (' A 297  LEU HD11', ' A 324  TYR  HB3', -0.578, (-7.775, -1.013, -65.987)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.575, (5.682, -1.274, -41.004)), (' A 279  THR  HB ', ' A 429  MET  HE2', -0.57, (-0.183, 18.091, -74.3)), (' B 151  ILE HG12', ' B 226  VAL HG22', -0.557, (-31.44, 9.34, -44.392)), (' A  28  LYS  O  ', ' A  32  ASP  OD2', -0.557, (9.822, 51.431, -63.747)), (' B 297  LEU HD11', ' B 324  TYR  HB3', -0.541, (-9.861, 47.46, -29.532)), (' B  27  CYS  SG ', ' B 877  HOH  O  ', -0.533, (8.407, -5.783, -41.843)), (' B 376  ILE HG12', ' B 425  VAL HG11', -0.532, (-6.878, 25.171, -24.238)), (' B 280  LEU  HB2', ' B 436  MET  HE3', -0.531, (-4.614, 33.844, -20.875)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.527, (-32.411, 34.049, -21.798)), (' B  49  VAL HG23', ' B  58  THR HG22', -0.526, (-8.976, -12.192, -47.197)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.522, (-12.978, 7.608, -53.017)), (' A   6  VAL HG23', ' A   7  LEU HD12', -0.52, (3.442, 42.815, -61.72)), (' A 151  ILE HG12', ' A 226  VAL HG22', -0.518, (-30.864, 40.295, -60.726)), (' A 132  LEU  O  ', ' A 136  GLU  HG3', -0.506, (-4.365, 36.448, -61.666)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.503, (-25.621, 11.478, -79.826)), (' A 289  SER  HB2', ' A 955  HOH  O  ', -0.501, (-12.45, 9.637, -71.771)), (' A 158  LEU HD21', ' A 164  HIS  CE1', -0.501, (-46.008, 31.051, -70.701)), (' A 376  ILE HG12', ' A 425  VAL HG11', -0.5, (-2.753, 20.537, -71.07)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.499, (10.1, -0.104, -33.065)), (' B 154  VAL HG13', ' B 163  LEU HD22', -0.493, (-43.571, 16.455, -43.508)), (' B  16  CYS  O  ', ' B  22  ARG  HA ', -0.493, (-5.821, -0.297, -40.836)), (' A 519  ASN  HB3', ' A 530  THR HG21', -0.489, (-31.448, 21.164, -79.645)), (' B 103  VAL  CG1', ' B 103  VAL  O  ', -0.487, (0.347, -1.843, -28.56)), (' B 196  GLY  HA3', ' B 215  THR HG21', -0.483, (-31.911, 23.94, -46.039)), (' A 280  LEU  HB2', ' A 436  MET  HE3', -0.482, (0.568, 12.39, -72.918)), (' B   4  ALA  O  ', ' B  24  PHE  HB2', -0.48, (2.391, 4.447, -40.746)), (' A 480  ILE HG21', ' A 550  THR HG22', -0.467, (-27.217, 32.324, -90.175)), (' B   8  CYS  O  ', ' B   9  ASN  HB2', -0.462, (9.243, 5.747, -35.197)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.458, (-25.811, 19.503, -86.688)), (' B 511  PHE  HB3', ' B 530  THR HG22', -0.458, (-38.111, 27.919, -20.339)), (' B 158  LEU  CD1', ' B 164  HIS  ND1', -0.457, (-49.671, 14.483, -38.889)), (' A  19  CYS  CB ', ' A  23  PRO  HD2', -0.456, (-3.404, 46.738, -59.974)), (' A 163  LEU  HG ', ' A 211  TYR  CD2', -0.455, (-40.601, 28.301, -65.942)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.455, (-38.784, 28.202, -2.63)), (' A  16  CYS  O  ', ' A  22  ARG  HA ', -0.453, (-3.785, 47.62, -57.163)), (' A 280  LEU HD11', ' A 438  LEU  HG ', -0.452, (-2.428, 10.253, -76.598)), (' A  13  SER  HG ', ' A  44  SER  HG ', -0.451, (3.623, 52.072, -48.16)), (' B 185  TYR  CE2', ' B 194  GLN  HG2', -0.448, (-28.505, 16.351, -49.559)), (' A  63  LEU  HB2', ' A  83  LEU HD12', -0.447, (2.592, 61.997, -54.938)), (' A 332  ARG  NH2', ' A 342  CYS  SG ', -0.446, (-20.119, 15.18, -61.457)), (' A  19  CYS  HB2', ' A  23  PRO  HD2', -0.445, (-3.47, 47.16, -59.578)), (' B  19  CYS  CB ', ' B  23  PRO  HD2', -0.444, (-6.132, 0.517, -38.002)), (' B 303  ARG  NH1', ' B 353  GLU  O  ', -0.444, (-4.148, 38.203, -42.096)), (' B 158  LEU HD13', ' B 164  HIS  ND1', -0.443, (-49.17, 14.628, -38.882)), (' B 228  THR HG22', ' B 230  HIS  NE2', -0.438, (-22.6, 16.405, -43.726)), (' B 512  ILE  O  ', ' B 546  PHE  HA ', -0.434, (-33.736, 25.823, -15.532)), (' A 440  THR HG22', ' A 462  LYS  HB2', -0.434, (-3.66, 5.667, -86.766)), (' B  46  ASN  HB3', ' B  70  TYR  HE1', -0.433, (-1.089, -8.519, -51.918)), (' A 326  PRO  CG ', ' A 329  LYS  NZ ', -0.433, (-8.361, -1.028, -57.297)), (' A 140  ALA  HA ', ' A 232  VAL HG21', -0.431, (-12.882, 38.085, -60.841)), (' A  12  THR  CG2', ' A  26  CYS  HA ', -0.426, (8.005, 48.013, -54.962)), (' B 195  ILE  O  ', ' B 195  ILE HG23', -0.426, (-34.306, 21.605, -47.244)), (' B 504  PRO  HA ', ' B 507  ARG  HD2', -0.423, (-44.869, 38.172, -14.041)), (' A 531  GLN  HA ', ' A 531  GLN HE21', -0.423, (-26.708, 18.683, -76.871)), (' B 386  VAL  O  ', ' B 390  ARG  HG2', -0.422, (-5.39, 22.901, -38.963)), (' B 284  PRO  HD3', ' B 457  TYR  OH ', -0.421, (-16.857, 29.631, -14.51)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.42, (3.141, 41.921, -29.018)), (' B 480  ILE HG21', ' B 550  THR HG22', -0.419, (-36.026, 12.731, -13.722)), (' A 263  SER  HA ', ' A 266  VAL HG13', -0.419, (1.798, -1.239, -72.541)), (' B  19  CYS  HB2', ' B  23  PRO  HD2', -0.417, (-5.971, 0.205, -38.265)), (' A 277  TYR  HA ', ' A 396  TYR  O  ', -0.412, (2.918, 16.087, -65.77)), (' B 551  GLU  HG2', ' B 577  SER  HB3', -0.41, (-32.947, 15.299, -7.884)), (' A 326  PRO  HG2', ' A 329  LYS  HZ3', -0.409, (-8.406, -0.679, -56.731)), (' A 202  LYS  HA ', ' A 209  VAL HG23', -0.406, (-36.821, 30.745, -74.136)), (' A 451  THR HG21', ' A 585  LEU HD23', -0.403, (-15.116, 17.184, -93.507)), (' B 451  THR HG21', ' B 585  LEU HD23', -0.403, (-25.417, 27.462, -6.11)), (' B  92  LEU  HB3', ' B  93  TYR  CD2', -0.401, (8.911, -0.349, -46.325)), (' A 146  LYS  HE2', ' A 227  LEU  HB3', -0.401, (-23.646, 36.093, -63.896)), (' A  49  VAL HG23', ' A  58  THR HG22', -0.401, (-5.833, 61.764, -53.096))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
