# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 195 ', 'ILE', 0.005236555998234215, (-34.155, 28.891999999999992, -54.027)), ('A', ' 484 ', 'VAL', 0.009407299198974732, (-32.537, 37.98599999999998, -80.301))]
data['omega'] = []
data['rota'] = [('A', '  12 ', 'THR', 0.018066072138948966, (7.6389999999999985, 47.41599999999998, -51.591)), ('A', '  35 ', 'ILE', 0.07312502942278072, (3.781000000000005, 57.55299999999999, -66.223)), ('A', '  46 ', 'ASN', 0.2534467092012207, (-1.698000000000011, 55.449, -46.277)), ('A', '  81 ', 'PHE', 0.11376822798336014, (10.739999999999991, 65.918, -53.044)), ('A', ' 166 ', 'SER', 0.23665650874352306, (-40.63900000000001, 40.55199999999999, -66.519)), ('A', ' 173 ', 'ARG', 0.11820609054026748, (-30.998000000000005, 41.304, -70.571)), ('A', ' 209 ', 'VAL', 0.024003232988777698, (-39.84600000000001, 30.510999999999985, -72.098)), ('A', ' 217 ', 'TYR', 0.2149422883311462, (-39.397, 24.229999999999997, -56.704)), ('A', ' 229 ', 'SER', 0.1660226943984458, (-21.386000000000006, 37.022999999999996, -59.04)), ('A', ' 236 ', 'SER', 0.15549052234698574, (-0.4999999999999982, 32.19999999999999, -55.969)), ('A', ' 255 ', 'THR', 0.008577887649905032, (3.6810000000000027, -3.006999999999998, -63.297)), ('A', ' 344 ', 'ASP', 0.02026846309224588, (-23.518000000000008, 8.365999999999993, -58.31)), ('A', ' 502 ', 'ARG', 0.22474645078674527, (-36.460999999999984, 8.700999999999997, -96.69199999999998)), ('A', ' 530 ', 'THR', 0.028558605117723346, (-30.796, 18.110999999999994, -79.397)), ('A', ' 531 ', 'GLN', 0.07401671046217663, (-27.267999999999994, 19.325, -78.525)), ('B', '  12 ', 'THR', 0.29439519810586207, (6.241000000000003, 0.737999999999996, -42.952)), ('B', '  95 ', 'ASN', 0.014322884686242472, (15.437000000000001, -3.7070000000000007, -41.068)), ('B', ' 103 ', 'VAL', 0.03885656769853085, (1.3580000000000028, -1.7029999999999976, -27.122)), ('B', ' 124 ', 'ASN', 0.025626162906726445, (-6.123999999999999, 12.287999999999997, -22.982)), ('B', ' 144 ', 'THR', 0.1502192078878913, (-20.204, 6.437999999999996, -38.699)), ('B', ' 158 ', 'LEU', 0.20124671943871106, (-49.648, 18.724, -40.31)), ('B', ' 160 ', 'ASP', 0.015585002432200122, (-46.24, 25.085, -40.505)), ('B', ' 164 ', 'HIS', 0.16791289382085928, (-45.622000000000014, 13.879999999999997, -39.214)), ('B', ' 177 ', 'ASN', 0.18259639637584285, (-33.026, 17.911, -29.451)), ('B', ' 179 ', 'ASN', 0.012249656517593493, (-27.854000000000003, 18.491999999999997, -30.163)), ('B', ' 192 ', 'LYS', 0.20376315869410183, (-31.699000000000005, 13.986, -54.039)), ('B', ' 215 ', 'THR', 0.03125002421330058, (-33.838, 28.095, -43.868)), ('B', ' 219 ', 'LEU', 0.10745743863139239, (-41.575, 21.174999999999994, -47.264)), ('B', ' 220 ', 'ASN', 0.2619336475776354, (-43.855, 18.520999999999994, -48.856)), ('B', ' 247 ', 'VAL', 0.05307655208319044, (12.898000000000003, 36.432999999999986, -20.773999999999997)), ('B', ' 484 ', 'VAL', 0.05639709109450777, (-37.85, 8.452999999999996, -25.46))]
data['cbeta'] = []
data['probe'] = [(' B  12  THR HG21', ' B  25  LEU  O  ', -1.004, (3.108, -1.335, -40.893)), (' B   2  VAL  N  ', ' B 801  HOH  O  ', -0.913, (1.854, 2.49, -49.626)), (' B 279  THR  HB ', ' B 429  MET  HE2', -0.815, (-6.1, 28.337, -20.411)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.79, (-32.807, 35.058, -21.677)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.733, (-25.797, 12.057, -79.72)), (' B 201  GLU  OE2', ' B 802  HOH  O  ', -0.699, (-38.271, 22.392, -26.182)), (' A  13  SER  OG ', ' A  44  SER  OG ', -0.692, (3.084, 52.053, -47.92)), (' A 177  ASN  ND2', ' A 179  ASN HD22', -0.637, (-25.097, 31.105, -74.626)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.63, (-31.417, 21.27, -79.713)), (' B  13  SER  HB2', ' B  92  LEU  HB2', -0.613, (6.971, -1.599, -47.444)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.605, (5.797, -0.97, -40.784)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.592, (-30.955, 21.327, -79.461)), (' B 277  TYR  HA ', ' B 396  TYR  O  ', -0.577, (-0.287, 30.381, -26.675)), (' B 279  THR  HB ', ' B 429  MET  CE ', -0.567, (-6.034, 27.448, -20.683)), (' A 277  TYR  HA ', ' A 396  TYR  O  ', -0.566, (2.815, 17.035, -65.957)), (' B  48  TYR  OH ', ' B  90  PHE  O  ', -0.565, (3.872, -7.811, -45.966)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.56, (9.559, 0.152, -32.562)), (' B 195  ILE  O  ', ' B 195  ILE HG23', -0.56, (-34.617, 22.116, -47.078)), (' A 269  TYR  OH ', ' A 294  GLY  HA3', -0.558, (-3.903, 3.945, -69.883)), (' B 504  PRO  HB3', ' B 507  ARG HH21', -0.552, (-47.609, 38.261, -12.937)), (' A  77  PRO  HB2', ' A 879  HOH  O  ', -0.549, (8.894, 72.721, -46.626)), (' B 278  SER  HB2', ' B 436  MET  HE2', -0.544, (-1.294, 32.905, -21.287)), (' A 177  ASN  ND2', ' A 179  ASN  ND2', -0.541, (-24.739, 30.738, -74.506)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.533, (2.751, 42.125, -28.795)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.53, (-38.533, 28.049, -2.842)), (' A 275  GLN  O  ', ' A 395  HIS  ND1', -0.528, (6.597, 13.179, -63.841)), (' B   8  CYS  SG ', ' B  99  GLY  O  ', -0.525, (8.559, 0.561, -31.675)), (' B   4  ALA  O  ', ' B  24  PHE  HB2', -0.525, (2.172, 4.763, -40.594)), (' B 215  THR  OG1', ' B 216  THR  N  ', -0.512, (-35.58, 28.483, -45.549)), (' A  60  VAL  HB ', ' A 917  HOH  O  ', -0.506, (-0.121, 58.326, -56.656)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.501, (-26.267, 19.861, -86.865)), (' A 140  ALA  O  ', ' A 144  THR HG23', -0.495, (-15.405, 42.298, -61.821)), (' A 368  ALA  O  ', ' A 393  ALA  HA ', -0.494, (1.39, 14.427, -56.439)), (' B  12  THR HG22', ' B  14  LEU  H  ', -0.494, (4.172, -1.17, -43.171)), (' A  14  LEU  HB2', ' A  25  LEU  O  ', -0.49, (4.944, 49.895, -55.397)), (' A 157  VAL HG21', ' A 219  LEU  O  ', -0.486, (-45.095, 29.711, -60.192)), (' A 376  ILE HG12', ' A 425  VAL HG11', -0.481, (-3.401, 21.199, -71.256)), (' B 254  PRO  HB3', ' B 298  TYR  CE2', -0.479, (2.595, 45.396, -25.067)), (' B 376  ILE HG22', ' B 400  GLY  HA3', -0.477, (-11.41, 27.56, -22.776)), (' B  68  MET  HA ', ' B  68  MET  HE2', -0.475, (6.073, -11.761, -54.848)), (' A 367  THR  HA ', ' A 392  ARG  O  ', -0.473, (-0.205, 16.777, -53.965)), (' A   7  LEU HD13', ' A 103  VAL HG22', -0.47, (6.719, 45.329, -65.329)), (' A  13  SER  O  ', ' A  44  SER  HA ', -0.464, (1.649, 51.141, -50.073)), (' A  72  CYS  SG ', ' A  74  SER  HB2', -0.464, (-1.677, 71.943, -54.448)), (' B 510  VAL HG21', ' B 541  TYR  CG ', -0.464, (-32.359, 34.832, -20.492)), (' A 519  ASN  HB3', ' A 530  THR HG21', -0.46, (-31.894, 21.632, -79.214)), (' A 151  ILE HG12', ' A 226  VAL HG22', -0.46, (-31.26, 40.773, -60.375)), (' A 312  ALA  HB1', ' A 977  HOH  O  ', -0.459, (-19.913, 16.387, -70.647)), (' A 235  LEU HD21', ' A 382  TYR  CE2', -0.456, (-7.416, 32.552, -60.275)), (' A 176  LEU HD22', ' A 200  PHE  HB2', -0.456, (-33.355, 32.514, -69.835)), (' B 477  LYS  NZ ', ' B 551  GLU  OE2', -0.456, (-33.439, 13.273, -4.523)), (' B  14  LEU  HB2', ' B  25  LEU  O  ', -0.455, (2.984, -1.714, -40.803)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.455, (-13.321, 8.009, -52.763)), (' B 271  LYS  NZ ', ' B 817  HOH  O  ', -0.455, (2.481, 31.716, -16.014)), (' A 276  LYS  O  ', ' A 395  HIS  HA ', -0.453, (4.334, 15.698, -63.094)), (' A 464  HIS  HD2', ' A 898  HOH  O  ', -0.453, (-12.239, 1.039, -84.938)), (' B  16  CYS  O  ', ' B  22  ARG  HA ', -0.45, (-5.807, -0.094, -40.789)), (' B 451  THR HG21', ' B 585  LEU HD23', -0.45, (-25.222, 27.806, -5.948)), (' B 120  TYR  CE2', ' B 409  ARG  HG2', -0.446, (-15.945, 11.468, -25.866)), (' A 304  ILE HG12', ' A 370  ILE  HB ', -0.445, (-1.718, 9.694, -60.942)), (' A 312  ALA  CB ', ' A 977  HOH  O  ', -0.445, (-19.863, 16.682, -70.552)), (' A 251  GLY  HA3', ' A 394  LYS  HD3', -0.444, (6.918, 10.264, -56.939)), (' A  19  CYS  HB2', ' A  23  PRO  HD2', -0.443, (-3.396, 46.95, -59.33)), (' B 442  ARG HH11', ' B 464  HIS  CE1', -0.443, (-17.396, 46.65, -11.957)), (' B 167  TRP  CZ3', ' B 174  PRO  HD2', -0.443, (-34.408, 9.315, -36.575)), (' B  55  CYS  SG ', ' B  57  VAL HG23', -0.441, (-8.861, -18.924, -46.984)), (' A 151  ILE HG12', ' A 226  VAL  CG2', -0.435, (-31.13, 40.53, -59.729)), (' A 127  THR HG23', ' A 130  LEU  H  ', -0.434, (3.915, 37.679, -65.551)), (' A  16  CYS  O  ', ' A  22  ARG  HA ', -0.433, (-3.804, 48.461, -56.96)), (' A 130  LEU  HA ', ' A 130  LEU HD23', -0.433, (1.381, 39.875, -64.556)), (' A 486  SER  CB ', ' A 517  SER  HG ', -0.432, (-30.292, 31.317, -80.803)), (' B 503  ASN  N  ', ' B 504  PRO  CD ', -0.43, (-45.983, 37.623, -8.909)), (' B 184  GLY  HA3', ' B 195  ILE HG22', -0.43, (-34.273, 19.121, -46.713)), (' A 132  LEU  O  ', ' A 136  GLU  HG3', -0.429, (-4.269, 36.686, -61.667)), (' A 176  LEU  HA ', ' A 176  LEU HD23', -0.427, (-30.978, 33.418, -70.88)), (' B  12  THR HG23', ' B  26  CYS  HA ', -0.425, (5.931, -1.186, -40.767)), (' B 177  ASN  C  ', ' B 818  HOH  O  ', -0.424, (-33.299, 19.353, -30.99)), (' A 329  LYS  HE2', ' A 354  GLN  OE1', -0.424, (-6.443, 1.728, -55.358)), (' A 296  ALA  O  ', ' A 300  PRO  HA ', -0.423, (-2.281, 1.378, -60.599)), (' B 378  MET  O  ', ' B 407  ALA  HB2', -0.423, (-16.047, 20.775, -27.969)), (' A 197  GLU  HB2', ' A 214  THR HG21', -0.423, (-28.373, 25.24, -60.414)), (' B 129  ARG  HA ', ' B 129  ARG  HD2', -0.421, (0.609, 11.349, -33.07)), (' B  31  TYR  CE2', ' B  87  GLY  HA2', -0.419, (5.929, -11.248, -32.946)), (' A   5  CYS  HA ', ' A  24  PHE  O  ', -0.418, (4.34, 44.374, -56.891)), (' A 304  ILE  HA ', ' A 370  ILE  O  ', -0.417, (-3.188, 11.051, -59.303)), (' B  13  SER  O  ', ' B  44  SER  HA ', -0.417, (1.337, -2.152, -46.721)), (' A 200  PHE  N  ', ' A 822  HOH  O  ', -0.417, (-31.742, 30.151, -68.293)), (' A  21  ARG  HA ', ' A  21  ARG  HD2', -0.417, (-8.357, 42.91, -58.172)), (' A 370  ILE  HA ', ' A 395  HIS  O  ', -0.415, (0.665, 13.158, -61.076)), (' A  22  ARG  N  ', ' A  23  PRO  CD ', -0.414, (-3.762, 45.696, -58.074)), (' A  59  ASP  OD1', ' A  61  THR  OG1', -0.412, (0.395, 62.619, -61.833)), (' A 487  ALA  HB1', ' A 550  THR  CG2', -0.41, (-28.029, 31.877, -87.76)), (' B 531  GLN  OE1', ' B 535  SER  OG ', -0.409, (-30.253, 27.574, -25.016)), (' B 533  VAL HG11', ' B 560  ARG  O  ', -0.409, (-25.523, 24.232, -16.278)), (' A 139  LYS  HG2', ' A 232  VAL HG22', -0.408, (-13.086, 35.97, -60.694)), (' B  19  CYS  SG ', ' B 110  ALA  HB1', -0.408, (-6.898, -0.366, -34.116)), (' A 326  PRO  HG2', ' A 329  LYS  NZ ', -0.408, (-8.321, -1.36, -56.808)), (' A  34  VAL  HA ', ' A  39  HIS  O  ', -0.408, (-0.282, 55.479, -63.348)), (' B 333  ILE  HB ', ' B 358  CYS  SG ', -0.407, (-12.018, 31.187, -41.274)), (' A 500  LEU  HA ', ' A 500  LEU HD23', -0.407, (-34.345, 11.006, -91.477)), (' B 480  ILE HD11', ' B 905  HOH  O  ', -0.405, (-36.52, 14.318, -9.447)), (' A 158  LEU HD11', ' A 164  HIS  CE1', -0.405, (-46.009, 31.65, -70.938)), (' A  64  TYR  O  ', ' A  70  TYR  HA ', -0.403, (4.034, 64.494, -50.464)), (' A 278  SER  HB2', ' A 436  MET  HE2', -0.403, (2.976, 13.761, -71.596)), (' B 512  ILE  O  ', ' B 546  PHE  HA ', -0.402, (-34.163, 26.211, -14.92)), (' B   7  LEU  CD2', ' B 130  LEU HD21', -0.402, (-0.157, 4.052, -30.538)), (' A 220  ASN  HB2', ' A 223  ASP  OD1', -0.401, (-41.757, 32.724, -55.291)), (' B 304  ILE  HA ', ' B 370  ILE  O  ', -0.401, (-3.234, 36.104, -34.009)), (' A 445  PRO  HD2', ' A 448  ILE HD12', -0.401, (-18.033, 9.673, -88.946)), (' A 139  LYS  O  ', ' A 143  GLU  HG2', -0.4, (-15.114, 37.366, -62.304))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
