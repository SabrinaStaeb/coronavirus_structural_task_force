# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '   9 ', 'ASN', 0.019064711756225056, (8.808999999999992, 39.866, -57.265)), ('A', '  22 ', 'ARG', 0.04643492427992211, (-4.718000000000004, 46.18600000000001, -56.425)), ('A', '  38 ', 'SER', 0.024846246573494053, (-4.827999999999999, 56.451, -66.709)), ('A', '  45 ', 'VAL', 0.04415513430246028, (-0.3960000000000008, 51.665, -45.14)), ('A', ' 195 ', 'ILE', 0.010469011479493737, (-34.473, 28.542, -53.911)), ('A', ' 218 ', 'LYS', 0.03432792066528154, (-43.42300000000001, 25.328000000000003, -56.370000000000005)), ('A', ' 249 ', 'ILE', 0.017892821769333885, (10.634, 6.9940000000000015, -63.637)), ('A', ' 283 ', 'PRO', 0.08273075114524195, (-8.264999999999999, 13.919000000000008, -81.321)), ('A', ' 351 ', 'THR', 0.0025867709062694783, (-11.063999999999993, 12.591000000000003, -50.458)), ('A', ' 484 ', 'VAL', 0.008434696917443512, (-32.676, 37.762, -80.41)), ('B', '  10 ', 'SER', 0.03988976051332438, (9.541999999999994, 3.303, -37.483)), ('B', '  45 ', 'VAL', 0.03212006918937031, (0.7069999999999963, -1.9169999999999998, -50.896)), ('B', '  97 ', 'CYS', 0.029851197910710957, (11.543999999999999, -1.4209999999999976, -36.63)), ('B', ' 161 ', 'ARG', 0.026720708986872437, (-43.101000000000006, 24.656000000000006, -38.038)), ('B', ' 189 ', 'LYS', 0.021334223971700223, (-35.39599999999999, 12.564000000000004, -61.06900000000001)), ('B', ' 221 ', 'VAL', 0.017530854878284763, (-44.285000000000004, 14.728000000000002, -48.02199999999999)), ('B', ' 343 ', 'PHE', 0.005142742079850224, (-21.590000000000007, 37.356000000000016, -39.134))]
data['omega'] = []
data['rota'] = [('B', '  12 ', 'THR', 0.1446831938091667, (6.468, 0.903000000000004, -42.398)), ('B', '  46 ', 'ASN', 0.17919724783013968, (-1.9380000000000024, -4.737999999999996, -51.103)), ('B', '  69 ', 'SER', 0.1258111727636541, (0.7010000000000014, -13.480999999999991, -53.964)), ('B', '  96 ', 'THR', 0.06763173934614211, (14.136999999999997, -0.585999999999995, -39.364)), ('B', ' 103 ', 'VAL', 0.03886400365888731, (1.1789999999999976, -1.7449999999999992, -27.042)), ('B', ' 148 ', 'SER', 0.2592687557361895, (-26.782, 3.4170000000000016, -37.587)), ('B', ' 164 ', 'HIS', 0.23662427838094585, (-45.451, 14.121, -39.014)), ('B', ' 188 ', 'THR', 0.11228851522745945, (-35.363000000000014, 14.11, -57.54)), ('B', ' 191 ', 'SER', 0.12814459359674651, (-30.902999999999995, 11.462000000000007, -57.096)), ('B', ' 192 ', 'LYS', 0.0, (-31.43900000000001, 13.865, -54.077)), ('B', ' 215 ', 'THR', 0.0801306850085419, (-33.78499999999997, 28.007, -43.845)), ('B', ' 229 ', 'SER', 0.10779403286644297, (-21.851, 12.670000000000003, -41.275)), ('B', ' 231 ', 'THR', 0.07515952158678625, (-15.187000000000006, 12.369000000000003, -43.712)), ('B', ' 247 ', 'VAL', 0.2037884990564108, (12.625, 36.221, -20.891)), ('B', ' 259 ', 'SER', 0.030216674051355134, (-7.302, 52.583, -22.977)), ('B', ' 275 ', 'GLN', 0.055257792823519114, (5.4079999999999995, 31.999000000000002, -23.732)), ('B', ' 278 ', 'SER', 0.10178782019216737, (-0.8450000000000029, 30.494, -22.655)), ('B', ' 289 ', 'SER', 0.08257238935476613, (-13.95, 38.30899999999999, -25.608000000000004)), ('B', ' 486 ', 'SER', 0.11325860616015901, (-35.63599999999999, 13.188000000000002, -22.050999999999995)), ('A', '  12 ', 'THR', 0.29974482637381067, (7.141999999999992, 46.787, -51.682)), ('A', '  13 ', 'SER', 0.22408541897409798, (4.553000000000001, 48.858000000000004, -49.684000000000005)), ('A', '  49 ', 'VAL', 0.292775925262013, (-3.125000000000007, 61.538, -51.671)), ('A', '  86 ', 'ASN', 0.265551254389981, (14.206000000000003, 59.016999999999996, -61.653)), ('A', ' 127 ', 'THR', 0.13116954345372764, (5.534999999999997, 36.106, -68.279)), ('A', ' 156 ', 'GLU', 0.09441711380087951, (-46.782, 34.333, -63.625)), ('A', ' 173 ', 'ARG', 0.23951227081279663, (-31.128000000000018, 40.85500000000001, -70.751)), ('A', ' 183 ', 'THR', 0.23772434309542334, (-29.915, 31.931, -58.627)), ('A', ' 201 ', 'GLU', 0.29193571759070797, (-34.983000000000004, 28.60000000000001, -72.805)), ('A', ' 259 ', 'SER', 0.015407967308229029, (-3.2280000000000006, -6.021000000000004, -69.752)), ('A', ' 344 ', 'ASP', 0.11170797826861797, (-23.519, 7.9030000000000005, -58.174)), ('A', ' 440 ', 'THR', 0.14909021945074347, (-5.709000000000001, 6.977, -84.892)), ('A', ' 502 ', 'ARG', 0.015935267518346768, (-36.52799999999999, 8.469000000000005, -96.998)), ('A', ' 517 ', 'SER', 0.10746471762704643, (-32.795, 28.34700000000001, -80.89)), ('A', ' 530 ', 'THR', 0.016917408199137264, (-30.942, 17.815, -79.461)), ('A', ' 589 ', 'SER', 0.2968699674712556, (-23.115999999999993, 15.212000000000009, -101.71200000000002))]
data['cbeta'] = []
data['probe'] = [(' B   5  CYS  HG ', ' B 703   ZN ZN  ', -0.996, (6.156, 0.432, -35.443)), (' B  47  PRO  O  ', ' B 801  HOH  O  ', -0.972, (-3.743, -8.958, -50.523)), (' A  60  VAL  HB ', ' A 884  HOH  O  ', -0.855, (-0.555, 58.049, -56.954)), (' B 279  THR  HB ', ' B 429  MET  HE2', -0.802, (-6.331, 27.535, -20.536)), (' A 368  ALA  O  ', ' A 393  ALA  HA ', -0.791, (1.58, 14.142, -56.918)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.789, (-32.737, 34.872, -21.785)), (' B   7  LEU  CD1', ' B 103  VAL HG22', -0.778, (1.611, -0.504, -30.397)), (' B  12  THR HG21', ' B  25  LEU  O  ', -0.772, (3.97, -1.066, -40.555)), (' A 327  ILE  O  ', ' A 801  HOH  O  ', -0.767, (-16.594, 2.289, -55.162)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.766, (9.706, -0.254, -32.405)), (' A  13  SER  OG ', ' A  44  SER  HB2', -0.734, (2.682, 51.28, -48.787)), (' B  27  CYS  SG ', ' B 839  HOH  O  ', -0.722, (8.129, -5.299, -42.41)), (' B   7  LEU HD12', ' B 103  VAL HG22', -0.717, (2.512, -0.832, -30.582)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.713, (5.896, -1.104, -40.248)), (' B 271  LYS  NZ ', ' B 802  HOH  O  ', -0.683, (2.54, 31.38, -17.007)), (' A 558  VAL HG13', ' A 870  HOH  O  ', -0.678, (-12.385, 28.007, -89.124)), (' A 275  GLN  O  ', ' A 395  HIS  ND1', -0.66, (6.32, 13.262, -63.859)), (' B  48  TYR  O  ', ' B 803  HOH  O  ', -0.659, (-4.95, -9.961, -44.32)), (' A 376  ILE HG12', ' A 425  VAL HG11', -0.658, (-3.807, 20.53, -71.104)), (' B   8  CYS  SG ', ' B  99  GLY  O  ', -0.656, (8.164, 0.268, -31.649)), (' A 296  ALA  O  ', ' A 300  PRO  HA ', -0.647, (-2.035, 1.05, -61.011)), (' B 508  LYS  HD3', ' B 939  HOH  O  ', -0.635, (-36.477, 41.433, -17.927)), (' B  50  CYS  SG ', ' B  71  TYR  HA ', -0.634, (-4.202, -17.62, -50.582)), (' B  32  ASP  O  ', ' B  36  SER  OG ', -0.632, (-1.341, -7.809, -30.039)), (' A 235  LEU HD21', ' A 382  TYR  CE2', -0.625, (-7.448, 32.704, -60.325)), (' A   4  ALA  O  ', ' A  24  PHE  HB2', -0.624, (3.603, 43.116, -54.959)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.62, (-26.038, 11.427, -80.014)), (' B 550  THR  O  ', ' B 555  SER  OG ', -0.619, (-31.346, 16.097, -12.198)), (' A 146  LYS  NZ ', ' A 228  THR  O  ', -0.611, (-22.254, 34.013, -61.697)), (' B  12  THR HG21', ' B  26  CYS  HA ', -0.601, (5.389, -1.481, -39.45)), (' B 160  ASP  OD2', ' B 161  ARG  N  ', -0.6, (-43.844, 25.473, -40.084)), (' B   6  VAL  CG1', ' B 986  HOH  O  ', -0.6, (-0.338, 5.626, -37.671)), (' B 279  THR  HB ', ' B 429  MET  CE ', -0.595, (-6.171, 27.182, -20.802)), (' B 510  VAL HG21', ' B 541  TYR  CG ', -0.586, (-32.23, 34.655, -20.849)), (' A 367  THR  HA ', ' A 392  ARG  O  ', -0.585, (-0.576, 16.124, -53.72)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.583, (2.582, 42.117, -29.277)), (' B 542  ASP  OD1', ' B 569  LYS  HE3', -0.578, (-29.734, 41.637, -17.849)), (' B 278  SER  HB2', ' B 436  MET  HE2', -0.576, (-1.787, 33.015, -21.927)), (' A 561  PHE  CD2', ' A 581  LEU HD22', -0.575, (-15.729, 21.972, -91.528)), (' B 539  SER  O  ', ' B 567  ARG  HD3', -0.572, (-25.765, 32.277, -19.941)), (' A 185  TYR  CE2', ' A 194  GLN  HG3', -0.566, (-30.142, 33.308, -53.139)), (' A 334  ILE HD12', ' A 348  VAL HG13', -0.565, (-19.934, 12.63, -53.953)), (' B 306  TYR  HB3', ' B 317  LEU HD13', -0.559, (-11.744, 34.8, -32.61)), (' A 277  TYR  HA ', ' A 396  TYR  O  ', -0.559, (2.466, 16.351, -66.284)), (' B 561  PHE  CE1', ' B 576  MET  HE1', -0.555, (-28.919, 22.983, -9.122)), (' A 151  ILE HG12', ' A 226  VAL HG22', -0.551, (-30.991, 40.285, -60.622)), (' A  59  ASP  OD1', ' A  61  THR  OG1', -0.55, (0.109, 62.306, -62.082)), (' B   6  VAL HG13', ' B 986  HOH  O  ', -0.549, (-0.135, 5.238, -37.856)), (' A 307  THR  HA ', ' A 358  CYS  O  ', -0.549, (-11.33, 16.938, -61.92)), (' B 553  ALA  HB2', ' B 918  HOH  O  ', -0.547, (-25.328, 9.794, -12.362)), (' A 152  ALA  HB2', ' A 167  TRP  CZ3', -0.546, (-34.286, 38.077, -66.77)), (' A  13  SER  OG ', ' A  44  SER  CB ', -0.545, (2.758, 51.406, -49.036)), (' B 377  SER  O  ', ' B 406  PRO  HA ', -0.536, (-15.811, 21.302, -23.998)), (' B 376  ILE HG22', ' B 400  GLY  HA3', -0.531, (-11.492, 27.336, -22.967)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.53, (-26.525, 19.864, -86.565)), (' A 288  LYS  HE2', ' A 974  HOH  O  ', -0.528, (-10.726, 12.418, -74.161)), (' B   5  CYS  O  ', ' B   9  ASN  N  ', -0.528, (5.996, 5.373, -35.398)), (' A 304  ILE HG12', ' A 370  ILE  HB ', -0.526, (-1.61, 8.814, -60.764)), (' B  47  PRO  O  ', ' B  49  VAL HG12', -0.524, (-4.957, -9.062, -49.725)), (' A 276  LYS  O  ', ' A 395  HIS  HA ', -0.523, (4.322, 15.269, -63.511)), (' A 447  GLU  HA ', ' A 904  HOH  O  ', -0.523, (-14.371, 10.352, -96.416)), (' A  64  TYR  O  ', ' A  70  TYR  HA ', -0.518, (3.718, 64.104, -50.402)), (' B 277  TYR  HA ', ' B 396  TYR  O  ', -0.517, (-0.303, 30.325, -26.836)), (' A 153  THR HG23', ' A 223  ASP  O  ', -0.516, (-39.503, 37.247, -59.335)), (' A   7  LEU HD13', ' A 103  VAL HG22', -0.51, (5.832, 45.511, -64.985)), (' B 219  LEU  O  ', ' B 219  LEU HD12', -0.508, (-42.281, 20.055, -45.672)), (' A 133  PHE  O  ', ' A 137  THR  OG1', -0.506, (-5.675, 40.377, -63.277)), (' B 479  VAL  HB ', ' B 491  PRO  HG2', -0.505, (-44.459, 15.194, -10.29)), (' B  73  LYS  O  ', ' B  76  LYS  HG2', -0.504, (-1.342, -23.874, -48.316)), (' A 329  LYS  HE2', ' A 354  GLN  OE1', -0.502, (-6.27, 1.753, -55.693)), (' A   4  ALA  O  ', ' A  24  PHE  CB ', -0.502, (3.774, 43.275, -54.559)), (' B   8  CYS  C  ', ' B  10  SER  H  ', -0.5, (8.225, 4.208, -34.989)), (' A 105  ASP  O  ', ' A 109  ILE HG13', -0.497, (-0.605, 43.015, -70.264)), (' B 333  ILE  HB ', ' B 358  CYS  SG ', -0.497, (-12.324, 31.224, -41.764)), (' B   7  LEU  CD2', ' B 130  LEU HD21', -0.495, (-0.143, 4.052, -30.534)), (' B  44  SER  C  ', ' B  46  ASN  N  ', -0.493, (-0.23, -3.428, -49.974)), (' B 387  VAL HG13', ' B 391  LEU HD12', -0.492, (-5.375, 27.841, -35.443)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.491, (-12.877, 7.47, -52.59)), (' A 289  SER  HB3', ' A 845  HOH  O  ', -0.49, (-11.244, 7.187, -73.877)), (' B 473  LYS  HE3', ' B 582  TYR  CZ ', -0.489, (-32.223, 25.103, -0.249)), (' A 127  THR HG22', ' A 130  LEU  HB2', -0.488, (4.185, 38.173, -66.947)), (' A 539  SER  O  ', ' A 567  ARG  HD3', -0.483, (-19.456, 13.169, -79.625)), (' A  37  THR  OG1', ' A  39  HIS  HB2', -0.482, (-2.297, 53.009, -64.701)), (' A 139  LYS  O  ', ' A 143  GLU  HG2', -0.482, (-14.989, 37.137, -62.86)), (' A  34  VAL  HA ', ' A  39  HIS  O  ', -0.482, (-0.314, 55.274, -63.664)), (' A 308  ALA  O  ', ' A 359  THR  HA ', -0.482, (-13.665, 19.491, -63.051)), (' A 339  ARG  NH2', ' A 825  HOH  O  ', -0.481, (-19.304, 23.729, -62.015)), (' A 420  GLU  OE1', ' A 427  ARG  NH1', -0.48, (1.263, 30.866, -79.813)), (' A 480  ILE HG12', ' A 550  THR HG22', -0.478, (-27.982, 31.816, -90.457)), (' A  37  THR  C  ', ' A  39  HIS  H  ', -0.478, (-2.949, 55.011, -66.321)), (' A 140  ALA  O  ', ' A 144  THR HG23', -0.478, (-15.082, 41.597, -61.917)), (' B 115  THR  HA ', ' B 411  LEU  O  ', -0.478, (-20.537, 5.514, -25.453)), (' B 133  PHE  HA ', ' B 927  HOH  O  ', -0.477, (-4.58, 8.595, -35.355)), (' B 504  PRO  HB3', ' B 507  ARG  NH2', -0.477, (-47.932, 37.835, -13.158)), (' A 269  TYR  CD1', ' A 295  LEU HD13', -0.475, (0.18, 6.814, -68.589)), (' A 167  TRP  CZ3', ' A 174  PRO  HD2', -0.474, (-31.854, 38.788, -68.407)), (' B 385  SER  OG ', ' B 805  HOH  O  ', -0.473, (-3.51, 17.2, -36.383)), (' A 304  ILE  HA ', ' A 370  ILE  O  ', -0.473, (-3.141, 10.878, -59.355)), (' A 152  ALA  HB2', ' A 167  TRP  CE3', -0.471, (-34.683, 38.358, -66.403)), (' B  83  LEU  O  ', ' B  90  PHE  N  ', -0.471, (4.816, -10.403, -42.055)), (' B 152  ALA  HB2', ' B 167  TRP  CZ3', -0.47, (-35.931, 10.237, -38.208)), (' B 220  ASN  N  ', ' B 220  ASN  OD1', -0.468, (-42.52, 19.096, -49.446)), (' B 249  ILE HD11', ' B 270  GLN  HG2', -0.467, (4.081, 42.535, -22.482)), (' B  26  CYS  O  ', ' B  29  CYS  N  ', -0.466, (5.138, -3.652, -35.946)), (' A 315  ASP  C  ', ' A 814  HOH  O  ', -0.466, (-18.755, 10.285, -67.194)), (' A 185  TYR  HE2', ' A 194  GLN  HG3', -0.466, (-29.824, 33.797, -52.612)), (' B 265  ASN  OD1', ' B 806  HOH  O  ', -0.466, (-8.984, 41.178, -18.013)), (' A 283  PRO  HG3', ' A 457  TYR  CE1', -0.465, (-6.778, 16.046, -83.36)), (' B 490  ARG  N  ', ' B 491  PRO  CD ', -0.464, (-43.939, 17.656, -13.184)), (' A 224  TYR  OH ', ' A 802  HOH  O  ', -0.463, (-32.025, 38.807, -53.0)), (' B   7  LEU HD21', ' B 106  PHE  HB2', -0.463, (-0.313, 2.428, -30.196)), (' B  34  VAL  O  ', ' B  40  LYS  NZ ', -0.463, (-4.903, -11.271, -33.13)), (' B 130  LEU HD12', ' B 865  HOH  O  ', -0.463, (0.006, 5.168, -25.57)), (' A 351  THR HG23', ' A 364  PRO  HG3', -0.462, (-9.96, 15.623, -51.4)), (' A  63  LEU  HB3', ' A  83  LEU HD12', -0.46, (2.341, 62.49, -53.949)), (' A 445  PRO  HD3', ' A 569  LYS  O  ', -0.459, (-18.686, 5.863, -87.59)), (' B 511  PHE  O  ', ' B 530  THR  HA ', -0.459, (-35.872, 28.121, -20.754)), (' A 249  ILE HD11', ' A 270  GLN  HG2', -0.459, (8.567, 3.891, -67.204)), (' B  12  THR HG22', ' B  13  SER  H  ', -0.459, (4.957, -1.274, -42.776)), (' A 508  LYS  HE2', ' A 815  HOH  O  ', -0.458, (-28.123, 6.656, -84.031)), (' A 543  TYR  N  ', ' A 815  HOH  O  ', -0.457, (-26.679, 7.287, -84.654)), (' B 154  VAL HG12', ' B 221  VAL  HA ', -0.457, (-44.035, 14.728, -46.385)), (' B 103  VAL  CG1', ' B 103  VAL  O  ', -0.455, (-0.502, -2.332, -28.155)), (' B 241  VAL  HB ', ' B 242  PRO  CD ', -0.455, (4.771, 23.249, -30.683)), (' B 445  PRO  HB3', ' B 468  SER  HB3', -0.454, (-28.392, 40.048, -7.873)), (' A 278  SER  HB2', ' A 436  MET  HE2', -0.454, (2.981, 13.672, -71.703)), (' A  47  PRO  HB2', ' A  49  VAL HG12', -0.453, (-4.381, 59.023, -49.889)), (' B  44  SER  N  ', ' B  46  ASN  O  ', -0.451, (-1.536, -3.888, -47.838)), (' A 130  LEU  HA ', ' A 130  LEU HD23', -0.451, (0.956, 39.551, -64.423)), (' A 551  GLU  HB3', ' A 888  HOH  O  ', -0.451, (-20.358, 32.278, -94.394)), (' B 376  ILE HG12', ' B 425  VAL HG11', -0.449, (-7.457, 25.372, -24.3)), (' B  14  LEU  HB2', ' B  25  LEU  O  ', -0.449, (2.963, -1.942, -40.451)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.449, (-31.101, 20.995, -79.564)), (' B  15  ARG  HG3', ' B  24  PHE  CD2', -0.448, (-0.296, 1.966, -43.409)), (' B 254  PRO  HB3', ' B 298  TYR  CE2', -0.448, (2.052, 45.162, -24.911)), (' B  91  GLY  N  ', ' B 839  HOH  O  ', -0.448, (7.071, -5.91, -43.531)), (' A 168  GLU  HG3', ' A 169  VAL  N  ', -0.447, (-35.291, 47.009, -64.387)), (' B  15  ARG  HD3', ' B  24  PHE  CE2', -0.444, (-1.176, 3.386, -44.593)), (' B 280  LEU HD11', ' B 438  LEU  HG ', -0.443, (-9.19, 35.642, -18.003)), (' A  33  HIS  HA ', ' A 107  ASN  OD1', -0.442, (1.946, 50.853, -65.968)), (' A  21  ARG  NH1', ' A 829  HOH  O  ', -0.439, (-11.366, 41.298, -57.587)), (' B 245  HIS  HE1', ' B 874  HOH  O  ', -0.439, (4.171, 28.457, -18.846)), (' A  16  CYS  SG ', ' A  18  ALA  HB3', -0.439, (-4.058, 51.637, -60.857)), (' A  31  TYR  CE2', ' A  87  GLY  HA2', -0.439, (10.249, 56.532, -64.309)), (' A 244  GLU  HB2', ' A 276  LYS  HB2', -0.438, (9.691, 17.972, -63.275)), (' A   5  CYS  HA ', ' A  24  PHE  O  ', -0.437, (4.541, 43.923, -56.809)), (' A  35  ILE  O  ', ' A  35  ILE HG12', -0.436, (4.158, 58.048, -68.012)), (' B 489  ASN  OD1', ' B 491  PRO  HD2', -0.436, (-42.527, 17.323, -11.704)), (' B 167  TRP  HB3', ' B 902  HOH  O  ', -0.436, (-37.657, 5.044, -37.111)), (' B 593  PRO  HG2', ' B 861  HOH  O  ', -0.433, (-45.375, 28.363, -4.831)), (' A 352  LEU  CD1', ' B 234  PRO  HD3', -0.432, (-7.691, 11.267, -44.519)), (' A 163  LEU HD23', ' A 211  TYR  CD2', -0.432, (-40.586, 28.181, -64.76)), (' A 369  ASP  O  ', ' A 394  LYS  HB2', -0.431, (3.731, 12.0, -59.031)), (' B 448  ILE HD11', ' B 572  ILE  CG2', -0.431, (-29.522, 33.338, -9.352)), (' A 269  TYR  CD1', ' A 295  LEU  CD1', -0.427, (0.31, 6.229, -68.629)), (' B 367  THR  HA ', ' B 392  ARG  O  ', -0.426, (1.179, 30.952, -38.961)), (' B 152  ALA  HB2', ' B 167  TRP  CH2', -0.425, (-36.35, 10.76, -38.386)), (' B 275  GLN  O  ', ' B 395  HIS  ND1', -0.425, (4.276, 33.422, -26.935)), (' A 370  ILE  HA ', ' A 395  HIS  O  ', -0.424, (0.734, 12.908, -61.234)), (' B 197  GLU  C  ', ' B 198  TYR  CD2', -0.424, (-32.519, 21.269, -41.93)), (' A 376  ILE  HA ', ' A 376  ILE HD12', -0.424, (-7.503, 21.47, -69.833)), (' B  13  SER  O  ', ' B  44  SER  HA ', -0.424, (1.512, -2.056, -46.265)), (' A   5  CYS  HB2', ' A  26  CYS  HB3', -0.424, (8.047, 44.865, -56.84)), (' A  44  SER  O  ', ' A  45  VAL  C  ', -0.424, (-1.595, 52.573, -46.387)), (' B 512  ILE  O  ', ' B 546  PHE  HA ', -0.423, (-34.477, 26.247, -15.01)), (' A 275  GLN  O  ', ' A 395  HIS  CE1', -0.423, (7.197, 12.926, -63.682)), (' B   2  VAL  N  ', ' B 845  HOH  O  ', -0.422, (1.857, 1.902, -48.319)), (' B  65  LEU HD23', ' B  81  PHE  CZ ', -0.421, (7.265, -12.849, -48.633)), (' B  31  TYR  HB2', ' B  89  VAL HG23', -0.421, (3.714, -8.804, -36.595)), (' A 291  PHE  C  ', ' A 291  PHE  CD1', -0.419, (-4.093, 7.609, -70.601)), (' A  32  ASP  HA ', ' A  35  ILE HG22', -0.419, (6.011, 54.283, -65.995)), (' A 130  LEU HD12', ' A 867  HOH  O  ', -0.419, (4.493, 39.931, -68.568)), (' A 582  TYR  OH ', ' A 589  SER  HB2', -0.418, (-22.745, 18.197, -102.063)), (' A 269  TYR  CE2', ' A 294  GLY  O  ', -0.417, (-1.726, 2.698, -68.477)), (' A  21  ARG  O  ', ' A  22  ARG  HB2', -0.417, (-6.12, 45.058, -55.186)), (' B   5  CYS  HB2', ' B  26  CYS  HB3', -0.414, (6.307, 0.951, -37.223)), (' A 471  CYS  O  ', ' A 587  PHE  HB3', -0.414, (-21.193, 12.117, -96.907)), (' A 156  GLU  HA ', ' A 221  VAL HG22', -0.414, (-46.574, 34.505, -61.555)), (' A 318  CYS  HB3', ' A 343  PHE  CD2', -0.414, (-17.859, 7.624, -61.959)), (' B 160  ASP  O  ', ' B 162  GLU  N  ', -0.413, (-45.392, 23.711, -38.135)), (' B 466  ASP  HB3', ' B 988  HOH  O  ', -0.411, (-24.283, 43.615, -2.013)), (' A 401  ASP  HA ', ' A 402  PRO  HD2', -0.411, (-5.497, 18.718, -78.552)), (' A 542  ASP  HB2', ' A 815  HOH  O  ', -0.409, (-26.83, 6.443, -83.752)), (' A 235  LEU HD21', ' A 382  TYR  CD2', -0.409, (-7.957, 32.438, -60.762)), (' B 393  ALA  HB3', ' B 396  TYR  CZ ', -0.408, (0.604, 29.282, -33.222)), (' A 269  TYR  OH ', ' A 294  GLY  HA3', -0.407, (-3.476, 3.456, -69.832)), (' B 493  ILE HG23', ' B 526  LEU HD11', -0.407, (-43.327, 25.689, -15.927)), (' B 184  GLY  C  ', ' B 195  ILE HG22', -0.407, (-33.402, 18.607, -47.155)), (' B 282  GLY  HA3', ' B 288  LYS  CG ', -0.407, (-12.901, 33.86, -20.036)), (' B 183  THR  O  ', ' B 225  PHE  HA ', -0.406, (-32.219, 15.089, -43.79)), (' B 519  ASN  O  ', ' B 530  THR HG21', -0.406, (-39.662, 25.468, -22.275)), (' A 544  VAL  O  ', ' A 572  ILE  HA ', -0.406, (-25.185, 12.778, -89.03)), (' B   9  ASN  O  ', ' B  10  SER  C  ', -0.405, (8.459, 4.427, -38.705)), (' A 325  LEU  HA ', ' A 326  PRO  HD3', -0.405, (-9.048, -0.795, -60.973)), (' B 371  VAL HG23', ' B 393  ALA  HB2', -0.405, (-1.296, 31.471, -34.653)), (' A   7  LEU HD21', ' A 130  LEU HD21', -0.404, (2.804, 42.74, -64.852)), (' B 195  ILE  O  ', ' B 195  ILE HG23', -0.403, (-33.882, 21.641, -46.612)), (' B 160  ASP  C  ', ' B 162  GLU  H  ', -0.402, (-45.041, 23.376, -38.688)), (' B  61  THR HG22', ' B  84  CYS  SG ', -0.402, (-0.053, -13.518, -36.967)), (' A 521  VAL HG12', ' A 525  ILE HD12', -0.401, (-37.984, 23.755, -86.67)), (' A 496  VAL HG13', ' A 545  ILE HD13', -0.401, (-32.265, 15.401, -90.146))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
