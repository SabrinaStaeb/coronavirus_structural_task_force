# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '  45 ', 'VAL', 0.056179224667250914, (0.27600000000001046, 52.262, -45.458)), ('A', ' 195 ', 'ILE', 0.00507950023339248, (-33.627, 29.010999999999992, -54.255)), ('A', ' 218 ', 'LYS', 0.013705162211795824, (-42.61399999999998, 25.702999999999996, -56.609000000000016)), ('A', ' 228 ', 'THR', 0.027357562899918912, (-23.627999999999993, 34.536, -59.59)), ('A', ' 484 ', 'VAL', 0.014668061552789926, (-31.63899999999999, 38.198, -81.00100000000002)), ('B', ' 195 ', 'ILE', 0.084915308508763, (-32.291999999999994, 21.924999999999994, -48.846))]
data['omega'] = []
data['rota'] = [('B', '  69 ', 'SER', 0.07054434472771931, (1.6210000000000022, -13.288999999999998, -53.997)), ('B', '  96 ', 'THR', 0.11963270381588867, (14.784000000000002, -0.3810000000000038, -39.38)), ('B', '  97 ', 'CYS', 0.25566198114275956, (12.16, -1.218, -36.647)), ('B', ' 103 ', 'VAL', 0.036946382426964575, (1.399, -1.7889999999999997, -27.075000000000006)), ('B', ' 129 ', 'ARG', 0.013513264638395339, (1.185000000000001, 10.58, -31.105000000000004)), ('B', ' 155 ', 'ARG', 0.0529981614556877, (-45.17399999999999, 11.408000000000001, -44.341000000000015)), ('B', ' 160 ', 'ASP', 0.1189795036192007, (-45.77199999999999, 25.214999999999996, -40.878)), ('B', ' 164 ', 'HIS', 0.14572382599788108, (-45.327, 13.820999999999996, -39.31000000000001)), ('B', ' 188 ', 'THR', 0.14882953943156962, (-34.94999999999998, 14.241, -58.058)), ('B', ' 192 ', 'LYS', 0.0, (-31.072999999999993, 14.210000000000004, -54.31900000000002)), ('B', ' 215 ', 'THR', 0.024122234472834528, (-33.35, 28.246, -44.235)), ('B', ' 231 ', 'THR', 0.14849482106516398, (-14.76499999999999, 12.394999999999998, -44.077000000000005)), ('B', ' 259 ', 'SER', 0.05084645395216508, (-7.194999999999997, 52.764, -22.912)), ('B', ' 486 ', 'SER', 0.21767031161044484, (-35.43399999999999, 13.228, -22.349000000000007)), ('A', '  12 ', 'THR', 0.08850884136547268, (7.896000000000002, 47.384999999999984, -51.736)), ('A', '  35 ', 'ILE', 0.04474547226640743, (4.372000000000011, 57.608999999999995, -66.47700000000002)), ('A', '  44 ', 'SER', 0.016827392980325227, (1.0710000000000015, 52.271999999999984, -49.264)), ('A', '  46 ', 'ASN', 0.10840972648402632, (-1.0739999999999936, 55.734999999999985, -46.439)), ('A', '  51 ', 'ASN', 0.1647711651579099, (-2.1069999999999975, 65.833, -47.286000000000016)), ('A', ' 127 ', 'THR', 0.042401752250872435, (6.3540000000000045, 36.376, -68.516)), ('A', ' 156 ', 'GLU', 0.22762999268951062, (-46.005, 34.837, -63.895)), ('A', ' 236 ', 'SER', 0.02389169589547309, (0.0670000000000055, 32.359, -56.102)), ('A', ' 255 ', 'THR', 0.12035257493230572, (4.325000000000001, -2.865000000000002, -63.31900000000001)), ('A', ' 416 ', 'THR', 0.22214789282553618, (-10.078999999999986, 35.49199999999999, -83.112)), ('A', ' 424 ', 'SER', 0.10324154329999241, (0.3329999999999984, 28.009000000000007, -71.54600000000002)), ('A', ' 485 ', 'SER', 0.07487071307421381, (-28.025999999999996, 37.301, -82.173)), ('A', ' 502 ', 'ARG', 0.025854988358041852, (-35.42399999999998, 8.563999999999997, -97.09600000000002)), ('A', ' 517 ', 'SER', 0.11562084335679963, (-31.761999999999986, 28.713000000000005, -81.24200000000002)), ('A', ' 523 ', 'SER', 0.18182171014945295, (-35.879999999999995, 19.863999999999994, -81.489)), ('A', ' 530 ', 'THR', 0.024844357579766704, (-29.945, 18.239000000000004, -79.886)), ('A', ' 591 ', 'GLU', 0.018571080874023274, (-28.453999999999994, 16.639000000000003, -104.35200000000002))]
data['cbeta'] = []
data['probe'] = [(' B  27  CYS  SG ', ' B 839  HOH  O  ', -1.118, (8.695, -4.852, -42.375)), (' B  12  THR HG21', ' B  25  LEU  O  ', -0.95, (3.855, -1.433, -40.377)), (' B 279  THR  HB ', ' B 429  MET  HE2', -0.79, (-5.325, 27.415, -20.929)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.788, (-32.556, 34.869, -21.903)), (' B  13  SER  O  ', ' B  44  SER  HA ', -0.766, (2.323, -1.636, -46.536)), (' B 508  LYS  HD3', ' B 995  HOH  O  ', -0.752, (-36.364, 41.415, -17.942)), (' B   8  CYS  SG ', ' B  99  GLY  O  ', -0.694, (9.174, 0.534, -31.495)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.687, (-25.605, 12.073, -80.262)), (' B 129  ARG  HD3', ' B 129  ARG  O  ', -0.683, (-0.146, 9.478, -33.191)), (' B  47  PRO  O  ', ' B 801  HOH  O  ', -0.683, (-3.198, -8.37, -50.819)), (' B 425  VAL  CG1', ' B 429  MET  HE3', -0.654, (-6.748, 25.963, -22.655)), (' B 425  VAL HG12', ' B 429  MET  HE3', -0.65, (-6.661, 25.369, -22.176)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.649, (8.828, -0.183, -32.542)), (' A 368  ALA  O  ', ' A 393  ALA  HA ', -0.648, (2.256, 14.909, -56.862)), (' B 474 AMET  SD ', ' B 495  VAL HG11', -0.645, (-40.664, 24.762, -5.729)), (' A 486  SER  OG ', ' A 517  SER  OG ', -0.643, (-29.334, 31.343, -81.668)), (' A 275  GLN  O  ', ' A 395  HIS  ND1', -0.639, (7.08, 13.384, -64.209)), (' A   7  LEU HD13', ' A 103  VAL HG22', -0.634, (7.009, 46.258, -65.361)), (' A 339  ARG  NH2', ' A 808  HOH  O  ', -0.631, (-18.417, 23.905, -62.166)), (' B 184  GLY  C  ', ' B 195  ILE HG22', -0.625, (-32.822, 18.55, -47.804)), (' A   7  LEU HD21', ' A 106  PHE  HB2', -0.619, (4.097, 43.863, -66.008)), (' A 261  GLU  OE1', ' A 324  TYR  OH ', -0.615, (-10.044, -1.484, -71.487)), (' A  59  ASP  OD1', ' A  61  THR  OG1', -0.608, (0.972, 62.758, -62.265)), (' A 320  LYS  NZ ', ' A 811  HOH  O  ', -0.597, (-12.307, 1.553, -72.736)), (' B   7  LEU HD21', ' B 106  PHE  HB2', -0.593, (-0.234, 2.045, -29.972)), (' B 278  SER  HB2', ' B 436  MET  HE2', -0.587, (-1.68, 32.809, -21.661)), (' B 315  ASP  O  ', ' B 318  CYS  HB2', -0.571, (-18.556, 37.827, -34.415)), (' A  44  SER  OG ', ' A  45  VAL  N  ', -0.569, (1.746, 53.22, -47.377)), (' B   7  LEU  CD1', ' B 103  VAL HG22', -0.569, (2.492, -0.999, -30.088)), (' A  16  CYS  SG ', ' A  18  ALA  HB3', -0.568, (-2.816, 52.091, -61.356)), (' A 277  TYR  HA ', ' A 396  TYR  O  ', -0.566, (3.608, 17.228, -66.222)), (' A  64  TYR  O  ', ' A  70  TYR  HA ', -0.563, (4.183, 64.446, -50.414)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.554, (-38.456, 28.114, -3.158)), (' A  13  SER  OG ', ' A  44  SER  HB2', -0.548, (4.175, 51.681, -48.934)), (' A 235  LEU HD21', ' A 382  TYR  CE2', -0.544, (-7.194, 32.856, -60.574)), (' B   8  CYS  SG ', ' B  99  GLY  CA ', -0.54, (8.559, -0.131, -32.133)), (' B 333  ILE  HB ', ' B 358  CYS  SG ', -0.537, (-11.728, 31.021, -41.762)), (' A  34  VAL  HA ', ' A  39  HIS  O  ', -0.527, (0.229, 55.577, -63.672)), (' A 194  GLN  O  ', ' A 196  GLY  N  ', -0.525, (-31.106, 28.605, -54.737)), (' B   2  VAL  N  ', ' B 817  HOH  O  ', -0.525, (2.656, 2.277, -48.454)), (' B 277  TYR  HA ', ' B 396  TYR  O  ', -0.512, (-0.098, 30.404, -26.703)), (' A 327  ILE HD11', ' A 345  LYS  O  ', -0.511, (-18.628, 2.497, -57.814)), (' B  48  TYR  O  ', ' B 803  HOH  O  ', -0.509, (-4.033, -9.584, -44.563)), (' A 367  THR  HA ', ' A 392  ARG  O  ', -0.504, (0.259, 16.483, -53.858)), (' A 304  ILE HG12', ' A 370  ILE  HB ', -0.496, (-1.264, 9.882, -61.222)), (' A 106  PHE  CE1', ' A 133  PHE  CE2', -0.496, (-0.117, 44.364, -64.155)), (' A 296  ALA  O  ', ' A 300  PRO  HA ', -0.496, (-1.222, 1.652, -60.918)), (' B  13  SER  HB2', ' B  92  LEU  HB2', -0.493, (7.703, -1.172, -47.096)), (' B 323  LYS  HG2', ' B 323  LYS  O  ', -0.488, (-16.025, 48.884, -29.728)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.485, (-30.225, 21.989, -80.222)), (' A   4  ALA  O  ', ' A  24  PHE  HB2', -0.485, (4.312, 42.984, -55.05)), (' B 167  TRP  CZ3', ' B 174  PRO  HD2', -0.48, (-33.86, 9.323, -36.415)), (' B  28  LYS  O  ', ' B  32  ASP  OD1', -0.479, (5.512, -6.143, -32.042)), (' A  20  ILE HG22', ' A 888  HOH  O  ', -0.477, (-6.809, 44.809, -62.431)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.476, (2.828, 42.287, -28.92)), (' B 249  ILE HG23', ' B 273  GLY  HA3', -0.474, (5.231, 39.4, -25.944)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.474, (-25.35, 20.032, -87.227)), (' A 561  PHE  CZ ', ' A 585  LEU HD21', -0.474, (-16.983, 19.413, -92.761)), (' B  15  ARG  HG3', ' B  24  PHE  CD2', -0.471, (0.62, 2.372, -43.467)), (' B 129  ARG  C  ', ' B 129  ARG  HD3', -0.471, (0.596, 9.536, -32.458)), (' B 103  VAL  CG1', ' B 103  VAL  O  ', -0.469, (-0.307, -2.368, -28.311)), (' B 371  VAL HG23', ' B 393  ALA  HB2', -0.468, (-0.69, 31.466, -34.78)), (' A 361  ASN  OD1', ' A 803  HOH  O  ', -0.464, (-11.657, 27.436, -61.542)), (' A 280  LEU HD11', ' A 438  LEU  HG ', -0.463, (-1.898, 10.996, -76.98)), (' B 477  LYS  NZ ', ' B 551  GLU  OE2', -0.463, (-33.787, 14.005, -4.812)), (' A  35  ILE  O  ', ' A  35  ILE HG12', -0.462, (5.358, 58.831, -68.388)), (' A  12  THR HG21', ' A  25  LEU  O  ', -0.461, (6.683, 48.817, -55.529)), (' B 147  LEU HD21', ' B 229  SER  OG ', -0.456, (-22.499, 9.774, -42.861)), (' A 445  PRO  HD2', ' A 448  ILE HD12', -0.456, (-17.05, 9.806, -89.216)), (' B 195  ILE  O  ', ' B 195  ILE HG23', -0.455, (-33.677, 21.449, -47.213)), (' A 261  GLU  OE1', ' A 324  TYR  CZ ', -0.453, (-9.867, -1.0, -71.466)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.45, (-12.421, 7.857, -52.729)), (' A 352  LEU HD11', ' B 234  PRO  CD ', -0.449, (-6.802, 12.323, -44.178)), (' B   8  CYS  SG ', ' B  99  GLY  C  ', -0.446, (8.755, -0.05, -31.082)), (' A  19  CYS  HB2', ' A  23  PRO  HD2', -0.442, (-3.256, 47.374, -59.733)), (' B  61  THR HG22', ' B  84  CYS  SG ', -0.442, (0.588, -13.062, -37.4)), (' A 278  SER  HB2', ' A 436  MET  HE2', -0.441, (3.799, 14.246, -71.46)), (' B  13  SER  O  ', ' B  44  SER  CA ', -0.438, (2.068, -2.299, -46.767)), (' B 357  PHE  CD1', ' B 357  PHE  N  ', -0.437, (-11.064, 37.166, -38.03)), (' B 510  VAL HG21', ' B 541  TYR  CG ', -0.436, (-32.277, 34.838, -20.71)), (' A 331  SER  HA ', ' A 347  LYS  O  ', -0.436, (-15.678, 8.639, -54.237)), (' B 124  ASN  OD1', ' B 381  ASN  ND2', -0.435, (-7.123, 15.041, -25.499)), (' B 376  ILE HG22', ' B 400  GLY  HA3', -0.434, (-11.292, 27.534, -22.954)), (' B  19  CYS  HB2', ' B  23  PRO  HD2', -0.434, (-5.46, 0.752, -38.155)), (' B 373  PHE  CE1', ' B 387  VAL HG21', -0.433, (-7.916, 25.408, -32.127)), (' A 163  LEU HD23', ' A 211  TYR  CD2', -0.432, (-39.905, 28.865, -65.022)), (' B  57  VAL HG12', ' B  63  LEU HD21', -0.429, (-5.124, -16.171, -45.256)), (' A 512  ILE  HA ', ' A 531  GLN  O  ', -0.426, (-25.715, 20.154, -82.35)), (' A  60  VAL  HB ', ' A 929  HOH  O  ', -0.423, (0.634, 58.71, -56.878)), (' A 276  LYS  O  ', ' A 395  HIS  HA ', -0.422, (5.175, 15.844, -63.342)), (' A 333  ILE  HB ', ' A 358  CYS  SG ', -0.422, (-13.151, 17.08, -56.443)), (' B 516  ASN  ND2', ' B 831  HOH  O  ', -0.422, (-32.796, 16.506, -24.324)), (' A 329  LYS  HE2', ' A 354  GLN  OE1', -0.422, (-5.651, 1.885, -55.636)), (' B 378  MET  O  ', ' B 407  ALA  HB2', -0.42, (-15.959, 20.855, -28.106)), (' A 351  THR HG23', ' A 364  PRO  HG3', -0.42, (-9.612, 16.32, -51.776)), (' B 404  GLN  NE2', ' B 706  PO4  O2 ', -0.419, (-19.776, 30.001, -19.815)), (' B 455  LEU  HG ', ' B 456  VAL HG13', -0.418, (-18.63, 23.917, -9.059)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.418, (6.137, -0.945, -39.585)), (' B 284  PRO  HG2', ' B 566  THR HG21', -0.415, (-20.346, 31.024, -14.215)), (' B 518  GLN  HA ', ' B 518  GLN  OE1', -0.414, (-39.554, 19.414, -18.497)), (' B 505  ALA  O  ', ' B 508  LYS  HG2', -0.414, (-39.668, 40.136, -14.924)), (' B  34  VAL  O  ', ' B  40  LYS  NZ ', -0.413, (-4.407, -11.224, -32.983)), (' B   7  LEU HD12', ' B 103  VAL HG22', -0.412, (2.47, -0.721, -30.468)), (' B  35  ILE  C  ', ' B  35  ILE HD12', -0.411, (-1.138, -10.869, -29.796)), (' B 303  ARG  NH2', ' B 366  THR  OG1', -0.411, (-2.476, 34.204, -42.392)), (' A  48  TYR  OH ', ' A  90  PHE  O  ', -0.41, (6.519, 55.908, -51.728)), (' A 303  ARG  NH1', ' A 353  GLU  O  ', -0.41, (-6.329, 9.49, -52.775)), (' A 275  GLN  O  ', ' A 395  HIS  CE1', -0.409, (7.964, 13.559, -64.299)), (' A 490  ARG  HB2', ' A 491  PRO  HD3', -0.409, (-36.197, 28.264, -92.248)), (' B 103  VAL  O  ', ' B 103  VAL HG13', -0.409, (-0.547, -2.306, -28.499)), (' B 115  THR  HA ', ' B 411  LEU  O  ', -0.407, (-20.413, 5.927, -25.724)), (' A 533  VAL HG11', ' A 560  ARG  O  ', -0.407, (-17.739, 22.215, -83.713)), (' A  12  THR HG22', ' A  14  LEU  H  ', -0.406, (6.328, 49.707, -52.784)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.406, (-30.55, 21.715, -79.616)), (' A 480  ILE HG21', ' A 550  THR HG22', -0.405, (-27.467, 33.164, -90.276)), (' A 353  GLU  HA ', ' A 353  GLU  OE2', -0.405, (-9.281, 6.228, -51.121)), (' B  59  ASP  C  ', ' B  59  ASP  OD1', -0.404, (-4.187, -13.787, -39.89)), (' A 486  SER  CB ', ' A 517  SER  OG ', -0.404, (-29.734, 31.688, -81.398)), (' A 278  SER  HB2', ' A 436  MET  CE ', -0.401, (3.489, 14.053, -71.289)), (' B 544  VAL  O  ', ' B 572  ILE  HA ', -0.401, (-33.431, 32.617, -12.043))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
