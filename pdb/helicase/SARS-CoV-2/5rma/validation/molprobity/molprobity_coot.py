# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 195 ', 'ILE', 0.06454679563559815, (-33.667, 29.145, -54.498)), ('A', ' 219 ', 'LEU', 0.03310977244803863, (-41.48199999999999, 28.918999999999993, -59.465)), ('A', ' 338 ', 'ALA', 0.048370827664170564, (-24.605000000000004, 20.785999999999998, -55.923999999999985)), ('A', ' 484 ', 'VAL', 0.007772293130546029, (-31.760999999999996, 38.269, -80.84099999999998))]
data['omega'] = []
data['rota'] = [('A', '  12 ', 'THR', 0.0, (7.930999999999991, 47.474, -51.60499999999999)), ('A', '  20 ', 'ILE', 0.0236496946038278, (-8.254000000000005, 46.593999999999994, -60.28)), ('A', '  44 ', 'SER', 0.04535384684809198, (1.0139999999999834, 52.408000000000015, -49.267999999999994)), ('A', '  46 ', 'ASN', 0.27459101152201065, (-1.5150000000000095, 55.777, -46.388999999999996)), ('A', '  51 ', 'ASN', 0.029598603198760304, (-2.1690000000000076, 65.781, -47.165)), ('A', '  69 ', 'SER', 0.2615325915392532, (3.8079999999999803, 63.650999999999996, -45.578)), ('A', '  81 ', 'PHE', 0.2280961387128749, (11.366999999999994, 66.13499999999998, -53.065)), ('A', ' 156 ', 'GLU', 0.08518864380900715, (-46.105, 34.24199999999999, -64.926)), ('A', ' 173 ', 'ARG', 0.0, (-30.42600000000001, 41.541, -71.324)), ('A', ' 209 ', 'VAL', 0.008444697416451924, (-39.219, 30.743, -72.491)), ('A', ' 217 ', 'TYR', 0.10590317740415331, (-38.80700000000001, 24.451999999999998, -56.762)), ('A', ' 229 ', 'SER', 0.1995678111149056, (-20.905000000000005, 37.20299999999999, -59.56499999999998)), ('A', ' 255 ', 'THR', 0.0012771741357208313, (4.103999999999998, -3.000000000000007, -63.345)), ('A', ' 344 ', 'ASP', 0.03919350803271622, (-23.094999999999988, 8.631999999999996, -58.555)), ('A', ' 365 ', 'GLU', 0.1453329616845964, (-5.887000000000003, 21.003999999999998, -50.693999999999996)), ('A', ' 502 ', 'ARG', 0.23812991471639844, (-35.79599999999999, 8.772999999999993, -97.121)), ('A', ' 530 ', 'THR', 0.02991853980347514, (-30.193000000000016, 18.223999999999993, -79.817)), ('A', ' 592 ', 'ILE', 0.08869209115798204, (-32.159000000000006, 18.947999999999993, -103.59799999999997)), ('B', '   8 ', 'CYS', 0.10737402829241835, (7.442999999999997, 3.924999999999997, -33.771)), ('B', '  11 ', 'GLN', 0.10105101424569454, (8.854999999999997, 3.418999999999997, -42.247)), ('B', '  12 ', 'THR', 0.09038766519553453, (6.214999999999997, 0.8929999999999971, -43.396)), ('B', '  20 ', 'ILE', 0.02340351615644989, (-11.124000000000002, 2.0349999999999966, -38.888)), ('B', '  68 ', 'MET', 0.010269856907789776, (4.785, -12.518000000000008, -55.232)), ('B', '  69 ', 'SER', 0.1668357319831594, (1.1779999999999946, -13.448000000000004, -54.137)), ('B', '  95 ', 'ASN', 0.01637314727431929, (15.505999999999998, -3.6790000000000056, -41.281)), ('B', '  96 ', 'THR', 0.18668256876520625, (14.389999999999993, -0.23000000000000398, -39.963)), ('B', ' 103 ', 'VAL', 0.03780638799071312, (1.6459999999999972, -1.6910000000000043, -27.633)), ('B', ' 155 ', 'ARG', 0.24928691287584784, (-45.42199999999998, 11.621999999999998, -44.080999999999996)), ('B', ' 160 ', 'ASP', 0.05237365404888577, (-45.801, 25.226999999999997, -40.767)), ('B', ' 164 ', 'HIS', 0.05762074802046866, (-45.474999999999994, 13.911, -39.146)), ('B', ' 192 ', 'LYS', 0.0, (-31.51899999999999, 14.025999999999996, -54.34499999999999)), ('B', ' 195 ', 'ILE', 0.02526366241047336, (-32.926999999999985, 21.421999999999997, -49.043)), ('B', ' 197 ', 'GLU', 0.2922379884699196, (-30.216999999999995, 21.866, -42.415)), ('B', ' 202 ', 'LYS', 0.14978762933321124, (-41.356, 16.484999999999992, -30.039)), ('B', ' 219 ', 'LEU', 0.06489792922581418, (-41.37500000000001, 21.137999999999998, -47.62199999999999)), ('B', ' 220 ', 'ASN', 0.03210521002624181, (-43.61699999999998, 18.513, -49.064)), ('B', ' 228 ', 'THR', 0.21496544273376916, (-24.93, 15.251999999999997, -41.801)), ('B', ' 247 ', 'VAL', 0.013278351777019172, (13.151999999999987, 36.192, -20.963)), ('B', ' 344 ', 'ASP', 0.08091028614794098, (-21.486000000000008, 39.738000000000014, -42.305)), ('B', ' 353 ', 'GLU', 0.016150988676629348, (-6.065000000000008, 40.666, -43.304)), ('B', ' 361 ', 'ASN', 0.0, (-12.641000000000005, 23.59, -39.674)), ('B', ' 484 ', 'VAL', 0.044251317634032915, (-37.657, 8.450999999999997, -25.624999999999996))]
data['cbeta'] = [('A', '  20 ', 'ILE', ' ', 0.2809630517615317, (-9.519000000000013, 46.218, -61.144)), ('A', '  81 ', 'PHE', ' ', 0.2595920024677244, (11.998999999999985, 64.918, -52.36399999999998)), ('A', ' 484 ', 'VAL', ' ', 0.26494437626425665, (-31.597, 38.165, -79.278)), ('A', ' 592 ', 'ILE', ' ', 0.32215622362801244, (-33.20600000000001, 18.121999999999986, -102.747)), ('B', '  20 ', 'ILE', ' ', 0.26581595951355863, (-12.518, 2.4379999999999935, -38.311)), ('B', ' 483 ', 'ASP', ' ', 0.27838116649056827, (-40.467, 11.268999999999998, -23.602))]
data['probe'] = [(' A 158  LEU HD21', ' A 164  HIS  CE1', -0.835, (-46.881, 31.913, -71.24)), (' B  12  THR HG22', ' B  14  LEU  H  ', -0.778, (3.952, -0.953, -43.968)), (' A 326  PRO  HB2', ' A 329  LYS  HZ2', -0.745, (-9.038, 0.075, -56.903)), (' B  12  THR HG21', ' B  25  LEU  O  ', -0.727, (3.421, -0.947, -41.251)), (' A 158  LEU HD21', ' A 164  HIS  HE1', -0.716, (-46.697, 31.274, -71.395)), (' B  13  SER  HB3', ' B  92  LEU  HB2', -0.714, (7.028, -1.603, -47.894)), (' B  12  THR HG23', ' B  26  CYS  HA ', -0.709, (5.515, -1.388, -41.126)), (' B 279  THR  HB ', ' B 429  MET  HE2', -0.703, (-5.36, 27.542, -20.765)), (' A   7  LEU HD21', ' A 106  PHE  HB2', -0.661, (5.024, 44.232, -66.177)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.651, (-12.343, 8.037, -52.618)), (' B   7  LEU HD21', ' B 106  PHE  HB2', -0.649, (-0.212, 2.289, -30.418)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.644, (-30.553, 21.405, -80.159)), (' A 326  PRO  HD2', ' A 329  LYS  NZ ', -0.638, (-8.518, 0.092, -58.154)), (' A 158  LEU HD11', ' A 164  HIS  CE1', -0.634, (-44.953, 30.98, -71.265)), (' A 279  THR  HB ', ' A 429  MET  HE2', -0.633, (0.387, 18.99, -74.183)), (' A 326  PRO  HD2', ' A 329  LYS  HZ1', -0.628, (-7.633, -0.084, -57.999)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.602, (-38.287, 28.181, -3.089)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.58, (-30.108, 21.564, -79.903)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.573, (5.333, -0.711, -41.097)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.568, (-32.781, 34.409, -21.501)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.561, (9.884, 0.254, -32.897)), (' A  19  CYS  HB2', ' A  23  PRO  HD2', -0.541, (-2.636, 47.213, -59.892)), (' A 480  ILE HG21', ' A 550  THR HG22', -0.534, (-27.381, 32.549, -90.214)), (' B  19  CYS  HB2', ' B  23  PRO  HD2', -0.532, (-5.986, 0.887, -38.568)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.531, (-26.046, 11.84, -80.054)), (' B 442  ARG  NH1', ' B 464  HIS  NE2', -0.531, (-17.586, 46.37, -12.533)), (' A 326  PRO  CD ', ' A 329  LYS  HZ1', -0.528, (-8.028, -0.477, -58.258)), (' A 326  PRO  CG ', ' A 329  LYS  NZ ', -0.526, (-8.529, -0.614, -57.669)), (' B 228  THR HG22', ' B 230  HIS  NE2', -0.524, (-22.041, 17.175, -43.434)), (' A 519  ASN  HB3', ' A 530  THR HG21', -0.507, (-31.292, 21.781, -79.66)), (' A  19  CYS  CB ', ' A  23  PRO  HD2', -0.5, (-2.69, 47.058, -60.017)), (' A 326  PRO  CG ', ' A 329  LYS  HZ1', -0.497, (-7.949, -0.359, -57.614)), (' A 445  PRO  HD2', ' A 448  ILE HD12', -0.496, (-17.173, 9.372, -89.083)), (' B  19  CYS  CB ', ' B  23  PRO  HD2', -0.492, (-6.436, 0.886, -38.104)), (' B 371  VAL HG23', ' B 393  ALA  HB2', -0.48, (-0.535, 31.61, -34.856)), (' A   7  LEU HD13', ' A 103  VAL HG22', -0.476, (7.105, 46.304, -65.19)), (' B 183  THR  OG1', ' B 228  THR  OG1', -0.472, (-26.872, 17.609, -42.51)), (' A 326  PRO  HG2', ' A 329  LYS  HZ1', -0.471, (-7.792, -0.481, -57.598)), (' A 326  PRO  CD ', ' A 329  LYS  NZ ', -0.468, (-8.507, -0.211, -58.027)), (' B 451  THR HG21', ' B 585  LEU HD23', -0.467, (-25.076, 27.848, -6.124)), (' B 445  PRO  HD2', ' B 448  ILE HD12', -0.466, (-26.375, 35.806, -10.357)), (' A 326  PRO  CB ', ' A 329  LYS  HZ2', -0.465, (-9.056, -0.671, -57.032)), (' A 326  PRO  HG2', ' A 329  LYS  NZ ', -0.461, (-8.117, -0.514, -57.095)), (' B  13  SER  O  ', ' B  44  SER  HA ', -0.46, (1.187, -2.482, -47.196)), (' A 516  ASN  ND2', ' A 803  HOH  O  ', -0.458, (-26.714, 30.098, -78.558)), (' B 249  ILE HG23', ' B 273  GLY  HA3', -0.458, (5.345, 39.405, -25.883)), (' A 371  VAL HG23', ' A 393  ALA  HB2', -0.457, (-0.216, 16.001, -58.602)), (' A 151  ILE HG12', ' A 226  VAL HG22', -0.457, (-30.954, 41.014, -61.019)), (' A 425  VAL HG12', ' A 429  MET  HE3', -0.455, (-1.45, 21.239, -73.403)), (' A 451  THR HG21', ' A 585  LEU HD23', -0.455, (-15.224, 17.6, -93.717)), (' B   7  LEU HD13', ' B 103  VAL HG22', -0.454, (2.342, -0.516, -31.081)), (' B 156  GLU  HB3', ' B 164  HIS  HB2', -0.454, (-47.601, 14.13, -40.867)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.452, (3.181, 42.267, -28.783)), (' B 151  ILE HG12', ' B 226  VAL HG22', -0.45, (-31.372, 9.493, -44.222)), (' A 163  LEU HD11', ' A 200  PHE  HE2', -0.445, (-37.925, 31.266, -66.854)), (' B 442  ARG HH11', ' B 464  HIS  CE1', -0.442, (-17.119, 46.552, -11.789)), (' B 511  PHE  HB3', ' B 530  THR HG22', -0.434, (-38.293, 27.899, -20.648)), (' B 477  LYS  NZ ', ' B 551  GLU  OE2', -0.434, (-33.593, 13.42, -4.583)), (' B 462  LYS  HA ', ' B 462  LYS  HD3', -0.43, (-14.633, 36.932, -4.858)), (' B 516  ASN  ND2', ' B 813  HOH  O  ', -0.43, (-32.679, 16.488, -24.239)), (' B  16  CYS  O  ', ' B  22  ARG  HA ', -0.428, (-5.914, 0.332, -40.758)), (' A 263  SER  HA ', ' A 266  VAL HG13', -0.426, (1.884, -0.827, -72.875)), (' A 249  ILE HG23', ' A 273  GLY  HA3', -0.422, (8.011, 7.424, -64.07)), (' A 462  LYS  HA ', ' A 462  LYS  HD3', -0.421, (-4.312, 8.656, -91.157)), (' A 252  LEU  HB3', ' A 299  TYR  CD2', -0.42, (4.967, 5.244, -61.651)), (' B 303  ARG  NH1', ' B 353  GLU  O  ', -0.415, (-4.426, 38.677, -41.611)), (' B 154  VAL HG22', ' B 163  LEU HD13', -0.415, (-41.117, 16.391, -42.816)), (' B 376  ILE  HA ', ' B 376  ILE HD12', -0.415, (-10.787, 25.515, -26.769)), (' A  60  VAL HG13', ' A  84  CYS  SG ', -0.411, (4.285, 59.45, -59.699)), (' B 162  GLU  HG2', ' B 210  VAL HG22', -0.411, (-44.189, 21.369, -33.931)), (' A 120  TYR  CE2', ' A 409  ARG  HG2', -0.411, (-10.469, 35.529, -73.246)), (' B 182  PHE  HB3', ' B 225  PHE  HB3', -0.41, (-32.742, 15.634, -41.168)), (' A 165  LEU HD11', ' A 200  PHE  CZ ', -0.407, (-35.953, 33.169, -66.679)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.405, (-25.585, 19.731, -87.053)), (' A 140  ALA  O  ', ' A 144  THR HG23', -0.402, (-14.469, 42.186, -62.108)), (' B 425  VAL HG12', ' B 429  MET  HE3', -0.4, (-7.121, 25.644, -22.023)), (' A 445  PRO  HB3', ' A 468  SER  HB3', -0.4, (-18.027, 5.448, -91.674))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
