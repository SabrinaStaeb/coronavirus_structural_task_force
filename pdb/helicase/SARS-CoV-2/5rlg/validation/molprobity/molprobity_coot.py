# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 195 ', 'ILE', 0.00512602, (-34.097, 29.105, -54.352)), ('A', ' 218 ', 'LYS', 0.008459140980681228, (-43.038999999999994, 25.810000000000002, -56.672)), ('A', ' 283 ', 'PRO', 0.04418600257669356, (-7.793999999999988, 14.438000000000004, -81.608)), ('A', ' 484 ', 'VAL', 0.009139525400062336, (-32.19699999999999, 38.356, -80.885)), ('B', '  10 ', 'SER', 0.018377494608161946, (9.698, 3.6190000000000015, -37.514)), ('B', '  48 ', 'TYR', 0.015939448879864614, (-2.564999999999995, -9.296000000000005, -46.88299999999999)), ('B', ' 195 ', 'ILE', 0.09311341134172085, (-32.355000000000004, 21.873999999999995, -48.83799999999999))]
data['omega'] = []
data['rota'] = [('B', '  69 ', 'SER', 0.0013399975614447612, (0.9580000000000064, -13.255999999999997, -54.137)), ('B', '  95 ', 'ASN', 0.22045557636025725, (15.436000000000005, -3.787000000000001, -40.893)), ('B', '  96 ', 'THR', 0.03555995360475178, (14.302000000000003, -0.2640000000000011, -39.61399999999999)), ('B', ' 103 ', 'VAL', 0.059545727454905814, (1.3150000000000017, -1.7220000000000013, -27.044999999999998)), ('B', ' 155 ', 'ARG', 0.12199338431742428, (-45.334999999999994, 11.761, -44.24599999999999)), ('B', ' 188 ', 'THR', 0.19789299894376988, (-35.42, 14.367000000000008, -57.909)), ('B', ' 191 ', 'SER', 0.07222948375182142, (-30.824999999999985, 11.820999999999994, -57.382)), ('B', ' 192 ', 'LYS', 0.0, (-31.309999999999995, 14.216999999999997, -54.359999999999985)), ('B', ' 215 ', 'THR', 0.05622298122377808, (-33.471, 28.377, -44.281)), ('B', ' 220 ', 'ASN', 0.24158445865864117, (-43.751, 18.710999999999995, -48.71499999999999)), ('B', ' 229 ', 'SER', 0.14285952465939084, (-21.636, 13.112, -41.655)), ('B', ' 231 ', 'THR', 0.1138738690527037, (-14.854999999999995, 12.652999999999997, -44.093)), ('B', ' 327 ', 'ILE', 0.19858228951258414, (-13.163999999999994, 47.294, -40.136)), ('B', ' 507 ', 'ARG', 0.005881800121193085, (-42.498, 36.838, -16.273999999999997)), ('B', ' 508 ', 'LYS', 0.2486532552847636, (-39.646, 38.576000000000015, -18.138999999999996)), ('A', '  12 ', 'THR', 0.12865370487158884, (7.646999999999999, 47.26400000000001, -51.935999999999986)), ('A', '  35 ', 'ILE', 0.2404302130295371, (4.193999999999995, 57.802, -66.31899999999999)), ('A', '  51 ', 'ASN', 0.2330914124148619, (-2.164999999999999, 65.884, -47.16)), ('A', '  69 ', 'SER', 0.21359726919424607, (3.993999999999992, 63.740000000000016, -45.59899999999998)), ('A', ' 148 ', 'SER', 0.23363144164273375, (-24.046, 45.416, -65.389)), ('A', ' 156 ', 'GLU', 0.22689876935983627, (-46.390999999999984, 34.957, -64.092)), ('A', ' 183 ', 'THR', 0.0928169540756611, (-29.524, 32.533, -59.043)), ('A', ' 201 ', 'GLU', 0.2922146843777311, (-34.49199999999999, 29.088, -73.251)), ('A', ' 236 ', 'SER', 0.25512239603916553, (-0.30700000000000216, 32.281000000000006, -56.153999999999996)), ('A', ' 255 ', 'THR', 0.11335912705473655, (3.858000000000003, -2.8439999999999976, -63.528)), ('A', ' 485 ', 'SER', 0.029700377816228814, (-28.584999999999987, 37.574, -82.104)), ('A', ' 502 ', 'ARG', 0.006494891984418306, (-36.214, 8.8, -97.384)), ('A', ' 517 ', 'SER', 0.13701785737284414, (-32.213, 28.91, -81.276)), ('A', ' 530 ', 'THR', 0.02447880688123405, (-30.587000000000007, 18.377999999999993, -79.83099999999999))]
data['cbeta'] = []
data['probe'] = [(' B  47  PRO  O  ', ' B 801  HOH  O  ', -1.007, (-3.825, -8.301, -50.665)), (' B  27  CYS  SG ', ' B 956  HOH  O  ', -0.955, (8.291, -4.686, -42.407)), (' A  60  VAL  HB ', ' A 920  HOH  O  ', -0.929, (0.056, 59.122, -57.389)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.907, (9.529, -0.451, -32.552)), (' B   2  VAL  N  ', ' B 803  HOH  O  ', -0.897, (2.835, 3.17, -49.42)), (' B 392  ARG  CB ', ' B1040  HOH  O  ', -0.739, (4.566, 28.649, -39.776)), (' A 368  ALA  O  ', ' A 393  ALA  HA ', -0.735, (1.349, 14.992, -56.91)), (' B  12  THR HG21', ' B  26  CYS  HA ', -0.734, (5.591, -0.973, -40.184)), (' B 376  ILE HG22', ' B 400  GLY  HA3', -0.72, (-11.056, 27.793, -23.311)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.697, (-25.488, 12.183, -80.411)), (' A 537  GLN  O  ', ' A 802  HOH  O  ', -0.693, (-19.528, 16.982, -75.096)), (' A 224  TYR  OH ', ' A 801  HOH  O  ', -0.691, (-31.532, 39.757, -54.329)), (' B 508  LYS  HG2', ' B 701  VW1  N1 ', -0.671, (-38.264, 39.532, -15.194)), (' B  12  THR HG21', ' B  25  LEU  O  ', -0.653, (4.494, -1.311, -40.553)), (' A 334  ILE HD12', ' A 348  VAL HG13', -0.651, (-19.847, 12.797, -54.415)), (' A  13  SER  OG ', ' A  44  SER  HB2', -0.648, (3.334, 51.739, -49.011)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.647, (6.087, -0.969, -40.29)), (' A 468  SER  O  ', ' A 803  HOH  O  ', -0.647, (-20.994, 2.797, -94.587)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.646, (-12.536, 7.885, -52.889)), (' B 115  THR  HA ', ' B 411  LEU  O  ', -0.626, (-20.413, 5.468, -25.544)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.61, (-32.689, 35.387, -21.553)), (' B 201  GLU  OE2', ' B 804  HOH  O  ', -0.598, (-37.778, 22.169, -26.458)), (' B  48  TYR  OH ', ' B  90  PHE  O  ', -0.598, (3.923, -7.876, -46.022)), (' B  13  SER  O  ', ' B  44  SER  HA ', -0.595, (2.036, -1.763, -46.586)), (' A 163  LEU HD23', ' A 211  TYR  CD2', -0.589, (-40.166, 28.906, -65.779)), (' A 497  ARG  HG2', ' A 883  HOH  O  ', -0.567, (-39.132, 15.24, -92.051)), (' B   7  LEU HD12', ' B 103  VAL HG22', -0.566, (2.221, -0.523, -30.397)), (' A 367  THR  HA ', ' A 392  ARG  O  ', -0.564, (-0.38, 16.383, -54.018)), (' B  44  SER  N  ', ' B  46  ASN  O  ', -0.557, (-0.747, -3.685, -47.912)), (' B   8  CYS  SG ', ' B  99  GLY  O  ', -0.552, (8.609, 0.519, -31.601)), (' A 480  ILE HG12', ' A 550  THR HG22', -0.548, (-27.496, 32.55, -91.487)), (' A 269  TYR  OH ', ' A 294  GLY  HA3', -0.543, (-3.475, 4.01, -70.023)), (' B   7  LEU  CD1', ' B 103  VAL HG22', -0.541, (1.886, -0.393, -30.185)), (' A   7  LEU HD13', ' A 103  VAL HG22', -0.538, (6.533, 45.918, -65.176)), (' B 477  LYS  NZ ', ' B 551  GLU  OE2', -0.538, (-33.983, 14.144, -4.68)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.536, (-30.848, 21.947, -80.317)), (' B  34  VAL  O  ', ' B  40  LYS  NZ ', -0.529, (-4.893, -11.018, -33.29)), (' A 140  ALA  HA ', ' A 232  VAL HG21', -0.529, (-12.538, 38.894, -61.024)), (' A 269  TYR  CD1', ' A 295  LEU HD13', -0.525, (0.486, 7.001, -68.997)), (' B 508  LYS  HG2', ' B 701  VW1  C7 ', -0.52, (-38.195, 39.945, -15.005)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.519, (2.993, 42.498, -29.366)), (' B 508  LYS  CG ', ' B 701  VW1  N1 ', -0.518, (-38.223, 39.792, -15.827)), (' A  93  TYR  O  ', ' A  94  LYS  O  ', -0.517, (15.216, 49.516, -53.072)), (' B 188  THR  HG1', ' B 191  SER  H  ', -0.507, (-33.126, 12.592, -58.333)), (' B 279  THR  HB ', ' B 429  MET  HE2', -0.506, (-5.567, 27.973, -20.662)), (' B 277  TYR  HA ', ' B 396  TYR  O  ', -0.504, (-0.056, 30.498, -27.022)), (' A   4  ALA  O  ', ' A  24  PHE  HB2', -0.503, (3.543, 43.325, -55.173)), (' B 103  VAL  CG1', ' B 103  VAL  O  ', -0.5, (-0.414, -2.082, -28.313)), (' B 323  LYS  HG2', ' B 323  LYS  O  ', -0.499, (-15.784, 48.7, -29.853)), (' A 130  LEU HD12', ' A 874  HOH  O  ', -0.499, (5.292, 40.574, -69.01)), (' B 177  ASN  HB3', ' B 516  ASN  ND2', -0.498, (-33.588, 17.45, -26.536)), (' B 184  GLY  C  ', ' B 195  ILE HG22', -0.497, (-33.466, 18.783, -47.695)), (' A 277  TYR  HA ', ' A 396  TYR  O  ', -0.493, (3.163, 17.225, -66.383)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.491, (-31.081, 21.664, -79.839)), (' B 220  ASN  N  ', ' B 220  ASN  OD1', -0.491, (-42.159, 19.539, -49.525)), (' A 296  ALA  O  ', ' A 300  PRO  HA ', -0.49, (-2.153, 1.625, -61.416)), (' B 506  TRP  HA ', ' B 701  VW1  N1 ', -0.481, (-38.773, 38.415, -13.8)), (' A 304  ILE HG12', ' A 370  ILE  HB ', -0.476, (-1.661, 9.792, -61.282)), (' B 368  ALA  O  ', ' B 393  ALA  HA ', -0.468, (2.037, 33.299, -36.354)), (' B 279  THR  HB ', ' B 429  MET  CE ', -0.468, (-5.561, 27.77, -20.777)), (' B 500  LEU  HB3', ' B 507  ARG  HD2', -0.467, (-45.604, 34.774, -13.898)), (' B 120  TYR  CE2', ' B 409  ARG  HG2', -0.462, (-15.784, 11.48, -25.93)), (' A 318  CYS  HB3', ' A 343  PHE  CD2', -0.462, (-18.039, 7.864, -62.063)), (' A  83  LEU  O  ', ' A  89  VAL  HA ', -0.457, (8.392, 58.832, -57.026)), (' A 329  LYS  HE2', ' A 354  GLN  OE1', -0.455, (-6.222, 1.829, -55.732)), (' B 551  GLU  HG3', ' B 938  HOH  O  ', -0.453, (-34.288, 13.257, -8.239)), (' B  44  SER  OG ', ' B  45  VAL  N  ', -0.453, (1.85, -2.486, -48.774)), (' A 241  VAL HG12', ' A 999  HOH  O  ', -0.45, (3.799, 25.15, -59.376)), (' B   7  LEU HD21', ' B 106  PHE  HB2', -0.449, (-0.17, 2.541, -30.282)), (' B   7  LEU  CD2', ' B 130  LEU HD21', -0.448, (0.373, 3.924, -30.644)), (' B   8  CYS  SG ', ' B  98  VAL  HB ', -0.446, (10.122, 1.274, -32.566)), (' B 506  TRP  HA ', ' B 701  VW1  C7 ', -0.446, (-39.034, 38.721, -13.553)), (' A 591  GLU  O  ', ' A 592  ILE  HB ', -0.446, (-32.102, 16.554, -102.972)), (' A 445  PRO  HD2', ' A 448  ILE HD12', -0.445, (-17.633, 10.01, -89.664)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.441, (-25.915, 20.184, -87.385)), (' A  77  PRO  HB2', ' A 914  HOH  O  ', -0.441, (9.526, 72.99, -46.339)), (' A   7  LEU HD21', ' A 106  PHE  HB2', -0.441, (3.666, 44.251, -65.726)), (' A 183  THR  N  ', ' A 226  VAL  O  ', -0.438, (-28.967, 33.84, -61.015)), (' A 239  THR  O  ', ' A 388  ASN  ND2', -0.438, (0.217, 25.129, -63.444)), (' A  48  TYR  OH ', ' A  90  PHE  O  ', -0.436, (6.426, 55.978, -51.668)), (' B 333  ILE  HB ', ' B 358  CYS  SG ', -0.436, (-12.001, 31.549, -42.055)), (' B 159  SER  OG ', ' B 160  ASP  O  ', -0.436, (-46.895, 24.238, -38.312)), (' A 339  ARG  NH2', ' A 828  HOH  O  ', -0.435, (-18.899, 24.135, -62.174)), (' A 105  ASP  O  ', ' A 109  ILE HG13', -0.434, (-0.116, 43.533, -70.543)), (' A  59  ASP  OD1', ' A  61  THR  OG1', -0.432, (0.937, 62.815, -62.005)), (' A 269  TYR  OH ', ' A 294  GLY  CA ', -0.432, (-3.331, 4.08, -69.523)), (' A 308  ALA  O  ', ' A 359  THR  HA ', -0.43, (-13.187, 19.744, -63.244)), (' A 281  GLN  HG3', ' A 402  PRO  HD2', -0.429, (-4.249, 19.214, -79.579)), (' A 291  PHE  C  ', ' A 291  PHE  CD1', -0.427, (-3.893, 7.982, -70.828)), (' A 327  ILE HD11', ' A 345  LYS  O  ', -0.425, (-19.433, 2.352, -58.102)), (' B 268  ASN  ND2', ' B 436  MET  HG2', -0.423, (-2.321, 36.563, -17.553)), (' A  12  THR HG21', ' A  25  LEU  O  ', -0.422, (6.409, 49.048, -55.67)), (' A  37  THR  OG1', ' A  39  HIS  HB2', -0.421, (-1.677, 53.619, -65.084)), (' A 328  ASP  HA ', ' A 870  HOH  O  ', -0.421, (-15.116, 2.007, -53.084)), (' A  64  TYR  O  ', ' A  70  TYR  HA ', -0.419, (4.438, 64.657, -50.609)), (' A 544  VAL  O  ', ' A 572  ILE  HA ', -0.419, (-24.453, 13.017, -89.704)), (' B 470  GLN  NE2', ' B 543  TYR  OH ', -0.418, (-34.776, 41.9, -9.343)), (' B   7  LEU HD21', ' B 130  LEU HD21', -0.415, (0.042, 3.569, -30.41)), (' B 516  ASN  ND2', ' B 833  HOH  O  ', -0.415, (-32.891, 16.876, -24.221)), (' A  21  ARG  NE ', ' A 136  GLU  OE2', -0.415, (-7.034, 39.934, -57.943)), (' B  95  ASN  N  ', ' B  95  ASN  OD1', -0.415, (14.85, -3.68, -42.515)), (' A 167  TRP  CZ3', ' A 174  PRO  HD2', -0.415, (-31.209, 39.333, -68.869)), (' B 149  TYR  HB3', ' B 174  PRO  HD3', -0.413, (-31.059, 8.245, -36.489)), (' B 542  ASP  OD1', ' B 569  LYS  HE3', -0.412, (-30.03, 41.634, -17.677)), (' A  19  CYS  HB2', ' A  23  PRO  HD2', -0.411, (-3.541, 47.442, -59.737)), (' A 269  TYR  OH ', ' A 294  GLY  C  ', -0.41, (-2.941, 4.195, -69.241)), (' B 373  PHE  CE1', ' B 387  VAL HG21', -0.409, (-7.764, 25.619, -32.548)), (' B 124  ASN HD22', ' B 421  TYR  HA ', -0.409, (-8.398, 15.002, -20.47)), (' B   5  CYS  HB2', ' B  26  CYS  HB3', -0.409, (6.408, 1.064, -37.322)), (' B  55  CYS  SG ', ' B  57  VAL HG23', -0.408, (-9.247, -19.067, -47.337)), (' A  33  HIS  HA ', ' A 107  ASN  OD1', -0.408, (2.357, 51.22, -66.547)), (' B 544  VAL  O  ', ' B 572  ILE  HA ', -0.407, (-33.518, 33.004, -11.974)), (' B 179  ASN  HA ', ' B 179  ASN HD22', -0.407, (-26.045, 19.345, -30.21)), (' B 195  ILE  O  ', ' B 195  ILE HG23', -0.406, (-33.658, 21.852, -47.008)), (' B  48  TYR  CZ ', ' B  90  PHE  O  ', -0.405, (3.413, -7.766, -45.45)), (' B   8  CYS  SG ', ' B  99  GLY  CA ', -0.404, (8.846, -0.378, -31.831)), (' A 429  MET  HG2', ' A 434  PRO  HB3', -0.404, (0.682, 19.136, -77.499)), (' A 275  GLN  O  ', ' A 395  HIS  ND1', -0.403, (7.048, 13.37, -64.135)), (' A 263  SER  N  ', ' A 830  HOH  O  ', -0.402, (-2.172, -1.33, -75.093)), (' B  13  SER  O  ', ' B  13  SER  OG ', -0.402, (3.8, -1.716, -46.762)), (' B  84  CYS  HB3', ' B 929  HOH  O  ', -0.4, (1.505, -14.766, -40.387))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
