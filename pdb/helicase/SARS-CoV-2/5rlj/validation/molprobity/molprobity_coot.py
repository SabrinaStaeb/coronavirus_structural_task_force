# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 195 ', 'ILE', 0.06650543898796211, (-34.785, 28.523, -54.563)), ('A', ' 484 ', 'VAL', 0.007265466049855609, (-32.437, 37.441, -80.857))]
data['omega'] = []
data['rota'] = [('A', '   7 ', 'LEU', 0.147691636724946, (6.386000000000001, 41.846, -62.45)), ('A', '  12 ', 'THR', 0.018571564594315002, (7.500999999999996, 46.821, -51.837)), ('A', '  35 ', 'ILE', 0.0, (3.6349999999999936, 56.968, -66.228)), ('A', '  36 ', 'SER', 0.05924234136389349, (2.378000000000003, 54.893, -69.20300000000002)), ('A', '  46 ', 'ASN', 0.18891375377276903, (-2.2169999999999925, 54.828, -46.351)), ('A', '  51 ', 'ASN', 0.016803795038499984, (-2.708000000000002, 65.127, -46.95100000000001)), ('A', '  69 ', 'SER', 0.034279619842106715, (3.246999999999999, 62.98499999999999, -45.452)), ('A', '  81 ', 'PHE', 0.11462176112678878, (10.76400000000001, 65.283, -52.971)), ('A', ' 158 ', 'LEU', 0.20539169871310403, (-47.773, 27.708, -67.326)), ('A', ' 166 ', 'SER', 0.061584949170911604, (-40.885, 40.089, -66.747)), ('A', ' 173 ', 'ARG', 0.15688309477358933, (-31.190999999999995, 40.67400000000001, -71.024)), ('A', ' 207 ', 'ASP', 0.1518429829846425, (-43.85199999999998, 34.377, -75.484)), ('A', ' 209 ', 'VAL', 0.04859595845758282, (-39.92599999999998, 30.087000000000003, -72.15100000000001)), ('A', ' 215 ', 'THR', 0.0736757097780503, (-33.881999999999984, 21.817999999999994, -57.427)), ('A', ' 217 ', 'TYR', 0.2953738891838989, (-39.665, 23.707, -56.653)), ('A', ' 255 ', 'THR', 0.007344407092255135, (3.6830000000000016, -3.384999999999998, -63.265000000000015)), ('A', ' 502 ', 'ARG', 0.12312515196938484, (-36.231, 7.9630000000000045, -97.146)), ('A', ' 530 ', 'THR', 0.021758937509730458, (-30.707000000000004, 17.466, -79.90600000000002)), ('A', ' 591 ', 'GLU', 0.2563361453517437, (-28.989, 16.068, -104.465)), ('A', ' 592 ', 'ILE', 0.01957072684717254, (-31.99399999999997, 18.529000000000003, -103.878)), ('B', '   8 ', 'CYS', 0.05845569144461711, (7.4990000000000006, 3.6569999999999983, -33.741)), ('B', '  12 ', 'THR', 0.07975594398838516, (6.366, 0.6579999999999977, -43.24700000000001)), ('B', '  27 ', 'CYS', 0.012204796803416684, (6.578000000000003, -5.366000000000007, -38.986)), ('B', '  51 ', 'ASN', 0.020807040467055185, (-5.252999999999995, -15.050000000000004, -53.576000000000015)), ('B', '  68 ', 'MET', 0.0010611660611359042, (4.636000000000002, -12.547999999999998, -55.05800000000001)), ('B', '  69 ', 'SER', 0.017391590831545782, (1.0460000000000012, -13.502, -53.945)), ('B', '  97 ', 'CYS', 0.0753736783221223, (12.244999999999997, -1.6310000000000002, -36.946)), ('B', ' 103 ', 'VAL', 0.0661237891277817, (1.6509999999999998, -1.8220000000000027, -27.423000000000002)), ('B', ' 192 ', 'LYS', 0.04832090843704216, (-31.76999999999999, 13.564, -54.366000000000014)), ('B', ' 195 ', 'ILE', 0.09961850996420088, (-32.958999999999975, 21.013, -49.029)), ('B', ' 219 ', 'LEU', 0.017091625875043592, (-41.41299999999999, 20.674000000000003, -47.48100000000001)), ('B', ' 247 ', 'VAL', 0.11739684724002862, (12.881999999999998, 36.129, -21.092)), ('B', ' 353 ', 'GLU', 0.06938949914640705, (-6.434999999999994, 40.401, -43.466)), ('B', ' 484 ', 'VAL', 0.06081619879251426, (-37.89999999999999, 8.276999999999996, -25.687))]
data['cbeta'] = [('A', '  81 ', 'PHE', ' ', 0.268532773467849, (11.34300000000001, 64.056, -52.252)), ('A', ' 484 ', 'VAL', ' ', 0.27696310503771415, (-32.18299999999998, 37.391999999999996, -79.301)), ('A', ' 530 ', 'THR', ' ', 0.2995561782061584, (-31.851, 18.504, -79.885)), ('A', ' 592 ', 'ILE', ' ', 0.32868741547865626, (-33.184, 17.841, -103.101))]
data['probe'] = [(' A 158  LEU HD21', ' A 164  HIS  ND1', -0.821, (-46.682, 31.193, -70.052)), (' B   7  LEU HD21', ' B 106  PHE  HB2', -0.807, (0.034, 2.292, -30.467)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.739, (5.85, -1.816, -40.492)), (' B 442  ARG HH11', ' B 464  HIS  CE1', -0.717, (-17.78, 46.139, -11.914)), (' A 158  LEU HD21', ' A 164  HIS  CE1', -0.709, (-47.234, 31.318, -70.871)), (' A 352  LEU HD11', ' B 234  PRO  HD3', -0.678, (-7.387, 11.575, -44.715)), (' B  12  THR HG22', ' B  14  LEU  H  ', -0.675, (4.527, -1.474, -43.412)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.666, (-38.313, 28.135, -3.246)), (' B 279  THR  HB ', ' B 429  MET  HE3', -0.664, (-6.186, 27.494, -20.622)), (' B  12  THR HG21', ' B  25  LEU  O  ', -0.636, (3.722, -1.849, -40.544)), (' A 255  THR HG23', ' A 300  PRO  HG3', -0.631, (0.514, -3.014, -61.098)), (' B 183  THR  OG1', ' B 228  THR  OG1', -0.628, (-27.248, 16.597, -43.417)), (' A 158  LEU HD12', ' A 162  GLU  HB3', -0.602, (-44.909, 27.767, -70.863)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.601, (-12.859, 7.061, -52.671)), (' A 279  THR  HB ', ' A 429  MET  HE3', -0.598, (-0.221, 18.269, -74.261)), (' B 701  VW4  N1 ', ' B 803  HOH  O  ', -0.596, (-18.277, 37.977, -24.859)), (' B 155  ARG  HE ', ' B 164  HIS  HD2', -0.593, (-47.745, 9.884, -40.2)), (' B  12  THR HG21', ' B  26  CYS  HA ', -0.592, (4.939, -1.658, -40.639)), (' A 442  ARG HH11', ' A 464  HIS  CE1', -0.572, (-8.128, -0.839, -84.417)), (' B  12  THR HG23', ' B  26  CYS  HA ', -0.553, (6.239, -1.637, -40.936)), (' B  13  SER  O  ', ' B  44  SER  HA ', -0.552, (1.296, -2.718, -47.078)), (' B  27  CYS  HB3', ' B  89  VAL  O  ', -0.531, (6.84, -7.38, -41.1)), (' B 124  ASN HD22', ' B 421  TYR  HA ', -0.529, (-8.612, 14.694, -20.77)), (' A  19  CYS  HB2', ' A  23  PRO  HD2', -0.528, (-3.854, 46.851, -59.891)), (' B  27  CYS  SG ', ' B 938  HOH  O  ', -0.523, (7.851, -5.806, -41.772)), (' B 143  GLU  HA ', ' B 146  LYS  HE2', -0.522, (-20.937, 11.267, -37.731)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.505, (9.897, -0.095, -32.791)), (' B  19  CYS  HB2', ' B  23  PRO  HD2', -0.499, (-5.912, 0.75, -38.222)), (' A 445  PRO  HD2', ' A 448  ILE HD12', -0.489, (-17.968, 9.126, -89.164)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.489, (-32.586, 34.655, -21.75)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.488, (-30.981, 20.73, -79.764)), (' B 249  ILE HG23', ' B 273  GLY  HA3', -0.486, (4.947, 39.296, -26.16)), (' B 185  TYR  CE2', ' B 194  GLN  HG2', -0.477, (-28.296, 16.741, -49.796)), (' A  12  THR HG21', ' A  26  CYS  HA ', -0.475, (7.912, 48.276, -55.447)), (' B 371  VAL HG23', ' B 393  ALA  HB2', -0.47, (-0.876, 31.305, -35.004)), (' B   7  LEU HD13', ' B 103  VAL HG22', -0.466, (2.27, -0.754, -30.955)), (' B 162  GLU  HG2', ' B 210  VAL HG22', -0.463, (-44.269, 21.302, -34.13)), (' B 445  PRO  HD2', ' B 448  ILE HD12', -0.462, (-26.529, 35.633, -10.437)), (' B 154  VAL HG22', ' B 163  LEU HD13', -0.461, (-41.208, 16.268, -42.966)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.46, (-26.228, 11.316, -79.748)), (' A 252  LEU  HB3', ' A 299  TYR  CD2', -0.459, (4.654, 5.014, -61.884)), (' A 326  PRO  HG2', ' A 329  LYS  NZ ', -0.459, (-8.088, -0.939, -56.861)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.456, (-31.241, 20.68, -79.767)), (' A  63  LEU  HB2', ' A  83  LEU HD12', -0.447, (2.326, 61.774, -54.961)), (' B 167  TRP  CD1', ' B 173  ARG  NH1', -0.446, (-40.224, 6.883, -35.811)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.439, (2.819, 42.016, -28.827)), (' A 249  ILE HG23', ' A 273  GLY  HA3', -0.438, (7.69, 6.985, -64.182)), (' B 154  VAL HG13', ' B 163  LEU HD22', -0.434, (-43.637, 16.52, -43.218)), (' B 228  THR HG22', ' B 230  HIS  NE2', -0.432, (-22.221, 16.166, -43.284)), (' B 155  ARG  HE ', ' B 164  HIS  CD2', -0.432, (-48.187, 10.251, -39.805)), (' A 278  SER  HB2', ' A 436  MET  HE2', -0.424, (2.788, 13.191, -71.608)), (' A 320  LYS  HE3', ' A 324  TYR  HE1', -0.422, (-11.818, 1.255, -70.604)), (' B 511  PHE  HB3', ' B 530  THR HG22', -0.422, (-38.437, 27.733, -20.715)), (' A  12  THR  OG1', ' A  26  CYS  HA ', -0.42, (7.499, 47.043, -54.998)), (' B 167  TRP  CZ3', ' B 174  PRO  HD2', -0.418, (-34.43, 8.852, -36.477)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.417, (-26.178, 19.022, -87.013)), (' B 278  SER  HB2', ' B 436  MET  HE2', -0.416, (-1.93, 32.702, -21.111)), (' A 140  ALA  O  ', ' A 144  THR HG23', -0.416, (-15.321, 41.48, -62.066)), (' B 386  VAL  O  ', ' B 390  ARG  HG2', -0.412, (-5.536, 22.867, -38.957)), (' B 175  PRO  HD2', ' B 180  TYR  CE2', -0.409, (-29.024, 11.437, -31.65)), (' A 175  PRO  HD2', ' A 180  TYR  CE2', -0.408, (-25.78, 35.713, -71.395)), (' B 149  TYR  HB3', ' B 174  PRO  HD3', -0.407, (-31.164, 7.744, -36.473)), (' A 551  GLU  HG3', ' A 577  SER  HB3', -0.406, (-24.141, 29.127, -94.739)), (' B 377  SER  O  ', ' B 406  PRO  HA ', -0.405, (-16.005, 21.173, -23.52)), (' B 320  LYS  HE3', ' B 324  TYR  HE1', -0.404, (-15.617, 44.983, -26.484)), (' B 512  ILE  O  ', ' B 546  PHE  HA ', -0.401, (-34.132, 25.839, -15.485)), (' B  27  CYS  SG ', ' B  94  LYS  HA ', -0.4, (10.488, -4.895, -41.301)), (' A  13  SER  HB2', ' A  92  LEU HD12', -0.4, (6.449, 49.507, -48.021))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
