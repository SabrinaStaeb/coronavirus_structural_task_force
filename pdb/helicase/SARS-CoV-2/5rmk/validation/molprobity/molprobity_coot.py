# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 283 ', 'PRO', 0.05647241328691395, (-7.877999999999991, 14.147000000000011, -81.575)), ('A', ' 484 ', 'VAL', 0.010992956313997247, (-32.53099999999999, 37.79, -80.34)), ('B', ' 215 ', 'THR', 0.0086721373232399, (-33.73999999999999, 27.551000000000005, -43.342))]
data['omega'] = []
data['rota'] = [('A', '  12 ', 'THR', 0.0, (7.990000000000007, 47.16099999999999, -52.184)), ('A', '  35 ', 'ILE', 0.026577430223148825, (3.9479999999999977, 57.558, -66.535)), ('A', '  46 ', 'ASN', 0.015184195156221436, (-0.9759999999999982, 55.159, -46.629)), ('A', ' 156 ', 'GLU', 0.08532938056434757, (-46.46599999999998, 34.038, -64.087)), ('A', ' 162 ', 'GLU', 0.08893293401173613, (-42.3, 26.816, -68.944)), ('A', ' 163 ', 'LEU', 0.1555931625214489, (-42.971999999999994, 30.399, -67.597)), ('A', ' 173 ', 'ARG', 0.01986195712253888, (-30.808, 41.626999999999995, -70.436)), ('A', ' 209 ', 'VAL', 0.00997534853667841, (-39.78799999999998, 30.59400000000001, -72.383)), ('A', ' 226 ', 'VAL', 0.04132198344312968, (-29.131999999999984, 37.313, -60.386)), ('A', ' 255 ', 'THR', 0.0013599335943581536, (3.9960000000000013, -3.2419999999999973, -63.172000000000004)), ('A', ' 344 ', 'ASP', 0.01607402280646649, (-23.442000000000004, 8.442000000000007, -58.625)), ('A', ' 440 ', 'THR', 0.23677189345370314, (-5.325999999999986, 6.978000000000005, -84.80000000000003)), ('A', ' 517 ', 'SER', 0.0590572081411466, (-32.64699999999999, 28.34700000000001, -80.974)), ('A', ' 530 ', 'THR', 0.025125036214563634, (-30.658, 17.869, -79.592)), ('A', ' 531 ', 'GLN', 0.04527983205350989, (-27.125999999999998, 19.134000000000015, -78.712)), ('A', ' 592 ', 'ILE', 0.01110276068899778, (-32.61500000000001, 18.668000000000006, -103.317)), ('B', '   8 ', 'CYS', 0.1362525183680417, (7.252999999999999, 3.820000000000003, -33.811)), ('B', '  11 ', 'GLN', 0.2171466580494043, (8.577000000000002, 3.4879999999999978, -42.235)), ('B', '  68 ', 'MET', 0.00047175067441294904, (4.558000000000002, -12.869, -55.524)), ('B', '  69 ', 'SER', 0.08832036122572458, (0.9290000000000047, -13.833999999999993, -54.507)), ('B', '  95 ', 'ASN', 0.0021538173898911265, (15.259999999999998, -3.7119999999999997, -41.543)), ('B', '  96 ', 'THR', 0.007583094667987935, (14.291, -0.4079999999999959, -39.718)), ('B', ' 124 ', 'ASN', 0.06094243397955609, (-6.007, 11.927, -23.042)), ('B', ' 144 ', 'THR', 0.12540928819771263, (-20.257999999999992, 6.065000000000002, -38.496)), ('B', ' 158 ', 'LEU', 0.0688345086068171, (-49.59599999999998, 18.888000000000005, -40.68800000000001)), ('B', ' 162 ', 'GLU', 0.03897247229740409, (-45.486999999999995, 20.699999999999996, -37.35)), ('B', ' 164 ', 'HIS', 0.05354223763754003, (-45.98300000000001, 13.613, -39.207)), ('B', ' 166 ', 'SER', 0.23682438661161187, (-42.345000000000006, 7.998, -40.978)), ('B', ' 191 ', 'SER', 0.27421069904789536, (-31.052, 11.722000000000003, -57.074000000000005)), ('B', ' 192 ', 'LYS', 0.0, (-31.543999999999983, 13.973000000000006, -53.943)), ('B', ' 226 ', 'VAL', 0.23831560629589393, (-30.552000000000003, 12.399000000000003, -41.936)), ('B', ' 289 ', 'SER', 0.09260740271814225, (-13.926999999999992, 38.223, -25.435)), ('B', ' 328 ', 'ASP', 0.23653366963579237, (-11.32899999999999, 46.942, -42.909000000000006)), ('B', ' 353 ', 'GLU', 0.06116719706592233, (-6.478999999999997, 40.547, -43.327)), ('B', ' 458 ', 'ASP', 0.23901898538772282, (-11.339, 27.134999999999994, -5.221)), ('B', ' 484 ', 'VAL', 0.028476536119125213, (-37.743, 8.203, -25.29)), ('B', ' 486 ', 'SER', 0.22557849862724788, (-35.581, 13.066, -21.818)), ('B', ' 551 ', 'GLU', 0.20113604943850596, (-31.297, 14.133, -9.516))]
data['cbeta'] = []
data['probe'] = [(' B  12  THR HG21', ' B  25  LEU  O  ', -0.817, (3.216, -1.142, -41.25)), (' B 279  THR  HB ', ' B 429  MET  HE2', -0.769, (-5.517, 27.287, -20.678)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.69, (-25.516, 11.846, -79.941)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.678, (-32.588, 34.849, -21.623)), (' A 260  ASP  HA ', ' A 263  SER  OG ', -0.66, (-1.078, -5.376, -74.346)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.637, (-31.02, 21.002, -79.9)), (' B  12  THR HG22', ' B  14  LEU  H  ', -0.633, (3.926, -1.119, -43.484)), (' A 326  PRO  HD2', ' A 329  LYS  HZ1', -0.631, (-8.733, -0.477, -58.238)), (' A 224  TYR  OH ', ' A 801  HOH  O  ', -0.628, (-31.151, 38.818, -53.252)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.611, (9.709, 0.135, -33.009)), (' A 177  ASN  ND2', ' A 179  ASN HD22', -0.605, (-24.394, 30.83, -74.772)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.605, (-31.282, 21.016, -79.9)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.597, (-25.905, 19.775, -87.084)), (' A 158  LEU HD11', ' A 164  HIS  CE1', -0.592, (-46.06, 31.533, -71.177)), (' B 277  TYR  HA ', ' B 396  TYR  O  ', -0.59, (-0.337, 29.853, -26.737)), (' A 584  LYS  NZ ', ' A 807  HOH  O  ', -0.588, (-11.521, 26.606, -94.131)), (' A 591  GLU  O  ', ' A 592  ILE  HB ', -0.588, (-32.072, 16.317, -102.778)), (' B 195  ILE  O  ', ' B 195  ILE HG23', -0.579, (-34.459, 21.927, -47.1)), (' A 368  ALA  O  ', ' A 393  ALA  HA ', -0.576, (1.667, 14.229, -56.684)), (' A 498  GLU  HG3', ' A 502  ARG  NH2', -0.573, (-38.116, 14.789, -99.659)), (' B 278  SER  HB2', ' B 436  MET  HE2', -0.571, (-1.315, 32.809, -21.474)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.553, (5.523, -0.685, -40.604)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.551, (2.645, 41.871, -28.925)), (' A 352  LEU HD11', ' B 234  PRO  HD3', -0.54, (-7.813, 12.203, -44.242)), (' A 445  PRO  HB3', ' A 468  SER  HB3', -0.538, (-18.184, 5.781, -91.618)), (' A 215  THR HG22', ' B 193  VAL HG21', -0.52, (-31.098, 21.073, -55.465)), (' B  13  SER  HB3', ' B  92  LEU  HB2', -0.518, (6.196, -1.503, -47.78)), (' B 442  ARG HH11', ' B 464  HIS  CE1', -0.514, (-17.178, 46.404, -11.794)), (' B 103  VAL  O  ', ' B 103  VAL HG12', -0.504, (-0.726, -2.104, -28.92)), (' B 196  GLY  HA3', ' B 215  THR HG21', -0.499, (-32.638, 24.323, -45.38)), (' A 326  PRO  CD ', ' A 329  LYS  HZ1', -0.498, (-8.672, -0.732, -58.105)), (' B  12  THR HG23', ' B  26  CYS  HA ', -0.497, (5.488, -1.356, -41.084)), (' A 277  TYR  HA ', ' A 396  TYR  O  ', -0.497, (2.864, 16.242, -66.172)), (' A 319  GLU  HA ', ' A 319  GLU  OE2', -0.491, (-18.623, 5.352, -66.24)), (' A  19  CYS  HB2', ' A  23  PRO  HD2', -0.487, (-2.87, 47.217, -59.527)), (' A 304  ILE  HA ', ' A 370  ILE  O  ', -0.48, (-2.732, 10.783, -59.459)), (' A 376  ILE HG12', ' A 425  VAL HG11', -0.479, (-2.987, 20.828, -71.274)), (' B 512  ILE  O  ', ' B 546  PHE  HA ', -0.475, (-34.034, 26.33, -15.008)), (' B 460  LYS  CE ', ' B 803  HOH  O  ', -0.472, (-8.923, 28.415, -9.857)), (' A  64  TYR  O  ', ' A  70  TYR  HA ', -0.47, (3.917, 64.182, -50.108)), (' B  19  CYS  HB2', ' B  23  PRO  HD2', -0.468, (-6.149, 0.124, -38.131)), (' B 156  GLU  HB3', ' B 164  HIS  HB2', -0.468, (-48.035, 13.968, -40.961)), (' B  12  THR HG22', ' B  14  LEU  N  ', -0.468, (3.508, -1.311, -43.837)), (' B  49  VAL HG23', ' B  58  THR HG22', -0.464, (-9.036, -12.306, -47.604)), (' A 130  LEU HD12', ' A 910  HOH  O  ', -0.458, (5.163, 40.228, -69.359)), (' B 533  VAL HG11', ' B 560  ARG  O  ', -0.456, (-25.315, 23.961, -16.411)), (' A  16  CYS  O  ', ' A  22  ARG  HA ', -0.455, (-3.517, 48.337, -57.453)), (' B 451  THR HG21', ' B 585  LEU HD23', -0.454, (-25.593, 27.269, -5.844)), (' A 326  PRO  CG ', ' A 329  LYS  HZ1', -0.452, (-8.735, -1.028, -57.704)), (' A  60  VAL  HB ', ' A 846  HOH  O  ', -0.449, (0.016, 58.637, -56.83)), (' A   7  LEU HD13', ' A 103  VAL HG22', -0.447, (7.037, 46.124, -65.437)), (' A 329  LYS  HB2', ' A 329  LYS  NZ ', -0.445, (-8.974, 1.844, -55.96)), (' A  44  SER  OG ', ' A  45  VAL  N  ', -0.439, (2.157, 52.712, -47.891)), (' A 244  GLU  HB2', ' A 276  LYS  HB2', -0.439, (10.094, 17.953, -63.183)), (' B  16  CYS  O  ', ' B  22  ARG  HA ', -0.438, (-6.129, 0.055, -40.883)), (' B 442  ARG  NH1', ' B 464  HIS  CE1', -0.438, (-16.946, 46.675, -12.179)), (' A  49  VAL HG23', ' A  58  THR HG22', -0.437, (-6.042, 61.675, -53.509)), (' A 235  LEU HD21', ' A 382  TYR  CE2', -0.435, (-6.991, 32.623, -60.19)), (' A  60  VAL HG13', ' A  84  CYS  SG ', -0.434, (3.809, 59.268, -59.867)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.43, (-12.862, 7.565, -52.518)), (' B  92  LEU  HB3', ' B  93  TYR  CD2', -0.428, (8.919, -0.443, -46.755)), (' B 120  TYR  CE2', ' B 409  ARG  HG2', -0.427, (-15.792, 11.168, -25.976)), (' A 165  LEU HD11', ' A 200  PHE  CZ ', -0.427, (-36.305, 33.0, -66.085)), (' A 530  THR  CG2', ' A 919  HOH  O  ', -0.426, (-30.189, 21.102, -78.292)), (' A 163  LEU  HG ', ' A 211  TYR  HB3', -0.424, (-39.502, 29.217, -66.046)), (' A 304  ILE HG12', ' A 370  ILE  HB ', -0.423, (-1.769, 9.225, -61.094)), (' A 120  TYR  CE2', ' A 409  ARG  HG2', -0.423, (-11.045, 35.302, -72.822)), (' B 304  ILE  HA ', ' B 370  ILE  O  ', -0.423, (-3.195, 35.91, -33.991)), (' B 307  THR  HA ', ' B 358  CYS  O  ', -0.422, (-11.797, 30.591, -35.701)), (' A 287  GLY  HA2', ' A 914  HOH  O  ', -0.422, (-9.934, 6.616, -75.528)), (' A 276  LYS  O  ', ' A 395  HIS  HA ', -0.416, (4.516, 15.414, -62.902)), (' B 477  LYS  NZ ', ' B 551  GLU  OE2', -0.416, (-33.661, 13.967, -4.156)), (' A 518  GLN  HA ', ' A 518  GLN  OE1', -0.415, (-32.624, 26.346, -85.523)), (' A  72  CYS  SG ', ' A  74  SER  HB2', -0.415, (-1.542, 71.795, -54.463)), (' B 544  VAL  O  ', ' B 572  ILE  HA ', -0.414, (-33.554, 32.578, -11.939)), (' B 376  ILE HG12', ' B 425  VAL HG11', -0.412, (-7.611, 25.284, -24.366)), (' B  65  LEU HD23', ' B  81  PHE  CZ ', -0.412, (7.642, -13.224, -49.64)), (' B 278  SER  HA ', ' B 435  ASP  OD1', -0.411, (-0.438, 29.576, -20.711)), (' B 167  TRP  CZ3', ' B 174  PRO  HD2', -0.409, (-34.773, 9.204, -36.351)), (' B  13  SER  O  ', ' B  44  SER  HA ', -0.408, (0.865, -2.368, -47.146)), (' B 228  THR HG22', ' B 230  HIS  NE2', -0.408, (-22.198, 17.346, -42.827)), (' B 154  VAL HG13', ' B 163  LEU HD22', -0.406, (-43.945, 16.614, -42.756)), (' A 376  ILE  HA ', ' A 376  ILE HD12', -0.406, (-7.197, 21.524, -69.847)), (' A 539  SER  O  ', ' A 567  ARG  HD3', -0.405, (-19.103, 13.85, -79.625)), (' B 385  SER  OG ', ' B 802  HOH  O  ', -0.405, (-3.41, 16.969, -36.253)), (' A 252  LEU  HB3', ' A 299  TYR  CD2', -0.404, (4.764, 5.189, -61.688)), (' A 451  THR HG21', ' A 585  LEU HD23', -0.402, (-15.179, 17.737, -93.579)), (' A  12  THR HG21', ' A  26  CYS  HA ', -0.402, (8.496, 48.92, -55.407)), (' B 409  ARG  HD3', ' B 417  LEU HD22', -0.401, (-16.092, 13.487, -23.09)), (' B  59  ASP  C  ', ' B  59  ASP  OD1', -0.401, (-4.599, -14.097, -40.096))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
