# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 195 ', 'ILE', 0.050357425151525706, (-34.54599999999999, 28.659000000000013, -54.012)), ('A', ' 484 ', 'VAL', 0.008174697730098388, (-32.601, 37.570000000000014, -80.207))]
data['omega'] = []
data['rota'] = [('A', '   7 ', 'LEU', 0.2918265790568776, (6.340999999999999, 41.774000000000015, -62.072)), ('A', '  12 ', 'THR', 0.0, (7.32, 46.719, -51.637)), ('A', '  35 ', 'ILE', 0.13404247327236246, (3.5600000000000023, 56.987000000000016, -66.149)), ('A', '  44 ', 'SER', 0.14629613432225494, (0.9559999999999986, 51.88200000000001, -49.377)), ('A', '  46 ', 'ASN', 0.11788771322477237, (-2.116999999999992, 54.863000000000014, -46.366)), ('A', '  69 ', 'SER', 0.07658225714098371, (3.198000000000004, 63.308000000000014, -45.087)), ('A', '  81 ', 'PHE', 0.22875449118421326, (10.817000000000007, 65.292, -52.806)), ('A', ' 162 ', 'GLU', 0.016058917047242743, (-42.743999999999986, 26.571000000000012, -68.753)), ('A', ' 173 ', 'ARG', 0.013471163072093862, (-31.225999999999996, 40.980000000000004, -70.585)), ('A', ' 179 ', 'ASN', 0.07655847863887638, (-24.102999999999994, 28.886000000000006, -70.122)), ('A', ' 201 ', 'GLU', 0.09767217660967588, (-34.432, 28.06500000000001, -72.894)), ('A', ' 209 ', 'VAL', 0.012602130300365388, (-39.96299999999998, 30.106000000000016, -72.164)), ('A', ' 217 ', 'TYR', 0.08409163429974169, (-39.72099999999998, 24.048000000000012, -56.81)), ('A', ' 255 ', 'THR', 0.02646614765342692, (4.086000000000005, -3.4869999999999948, -63.462999999999994)), ('A', ' 337 ', 'ARG', 0.28105977669367455, (-23.892999999999997, 22.996000000000006, -53.382)), ('A', ' 416 ', 'THR', 0.05663463745551882, (-11.282999999999985, 34.912000000000006, -82.789)), ('A', ' 495 ', 'VAL', 0.19716173233140596, (-34.65399999999999, 19.186000000000014, -95.549)), ('A', ' 502 ', 'ARG', 0.0, (-36.53699999999999, 8.16200000000001, -96.801)), ('A', ' 530 ', 'THR', 0.02991853980347514, (-30.922999999999995, 17.54700000000001, -79.523)), ('A', ' 531 ', 'GLN', 0.03272823507037309, (-27.464000000000006, 18.830000000000005, -78.608)), ('A', ' 551 ', 'GLU', 0.005667116584625704, (-22.343, 30.844000000000015, -92.15)), ('B', '   8 ', 'CYS', 0.15327533744020302, (7.186000000000002, 3.661000000000004, -33.688)), ('B', '  12 ', 'THR', 0.0038578098656885033, (6.151000000000002, 0.6660000000000057, -43.465)), ('B', '  13 ', 'SER', 0.23164090803173193, (4.275, -0.9939999999999944, -46.330000000000005)), ('B', '  69 ', 'SER', 0.0013399975614447612, (0.8529999999999989, -13.802, -54.229)), ('B', '  73 ', 'LYS', 0.2035754476884864, (-2.3029999999999964, -23.209000000000003, -45.39)), ('B', '  92 ', 'LEU', 0.13108351063288554, (8.710000000000003, -3.3709999999999987, -46.284000000000006)), ('B', '  96 ', 'THR', 0.035361193307784186, (14.334, -0.5099999999999962, -39.847)), ('B', ' 103 ', 'VAL', 0.04355672746778075, (1.4819999999999993, -1.7579999999999973, -27.445999999999998)), ('B', ' 124 ', 'ASN', 0.08348053817718333, (-6.020999999999997, 11.962000000000007, -23.013)), ('B', ' 158 ', 'LEU', 0.2601771648176724, (-49.56699999999998, 18.81, -40.291)), ('B', ' 188 ', 'THR', 0.15256985696039507, (-35.35299999999998, 14.364000000000011, -57.458999999999996)), ('B', ' 191 ', 'SER', 0.13808783780115244, (-31.237999999999985, 11.364000000000008, -57.035)), ('B', ' 195 ', 'ILE', 0.11186460202559322, (-32.830999999999996, 21.166000000000004, -48.703)), ('B', ' 219 ', 'LEU', 0.0636568580708764, (-41.278999999999996, 21.077000000000012, -47.22099999999999)), ('B', ' 353 ', 'GLU', 0.10358374524850492, (-6.470999999999998, 40.39200000000001, -43.416999999999994)), ('B', ' 484 ', 'VAL', 0.008600514560766251, (-38.01399999999999, 8.335000000000004, -25.585)), ('B', ' 495 ', 'VAL', 0.17992481836048066, (-44.322, 25.113, -8.515)), ('B', ' 551 ', 'GLU', 0.00670052914659808, (-31.288999999999998, 14.004, -9.585)), ('B', ' 592 ', 'ILE', 0.2495316191550545, (-43.259, 25.024000000000008, -0.93))]
data['cbeta'] = [('A', ' 484 ', 'VAL', ' ', 0.25863934968692454, (-32.34199999999999, 37.33000000000001, -78.669)), ('A', ' 530 ', 'THR', ' ', 0.2696262990866587, (-32.042999999999985, 18.596000000000014, -79.581)), ('A', ' 592 ', 'ILE', ' ', 0.3001688661002216, (-33.961999999999996, 17.545000000000012, -102.11299999999999)), ('B', '  34 ', 'VAL', ' ', 0.257852298959693, (-2.175999999999997, -9.183, -36.174))]
data['probe'] = [(' B  13  SER  HB3', ' B  92  LEU  HB2', -0.998, (6.868, -2.186, -47.865)), (' A 129  ARG  HE ', ' A 701  S9S  C5 ', -0.878, (4.381, 36.246, -60.008)), (' B  21  ARG  HE ', ' B 136  GLU  HG2', -0.796, (-8.623, 9.118, -38.469)), (' A 158  LEU HD11', ' A 164  HIS  CE1', -0.789, (-45.681, 30.528, -71.126)), (' A 158  LEU HD21', ' A 164  HIS  CE1', -0.783, (-47.621, 31.516, -70.85)), (' A 329  LYS  HZ3', ' A 355  TYR  HE2', -0.742, (-7.637, 1.079, -57.709)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.735, (5.701, -1.107, -41.126)), (' A 326  PRO  HD2', ' A 329  LYS  NZ ', -0.734, (-8.094, 0.577, -57.951)), (' B  21  ARG  NE ', ' B 136  GLU  HG2', -0.697, (-8.84, 8.492, -38.743)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.653, (-31.602, 20.721, -79.851)), (' B 701  S9S  N  ', ' B 705  PO4  O3 ', -0.636, (-17.726, 38.875, -21.235)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.635, (-30.84, 21.005, -79.355)), (' B 228  THR HG22', ' B 230  HIS  NE2', -0.625, (-22.073, 16.789, -43.059)), (' B  12  THR HG21', ' B  26  CYS  HA ', -0.615, (5.096, -1.501, -40.91)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.612, (-12.82, 7.321, -52.517)), (' A 329  LYS  HE2', ' A 354  GLN  OE1', -0.611, (-5.791, 1.321, -55.546)), (' A 215  THR HG22', ' B 193  VAL HG21', -0.611, (-32.007, 21.456, -55.434)), (' A   7  LEU HD22', ' A 103  VAL HG22', -0.598, (6.929, 44.4, -65.752)), (' B 146  LYS  HD2', ' B 229  SER  HB3', -0.595, (-23.034, 11.878, -39.581)), (' B 551  GLU  HG2', ' B 577  SER  HB3', -0.594, (-33.982, 15.246, -8.183)), (' B 511  PHE  HB3', ' B 530  THR HG22', -0.594, (-38.476, 28.232, -20.177)), (' A 326  PRO  HG2', ' A 329  LYS  NZ ', -0.585, (-8.241, -1.123, -57.391)), (' A 352  LEU HD11', ' B 234  PRO  HD3', -0.573, (-8.067, 12.062, -44.24)), (' A 158  LEU HD21', ' A 164  HIS  ND1', -0.569, (-47.308, 32.118, -69.835)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.562, (-38.816, 28.511, -2.81)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.551, (-32.726, 34.845, -21.649)), (' A 326  PRO  CG ', ' A 329  LYS  HZ2', -0.55, (-8.707, -0.922, -57.413)), (' A 551  GLU  HG2', ' A 577  SER  HB3', -0.547, (-24.049, 29.514, -94.786)), (' B 177  ASN  HB3', ' B 516  ASN  ND2', -0.541, (-33.627, 17.052, -26.778)), (' A 498  GLU  HG3', ' A 502  ARG HH22', -0.535, (-37.84, 14.204, -98.847)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.526, (-26.24, 11.435, -79.634)), (' B  12  THR HG21', ' B  25  LEU  O  ', -0.526, (3.613, -1.617, -40.756)), (' A  13  SER  O  ', ' A  44  SER  HA ', -0.524, (1.635, 50.524, -50.131)), (' A 326  PRO  CD ', ' A 329  LYS  NZ ', -0.522, (-8.276, -0.453, -58.205)), (' B  12  THR HG23', ' B  26  CYS  HA ', -0.519, (6.131, -1.359, -41.031)), (' A 326  PRO  HB2', ' A 329  LYS  HG3', -0.515, (-9.829, -0.65, -55.944)), (' A 326  PRO  HG2', ' A 329  LYS  HZ2', -0.51, (-8.45, -1.14, -56.952)), (' B 158  LEU HD13', ' B 164  HIS  HB2', -0.503, (-48.244, 14.863, -39.704)), (' B 228  THR  CG2', ' B 230  HIS  NE2', -0.498, (-22.543, 16.706, -43.144)), (' B 280  LEU  HB2', ' B 436  MET  HE3', -0.491, (-4.841, 33.489, -21.023)), (' A 326  PRO  CG ', ' A 329  LYS  NZ ', -0.482, (-8.352, -0.975, -57.627)), (' B 149  TYR  HB3', ' B 174  PRO  HD3', -0.481, (-31.804, 7.916, -36.17)), (' B  19  CYS  HB2', ' B  23  PRO  HD2', -0.48, (-5.972, 0.385, -38.466)), (' A  12  THR HG21', ' A  26  CYS  HA ', -0.476, (7.978, 48.308, -55.252)), (' A 505  ALA  O  ', ' A 508  LYS  HG2', -0.475, (-31.259, 5.211, -86.958)), (' A 519  ASN  HB3', ' A 530  THR HG21', -0.473, (-32.123, 20.995, -79.589)), (' A 445  PRO  HB3', ' A 468  SER  HB3', -0.473, (-18.675, 4.827, -91.524)), (' B 228  THR  CG2', ' B 230  HIS  CE1', -0.467, (-22.295, 17.038, -43.73)), (' A 136  GLU  OE1', ' A 701  S9S  N  ', -0.467, (-3.441, 37.772, -58.515)), (' A 158  LEU HD21', ' A 164  HIS  HE1', -0.466, (-47.373, 31.087, -70.868)), (' B  16  CYS  O  ', ' B  22  ARG  HA ', -0.465, (-5.907, -0.28, -40.752)), (' B 505  ALA  O  ', ' B 508  LYS  HG2', -0.459, (-39.439, 39.533, -15.076)), (' B 445  PRO  HB3', ' B 468  SER  HB3', -0.454, (-28.35, 39.932, -7.727)), (' A 149  TYR  HB3', ' A 174  PRO  HD3', -0.451, (-29.084, 40.393, -67.309)), (' B   4  ALA  O  ', ' B  24  PHE  HB2', -0.451, (2.194, 4.991, -40.306)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.447, (9.534, -0.089, -32.819)), (' A 140  ALA  O  ', ' A 144  THR HG23', -0.446, (-15.322, 41.592, -61.704)), (' A 524  LYS  HA ', ' A 524  LYS  HD2', -0.44, (-41.258, 19.036, -80.707)), (' A 531  GLN  HG2', ' A 536  SER  HB3', -0.44, (-24.088, 17.506, -78.581)), (' A 498  GLU  HG3', ' A 502  ARG  NH2', -0.437, (-37.658, 13.743, -98.961)), (' B   7  LEU HD13', ' B 103  VAL HG22', -0.434, (2.366, -1.043, -30.697)), (' A 280  LEU  HB2', ' A 436  MET  HE3', -0.43, (-0.341, 12.468, -72.999)), (' A 451  THR HG21', ' A 585  LEU HD23', -0.429, (-15.53, 17.143, -93.343)), (' B  19  CYS  CB ', ' B  23  PRO  HD2', -0.428, (-6.077, 0.736, -38.026)), (' A  19  CYS  HB2', ' A  23  PRO  HD2', -0.427, (-3.605, 46.674, -59.212)), (' A 158  LEU HD12', ' A 162  GLU  HB3', -0.426, (-44.82, 28.113, -70.055)), (' B 195  ILE  O  ', ' B 195  ILE HG23', -0.426, (-34.288, 21.725, -46.899)), (' B 451  THR HG21', ' B 585  LEU HD23', -0.425, (-25.636, 27.578, -6.004)), (' B 371  VAL HG23', ' B 393  ALA  HB2', -0.425, (-0.83, 31.275, -34.876)), (' A 409  ARG  NH2', ' A 422  PHE  O  ', -0.42, (-8.143, 30.0, -72.586)), (' A 320  LYS  HE3', ' A 324  TYR  HE1', -0.42, (-11.876, 1.001, -70.298)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.415, (2.852, 41.932, -28.835)), (' B  15  ARG  HG3', ' B  24  PHE  CD2', -0.415, (-0.474, 1.856, -43.619)), (' B 320  LYS  HE3', ' B 324  TYR  HE1', -0.413, (-15.608, 44.892, -26.342)), (' A 376  ILE  HA ', ' A 376  ILE HD12', -0.411, (-7.559, 21.211, -69.663)), (' A 329  LYS  NZ ', ' A 355  TYR  HE2', -0.41, (-7.383, 1.046, -57.711)), (' B  49  VAL HG23', ' B  58  THR HG22', -0.409, (-9.307, -11.963, -46.712)), (' B  13  SER  O  ', ' B  44  SER  HA ', -0.407, (1.219, -2.191, -46.824)), (' A  49  VAL HG23', ' A  58  THR HG22', -0.407, (-6.322, 61.253, -53.425)), (' A   7  LEU HD21', ' A 106  PHE  HB2', -0.406, (3.671, 43.728, -65.826)), (' A  31  TYR  CZ ', ' A  35  ILE HD12', -0.404, (7.83, 58.448, -65.098)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.402, (-26.394, 19.168, -86.746)), (' B 154  VAL HG13', ' B 163  LEU HD22', -0.4, (-43.736, 16.487, -42.832))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
