# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 195 ', 'ILE', 0.032106238713935836, (-33.502999999999986, 29.176999999999985, -54.483)), ('A', ' 339 ', 'ARG', 0.026713942682094226, (-24.778000000000002, 22.933, -59.518)), ('A', ' 484 ', 'VAL', 0.022385473900410794, (-32.404999999999994, 38.533, -80.521))]
data['omega'] = []
data['rota'] = [('A', '  12 ', 'THR', 0.0018857463646043439, (8.455000000000002, 47.763000000000005, -52.584)), ('A', '  26 ', 'CYS', 0.2542077055133509, (9.083000000000006, 48.57299999999999, -57.89800000000001)), ('A', '  35 ', 'ILE', 0.13282927735157354, (4.220000000000004, 58.225999999999985, -66.862)), ('A', '  46 ', 'ASN', 0.004201806389861862, (-0.8059999999999947, 55.63999999999999, -46.888999999999996)), ('A', '  76 ', 'LYS', 0.17898756322687212, (4.4010000000000025, 71.62, -50.629)), ('A', '  81 ', 'PHE', 0.01626838716542338, (11.273999999999997, 66.523, -53.335)), ('A', '  86 ', 'ASN', 0.206024309698707, (14.721000000000007, 60.557, -62.145)), ('A', '  92 ', 'LEU', 0.2573686615349993, (10.642000000000003, 51.862, -49.732)), ('A', ' 156 ', 'GLU', 0.1030526139622641, (-45.940999999999995, 34.75199999999999, -64.04)), ('A', ' 163 ', 'LEU', 0.18482593057387783, (-42.46300000000001, 30.956999999999994, -67.973)), ('A', ' 173 ', 'ARG', 1.1103209585100785e-05, (-30.649, 42.315, -70.65)), ('A', ' 209 ', 'VAL', 0.14468633976919165, (-39.209, 30.881999999999998, -72.817)), ('A', ' 217 ', 'TYR', 0.22343381354277045, (-38.508999999999986, 24.576999999999995, -56.645)), ('A', ' 226 ', 'VAL', 0.039012243056048765, (-28.856000000000005, 37.63899999999999, -60.577999999999996)), ('A', ' 255 ', 'THR', 0.0013599335943581536, (4.608000000000001, -2.5269999999999975, -64.01)), ('A', ' 339 ', 'ARG', 0.1840330440631735, (-24.778000000000002, 22.933, -59.518)), ('A', ' 342 ', 'CYS', 0.11885790241777622, (-23.244, 14.477999999999998, -61.448)), ('A', ' 344 ', 'ASP', 0.1874718855767657, (-22.917, 8.955999999999996, -58.622)), ('A', ' 392 ', 'ARG', 0.023616987492078002, (1.5490000000000048, 19.816999999999997, -55.59300000000001)), ('A', ' 432 ', 'ILE', 0.20001220286755197, (6.926000000000008, 23.70799999999999, -80.238)), ('A', ' 502 ', 'ARG', 0.024559923706475292, (-36.298, 9.491999999999987, -97.086)), ('A', ' 530 ', 'THR', 0.026476324906348426, (-30.414, 18.720999999999993, -79.778)), ('A', ' 531 ', 'GLN', 0.04311586210433384, (-26.929000000000002, 20.028, -78.956)), ('A', ' 592 ', 'ILE', 0.008387145530701558, (-32.476, 19.458999999999993, -103.775)), ('B', '   8 ', 'CYS', 0.23704013574110389, (7.144000000000004, 4.175999999999998, -33.541)), ('B', '  12 ', 'THR', 0.011726586141384629, (5.8280000000000065, 0.8999999999999968, -43.528)), ('B', '  13 ', 'SER', 0.026432015686900477, (4.077000000000003, -0.798, -46.394)), ('B', '  35 ', 'ILE', 0.06989404926857351, (-1.5349999999999993, -10.964, -32.25)), ('B', '  68 ', 'MET', 0.06741275788173098, (4.746000000000006, -12.416000000000004, -55.442)), ('B', '  69 ', 'SER', 0.11375671004879356, (1.149, -13.378, -54.355)), ('B', '  73 ', 'LYS', 0.1288527052608005, (-2.1999999999999975, -22.503999999999998, -45.23)), ('B', '  76 ', 'LYS', 0.1753696175867678, (0.15399999999999991, -21.78, -50.197)), ('B', '  92 ', 'LEU', 0.13178690467896698, (8.645000000000003, -2.9210000000000065, -46.69)), ('B', '  95 ', 'ASN', 0.06217967822534715, (15.133000000000006, -3.485000000000003, -41.504)), ('B', '  96 ', 'THR', 0.07761637658054935, (14.207000000000008, 0.001999999999997115, -39.991)), ('B', '  97 ', 'CYS', 0.1663463386669956, (11.399000000000001, -1.138, -37.738)), ('B', ' 100 ', 'SER', 0.2214909939325192, (6.839000000000004, 0.1590000000000007, -28.955)), ('B', ' 162 ', 'GLU', 0.2589717935368697, (-45.667000000000016, 20.697999999999993, -37.723)), ('B', ' 164 ', 'HIS', 0.00504912235662087, (-46.009999999999984, 13.675, -39.467)), ('B', ' 179 ', 'ASN', 0.0674066927104106, (-27.886, 18.699999999999992, -30.293000000000003)), ('B', ' 191 ', 'SER', 0.08275994826380868, (-30.725, 12.095999999999993, -57.355)), ('B', ' 195 ', 'ILE', 0.10095179391183126, (-32.94100000000002, 21.704, -48.803)), ('B', ' 219 ', 'LEU', 0.030426371816742247, (-41.555, 21.123999999999995, -47.443)), ('B', ' 220 ', 'ASN', 0.008118578006669088, (-43.573, 18.67299999999999, -49.452)), ('B', ' 247 ', 'VAL', 0.19657463958195, (12.668000000000006, 36.31499999999998, -20.751)), ('B', ' 261 ', 'GLU', 0.12268868666856668, (-10.839999999999996, 49.61999999999998, -20.263)), ('B', ' 275 ', 'GLN', 0.18207326825816694, (5.4750000000000005, 32.071, -23.592)), ('B', ' 328 ', 'ASP', 0.16714511439495208, (-11.23, 47.45, -42.632)), ('B', ' 353 ', 'GLU', 0.0, (-6.469999999999997, 40.81499999999998, -43.156)), ('B', ' 432 ', 'ILE', 0.20876076282758974, (-0.8869999999999985, 22.491999999999994, -13.376)), ('B', ' 458 ', 'ASP', 0.0053448242348619725, (-11.296000000000001, 27.235, -5.166)), ('B', ' 484 ', 'VAL', 0.04200837290643478, (-37.991000000000014, 8.369, -25.474)), ('B', ' 592 ', 'ILE', 0.1656754624206518, (-43.281, 24.95499999999999, -0.982))]
data['cbeta'] = [('A', '  81 ', 'PHE', ' ', 0.26450236209620226, (11.932000000000006, 65.291, -52.704)), ('A', ' 183 ', 'THR', ' ', 0.2509068669939503, (-27.167999999999996, 32.926, -58.589)), ('A', ' 484 ', 'VAL', ' ', 0.2669738026747126, (-32.369, 38.339, -78.964)), ('A', ' 530 ', 'THR', ' ', 0.2768676221189272, (-31.53999999999999, 19.758999999999993, -79.751)), ('A', ' 592 ', 'ILE', ' ', 0.2673939440707756, (-33.448, 18.872, -102.64700000000002)), ('B', ' 275 ', 'GLN', ' ', 0.25272228087571347, (4.803000000000003, 31.322999999999997, -22.406))]
data['probe'] = [(' B  12  THR HG21', ' B  25  LEU  O  ', -0.935, (3.121, -1.486, -40.802)), (' A 158  LEU HD11', ' A 164  HIS  CE1', -0.825, (-45.031, 31.716, -71.497)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.753, (-12.493, 8.453, -53.46)), (' A 326  PRO  CG ', ' A 329  LYS  HZ1', -0.731, (-8.239, 0.319, -57.918)), (' A 326  PRO  HD2', ' A 329  LYS  NZ ', -0.671, (-8.665, 0.913, -58.575)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.664, (-32.995, 34.427, -21.497)), (' B  13  SER  HB3', ' B  92  LEU  HB2', -0.661, (6.48, -1.537, -47.603)), (' B 202  LYS  NZ ', ' B 483  ASP  HB2', -0.659, (-40.713, 11.095, -25.132)), (' A 326  PRO  CD ', ' A 329  LYS  HZ1', -0.653, (-8.858, 0.648, -57.961)), (' A 158  LEU HD21', ' A 164  HIS  CE1', -0.652, (-46.904, 32.609, -70.926)), (' A 326  PRO  HB2', ' A 329  LYS  NZ ', -0.647, (-9.522, 0.216, -57.266)), (' A 326  PRO  CB ', ' A 329  LYS  HZ1', -0.643, (-8.87, 0.368, -57.776)), (' B 279  THR  HB ', ' B 429  MET  HE2', -0.643, (-5.666, 27.357, -20.693)), (' B 177  ASN  HB2', ' B 516  ASN  ND2', -0.641, (-33.115, 18.234, -26.335)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.623, (-25.545, 12.5, -80.139)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.621, (-30.811, 22.312, -80.231)), (' A 326  PRO  HD2', ' A 329  LYS  HZ1', -0.614, (-8.422, 0.549, -58.567)), (' A 297  LEU HD11', ' A 324  TYR  HB3', -0.605, (-7.526, -0.069, -66.672)), (' A 279  THR  HB ', ' A 429  MET  HE2', -0.602, (-0.142, 19.34, -74.939)), (' B 202  LYS  HZ1', ' B 483  ASP  HB2', -0.6, (-41.036, 10.846, -25.148)), (' A 158  LEU HD21', ' A 164  HIS  ND1', -0.597, (-46.464, 33.255, -70.314)), (' A 326  PRO  HB2', ' A 329  LYS  HZ1', -0.594, (-8.791, 0.34, -57.305)), (' A 332  ARG  NH2', ' A 342  CYS  SG ', -0.592, (-19.669, 15.485, -61.836)), (' A 139  LYS  O  ', ' A 143  GLU  HG2', -0.591, (-14.019, 38.447, -63.061)), (' B  12  THR HG23', ' B  26  CYS  HA ', -0.589, (5.926, -1.082, -40.967)), (' B 249  ILE HG23', ' B 273  GLY  HA3', -0.588, (5.047, 38.798, -25.81)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.567, (-38.269, 28.407, -3.158)), (' A 202  LYS  HA ', ' A 209  VAL HG23', -0.567, (-36.624, 31.63, -74.801)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.565, (-31.09, 21.91, -79.84)), (' B 297  LEU HD11', ' B 324  TYR  HB3', -0.562, (-10.448, 47.617, -29.294)), (' A 445  PRO  HD2', ' A 448  ILE HD12', -0.545, (-17.354, 10.02, -89.388)), (' B 445  PRO  HD2', ' B 448  ILE HD12', -0.543, (-26.764, 35.709, -10.277)), (' B 156  GLU  HB3', ' B 164  HIS  HB2', -0.54, (-47.919, 13.911, -41.392)), (' A 214  THR HG22', ' A 340  VAL HG12', -0.538, (-27.897, 22.728, -63.382)), (' B 202  LYS  HZ3', ' B 483  ASP  CG ', -0.537, (-40.158, 12.408, -25.427)), (' A 249  ILE HG23', ' A 273  GLY  HA3', -0.531, (8.221, 7.848, -64.653)), (' B  12  THR HG22', ' B  14  LEU  H  ', -0.53, (3.785, -1.125, -43.793)), (' B 158  LEU HD11', ' B 164  HIS  ND1', -0.528, (-49.913, 14.317, -39.415)), (' B 249  ILE HD11', ' B 270  GLN  HG2', -0.525, (4.281, 43.021, -22.333)), (' B 511  PHE  HB3', ' B 530  THR HG22', -0.525, (-38.284, 28.367, -20.137)), (' B 371  VAL HG23', ' B 393  ALA  HB2', -0.519, (-0.769, 31.584, -34.739)), (' A 371  VAL HG23', ' A 393  ALA  HB2', -0.515, (-0.002, 16.772, -59.016)), (' A  19  CYS  HB2', ' A  23  PRO  HD2', -0.514, (-3.106, 47.775, -60.273)), (' B 154  VAL HG22', ' B 163  LEU HD13', -0.513, (-41.782, 16.877, -42.691)), (' A 249  ILE HD11', ' A 270  GLN  HG2', -0.506, (8.804, 4.435, -68.186)), (' B 167  TRP  CZ3', ' B 174  PRO  HD2', -0.503, (-34.504, 9.134, -37.076)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.489, (5.182, -0.652, -40.948)), (' A  32  ASP  HB3', ' A 103  VAL HG11', -0.488, (7.684, 51.646, -67.764)), (' A 579  ARG  HG2', ' A 957  HOH  O  ', -0.487, (-19.253, 28.781, -103.787)), (' A 425  VAL HG12', ' A 429  MET  HE3', -0.484, (-1.583, 21.419, -74.199)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.48, (-26.0, 20.338, -87.228)), (' B 258  ILE HG13', ' B 259  SER  N  ', -0.48, (-6.091, 51.001, -23.776)), (' B  10  SER  HB2', ' B  26  CYS  HB3', -0.477, (7.876, 1.245, -38.173)), (' A 163  LEU HD11', ' A 200  PHE  HE2', -0.472, (-37.408, 31.301, -66.962)), (' B 163  LEU HD21', ' B 219  LEU HD13', -0.469, (-43.4, 19.415, -43.613)), (' B  19  CYS  HB2', ' B  23  PRO  HD2', -0.466, (-6.151, 0.989, -38.424)), (' B  13  SER  O  ', ' B  44  SER  HA ', -0.466, (1.106, -1.878, -47.057)), (' B 157  VAL HG23', ' B 221  VAL HG23', -0.464, (-46.91, 17.035, -47.024)), (' B 185  TYR  CE2', ' B 194  GLN  HG2', -0.464, (-28.52, 17.267, -49.21)), (' A 214  THR  HB ', ' A 339  ARG  O  ', -0.464, (-27.687, 22.277, -60.37)), (' A 409  ARG  NH2', ' A 422  PHE  O  ', -0.46, (-7.239, 31.169, -73.332)), (' A  19  CYS  CB ', ' A  23  PRO  HD2', -0.459, (-2.86, 47.548, -60.66)), (' B  19  CYS  CB ', ' B  23  PRO  HD2', -0.455, (-6.182, 1.117, -38.175)), (' B 512  ILE  O  ', ' B 546  PHE  HA ', -0.451, (-34.419, 26.211, -14.825)), (' A 386  VAL HG13', ' A 390  ARG  HE ', -0.449, (-7.871, 26.654, -57.343)), (' B 442  ARG HH11', ' B 464  HIS  CE1', -0.448, (-17.222, 46.51, -11.463)), (' A 451  THR HG21', ' A 585  LEU HD23', -0.447, (-15.266, 18.121, -93.82)), (' B 376  ILE HG12', ' B 425  VAL HG11', -0.442, (-7.231, 25.551, -24.173)), (' A 176  LEU HD22', ' A 200  PHE  HB2', -0.442, (-32.667, 33.263, -70.247)), (' B 451  THR HG21', ' B 585  LEU HD23', -0.439, (-25.698, 27.559, -5.851)), (' B 425  VAL HG12', ' B 429  MET  HE3', -0.439, (-7.129, 25.364, -21.648)), (' B 376  ILE  HA ', ' B 376  ILE HD12', -0.438, (-11.139, 25.605, -26.615)), (' B 561  PHE  CZ ', ' B 585  LEU HD21', -0.436, (-27.381, 25.897, -7.726)), (' B   7  LEU HD13', ' B 103  VAL HG22', -0.435, (2.347, -0.646, -30.558)), (' B  52  ALA  HB1', ' B  75  HIS  CD2', -0.431, (-6.309, -21.536, -53.24)), (' A 251  GLY  HA3', ' A 394  LYS  HD3', -0.428, (7.751, 10.623, -57.424)), (' B 474 BMET  HB3', ' B 474 BMET  HE2', -0.426, (-39.403, 25.13, -3.5)), (' B 154  VAL HG13', ' B 163  LEU HD22', -0.422, (-43.983, 16.532, -43.403)), (' B 182  PHE  HB3', ' B 225  PHE  HB3', -0.422, (-33.203, 16.152, -40.959)), (' A 376  ILE HG12', ' A 425  VAL HG11', -0.42, (-2.561, 21.819, -71.744)), (' B  16  CYS  O  ', ' B  22  ARG  HA ', -0.419, (-6.183, 0.034, -40.753)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.417, (2.831, 42.144, -28.681)), (' B 331  SER  HB2', ' B 353  GLU  HG2', -0.416, (-10.119, 40.35, -43.61)), (' A 376  ILE  HA ', ' A 376  ILE HD12', -0.414, (-6.822, 22.304, -70.373)), (' A 263  SER  HA ', ' A 266  VAL HG13', -0.412, (1.924, -0.51, -73.102)), (' B 202  LYS  HZ3', ' B 483  ASP  HB2', -0.411, (-40.895, 12.078, -25.285)), (' A 561  PHE  CZ ', ' A 585  LEU HD21', -0.411, (-17.762, 19.696, -92.864)), (' A 325  LEU  HA ', ' A 326  PRO  HD3', -0.409, (-8.488, 0.305, -61.439)), (' B   8  CYS  SG ', ' B  99  GLY  O  ', -0.407, (8.931, 0.948, -30.816)), (' B 202  LYS  HZ3', ' B 483  ASP  CB ', -0.406, (-40.663, 11.893, -24.868)), (' B  52  ALA  CB ', ' B  75  HIS  CG ', -0.405, (-5.99, -21.05, -52.414)), (' A  77  PRO  HD2', ' A  80  SER  HB3', -0.403, (7.343, 70.256, -49.438)), (' A   6  VAL  HA ', ' A 129  ARG  HD2', -0.4, (4.949, 40.429, -60.864))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
