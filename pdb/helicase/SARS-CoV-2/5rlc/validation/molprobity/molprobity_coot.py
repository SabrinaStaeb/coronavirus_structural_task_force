# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '   9 ', 'ASN', 0.023758695182035185, (9.094000000000001, 39.562, -57.58)), ('A', '  48 ', 'TYR', 0.02526577209408812, (-0.4880000000000084, 58.24500000000001, -51.79900000000001)), ('A', ' 195 ', 'ILE', 0.04866632859897555, (-34.895, 28.589, -54.074)), ('A', ' 218 ', 'LYS', 0.018892020675591384, (-43.839, 25.229, -56.853)), ('A', ' 484 ', 'VAL', 0.017844557245618016, (-32.75699999999999, 37.58600000000001, -80.771)), ('B', '   9 ', 'ASN', 0.025570969961127295, (7.6419999999999995, 6.207, -36.203)), ('B', '  48 ', 'TYR', 0.038312048340770406, (-2.787, -9.69, -46.713)), ('B', ' 103 ', 'VAL', 0.0, (1.416999999999998, -1.6929999999999987, -27.094000000000005)), ('B', ' 158 ', 'LEU', 0.021056621426810775, (-49.483999999999995, 18.647000000000006, -40.397))]
data['omega'] = []
data['rota'] = [('A', '  12 ', 'THR', 0.008159601566148922, (7.465999999999987, 46.407, -52.108)), ('A', '  35 ', 'ILE', 0.01911732241805978, (3.5089999999999923, 56.992, -66.299)), ('A', '  44 ', 'SER', 0.16295425443926753, (1.078999999999997, 51.495, -49.51200000000001)), ('A', '  46 ', 'ASN', 0.1750421877877463, (-1.8629999999999969, 54.61999999999999, -46.522000000000006)), ('A', '  81 ', 'PHE', 0.12302122755122079, (10.887000000000015, 65.05, -52.903)), ('A', ' 173 ', 'ARG', 0.15308025989217539, (-31.61200000000001, 40.592, -70.937)), ('A', ' 201 ', 'GLU', 0.20106579555659115, (-35.069, 28.153, -72.877)), ('A', ' 209 ', 'VAL', 0.008101290320426687, (-40.24700000000001, 30.183000000000007, -71.683)), ('A', ' 215 ', 'THR', 0.018151733304525533, (-34.474000000000004, 21.613000000000003, -56.67400000000001)), ('A', ' 255 ', 'THR', 0.054247036699599155, (3.537999999999996, -3.3340000000000067, -63.115)), ('A', ' 259 ', 'SER', 0.06539106221247956, (-3.0160000000000027, -6.329000000000008, -69.722)), ('A', ' 530 ', 'THR', 0.0252425697720109, (-31.006, 17.592, -79.697)), ('A', ' 591 ', 'GLU', 0.23807960997437044, (-29.479, 16.281, -104.175)), ('B', '  12 ', 'THR', 0.2358312919550323, (6.387999999999998, 0.7289999999999992, -42.711)), ('B', '  69 ', 'SER', 0.03583984977832977, (0.9699999999999989, -13.219999999999999, -53.696)), ('B', ' 158 ', 'LEU', 0.26607378003158266, (-49.483999999999995, 18.647000000000006, -40.397)), ('B', ' 164 ', 'HIS', 0.08820327453623795, (-45.508000000000024, 13.650000000000002, -39.288)), ('B', ' 192 ', 'LYS', 0.0963305836589259, (-31.67800000000001, 13.622000000000002, -54.34700000000001)), ('B', ' 195 ', 'ILE', 0.13191611254541677, (-32.709, 21.027, -48.937)), ('B', ' 215 ', 'THR', 0.07433607345754674, (-33.60300000000001, 27.705000000000005, -43.92700000000001)), ('B', ' 220 ', 'ASN', 0.0028659636365105734, (-43.46300000000001, 18.558999999999997, -49.049)), ('B', ' 259 ', 'SER', 0.22452566555277298, (-7.348000000000006, 52.545000000000016, -22.967)), ('B', ' 516 ', 'ASN', 0.02050243300373686, (-35.513, 19.657000000000004, -23.966)), ('B', ' 551 ', 'GLU', 0.09299972183212832, (-31.151999999999997, 14.188, -9.855))]
data['cbeta'] = [('B', ' 534 ', 'ASP', ' ', 0.2724997483348937, (-26.175000000000004, 21.922, -23.468))]
data['probe'] = [(' B  12  THR HG21', ' B  25  LEU  O  ', -0.857, (3.848, -1.135, -40.676)), (' B 183  THR  OG1', ' B 228  THR  OG1', -0.816, (-27.394, 16.182, -44.174)), (' A  60  VAL  HB ', ' A 928  HOH  O  ', -0.811, (-0.429, 57.612, -56.955)), (' B 102  ASN  O  ', ' B 104  THR  N  ', -0.796, (0.869, -1.38, -25.283)), (' B   2  VAL  N  ', ' B 802  HOH  O  ', -0.795, (1.939, 2.192, -48.647)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.768, (-33.218, 34.369, -21.8)), (' B 271  LYS  NZ ', ' B 804  HOH  O  ', -0.724, (2.241, 31.367, -16.442)), (' A 375  GLU  OE2', ' A 801  HOH  O  ', -0.718, (-16.538, 18.408, -70.986)), (' A 327  ILE  O  ', ' A 802  HOH  O  ', -0.704, (-15.991, 2.663, -55.163)), (' B 102  ASN  C  ', ' B 104  THR  H  ', -0.673, (1.432, -1.308, -25.017)), (' B  47  PRO  O  ', ' B 801  HOH  O  ', -0.67, (-3.857, -8.747, -50.607)), (' B 183  THR  HG1', ' B 228  THR  HG1', -0.649, (-26.137, 16.453, -43.45)), (' A 255  THR HG23', ' A 300  PRO  HG3', -0.624, (0.473, -2.545, -61.161)), (' B 257  ASN  HB2', ' B 809  HOH  O  ', -0.618, (-1.184, 54.538, -27.805)), (' A 260  ASP  HA ', ' A 263  SER  OG ', -0.616, (-1.092, -5.914, -74.124)), (' A  13  SER  O  ', ' A  44  SER  HA ', -0.6, (1.482, 50.056, -50.42)), (' B   8  CYS  SG ', ' B  99  GLY  O  ', -0.598, (8.78, 0.399, -31.664)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.595, (-26.953, 11.15, -79.973)), (' A 235  LEU HD21', ' A 382  TYR  CE2', -0.585, (-7.716, 32.271, -60.276)), (' B 279  THR  HB ', ' B 429  MET  CE ', -0.579, (-6.302, 27.428, -20.485)), (' B 278  SER  HB2', ' B 436  MET  HE2', -0.574, (-1.435, 32.789, -21.574)), (' B 120  TYR  CE2', ' B 409  ARG  HG2', -0.573, (-15.843, 11.396, -25.892)), (' B 279  THR  HB ', ' B 429  MET  HE3', -0.563, (-5.674, 27.643, -20.781)), (' A 277  TYR  HA ', ' A 396  TYR  O  ', -0.562, (2.606, 16.619, -66.003)), (' A 127  THR HG22', ' A 130  LEU HD12', -0.555, (5.094, 39.151, -68.106)), (' A 368  ALA  O  ', ' A 393  ALA  HA ', -0.553, (1.456, 14.321, -56.64)), (' A 269  TYR  OH ', ' A 294  GLY  HA3', -0.552, (-3.836, 3.413, -69.948)), (' A  44  SER  OG ', ' A  45  VAL  N  ', -0.551, (1.784, 51.922, -47.613)), (' A 276  LYS  O  ', ' A 395  HIS  HA ', -0.541, (3.926, 15.377, -63.268)), (' B 277  TYR  HA ', ' B 396  TYR  O  ', -0.538, (-0.29, 30.239, -26.734)), (' B 103  VAL  CG1', ' B 103  VAL  O  ', -0.534, (-0.177, -2.092, -28.373)), (' A 367  THR  HA ', ' A 392  ARG  O  ', -0.53, (-0.669, 15.965, -53.771)), (' B 124  ASN  OD1', ' B 381  ASN  ND2', -0.529, (-7.235, 14.741, -25.414)), (' B  86  ASN  HB3', ' B1021  HOH  O  ', -0.523, (13.091, -13.171, -34.946)), (' B  92  LEU  HB3', ' B  93  TYR  CD2', -0.521, (9.482, -0.65, -46.605)), (' B 333  ILE  HB ', ' B 358  CYS  SG ', -0.521, (-11.994, 30.879, -41.488)), (' B 508  LYS  HD3', ' B 995  HOH  O  ', -0.509, (-36.551, 41.402, -18.243)), (' B 518  GLN  HA ', ' B 518  GLN  OE1', -0.507, (-40.263, 19.203, -18.133)), (' A 151  ILE HG12', ' A 226  VAL HG22', -0.504, (-31.959, 40.1, -60.487)), (' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.504, (9.591, -0.144, -32.712)), (' B 167  TRP  CZ3', ' B 174  PRO  HD2', -0.498, (-34.357, 8.875, -36.65)), (' B  28  LYS  O  ', ' B  32  ASP  OD1', -0.496, (5.181, -6.034, -32.381)), (' B  34  VAL  O  ', ' B  40  LYS  NZ ', -0.496, (-4.784, -11.104, -33.083)), (' A 275  GLN  O  ', ' A 395  HIS  ND1', -0.494, (6.421, 12.748, -64.106)), (' A  63  LEU  HB3', ' A  83  LEU HD12', -0.489, (2.758, 61.723, -54.315)), (' A 296  ALA  O  ', ' A 300  PRO  HA ', -0.489, (-1.999, 0.98, -60.734)), (' A  59  ASP  OD1', ' A  61  THR  OG1', -0.489, (0.317, 62.104, -61.826)), (' B  13  SER  O  ', ' B  44  SER  HA ', -0.487, (1.217, -2.211, -46.868)), (' A 140  ALA  O  ', ' A 144  THR HG23', -0.486, (-15.66, 41.355, -62.416)), (' B 474 BMET  HG2', ' B 590  LEU  HB2', -0.481, (-38.863, 28.449, -2.715)), (' A 152  ALA  HB2', ' A 167  TRP  CZ3', -0.48, (-34.776, 37.682, -66.738)), (' A  37  THR  OG1', ' A  39  HIS  HB2', -0.478, (-2.181, 52.625, -64.917)), (' A 215  THR HG22', ' B 193  VAL HG21', -0.473, (-31.686, 21.017, -55.275)), (' A 139  LYS  O  ', ' A 143  GLU  HG2', -0.472, (-15.361, 36.988, -62.975)), (' A 304  ILE  HA ', ' A 370  ILE  O  ', -0.47, (-3.41, 10.568, -59.423)), (' B  13  SER  OG ', ' B  44  SER  OG ', -0.469, (3.605, -2.961, -47.673)), (' A  14  LEU  HB2', ' A  25  LEU  O  ', -0.467, (5.176, 48.955, -56.022)), (' B 368  ALA  O  ', ' B 393  ALA  HA ', -0.466, (1.754, 33.009, -35.893)), (' B  27  CYS  HB2', ' B  97  CYS  SG ', -0.466, (9.327, -3.82, -38.425)), (' B   7  LEU HD21', ' B 106  PHE  HB2', -0.464, (-0.448, 2.058, -30.053)), (' B 278  SER  HA ', ' B 435  ASP  OD1', -0.46, (-0.197, 29.399, -20.829)), (' A 327  ILE HD11', ' A 345  LYS  O  ', -0.459, (-19.766, 2.082, -57.706)), (' B 236  SER  O  ', ' B 701  VVM  C10', -0.459, (1.809, 15.258, -35.351)), (' A 486  SER  CB ', ' A 517  SER  HG ', -0.458, (-30.731, 30.975, -80.975)), (' A   7  LEU HD13', ' A 103  VAL HG22', -0.458, (6.277, 45.072, -65.387)), (' A 261  GLU  OE1', ' A 324  TYR  OH ', -0.455, (-10.817, -2.198, -71.235)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.454, (-26.216, 19.325, -86.886)), (' A 351  THR HG23', ' A 364  PRO  HG3', -0.454, (-10.291, 15.324, -51.44)), (' A 157  VAL HG21', ' A 219  LEU  O  ', -0.452, (-44.694, 29.914, -59.936)), (' A 333  ILE  HB ', ' A 358  CYS  SG ', -0.45, (-14.272, 16.001, -56.097)), (' A 304  ILE HG12', ' A 370  ILE  HB ', -0.448, (-2.006, 8.905, -60.996)), (' B 475  PHE  CZ ', ' B 477  LYS  HE2', -0.448, (-34.854, 15.944, -2.622)), (' B 533  VAL HG11', ' B 560  ARG  O  ', -0.448, (-25.749, 24.174, -16.83)), (' B 420  GLU  OE1', ' B 427  ARG  NH1', -0.447, (-6.102, 14.814, -15.914)), (' B  16  CYS  O  ', ' B  22  ARG  HA ', -0.447, (-5.617, -0.224, -40.396)), (' B 544  VAL  O  ', ' B 572  ILE  HA ', -0.445, (-33.494, 32.87, -11.814)), (' A  34  VAL  HA ', ' A  39  HIS  O  ', -0.445, (-0.146, 54.894, -63.421)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.445, (-31.526, 20.907, -79.619)), (' A 490  ARG  HB2', ' A 491  PRO  HD3', -0.445, (-37.023, 27.742, -92.383)), (' A 480  ILE HG21', ' A 550  THR HG22', -0.445, (-28.636, 32.459, -90.136)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.444, (2.782, 42.124, -28.777)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.443, (-31.208, 21.053, -79.379)), (' B 367  THR  HA ', ' B 392  ARG  O  ', -0.437, (1.301, 30.969, -38.917)), (' B  12  THR HG22', ' B  14  LEU  H  ', -0.437, (4.217, -1.333, -42.689)), (' B 376  ILE HG22', ' B 400  GLY  HA3', -0.437, (-11.663, 27.758, -22.763)), (' B   2  VAL  N  ', ' B 835  HOH  O  ', -0.437, (1.084, 3.715, -48.338)), (' B 512  ILE  O  ', ' B 546  PHE  HA ', -0.433, (-34.322, 26.075, -15.07)), (' B 103  VAL  O  ', ' B 103  VAL HG12', -0.433, (-0.548, -2.795, -27.993)), (' B 378  MET  O  ', ' B 407  ALA  HB2', -0.431, (-16.42, 20.32, -27.954)), (' B 561  PHE  CZ ', ' B 585  LEU HD21', -0.431, (-27.63, 25.807, -8.111)), (' A 151  ILE HG12', ' A 226  VAL  CG2', -0.42, (-31.641, 39.809, -60.079)), (' B 409  ARG  NH2', ' B 827  HOH  O  ', -0.417, (-13.727, 14.983, -26.844)), (' A 184  GLY  C  ', ' A 195  ILE HG12', -0.415, (-35.281, 31.086, -56.052)), (' A 561  PHE  CZ ', ' A 585  LEU HD21', -0.414, (-18.249, 18.713, -92.266)), (' B  48  TYR  O  ', ' B 803  HOH  O  ', -0.409, (-4.723, -9.99, -44.239)), (' B 347  LYS  HD2', ' B 353  GLU  OE2', -0.406, (-9.695, 41.918, -46.497)), (' A 130  LEU  HA ', ' A 130  LEU HD23', -0.406, (1.142, 39.412, -64.67)), (' B 115  THR  HA ', ' B 411  LEU  O  ', -0.403, (-20.374, 5.525, -25.37)), (' B 102  ASN  C  ', ' B 104  THR  N  ', -0.402, (0.926, -2.044, -25.221)), (' B 490  ARG  HB2', ' B 491  PRO  HD3', -0.402, (-45.647, 16.975, -13.249)), (' B 183  THR  O  ', ' B 225  PHE  HA ', -0.4, (-32.579, 14.685, -44.435))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
