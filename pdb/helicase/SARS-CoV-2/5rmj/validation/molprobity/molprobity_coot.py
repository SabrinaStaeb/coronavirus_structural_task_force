# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', '   6 ', 'VAL', 0.09513183479781705, (3.766000000000001, 41.487, -59.336)), ('A', '  22 ', 'ARG', 0.060910920896033366, (-4.691000000000009, 46.526, -56.39899999999999)), ('A', ' 195 ', 'ILE', 0.009590146857627867, (-34.397, 28.879, -54.009)), ('A', ' 218 ', 'LYS', 0.02598744793717626, (-43.294, 25.517999999999997, -56.298)), ('A', ' 249 ', 'ILE', 0.0023659429536967646, (10.434999999999999, 7.173999999999996, -63.642)), ('A', ' 283 ', 'PRO', 0.013020356639745215, (-8.260000000000002, 14.41, -81.416)), ('A', ' 351 ', 'THR', 0.0010338365910471572, (-11.156000000000006, 12.783, -50.549)), ('A', ' 484 ', 'VAL', 0.00673722694902247, (-32.815, 38.224, -80.326)), ('B', '  10 ', 'SER', 0.03338293190897989, (9.224999999999998, 3.3579999999999943, -37.617)), ('B', '  27 ', 'CYS', 0.01757851488332439, (6.193999999999999, -5.033000000000007, -38.677)), ('B', '  48 ', 'TYR', 0.017473266943705684, (-2.996000000000003, -9.530999999999999, -46.91299999999999)), ('B', '  97 ', 'CYS', 0.015513863467433914, (11.320999999999996, -1.3350000000000044, -36.711999999999996)), ('B', ' 126 ', 'CYS', 0.014186405573022058, (-1.8430000000000026, 8.252999999999998, -23.754999999999995))]
data['omega'] = [('B', ' 444 ', 'CYS', None, (-22.951000000000004, 38.7, -12.4))]
data['rota'] = [('B', '  27 ', 'CYS', 0.24430741597391017, (6.193999999999999, -5.033000000000007, -38.677)), ('B', '  96 ', 'THR', 0.025749969489849915, (13.765, -0.5140000000000065, -39.586)), ('B', ' 103 ', 'VAL', 0.05266005256250226, (1.1459999999999977, -1.7469999999999999, -27.057)), ('B', ' 155 ', 'ARG', 0.1424423433540823, (-45.614000000000004, 11.671999999999997, -43.901)), ('B', ' 188 ', 'THR', 0.15023798360395843, (-35.785, 14.222999999999994, -57.490999999999985)), ('B', ' 191 ', 'SER', 0.19422849403046735, (-31.125, 11.698999999999996, -57.021999999999984)), ('B', ' 192 ', 'LYS', 0.0, (-31.53900000000001, 14.125999999999989, -54.016)), ('B', ' 215 ', 'THR', 0.07418257207007846, (-33.878, 28.132999999999992, -43.88)), ('B', ' 229 ', 'SER', 0.2578112094665746, (-21.94300000000001, 12.822, -41.326)), ('B', ' 259 ', 'SER', 0.0651472754504942, (-7.279999999999996, 52.71499999999999, -22.819)), ('B', ' 278 ', 'SER', 0.06733562812208266, (-0.8549999999999995, 30.631, -22.752)), ('B', ' 289 ', 'SER', 0.007600243110705396, (-13.917, 38.456, -25.499)), ('B', ' 486 ', 'SER', 0.10814437651420297, (-35.62000000000001, 13.178999999999997, -21.952)), ('B', ' 495 ', 'VAL', 0.1602879531591953, (-44.266, 25.324999999999992, -8.332)), ('A', '  12 ', 'THR', 0.23480157115763992, (7.202999999999999, 47.141, -51.772)), ('A', '  35 ', 'ILE', 0.07882586786148571, (3.433999999999994, 57.741, -66.233)), ('A', '  51 ', 'ASN', 0.05721549976849708, (-2.788000000000011, 65.62100000000001, -46.97699999999999)), ('A', '  69 ', 'SER', 0.23174480123672234, (3.338999999999994, 63.612000000000016, -45.377)), ('A', '  86 ', 'ASN', 0.18518354929418562, (14.219000000000001, 59.504999999999995, -61.619)), ('A', ' 148 ', 'SER', 0.23463622380548382, (-24.613, 45.331, -64.848)), ('A', ' 156 ', 'GLU', 0.1187268490426132, (-46.776000000000025, 34.655, -63.658)), ('A', ' 255 ', 'THR', 0.08241012209897562, (3.537, -2.9049999999999976, -63.362)), ('A', ' 259 ', 'SER', 0.2539976847255125, (-3.4240000000000066, -5.78700000000001, -69.741)), ('A', ' 310 ', 'SER', 0.01071998049155809, (-17.096, 20.681, -66.284)), ('A', ' 344 ', 'ASP', 0.14761739374527857, (-23.516999999999996, 8.13, -58.283)), ('A', ' 424 ', 'SER', 0.28824581795804927, (-0.6720000000000006, 27.959999999999994, -71.42)), ('A', ' 485 ', 'SER', 0.05608976531121066, (-29.21200000000001, 37.257000000000005, -81.432)), ('A', ' 502 ', 'ARG', 0.009550920738564029, (-36.73500000000001, 8.761999999999997, -96.90299999999999)), ('A', ' 530 ', 'THR', 0.021758937509730458, (-31.064000000000007, 18.124999999999993, -79.449))]
data['cbeta'] = []
data['probe'] = [(' B   8  CYS  SG ', ' B  99  GLY  N  ', -0.903, (9.429, -0.342, -32.644)), (' A  13  SER  OG ', ' A  44  SER  HB2', -0.862, (3.458, 51.482, -48.907)), (' B  12  THR HG21', ' B  26  CYS  HA ', -0.817, (4.91, -0.962, -40.258)), (' B  26  CYS  HG ', ' B 703   ZN ZN  ', -0.786, (6.017, -0.226, -35.263)), (' B   8  CYS  SG ', ' B  99  GLY  O  ', -0.767, (7.536, 0.367, -31.881)), (' B   5  CYS  SG ', ' B 703   ZN ZN  ', -0.765, (5.441, 0.493, -35.734)), (' B 385  SER  OG ', ' B 801  HOH  O  ', -0.754, (-3.636, 17.152, -36.417)), (' A 287  GLY  HA2', ' A 886  HOH  O  ', -0.742, (-10.539, 7.1, -75.671)), (' B 279  THR  HB ', ' B 429  MET  HE2', -0.741, (-5.649, 27.58, -20.611)), (' A  60  VAL  HB ', ' A 933  HOH  O  ', -0.723, (-0.544, 58.555, -56.74)), (' A 327  ILE  O  ', ' A 802  HOH  O  ', -0.686, (-16.674, 2.751, -55.214)), (' B   7  LEU HD12', ' B 103  VAL HG22', -0.684, (1.795, -0.505, -30.428)), (' B  12  THR  CG2', ' B  26  CYS  HA ', -0.68, (5.616, -1.075, -40.496)), (' B  32  ASP  O  ', ' B  36  SER  OG ', -0.677, (-1.399, -7.306, -29.895)), (' B  26  CYS  SG ', ' B 703   ZN ZN  ', -0.668, (6.382, -0.02, -34.982)), (' B 177  ASN  HB3', ' B 516  ASN  ND2', -0.663, (-33.606, 17.42, -26.635)), (' B   7  LEU  CD1', ' B 103  VAL HG22', -0.642, (1.718, -0.375, -30.216)), (' B 275  GLN  NE2', ' B 435  ASP  OD2', -0.629, (1.422, 30.41, -20.0)), (' B  14  LEU  HB2', ' B  25  LEU  O  ', -0.623, (2.776, -1.415, -40.739)), (' A 368  ALA  O  ', ' A 393  ALA  HA ', -0.623, (1.187, 14.922, -56.865)), (' B 510  VAL HG21', ' B 541  TYR  CD1', -0.62, (-32.517, 34.887, -21.625)), (' B  28  LYS  CB ', ' B  97  CYS  SG ', -0.615, (8.726, -3.784, -35.472)), (' A   4  ALA  O  ', ' A  24  PHE  HB2', -0.606, (3.647, 43.365, -55.081)), (' A 579  ARG  NE ', ' A 813  HOH  O  ', -0.605, (-20.153, 27.956, -104.154)), (' B 279  THR  HB ', ' B 429  MET  CE ', -0.592, (-6.0, 27.115, -20.691)), (' B 270  GLN  O  ', ' B 274  MET  HG3', -0.583, (4.805, 38.327, -22.533)), (' A 244  GLU  HB2', ' A 276  LYS  HB2', -0.579, (9.268, 18.18, -63.618)), (' A  64  TYR  O  ', ' A  70  TYR  HA ', -0.578, (3.465, 64.808, -50.49)), (' B  13  SER  O  ', ' B  44  SER  HA ', -0.575, (1.127, -2.422, -46.578)), (' B 278  SER  HB2', ' B 436  MET  HE2', -0.575, (-1.885, 33.093, -21.962)), (' A 376  ILE HG12', ' A 425  VAL HG11', -0.575, (-3.388, 21.261, -71.516)), (' A  34  VAL  O  ', ' A  40  LYS  NZ ', -0.575, (0.342, 58.687, -65.667)), (' B 378  MET  O  ', ' B 407  ALA  HB2', -0.571, (-16.259, 20.602, -28.197)), (' B  48  TYR  OH ', ' B  90  PHE  O  ', -0.557, (3.615, -7.818, -46.2)), (' B 448  ILE HD11', ' B 572  ILE  CG2', -0.556, (-29.219, 33.024, -9.505)), (' A 329  LYS  HE2', ' A 354  GLN  OE1', -0.549, (-6.388, 1.809, -56.14)), (' B 508  LYS  HD3', ' B 857  HOH  O  ', -0.545, (-35.79, 41.836, -17.726)), (' B   7  LEU HD21', ' B 106  PHE  HB2', -0.545, (-0.449, 2.745, -30.238)), (' B   5  CYS  SG ', ' B  29  CYS  SG ', -0.539, (4.78, 0.046, -34.833)), (' A 519  ASN  HB3', ' A 530  THR HG23', -0.537, (-31.458, 21.385, -79.338)), (' B  26  CYS  SG ', ' B  29  CYS  SG ', -0.536, (6.305, -0.866, -34.595)), (' A 512  ILE  O  ', ' A 546  PHE  HA ', -0.534, (-26.438, 19.984, -86.976)), (' B 115  THR  HA ', ' B 411  LEU  O  ', -0.532, (-19.916, 5.607, -25.017)), (' B 252  LEU  HB3', ' B 299  TYR  CD1', -0.532, (2.473, 41.979, -29.096)), (' A 492  GLN  O  ', ' A 496  VAL HG23', -0.529, (-32.621, 20.379, -92.31)), (' A 269  TYR  CD1', ' A 295  LEU HD13', -0.525, (0.053, 6.828, -68.984)), (' A 281  GLN  HG3', ' A 402  PRO  HD2', -0.524, (-4.254, 18.951, -79.551)), (' A 280  LEU HD12', ' A 436  MET  O  ', -0.522, (-0.574, 13.255, -77.013)), (' A  59  ASP  OD1', ' A  61  THR  OG1', -0.522, (-0.229, 62.608, -62.014)), (' A 367  THR  HA ', ' A 392  ARG  O  ', -0.516, (-0.47, 16.788, -54.211)), (' A 539  SER  O  ', ' A 567  ARG  HD3', -0.514, (-19.247, 13.606, -79.563)), (' A 519  ASN  HB3', ' A 530  THR  CG2', -0.512, (-31.516, 21.289, -79.575)), (' B 376  ILE HG12', ' B 425  VAL HG11', -0.511, (-7.449, 25.21, -24.138)), (' B 466  ASP  HB3', ' B 990  HOH  O  ', -0.511, (-23.936, 43.701, -2.099)), (' B  12  THR  OG1', ' B  26  CYS  HA ', -0.511, (5.993, -0.268, -40.057)), (' B 195  ILE  O  ', ' B 195  ILE HG23', -0.511, (-34.298, 21.866, -46.501)), (' B  27  CYS  SG ', ' B 952  HOH  O  ', -0.509, (7.577, -5.905, -41.403)), (' B  15  ARG  HA ', ' B  23  PRO  O  ', -0.506, (-2.152, 0.889, -40.93)), (' A 374  ASP  OD2', ' A 803  HOH  O  ', -0.505, (-12.584, 13.744, -70.151)), (' B   5  CYS  O  ', ' B   9  ASN  N  ', -0.505, (5.816, 5.373, -35.371)), (' A 260  ASP  HA ', ' A 263  SER  OG ', -0.504, (-1.108, -4.64, -73.934)), (' B 483  ASP  O  ', ' B 804  HOH  O  ', -0.502, (-36.819, 9.115, -22.211)), (' B 277  TYR  HA ', ' B 396  TYR  O  ', -0.499, (-0.005, 30.297, -26.668)), (' B  26  CYS  O  ', ' B  29  CYS  N  ', -0.499, (4.978, -3.49, -36.086)), (' A 167  TRP  CZ3', ' A 174  PRO  HD2', -0.498, (-31.762, 39.146, -68.747)), (' B  47  PRO  O  ', ' B  49  VAL HG12', -0.498, (-5.07, -9.049, -49.817)), (' B   2  VAL  N  ', ' B 828  HOH  O  ', -0.497, (1.846, 2.623, -49.057)), (' A  86  ASN  N  ', ' A  86  ASN HD22', -0.496, (14.173, 61.632, -61.272)), (' B  47  PRO  O  ', ' B 805  HOH  O  ', -0.492, (-4.409, -9.346, -50.557)), (' A 510  VAL HG21', ' A 541  TYR  CD1', -0.491, (-26.575, 12.004, -79.895)), (' B   8  CYS  SG ', ' B  98  VAL  HB ', -0.49, (9.776, 1.359, -32.826)), (' B 142  GLU  OE2', ' B 803  HOH  O  ', -0.488, (-18.204, 10.751, -29.197)), (' B 445  PRO  HG2', ' B 448  ILE HD12', -0.486, (-27.266, 36.141, -9.399)), (' A 275  GLN  O  ', ' A 395  HIS  ND1', -0.483, (6.703, 13.158, -63.889)), (' B 448  ILE HD11', ' B 572  ILE HG21', -0.483, (-29.055, 32.935, -9.259)), (' B 124  ASN HD22', ' B 421  TYR  HA ', -0.481, (-8.706, 14.89, -20.543)), (' B  19  CYS  HB2', ' B  23  PRO  HD2', -0.48, (-6.198, 0.694, -38.425)), (' A 279  THR HG21', ' A 850  HOH  O  ', -0.48, (2.494, 20.359, -74.089)), (' B 103  VAL  CG1', ' B 103  VAL  O  ', -0.477, (-0.556, -2.023, -28.302)), (' A 296  ALA  O  ', ' A 300  PRO  HA ', -0.477, (-2.485, 1.615, -61.264)), (' B 410  THR HG23', ' B 895  HOH  O  ', -0.474, (-21.515, 13.441, -29.909)), (' B 377  SER  O  ', ' B 406  PRO  HA ', -0.474, (-16.093, 21.181, -23.636)), (' B 373  PHE  CE1', ' B 387  VAL HG21', -0.47, (-8.278, 25.399, -32.265)), (' A 277  TYR  HA ', ' A 396  TYR  O  ', -0.469, (2.329, 16.662, -66.053)), (' B 371  VAL HG23', ' B 393  ALA  HB2', -0.469, (-1.401, 31.81, -34.722)), (' B 188  THR  HG1', ' B 191  SER  H  ', -0.467, (-32.793, 12.567, -58.093)), (' A   4  ALA  O  ', ' A  24  PHE  CB ', -0.465, (3.434, 43.773, -54.623)), (' B 368  ALA  O  ', ' B 393  ALA  HA ', -0.461, (1.759, 32.842, -35.801)), (' B 510  VAL HG21', ' B 541  TYR  CG ', -0.461, (-32.239, 34.626, -20.648)), (' B   7  LEU  CD2', ' B 130  LEU HD21', -0.461, (0.261, 4.045, -30.469)), (' B 445  PRO  HB3', ' B 468  SER  HB3', -0.46, (-28.519, 39.882, -7.62)), (' A 163  LEU HD23', ' A 211  TYR  CD2', -0.46, (-40.669, 28.624, -65.089)), (' A   7  LEU HD21', ' A 130  LEU HD21', -0.459, (2.563, 42.883, -65.106)), (' B 376  ILE HG22', ' B 400  GLY  HA3', -0.458, (-11.444, 27.444, -22.612)), (' B 474 BMET  HB3', ' B 474 BMET  HE2', -0.457, (-38.908, 24.321, -3.834)), (' A  19  CYS  HB2', ' A  23  PRO  HD2', -0.457, (-3.583, 47.198, -59.368)), (' B 473  LYS  HE3', ' B 582  TYR  CZ ', -0.457, (-31.967, 25.675, 0.014)), (' A   5  CYS  SG ', ' A  26  CYS  HB3', -0.456, (8.075, 45.877, -58.336)), (' A 280  LEU HD11', ' A 438  LEU  HG ', -0.454, (-2.914, 10.919, -76.997)), (' A  21  ARG  O  ', ' A  22  ARG  HB2', -0.454, (-6.232, 45.077, -55.381)), (' B 220  ASN  N  ', ' B 220  ASN  OD1', -0.452, (-42.693, 19.733, -49.604)), (' A 318  CYS  HB3', ' A 343  PHE  CD2', -0.449, (-18.264, 7.867, -62.021)), (' A   7  LEU HD13', ' A 103  VAL HG22', -0.449, (5.933, 45.989, -64.978)), (' A 331  SER  HB2', ' A 353  GLU  HG3', -0.447, (-13.526, 7.881, -52.624)), (' B 503  ASN  ND2', ' B 701  JOV  O08', -0.445, (-43.093, 34.541, -5.213)), (' B 593  PRO  HD3', ' B 701  JOV H121', -0.445, (-43.755, 27.31, -2.597)), (' A 551  GLU  HG3', ' A 897  HOH  O  ', -0.443, (-25.32, 31.639, -94.702)), (' B 182  PHE  N  ', ' B 198  TYR  O  ', -0.443, (-30.969, 18.699, -38.246)), (' A 291  PHE  C  ', ' A 291  PHE  CD1', -0.442, (-4.213, 7.896, -70.734)), (' B   5  CYS  SG ', ' B  29  CYS  HB2', -0.44, (4.095, -0.549, -35.113)), (' B 451  THR HG21', ' B 585  LEU HD23', -0.439, (-25.683, 27.702, -5.823)), (' B  59  ASP  OD1', ' B  61  THR  OG1', -0.438, (-4.274, -15.104, -37.853)), (' B   5  CYS  HG ', ' B 703   ZN ZN  ', -0.437, (5.504, 0.701, -34.72)), (' A  21  ARG  NH1', ' A 836  HOH  O  ', -0.436, (-11.081, 41.804, -57.474)), (' A  37  THR  OG1', ' A  39  HIS  HB2', -0.435, (-1.998, 53.617, -65.147)), (' B 512  ILE  O  ', ' B 546  PHE  HA ', -0.432, (-34.16, 26.214, -14.909)), (' A 151  ILE HG12', ' A 226  VAL HG22', -0.432, (-30.932, 40.263, -60.277)), (' B  12  THR HG21', ' B  25  LEU  O  ', -0.432, (3.742, -1.489, -40.292)), (' B 533  VAL HG11', ' B 560  ARG  O  ', -0.432, (-25.329, 24.255, -16.278)), (' A 140  ALA  HA ', ' A 232  VAL HG21', -0.431, (-13.146, 38.775, -60.557)), (' B 284  PRO  HG2', ' B 566  THR HG21', -0.43, (-20.738, 31.015, -13.594)), (' B 417  LEU  HA ', ' B 868  HOH  O  ', -0.43, (-14.433, 12.11, -17.339)), (' B 450  ASP  OD1', ' B 806  HOH  O  ', -0.429, (-19.041, 36.932, -3.121)), (' A 370  ILE  HA ', ' A 395  HIS  O  ', -0.428, (0.576, 13.491, -61.532)), (' B 563  VAL  O  ', ' B 567  ARG  HG2', -0.428, (-25.93, 29.479, -16.766)), (' A 241  VAL HG22', ' A 840  HOH  O  ', -0.426, (2.765, 22.396, -62.944)), (' B 511  PHE  HZ ', ' B 547  THR  HG1', -0.426, (-38.129, 23.787, -15.535)), (' A 307  THR  HA ', ' A 358  CYS  O  ', -0.425, (-11.34, 17.073, -61.806)), (' B  66  GLY  HA3', ' B  77  PRO  CG ', -0.425, (2.837, -19.247, -52.585)), (' B 480  ILE HD13', ' B 550  THR HG22', -0.424, (-36.01, 13.242, -12.633)), (' A  31  TYR  CE2', ' A  87  GLY  HA2', -0.424, (10.134, 57.093, -64.214)), (' A 456  VAL HG23', ' A 457  TYR  CD2', -0.423, (-8.103, 17.964, -86.627)), (' A 304  ILE HG12', ' A 370  ILE  HB ', -0.422, (-2.038, 9.351, -60.749)), (' B   7  LEU HD21', ' B 130  LEU HD21', -0.422, (-0.451, 3.857, -30.439)), (' A 235  LEU HD21', ' A 382  TYR  CE2', -0.422, (-7.69, 32.761, -60.099)), (' A  20  ILE HD11', ' A 144  THR HG21', -0.422, (-14.565, 44.363, -60.582)), (' A 474  MET  SD ', ' A 495  VAL HG11', -0.422, (-31.337, 19.672, -97.325)), (' A 276  LYS  O  ', ' A 395  HIS  HA ', -0.421, (4.34, 15.379, -63.008)), (' A   7  LEU HD21', ' A 106  PHE  HB2', -0.421, (3.249, 43.807, -65.181)), (' B 154  VAL HG12', ' B 221  VAL  HA ', -0.42, (-44.196, 14.902, -46.297)), (' B 480  ILE HG21', ' B 550  THR HG22', -0.419, (-36.294, 12.932, -13.505)), (' A 334  ILE HD12', ' A 348  VAL HG13', -0.418, (-20.207, 13.043, -54.053)), (' B 262  PHE  CE2', ' B 297  LEU HD12', -0.418, (-9.141, 47.696, -26.869)), (' A 369  ASP  O  ', ' A 394  LYS  HB2', -0.416, (3.064, 12.049, -58.971)), (' A 127  THR HG22', ' A 130  LEU  HB2', -0.416, (4.068, 38.77, -67.027)), (' B  14  LEU  O  ', ' B  24  PHE  HA ', -0.416, (0.546, 0.764, -41.425)), (' B  12  THR HG21', ' B  26  CYS  CA ', -0.416, (4.902, -1.517, -39.449)), (' A 406  PRO  HG3', ' A 422  PHE  CE1', -0.416, (-10.915, 28.755, -78.227)), (' B 263  SER  HA ', ' B 266  VAL HG23', -0.415, (-3.783, 47.5, -19.255)), (' B  15  ARG  HG3', ' B  24  PHE  CD2', -0.413, (-0.545, 2.065, -43.29)), (' B 242  PRO  HA ', ' B 968  HOH  O  ', -0.413, (6.145, 21.252, -25.867)), (' B 373  PHE  CD1', ' B 387  VAL HG21', -0.413, (-7.795, 25.986, -32.033)), (' B  13  SER  O  ', ' B  13  SER  OG ', -0.412, (3.167, -1.847, -46.773)), (' B  34  VAL  O  ', ' B  40  LYS  NZ ', -0.412, (-4.857, -11.314, -33.073)), (' A  86  ASN  H  ', ' A  86  ASN HD22', -0.411, (13.8, 61.433, -61.391)), (' A 269  TYR  OH ', ' A 294  GLY  HA3', -0.411, (-3.715, 3.889, -69.954)), (' B  19  CYS  CB ', ' B  23  PRO  HD2', -0.409, (-6.284, 0.966, -37.937)), (' B 129  ARG  HA ', ' B 129  ARG  HD2', -0.409, (0.274, 11.096, -33.225)), (' A 512  ILE  HA ', ' A 531  GLN  O  ', -0.408, (-26.886, 19.959, -81.975)), (' A 281  GLN  HA ', ' A 400  GLY  O  ', -0.407, (-4.599, 16.894, -77.022)), (' A 185  TYR  HB2', ' A 224  TYR  CZ ', -0.407, (-33.931, 37.552, -54.873)), (' B 152  ALA  HB2', ' B 167  TRP  CZ3', -0.407, (-36.19, 10.41, -38.446)), (' A 311  HIS  ND1', ' A 359  THR HG21', -0.404, (-18.187, 19.249, -61.897)), (' A 544  VAL  O  ', ' A 572  ILE  HA ', -0.403, (-25.297, 13.083, -88.952)), (' A  63  LEU  HB3', ' A  83  LEU HD12', -0.402, (2.459, 62.503, -53.931)), (' B 516  ASN  ND2', ' B 851  HOH  O  ', -0.401, (-32.95, 16.609, -23.894)), (' B 701  JOV  O08', ' B 701  JOV H041', -0.401, (-41.772, 35.002, -3.945)), (' A 140  ALA  O  ', ' A 144  THR HG23', -0.4, (-15.191, 41.879, -61.661)), (' B  77  PRO  HB2', ' B  78  PRO  HD2', -0.4, (3.687, -23.056, -54.858)), (' A  16  CYS  SG ', ' A  18  ALA  HB3', -0.4, (-4.279, 52.312, -60.852)), (' B  99  GLY  O  ', ' B 100  SER  OG ', -0.4, (6.196, 0.417, -30.094))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
