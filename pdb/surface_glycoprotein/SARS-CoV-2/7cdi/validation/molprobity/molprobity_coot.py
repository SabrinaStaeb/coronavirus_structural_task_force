# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('H', ' 100 ', 'VAL', 0.019386570112052675, (-50.86, -4.408999999999998, 19.824999999999996))]
data['omega'] = [('H', ' 151 ', 'PRO', None, (-74.37099999999997, 2.454, 50.350999999999985)), ('H', ' 153 ', 'PRO', None, (-76.876, -0.6900000000000002, 45.65)), ('L', '   8 ', 'PRO', None, (-70.505, 10.681, 14.761)), ('L', ' 141 ', 'PRO', None, (-86.391, 12.666, 19.940999999999992))]
data['rota'] = [('E', ' 366 ', 'SER', 0.059149717417658315, (-15.252999999999995, 16.006, 14.511999999999999)), ('E', ' 367 ', 'VAL', 0.09808709023776405, (-15.617999999999993, 15.524, 10.735)), ('E', ' 373 ', 'SER', 0.21561753199082737, (-26.91199999999999, 16.755999999999993, 8.748)), ('E', ' 403 ', 'ARG', 0.1250654332475219, (-38.893999999999984, 5.165999999999999, 13.177999999999997)), ('E', ' 415 ', 'THR', 0.1831240670252923, (-37.777, 0.758, 27.604999999999993)), ('E', ' 469 ', 'SER', 0.22692006979266136, (-35.175, -16.152999999999995, 15.333999999999996)), ('E', ' 493 ', 'GLN', 0.09824577123896541, (-43.83499999999999, -7.254, 12.236999999999997)), ('E', ' 494 ', 'SER', 0.06538150289801234, (-43.13199999999999, -4.861, 9.381999999999996)), ('H', '  84 ', 'SER', 0.05292361968968079, (-53.68399999999999, 6.966000000000001, 47.091999999999985)), ('H', ' 131 ', 'SER', 0.010863797671973176, (-102.63699999999997, 16.986, 42.134)), ('H', ' 142 ', 'LEU', 0.2343314480002489, (-96.82899999999998, 9.787000000000003, 40.438999999999986)), ('H', ' 153 ', 'PRO', 0.1334603141919155, (-78.07899999999998, -0.2369999999999999, 45.014999999999986)), ('H', ' 190 ', 'SER', 0.098125218112968, (-105.99599999999995, 9.733, 35.43199999999999)), ('L', '  13 ', 'LEU', 0.0, (-80.98, 4.688, 12.378999999999996)), ('L', '  27 ', 'GLN', 0.0, (-52.158, 13.661, 14.225999999999997)), ('L', '  29 ', 'VAL', 0.03780638799071312, (-51.31899999999999, 7.878999999999998, 12.694)), ('L', '  62 ', 'ARG', 0.0, (-71.46699999999997, -6.508000000000001, 7.83)), ('L', '  64 ', 'SER', 0.15814299146942845, (-65.863, -3.3699999999999997, 7.648999999999998)), ('L', '  73 ', 'THR', 0.2528221740914106, (-64.398, 4.796, 9.346999999999996)), ('L', '  75 ', 'THR', 0.09480710315721742, (-69.17, 0.678, 8.406)), ('L', ' 104 ', 'LEU', 0.09512150713967014, (-75.878, 3.524999999999999, 17.889999999999993)), ('L', ' 105 ', 'GLU', 0.26916290660335934, (-79.574, 4.167999999999999, 18.628999999999998)), ('L', ' 114 ', 'SER', 0.010080685119336326, (-95.356, 14.360000000000001, 28.863999999999997)), ('L', ' 131 ', 'SER', 0.10575005237364189, (-86.54699999999998, 18.346, 46.483)), ('L', ' 143 ', 'GLU', 0.24959962346244946, (-82.075, 15.857, 23.337999999999994)), ('L', ' 159 ', 'SER', 0.01071998049155809, (-80.29099999999997, 20.573, 39.79)), ('L', ' 176 ', 'SER', 0.10143962033096518, (-86.03899999999999, 13.192000000000002, 35.689)), ('L', ' 202 ', 'SER', 0.2715702442464019, (-93.461, 23.979999999999997, 18.90299999999999))]
data['cbeta'] = []
data['probe'] = [(' L  13  LEU HD12', ' L  79  LEU  CD1', -0.845, (-78.411, 2.173, 11.342)), (' H  92  VAL HG22', ' H 112  THR HG22', -0.831, (-67.709, -2.544, 37.762)), (' E 487  ASN  OD1', ' H  97  ARG  NH1', -0.745, (-52.686, -15.374, 23.169)), (' L  13  LEU HD12', ' L  79  LEU HD11', -0.728, (-77.426, 1.679, 11.795)), (' L  38  GLN  HB2', ' L  48  LEU HD11', -0.681, (-68.717, -3.905, 17.807)), (' H 182  LEU  C  ', ' H 182  LEU HD12', -0.668, (-85.14, 7.5, 42.382)), (' L  13  LEU  CD1', ' L  79  LEU HD11', -0.657, (-77.568, 2.109, 10.961)), (' H 154  VAL HG21', ' H 182  LEU HD21', -0.654, (-83.466, 3.221, 44.201)), (' H 154  VAL  CG2', ' H 182  LEU HD21', -0.649, (-83.297, 3.0, 43.852)), (' L  13  LEU  CD1', ' L  79  LEU  CD1', -0.636, (-78.155, 2.068, 10.865)), (' E 371  SER  OG ', ' E 373  SER  OG ', -0.603, (-24.206, 15.566, 7.524)), (' H 130  PRO  HD3', ' H 142  LEU  HB3', -0.599, (-98.82, 10.757, 41.422)), (' E 360  ASN  H  ', ' E 523  THR  HB ', -0.583, (-6.744, -0.82, 14.146)), (' L  34  LEU HD13', ' L  72  PHE  CG ', -0.572, (-57.867, 4.938, 11.535)), (' H  36  TRP  NE1', ' H  80  LEU  HB2', -0.563, (-53.857, -3.994, 36.769)), (' L  48  LEU  HA ', ' L  59  ILE HG13', -0.557, (-64.988, -7.95, 15.142)), (' E 394  ASN  HB2', ' E 516  GLU  OE1', -0.553, (-13.028, -3.541, 20.257)), (' E 431  GLY  HA2', ' E 515  PHE  CD2', -0.551, (-18.215, 5.627, 22.038)), (' H  90  THR HG23', ' H 114  THR  HA ', -0.549, (-66.309, 3.403, 42.741)), (' H 188  VAL HG11', ' H 198  TYR  CE1', -0.547, (-100.992, 3.815, 38.472)), (' L  34  LEU HD13', ' L  72  PHE  CD2', -0.546, (-57.437, 4.695, 11.419)), (' H 182  LEU HD12', ' H 183  SER  N  ', -0.545, (-85.4, 7.224, 41.992)), (' H  61  ASP  HA ', ' H  64  LYS  HG3', -0.53, (-49.561, 9.363, 34.023)), (' E 431  GLY  HA3', ' E 513  LEU  O  ', -0.524, (-20.544, 4.989, 21.392)), (' H  99  LEU  O  ', ' H 101  VAL  N  ', -0.523, (-50.719, -6.052, 17.763)), (' E 384  PRO  HA ', ' E 387  LEU HD12', -0.518, (-17.249, 13.022, 19.776)), (' L 134  CYS  HB2', ' L 148  TRP  CH2', -0.508, (-88.739, 20.354, 37.872)), (' L  91  GLN  HG3', ' L  92  TYR  H  ', -0.507, (-52.508, 4.732, 17.767)), (' L  39  GLN  O  ', ' L  85  ALA  HB1', -0.503, (-72.564, -1.547, 22.416)), (' L  13  LEU HD12', ' L  79  LEU HD12', -0.5, (-78.714, 1.58, 11.286)), (' E 362  VAL HG23', ' E 526  GLY  HA2', -0.488, (-7.312, 9.907, 13.898)), (' H   6  GLU  N  ', ' H   6  GLU  OE1', -0.486, (-61.662, -10.417, 35.803)), (' E 383  SER  HB3', ' E 386  LYS  HB2', -0.484, (-14.946, 15.323, 24.572)), (' L  24  ARG  HG3', ' L  71  ASP  OD1', -0.479, (-60.879, 12.743, 10.44)), (' H 145  LEU HD12', ' H 182  LEU  O  ', -0.478, (-85.513, 9.682, 43.798)), (' H   6  GLU  OE2', ' H  94  HIS  HA ', -0.478, (-61.797, -6.188, 33.617)), (' H 163  LEU HD21', ' H 186  VAL HG21', -0.469, (-97.795, 2.328, 37.593)), (' H 149  TYR  CE2', ' H 154  VAL HG13', -0.469, (-80.08, 2.754, 46.473)), (' H  36  TRP  CD1', ' H  80  LEU  HB2', -0.468, (-53.857, -3.494, 36.685)), (' E 431  GLY  HA2', ' E 515  PHE  HD2', -0.463, (-18.027, 5.849, 22.786)), (' H 123  PRO  HD2', ' H 209  THR HG21', -0.459, (-83.329, 2.654, 53.584)), (' L   6  GLN  O  ', ' L 100  GLN  NE2', -0.449, (-67.055, 11.651, 19.271)), (' E 403  ARG  HD2', ' E 405  ASP  HB2', -0.446, (-42.127, 5.929, 16.457)), (' H  35  ASN  O  ', ' H  95  CYS  HA ', -0.442, (-56.335, -5.363, 31.501)), (' L  13  LEU HD11', ' L  19  ALA  HB2', -0.441, (-76.241, 2.979, 11.157)), (' L 113  PRO  HB3', ' L 139  PHE  HB3', -0.439, (-90.592, 14.009, 26.297)), (' L 104  LEU  HA ', ' L 104  LEU HD23', -0.438, (-76.212, 4.576, 16.582)), (' H  18  LEU  HB3', ' H  82  MET  HE3', -0.437, (-57.898, -0.476, 44.545)), (' H 177  SER  OG ', ' H 179  LEU  HB2', -0.435, (-75.538, 12.291, 49.881)), (' E 449  TYR  HD1', ' E 494  SER  OG ', -0.428, (-44.623, -3.929, 6.476)), (' L  33  TYR  HB2', ' L  91  GLN  NE2', -0.428, (-52.113, 3.153, 15.449)), (' E 392  PHE  CE1', ' E 515  PHE  HB3', -0.427, (-13.551, 4.308, 23.363)), (' E 487  ASN HD21', ' H  27  ILE HG22', -0.424, (-54.263, -17.301, 24.909)), (' H  93  TYR  O  ', ' H 110  GLY  HA2', -0.422, (-62.949, -5.668, 35.246)), (' H  12  VAL HG12', ' H  13  GLN  O  ', -0.421, (-59.961, 4.646, 49.62)), (' L  23  CYS  HB2', ' L  36  TRP  CH2', -0.42, (-63.53, 5.202, 14.379)), (' L  90  GLN  HG2', ' L  91  GLN  N  ', -0.419, (-56.282, 2.855, 19.962)), (' E 393  THR HG22', ' E 516  GLU  C  ', -0.418, (-11.372, -0.871, 23.411)), (' L  30  SER  HB3', ' L  33  TYR  HD2', -0.417, (-49.695, 2.857, 13.959)), (' L  34  LEU  HA ', ' L  90  GLN  O  ', -0.414, (-56.918, 2.32, 16.532)), (' L  13  LEU  CD1', ' L  79  LEU HD12', -0.411, (-78.331, 1.665, 10.907)), (' H 150  PHE  HA ', ' H 151  PRO  HA ', -0.411, (-74.351, 4.361, 48.486)), (' E 358  ILE  HB ', ' E 395  VAL  HB ', -0.408, (-13.966, 0.978, 14.937)), (' H 182  LEU  C  ', ' H 182  LEU  CD1', -0.407, (-84.825, 6.801, 42.504)), (' L 114  SER  HB2', ' L 116  PHE  CE1', -0.407, (-96.125, 12.916, 31.492)), (' L 181  LEU  HA ', ' L 181  LEU HD23', -0.405, (-81.797, 24.586, 46.923)), (' E 368  LEU  O  ', ' E 371  SER  HB3', -0.403, (-21.214, 15.491, 10.933)), (' H  32  ASN  OD1', ' H  97  ARG  HD2', -0.403, (-51.459, -12.414, 24.565)), (' H  86  ARG  HD2', ' H  86  ARG HH11', -0.402, (-56.961, 11.651, 41.278)), (' L  91  GLN  HG3', ' L  92  TYR  N  ', -0.402, (-52.589, 4.524, 18.472)), (' E 439  ASN HD21', ' E 499  PRO  HA ', -0.402, (-42.042, 10.295, 3.48)), (' H 199  ILE HG12', ' H 214  LYS  HA ', -0.401, (-98.64, 3.512, 48.991))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
