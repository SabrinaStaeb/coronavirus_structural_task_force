# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 146 ', 'PRO', None, (-3.661999999999999, -32.503, -5.225)), ('H', ' 148 ', 'PRO', None, (-7.0699999999999985, -35.206, -0.949)), ('L', ' 141 ', 'PRO', None, (-35.28, -34.33, -6.469))]
data['rota'] = [('L', '  78 ', 'LEU', 0.29939207020958475, (-41.49, -46.534, -13.624000000000002))]
data['cbeta'] = []
data['probe'] = [(' L   9  SER  HB2', ' L 143  ALA  HB3', -0.701, (-32.074, -33.645, -11.946)), (' A 467  ASP  OD1', ' A 469  SER  OG ', -0.647, (-37.76, -47.858, -55.306)), (' A 355  ARG  NH2', ' A 702  HOH  O  ', -0.609, (-40.572, -37.216, -70.387)), (' H  72  ASP  OD2', ' H  75  THR HG22', -0.609, (-3.874, -54.815, -37.304)), (' H  68  THR HG23', ' H  82A ARG HH11', -0.608, (-4.395, -36.046, -35.48)), (' A 348  ALA  HB2', ' A 354  ASN HD22', -0.595, (-48.108, -35.759, -56.992)), (' L 207  ALA  HB3', ' L 210  GLU  HG2', -0.595, (-25.808, -4.815, -4.614)), (' L  45  LYS  HG2', ' L  47  MET  HE3', -0.58, (-30.724, -49.851, -23.49)), (' H  23  LYS  HD3', ' H  25  SER  H  ', -0.575, (-10.488, -57.49, -30.696)), (' L  54  ARG  NH2', ' L  62  PHE  O  ', -0.566, (-41.461, -48.287, -26.579)), (' H  36  TRP  CE2', ' H  80  MET  HB2', -0.557, (-10.449, -43.569, -31.116)), (' H 192  THR HG23', ' H 209  LYS  HE3', -0.496, (-11.722, -14.759, 15.502)), (' L  80  ASP  HA ', ' L 106  VAL HG21', -0.486, (-36.177, -46.999, -10.13)), (' L  83  GLU  HB2', ' L 106  VAL HG23', -0.464, (-34.704, -44.31, -10.725)), (' L 113  PRO  HB3', ' L 139  PHE  HB3', -0.46, (-32.431, -28.018, -4.395)), (' H 118  PRO  HB3', ' H 144  TYR  HB3', -0.459, (-6.189, -25.852, -1.962)), (' A 342  PHE  HB2', ' A 601  NAG  H82', -0.458, (-51.804, -23.398, -62.303)), (' L 180  LEU HD23', ' L 185  TRP  HA ', -0.457, (-16.974, -9.707, -11.612)), (' A 439  ASN  OD1', ' A 499  PRO  HA ', -0.455, (-44.497, -23.074, -42.969)), (' A 420  ASP  HB3', ' A 460  ASN  OD1', -0.454, (-27.452, -39.963, -57.188)), (' H  36  TRP  CH2', ' H  92  CYS  HB3', -0.445, (-12.017, -46.574, -29.171)), (' L  59  PRO  HB2', ' L  61  ARG  HG2', -0.436, (-40.401, -51.32, -20.363)), (' H  33  ALA  HB1', ' H  50  TRP  HE1', -0.436, (-18.941, -45.754, -39.049)), (' L  78  LEU  HA ', ' L  78  LEU HD23', -0.426, (-40.419, -46.38, -15.015)), (' A 409  GLN  HB3', ' A 419  ALA  HB2', -0.424, (-30.849, -31.658, -57.553)), (' L 178  LEU  HG ', ' L 180  LEU  CD1', -0.42, (-17.458, -14.509, -12.51)), (' H  68  THR HG23', ' H  82A ARG  NH1', -0.419, (-4.465, -35.879, -35.706)), (' A 455  LEU HD12', ' A 493  GLN  HB2', -0.416, (-34.201, -39.867, -44.633)), (' H 208  LYS  HA ', ' H 208  LYS  HD3', -0.413, (-7.512, -16.778, 7.961)), (' A 401  VAL HG22', ' A 509  ARG  HG2', -0.411, (-45.713, -28.426, -53.168)), (' A 435  ALA  HA ', ' A 509  ARG  O  ', -0.407, (-42.951, -24.548, -57.215)), (' H   4  LEU  HG ', ' H 102  VAL HG12', -0.406, (-18.31, -53.207, -29.575)), (' L 183  GLU  CD ', ' L 183  GLU  H  ', -0.405, (-9.873, -6.371, -13.252)), (' L  95A ASP  N  ', ' L  95A ASP  OD1', -0.404, (-23.001, -35.236, -38.821)), (' L  27C LEU HD22', ' L  33  VAL HG22', -0.404, (-33.991, -36.276, -33.024)), (' H  76  THR HG23', ' H 301  NAG  H82', -0.403, (-8.966, -59.066, -37.79))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
