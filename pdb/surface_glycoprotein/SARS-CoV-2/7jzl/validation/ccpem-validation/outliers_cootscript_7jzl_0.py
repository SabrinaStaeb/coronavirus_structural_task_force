
from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

dict_residue_prop_objects = {}
class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)
        ##save property list frame object
        dict_residue_prop_objects[data_key] = list_obj
# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "clusters","rama", "rota", "cbeta", "probe", "smoc", "cablam",
               "jpred"]
  data_titles = { "clusters"  : "Outlier residue clusters",
                  "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes",
                  "smoc"  : "Local density fit (SMOC)",
                  "cablam": "Ca geometry (CaBLAM)",
                  "jpred":"SS prediction"}
  data_names = { "clusters"  : ["Chain","Residue","Cluster","Outlier types"],
                 "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"],
                 "smoc" : ["Chain", "Residue", "Name", "Score"],
                 "cablam" : ["Chain", "Residue","Name","recommendation","DSSP"],
                 "jpred" : ["Chain", "Residue","Name","predicted SS","current SS"]}
  if (gobject is not None) :
    data_types = {  "clusters" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_INT, gobject.TYPE_STRING,
                             gobject.TYPE_PYOBJECT],
                    "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "smoc" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cablam" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_STRING,
                             gobject.TYPE_STRING,gobject.TYPE_PYOBJECT],
                   "jpred" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_STRING,
                             gobject.TYPE_STRING,gobject.TYPE_PYOBJECT]}
  else :
    data_types = dict([ (s, []) for s in ["clusters","rama","rota","cbeta","probe","smoc",
                                          "cablam","jpred"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    ##adding a column type for checkbox (bool) before atom coordinate
    if gobject is not None:
        column_types = column_types[:-1]+[bool]+[column_types[-1]]
    
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    ##add a cell for checkbox
    cell1 = gtk.CellRendererToggle()
    cell1.connect ("toggled", self.on_selected_toggled)
    column = gtk.TreeViewColumn('Dealt with',cell1,active=i+1)
    self.listctrl.append_column(column)
    #column.set_sort_column_id(i+1)
    #column.pack_start(cell1, True)
    
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      row = row[:-1] + (False,)+(row[-1],)
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()
  ##check box toggle
  def on_selected_toggled(self,renderer,path):
    if path is not None:
      model = self.listmodel.get_model()
      it = model.get_iter(path)
      #set toggle
      model[it][-2] = not model[it][-2]
      #set checkboxes for same residues in other lists
      try:
        chain = model[it][0]
        residue = model[it][1]
        for data_key in dict_residue_prop_objects:
          prop_obj = dict_residue_prop_objects[data_key]
          for row in prop_obj.listmodel.get_model():
            if data_key == 'probe':
              atom1_split = row[0].split()
              atom2_split = row[1].split()
              if atom1_split[0] == chain and atom1_split[1] == residue:
                row[-2] = model[it][-2]
              elif atom2_split[0] == chain and atom2_split[1] == residue:
                row[-2] = model[it][-2]
            elif row[0] == chain and row[1] == residue:
              row[-2] = model[it][-2]
      except IndexError: pass

  def check_chain_residue(self,chain,residue):
      pass
  
def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data
data = {}
data['cbeta'] = []
data['jpred'] = []
data['probe'] = [(' C 106  PHE  HB3', ' C 235  ILE HD13', -1.055, (244.634, 188.163, 245.558)), (' C 106  PHE  CB ', ' C 235  ILE HD13', -0.953, (245.464, 188.058, 245.303)), (' C 106  PHE  HB3', ' C 235  ILE HG21', -0.937, (245.823, 189.485, 245.383)), (' C 107  GLY  N  ', ' C 235  ILE HG23', -0.891, (246.729, 189.761, 247.534)), (' C 736  VAL HG13', ' C 858  LEU HD23', -0.863, (207.197, 194.024, 215.563)), (' C 107  GLY  H  ', ' C 235  ILE HG23', -0.634, (247.002, 190.228, 247.305)), (' C 196  ASN  ND2', ' C 233  ILE  O  ', -0.607, (239.434, 190.948, 246.218)), (' C 106  PHE  HB3', ' C 235  ILE  CG2', -0.57, (245.316, 189.525, 246.123)), (' C 736  VAL HG13', ' C 858  LEU  CD2', -0.555, (208.0, 194.227, 215.609)), (' A1028  LYS  NZ ', ' A1042  PHE  O  ', -0.553, (212.48, 218.834, 180.459)), (' B 123  ALA  HB3', ' B1302  NAG  H82', -0.551, (149.694, 196.564, 245.789)), (' B  81  ASN  N  ', ' B 265  TYR  HH ', -0.538, (162.683, 179.985, 239.759)), (' B 196  ASN  C  ', ' B 196  ASN HD22', -0.534, (178.13, 195.32, 242.469)), (' C 379  CYS  HA ', ' C 432  CYS  HA ', -0.532, (226.864, 233.873, 263.242)), (' B 197  ILE  CG1', ' B 202  LYS  HE2', -0.509, (177.975, 198.744, 238.958)), (' B1028  LYS  NZ ', ' B1042  PHE  O  ', -0.501, (200.852, 206.752, 180.85)), (' C 557  LYS  NZ ', ' C 574  ASP  OD2', -0.491, (228.853, 238.23, 217.275)), (' C 741  TYR  CD2', ' C1004  LEU HD22', -0.484, (206.866, 198.35, 219.378)), (' C1028  LYS  NZ ', ' C1042  PHE  O  ', -0.483, (217.565, 202.717, 182.241)), (' B1142  GLN  N  ', ' B1143  PRO  HD2', -0.475, (209.933, 199.482, 133.42)), (' A 592  PHE  CE2', ' B 740  MET  HE1', -0.474, (187.227, 225.945, 215.937)), (' C1142  GLN  N  ', ' C1143  PRO  CD ', -0.474, (221.216, 207.706, 132.622)), (' C 520  ALA  HB1', ' C 521  PRO  HD2', -0.46, (214.667, 242.281, 248.391)), (' B 975  SER  O  ', ' B1000  ARG  NH2', -0.459, (191.024, 216.51, 226.069)), (' A1142  GLN  N  ', ' A1143  PRO  CD ', -0.459, (208.319, 212.961, 131.589)), (' B 197  ILE  N  ', ' B 197  ILE HD13', -0.451, (179.214, 195.728, 239.43)), (' B 197  ILE  CG1', ' B 202  LYS  CE ', -0.446, (177.931, 198.672, 238.449)), (' C 106  PHE  HB2', ' C 235  ILE HD13', -0.44, (244.95, 187.229, 246.255)), (' A 520  ALA  HB1', ' A 521  PRO  CD ', -0.433, (172.281, 211.751, 235.334)), (' A 811  LYS  NZ ', ' A 820  ASP  OD2', -0.43, (231.564, 236.71, 185.048)), (' B 196  ASN  C  ', ' B 196  ASN  ND2', -0.427, (178.185, 194.537, 242.663)), (' C 862  PRO  HA ', ' C 863  PRO  HD3', -0.413, (207.709, 186.344, 202.096)), (' A 520  ALA  HB1', ' A 521  PRO  HD2', -0.412, (172.603, 211.382, 235.692)), (' C 570  ALA  O  ', ' C 572  THR  N  ', -0.408, (221.485, 231.75, 219.721)), (' B 908  GLY  O  ', ' B1038  LYS  NZ ', -0.404, (205.475, 207.014, 165.747)), (' A 898  PHE  N  ', ' A 899  PRO  CD ', -0.403, (228.624, 223.649, 162.35))]
data['cablam'] = [('A', '33', 'THR', 'check CA trace,carbonyls, peptide', 'bend\n--S--', (206.3, 255.7, 217.3)), ('A', '86', 'PHE', 'check CA trace,carbonyls, peptide', ' \nEE-TT', (201.2, 254.0, 237.4)), ('A', '88', 'ASP', 'check CA trace,carbonyls, peptide', 'turn\n-TT-E', (201.8, 248.4, 234.7)), ('A', '108', 'THR', 'check CA trace,carbonyls, peptide', 'bend\nEES--', (201.1, 253.9, 246.9)), ('A', '218', 'GLN', 'check CA trace,carbonyls, peptide', 'bend\nS-S--', (207.1, 262.2, 214.9)), ('A', '231', 'ILE', ' beta sheet', ' \nEE---', (214.2, 248.4, 246.2)), ('A', '484', 'GLU', 'check CA trace,carbonyls, peptide', ' \nT--BT', (186.0, 181.1, 271.3)), ('A', '486', 'PHE', 'check CA trace,carbonyls, peptide', 'turn\n-BTTE', (192.5, 178.4, 271.3)), ('A', '521', 'PRO', ' beta sheet', 'bend\nSSS-S', (171.0, 214.9, 235.8)), ('A', '537', 'LYS', 'check CA trace,carbonyls, peptide', 'bend\n-SS-E', (174.6, 234.1, 220.1)), ('A', '538', 'CYS', ' beta sheet', ' \nSS-EE', (178.0, 233.1, 221.7)), ('A', '666', 'ILE', 'check CA trace,carbonyls, peptide', 'strand\nEEEET', (192.4, 233.7, 197.7)), ('A', '667', 'GLY', 'check CA trace,carbonyls, peptide', 'strand\nEEETT', (190.7, 230.4, 196.8)), ('A', '756', 'TYR', 'check CA trace,carbonyls, peptide', 'helix-3\nGGGTT', (217.4, 206.1, 225.6)), ('A', '797', 'PHE', 'check CA trace,carbonyls, peptide', 'bend\n--STT', (230.5, 227.7, 164.6)), ('A', '890', 'ALA', 'check CA trace,carbonyls, peptide', 'bend\nGGSSS', (226.7, 207.3, 173.2)), ('A', '1043', 'CYS', 'check CA trace,carbonyls, peptide', 'turn\nBTTBS', (213.0, 220.0, 177.3)), ('A', '1058', 'HIS', 'check CA trace,carbonyls, peptide', 'turn\nETTEE', (223.1, 223.5, 194.7)), ('A', '1109', 'PHE', 'check CA trace,carbonyls, peptide', 'bend\nTTS--', (207.2, 224.6, 157.5)), ('A', '34', 'ARG', 'check CA trace', ' \n-S---', (207.8, 256.6, 220.7)), ('A', '220', 'PHE', 'check CA trace', ' \nS----', (212.0, 257.1, 216.0)), ('A', '293', 'LEU', 'check CA trace', 'bend\nTTS-H', (198.8, 248.0, 215.4)), ('A', '549', 'THR', 'check CA trace', 'strand\nEEEEE', (181.9, 228.1, 225.3)), ('C', '41', 'LYS', 'check CA trace,carbonyls, peptide', 'bend\n-SSEE', (230.3, 181.4, 230.5)), ('C', '88', 'ASP', 'check CA trace,carbonyls, peptide', 'turn\n-TT-E', (242.5, 196.3, 238.9)), ('C', '108', 'THR', 'check CA trace,carbonyls, peptide', 'bend\nEESS-', (246.9, 193.7, 251.3)), ('C', '111', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\nS-SSS', (251.6, 190.3, 257.6)), ('C', '113', 'LYS', 'check CA trace,carbonyls, peptide', 'bend\nSSSS-', (246.9, 191.5, 260.3)), ('C', '123', 'ALA', 'check CA trace,carbonyls, peptide', 'turn\nEETTE', (253.3, 168.4, 243.6)), ('C', '218', 'GLN', 'check CA trace,carbonyls, peptide', ' \n-----', (253.6, 185.8, 219.2)), ('C', '231', 'ILE', ' beta sheet', ' \nEE---', (236.0, 185.3, 249.4)), ('C', '484', 'GLU', 'check CA trace,carbonyls, peptide', ' \nT--BT', (212.4, 255.5, 294.6)), ('C', '486', 'PHE', 'check CA trace,carbonyls, peptide', 'turn\n-BTTE', (211.8, 250.7, 299.8)), ('C', '666', 'ILE', 'check CA trace,carbonyls, peptide', 'strand\nEEEET', (237.7, 213.2, 201.5)), ('C', '667', 'GLY', 'check CA trace,carbonyls, peptide', 'strand\nEEETT', (235.7, 216.2, 200.4)), ('C', '797', 'PHE', 'check CA trace,carbonyls, peptide', 'bend\n--STT', (218.4, 182.4, 166.6)), ('C', '890', 'ALA', 'check CA trace,carbonyls, peptide', 'bend\nGGSSS', (201.5, 196.0, 172.2)), ('C', '942', 'PRO', 'check CA trace,carbonyls, peptide', 'turn\nT-TTT', (231.5, 191.2, 195.4)), ('C', '1034', 'LEU', 'check CA trace,carbonyls, peptide', 'bend\nIISS-', (208.9, 195.5, 175.7)), ('C', '1043', 'CYS', 'check CA trace,carbonyls, peptide', 'turn\nBTTBS', (218.4, 201.8, 178.7)), ('C', '1045', 'LYS', 'check CA trace,carbonyls, peptide', 'bend\nTBSSE', (225.0, 203.7, 177.4)), ('C', '1058', 'HIS', 'check CA trace,carbonyls, peptide', 'turn\nETTEE', (214.1, 191.8, 196.1)), ('C', '1084', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\nESSSE', (223.5, 222.2, 137.6)), ('C', '1109', 'PHE', 'check CA trace,carbonyls, peptide', 'bend\nTTS--', (228.1, 203.8, 160.0)), ('C', '34', 'ARG', 'check CA trace', ' \nTT---', (248.0, 187.4, 224.5)), ('C', '220', 'PHE', 'check CA trace', ' \n-----', (246.6, 184.1, 219.8)), ('C', '293', 'LEU', 'check CA trace', 'bend\nTTS-H', (245.0, 200.1, 219.9)), ('C', '310', 'LYS', 'check CA trace', 'bend\n--SEE', (238.4, 200.2, 200.9)), ('C', '549', 'THR', 'check CA trace', 'strand\nEEEEE', (232.8, 226.8, 227.3)), ('B', '86', 'PHE', 'check CA trace,carbonyls, peptide', ' \nEE-TT', (174.9, 185.2, 240.4)), ('B', '87', 'ASN', 'check CA trace,carbonyls, peptide', 'turn\nE-TTE', (178.7, 185.4, 239.5)), ('B', '88', 'ASP', 'check CA trace,carbonyls, peptide', 'turn\n-TTEE', (179.6, 188.8, 238.3)), ('B', '111', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\n-SSSS', (169.2, 182.0, 255.3)), ('B', '113', 'LYS', 'check CA trace,carbonyls, peptide', 'bend\nSSSS-', (173.3, 185.4, 258.9)), ('B', '123', 'ALA', 'check CA trace,carbonyls, peptide', 'turn\nEETTE', (150.3, 195.2, 243.6)), ('B', '484', 'GLU', 'check CA trace,carbonyls, peptide', ' \nT--BT', (240.5, 180.9, 297.7)), ('B', '486', 'PHE', 'check CA trace,carbonyls, peptide', 'turn\n-BTTE', (236.0, 183.3, 302.7)), ('B', '666', 'ILE', 'check CA trace,carbonyls, peptide', 'strand\nEEEET', (197.4, 184.7, 201.3)), ('B', '667', 'GLY', 'check CA trace,carbonyls, peptide', 'strand\nEEETT', (201.0, 184.8, 200.3)), ('B', '797', 'PHE', 'check CA trace,carbonyls, peptide', 'bend\n--SSS', (185.2, 215.3, 162.5)), ('B', '813', 'SER', 'check CA trace,carbonyls, peptide', 'turn\nSTTT-', (178.0, 222.2, 185.3)), ('B', '939', 'SER', ' alpha helix', 'turn\nHHTT-', (178.7, 203.1, 185.0)), ('B', '940', 'SER', ' alpha helix', 'turn\nHTT-G', (178.9, 199.5, 186.2)), ('B', '1043', 'CYS', 'check CA trace,carbonyls, peptide', 'turn\nBTTBS', (200.0, 206.0, 177.3)), ('B', '1058', 'HIS', 'check CA trace,carbonyls, peptide', 'turn\nETTEE', (191.0, 215.3, 193.2)), ('B', '1084', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\nESSSE', (221.0, 190.1, 139.4)), ('B', '1092', 'GLU', 'check CA trace,carbonyls, peptide', 'bend\nESSSE', (210.5, 200.4, 154.8)), ('B', '1109', 'PHE', 'check CA trace,carbonyls, peptide', 'bend\nTTS--', (199.7, 196.0, 158.7)), ('B', '34', 'ARG', 'check CA trace', ' \nTT--E', (169.6, 189.9, 223.5)), ('B', '220', 'PHE', 'check CA trace', ' \nS---E', (167.4, 193.0, 219.1)), ('B', '293', 'LEU', 'check CA trace', 'bend\nTTS-H', (181.6, 185.5, 218.8)), ('B', '310', 'LYS', 'check CA trace', 'bend\n--SEE', (186.3, 191.5, 200.4)), ('B', '549', 'THR', 'check CA trace', 'strand\nEEEEE', (209.6, 180.7, 228.2))]
data['rota'] = [('A', ' 938 ', 'LEU', 0.03181209966323465, (217.983, 236.385, 184.945)), ('A', ' 945 ', 'LEU', 0.2590611229480135, (215.97999999999988, 231.281, 190.612)), ('A', ' 962 ', 'LEU', 0.09312583132524184, (216.27799999999993, 223.442, 215.619)), ('C', ' 233 ', 'ILE', 0.0, (238.65499999999994, 190.885, 249.885)), ('C', ' 234 ', 'ASN', 0.0, (240.33399999999995, 193.585, 247.717)), ('C', ' 760 ', 'CYS', 0.1375348334498857, (198.81499999999994, 201.053, 217.999)), ('C', ' 774 ', 'GLN', 0.1350801386978552, (205.63999999999993, 195.467, 198.307)), ('C', ' 916 ', 'LEU', 0.2550120170726046, (223.09999999999994, 193.71, 160.439)), ('B', ' 202 ', 'LYS', 0.006965614321818762, (172.925, 198.206, 238.99500000000003)), ('B', ' 603 ', 'ASN', 0.05048854696383524, (177.24899999999994, 191.438, 200.519)), ('B', ' 616 ', 'ASN', 0.2242802726369353, (201.75899999999993, 174.594, 212.101)), ('B', ' 962 ', 'LEU', 0.2792372804761729, (193.40099999999995, 212.477, 214.804)), ('B', ' 966 ', 'LEU', 0.09963535364541289, (191.689, 213.75, 221.09300000000002))]
data['clusters'] = [('A', '218', 1, 'cablam Outlier', (207.1, 262.2, 214.9)), ('A', '220', 1, 'cablam CA Geom Outlier', (212.0, 257.1, 216.0)), ('A', '33', 1, 'cablam Outlier', (206.3, 255.7, 217.3)), ('A', '34', 1, 'cablam CA Geom Outlier', (207.8, 256.6, 220.7)), ('A', '796', 2, 'Dihedral angle:CA:CB:CG:OD1', (234.025, 228.816, 163.85200000000003)), ('A', '797', 2, 'cablam Outlier', (230.5, 227.7, 164.6)), ('A', '898', 2, 'side-chain clash\nBond angle:CA:CB:CG', (228.031, 222.946, 164.14499999999998)), ('A', '899', 2, 'side-chain clash', (228.624, 223.649, 162.35)), ('A', '101', 3, 'smoc Outlier', (210.537, 269.553, 235.59)), ('A', '141', 3, 'smoc Outlier', (210.472, 271.676, 244.17899999999997)), ('A', '240', 3, 'smoc Outlier', (205.54399999999998, 264.794, 238.429)), ('A', '242', 3, 'Bond length:CB:CG', (208.08700000000002, 271.03799999999995, 238.89600000000002)), ('A', '1306', 4, 'Bond angle:C8:C7:N2\nBond length:C5:O5', (178.433, 221.04, 259.59499999999997)), ('A', '340', 4, 'smoc Outlier', (173.542, 215.778, 260.677)), ('A', '341', 4, 'smoc Outlier', (176.85800000000003, 214.379, 259.477)), ('A', '406', 5, 'smoc Outlier', (194.42600000000002, 205.185, 261.739)), ('A', '408', 5, 'Dihedral angle:CD:NE:CZ:NH1', (196.172, 207.767, 257.42599999999993)), ('A', '410', 5, 'smoc Outlier', (191.348, 206.39700000000002, 255.17399999999998)), ('A', '574', 6, 'smoc Outlier', (177.73899999999998, 218.67499999999998, 221.798)), ('A', '575', 6, 'smoc Outlier', (174.32200000000003, 218.79399999999998, 223.431)), ('A', '586', 6, 'smoc Outlier', (172.71699999999998, 221.758, 220.708)), ('A', '537', 7, 'cablam Outlier', (174.6, 234.1, 220.1)), ('A', '538', 7, 'cablam Outlier\nsmoc Outlier', (178.0, 233.1, 221.7)), ('A', '590', 7, 'smoc Outlier', (181.67399999999998, 229.914, 218.086)), ('A', '617', 8, 'Ramachandran', (181.084, 238.245, 207.288)), ('A', '619', 8, 'smoc Outlier', (180.258, 237.38500000000002, 212.45800000000003)), ('A', '649', 8, 'smoc Outlier', (185.045, 236.92800000000003, 204.32600000000002)), ('A', '464', 9, 'smoc Outlier', (182.707, 200.417, 249.972)), ('A', '466', 9, 'smoc Outlier', (180.256, 196.848, 254.65200000000002)), ('A', '467', 9, 'Dihedral angle:CA:CB:CG:OD1\nsmoc Outlier', (180.82800000000003, 193.629, 256.634)), ('A', '880', 10, 'smoc Outlier', (230.907, 218.01299999999998, 173.79399999999998)), ('A', '884', 10, 'smoc Outlier', (230.228, 216.54, 168.485)), ('A', '894', 10, 'smoc Outlier', (232.698, 212.454, 166.74099999999999)), ('A', '666', 11, 'cablam Outlier', (192.4, 233.7, 197.7)), ('A', '667', 11, 'cablam Outlier', (190.7, 230.4, 196.8)), ('A', '452', 12, 'smoc Outlier', (184.49200000000002, 198.31, 267.63599999999997)), ('A', '495', 12, 'Bond angle:CA:CB:CG\nsmoc Outlier', (188.833, 200.866, 271.209)), ('A', '276', 13, 'smoc Outlier', (209.787, 243.536, 216.146)), ('A', '289', 13, 'smoc Outlier', (206.989, 247.289, 214.39600000000002)), ('A', '811', 14, 'side-chain clash', (231.564, 236.71, 185.048)), ('A', '820', 14, 'side-chain clash', (231.564, 236.71, 185.048)), ('A', '903', 15, 'smoc Outlier', (220.60299999999998, 220.64299999999997, 160.43800000000002)), ('A', '916', 15, 'smoc Outlier', (218.313, 225.48800000000003, 158.08)), ('A', '53', 16, 'smoc Outlier', (207.68200000000002, 243.399, 226.95100000000002)), ('A', '55', 16, 'Bond angle:CA:CB:CG', (206.07299999999998, 249.072, 225.60999999999999)), ('A', '193', 17, 'smoc Outlier', (210.344, 254.824, 230.768)), ('A', '204', 17, 'smoc Outlier', (215.298, 254.155, 230.617)), ('A', '86', 18, 'cablam Outlier', (201.2, 254.0, 237.4)), ('A', '88', 18, 'cablam Outlier\nsmoc Outlier', (201.8, 248.4, 234.7)), ('A', '108', 19, 'cablam Outlier', (201.1, 253.9, 246.9)), ('A', '110', 19, 'Bond length:CB:CG', (201.008, 259.217, 248.484)), ('A', '520', 20, 'side-chain clash\nBond angle:C:CA:CB', (174.184, 212.864, 234.718)), ('A', '521', 20, 'side-chain clash\ncablam Outlier', (172.603, 211.382, 235.692)), ('A', '1009', 21, 'smoc Outlier', (212.346, 213.411, 209.833)), ('A', '1010', 21, 'smoc Outlier', (211.82200000000003, 216.672, 207.961)), ('A', '455', 22, 'smoc Outlier', (190.841, 192.69899999999998, 263.78799999999995)), ('A', '456', 22, 'smoc Outlier', (190.291, 189.192, 262.452)), ('A', '186', 23, 'smoc Outlier', (210.52200000000002, 274.195, 223.186)), ('A', '97', 23, 'smoc Outlier', (212.77399999999997, 275.65200000000004, 227.701)), ('A', '503', 24, 'smoc Outlier', (197.124, 211.681, 270.453)), ('A', '505', 24, 'smoc Outlier', (195.24299999999997, 206.76, 270.454)), ('A', '962', 25, 'Rotamer\nside-chain clash\nBond angle:CB:CG:CD2\nBond angle:CD1:CG:CD2\nsmoc Outlier', (216.278, 223.442, 215.61899999999997)), ('A', '965', 25, 'smoc Outlier', (214.537, 224.753, 220.77399999999997)), ('A', '1107', 26, 'smoc Outlier', (204.251, 219.592, 157.595)), ('A', '1109', 26, 'cablam Outlier', (207.2, 224.6, 157.5)), ('A', '1058', 27, 'cablam Outlier', (223.1, 223.5, 194.7)), ('A', '1059', 27, 'smoc Outlier', (221.52700000000002, 222.97, 191.319)), ('E', '44', 1, 'smoc Outlier', (205.282, 188.39600000000002, 270.884)), ('E', '48', 1, 'smoc Outlier', (205.031, 190.76, 276.548)), ('C', '106', 1, 'side-chain clash', (244.95, 187.229, 246.255)), ('C', '107', 1, 'side-chain clash', (247.002, 190.228, 247.305)), ('C', '108', 1, 'cablam Outlier', (246.9, 193.7, 251.3)), ('C', '117', 1, 'smoc Outlier', (244.877, 184.476, 249.67)), ('C', '119', 1, 'smoc Outlier', (247.33200000000002, 179.605, 246.069)), ('C', '1301', 1, 'Bond angle:C8:C7:N2\nBond length:C5:O5', (236.54299999999998, 193.997, 252.127)), ('C', '196', 1, 'backbone clash', (239.434, 190.948, 246.218)), ('C', '233', 1, 'Rotamer\nbackbone clash', (239.434, 190.948, 246.218)), ('C', '234', 1, 'Rotamer', (240.33399999999995, 193.585, 247.717)), ('C', '235', 1, 'side-chain clash\nsmoc Outlier', (244.95, 187.229, 246.255)), ('C', '557', 2, 'side-chain clash', (206.866, 198.35, 219.378)), ('C', '574', 2, 'side-chain clash\nsmoc Outlier', (206.866, 198.35, 219.378)), ('C', '736', 2, 'side-chain clash', (208.0, 194.227, 215.609)), ('C', '741', 2, 'smoc Outlier', (206.27399999999997, 194.537, 221.379)), ('C', '856', 2, 'smoc Outlier', (209.236, 190.121, 220.314)), ('C', '858', 2, 'side-chain clash', (208.0, 194.227, 215.609)), ('C', '379', 3, 'side-chain clash', (226.864, 233.873, 263.242)), ('C', '381', 3, 'smoc Outlier', (222.176, 228.76399999999998, 260.834)), ('C', '382', 3, 'smoc Outlier', (225.101, 229.27899999999997, 258.45099999999996)), ('C', '432', 3, 'side-chain clash', (226.864, 233.873, 263.242)), ('C', '666', 4, 'cablam Outlier', (237.7, 213.2, 201.5)), ('C', '667', 4, 'cablam Outlier', (235.7, 216.2, 200.4)), ('C', '669', 4, 'smoc Outlier', (237.954, 218.17399999999998, 195.738)), ('C', '291', 5, 'smoc Outlier', (239.369, 198.68, 219.869)), ('C', '293', 5, 'cablam CA Geom Outlier\nsmoc Outlier', (245.0, 200.1, 219.9)), ('C', '58', 5, 'smoc Outlier', (247.317, 194.695, 223.008)), ('C', '1043', 6, 'cablam Outlier', (218.4, 201.8, 178.7)), ('C', '1045', 6, 'cablam Outlier', (225.0, 203.7, 177.4)), ('C', '1066', 6, 'smoc Outlier', (223.525, 198.601, 172.99800000000002)), ('C', '310', 7, 'cablam CA Geom Outlier', (238.4, 200.2, 200.9)), ('C', '599', 7, 'Bond angle:N:CA:CB', (241.787, 202.993, 204.48000000000002)), ('C', '600', 7, 'Bond angle:N:CA:C\nBond length:N:CD', (242.626, 200.804, 201.459)), ('C', '102', 8, 'smoc Outlier', (254.54399999999998, 176.846, 242.406)), ('C', '240', 8, 'smoc Outlier', (254.95200000000003, 184.874, 242.999)), ('C', '242', 8, 'Bond length:CB:CG', (259.061, 179.70399999999998, 243.35600000000002)), ('C', '570', 9, 'backbone clash\nsmoc Outlier', (221.485, 231.75, 219.721)), ('C', '571', 9, 'Ramachandran', (219.70099999999994, 233.223, 220.188)), ('C', '572', 9, 'backbone clash', (221.485, 231.75, 219.721)), ('C', '1305', 10, 'Bond length:C5:O5', (237.548, 249.803, 233.61899999999997)), ('C', '582', 10, 'smoc Outlier', (235.20299999999997, 246.538, 229.542)), ('C', '123', 11, 'Ramachandran\ncablam Outlier', (253.31799999999998, 168.425, 243.638)), ('C', '1303', 11, 'Bond angle:C8:C7:N2\nsmoc Outlier', (251.78, 165.48800000000003, 247.22)), ('C', '1308', 12, 'Bond angle:C8:C7:N2', (241.9, 225.64399999999998, 208.004)), ('C', '646', 12, 'Dihedral angle:CD:NE:CZ:NH1', (238.863, 222.303, 203.646)), ('C', '661', 13, 'Dihedral angle:CB:CG:CD:OE1', (240.80700000000002, 209.493, 189.36700000000002)), ('C', '699', 13, 'Bond angle:N:CA:CB\nsmoc Outlier', (237.38100000000003, 214.76299999999998, 186.625)), ('C', '451', 14, 'smoc Outlier', (227.16899999999998, 252.21099999999998, 280.165)), ('C', '495', 14, 'smoc Outlier', (228.465, 248.59, 284.67400000000004)), ('C', '989', 15, 'smoc Outlier', (204.98800000000003, 200.26999999999998, 239.297)), ('C', '990', 15, 'smoc Outlier', (202.576, 202.037, 236.955)), ('C', '332', 16, 'smoc Outlier', (234.796, 247.64499999999998, 242.454)), ('C', '333', 16, 'smoc Outlier', (233.539, 245.97, 245.596)), ('C', '916', 17, 'Rotamer\nBond angle:CD1:CG:CD2\nBond length:CB:CG', (223.1, 193.70999999999998, 160.439)), ('C', '917', 17, 'smoc Outlier', (222.89700000000002, 191.101, 157.74299999999997)), ('C', '322', 18, 'smoc Outlier', (238.69899999999998, 223.201, 228.496)), ('C', '538', 18, 'smoc Outlier', (239.5, 226.637, 225.221)), ('C', '270', 19, 'smoc Outlier', (244.354, 194.577, 233.04399999999998)), ('C', '88', 19, 'cablam Outlier', (242.5, 196.3, 238.9)), ('C', '111', 20, 'cablam Outlier', (251.6, 190.3, 257.6)), ('C', '113', 20, 'cablam Outlier', (246.9, 191.5, 260.3)), ('C', '398', 21, 'smoc Outlier', (223.24599999999998, 245.441, 266.813)), ('C', '400', 21, 'smoc Outlier', (226.15200000000002, 246.724, 272.79499999999996)), ('C', '520', 22, 'side-chain clash', (214.667, 242.281, 248.391)), ('C', '521', 22, 'side-chain clash', (214.667, 242.281, 248.391)), ('C', '359', 23, 'smoc Outlier', (222.43800000000002, 247.454, 252.845)), ('C', '360', 23, 'smoc Outlier', (223.29399999999998, 247.972, 249.17)), ('C', '220', 24, 'cablam CA Geom Outlier', (246.6, 184.1, 219.8)), ('C', '34', 24, 'cablam CA Geom Outlier', (248.0, 187.4, 224.5)), ('C', '186', 25, 'smoc Outlier', (261.646, 176.916, 227.49800000000002)), ('C', '187', 25, 'smoc Outlier', (259.197, 174.056, 226.68)), ('C', '862', 26, 'side-chain clash', (207.709, 186.344, 202.096)), ('C', '863', 26, 'side-chain clash', (207.709, 186.344, 202.096)), ('C', '887', 27, 'smoc Outlier', (204.95800000000003, 193.02100000000002, 169.252)), ('C', '890', 27, 'cablam Outlier', (201.5, 196.0, 172.2)), ('C', '40', 28, 'smoc Outlier', (231.671, 184.95600000000002, 230.53)), ('C', '41', 28, 'cablam Outlier', (230.3, 181.4, 230.5)), ('C', '482', 29, 'smoc Outlier', (207.39200000000002, 258.244, 290.832)), ('C', '484', 29, 'cablam Outlier', (212.4, 255.5, 294.6)), ('C', '942', 30, 'cablam Outlier', (231.5, 191.2, 195.4)), ('C', '943', 30, 'Ramachandran', (229.84599999999995, 194.646, 195.37900000000002)), ('G', '2', 1, 'smoc Outlier', (210.85500000000002, 238.71599999999998, 300.597)), ('G', '17', 1, 'smoc Outlier', (229.58200000000002, 250.966, 293.879)), ('B', '482', 1, 'smoc Outlier', (245.598, 183.846, 294.35200000000003)), ('B', '484', 1, 'cablam Outlier\nsmoc Outlier', (240.5, 180.9, 297.7)), ('B', '485', 1, 'smoc Outlier', (238.672, 181.123, 301.084)), ('B', '486', 1, 'cablam Outlier', (236.0, 183.3, 302.7)), ('B', '490', 1, 'smoc Outlier', (236.961, 180.023, 291.841)), ('B', '104', 2, 'smoc Outlier', (164.439, 188.58100000000002, 243.342)), ('B', '240', 2, 'smoc Outlier', (163.598, 184.297, 241.575)), ('B', '242', 2, 'Bond length:CB:CG\nsmoc Outlier', (157.05100000000002, 183.73899999999998, 241.60399999999998)), ('B', '265', 2, 'side-chain clash', (162.683, 179.985, 239.759)), ('B', '81', 2, 'side-chain clash', (162.683, 179.985, 239.759)), ('B', '377', 3, 'smoc Outlier', (213.38600000000002, 175.80200000000002, 268.161)), ('B', '379', 3, 'smoc Outlier', (214.509, 181.95800000000003, 265.21099999999996)), ('B', '384', 3, 'smoc Outlier', (212.366, 179.13, 260.561)), ('B', '385', 3, 'smoc Outlier', (210.559, 177.989, 257.414)), ('B', '432', 3, 'smoc Outlier', (218.23999999999998, 180.191, 265.316)), ('B', '740', 4, 'side-chain clash\nbackbone clash', (191.024, 216.51, 226.069)), ('B', '962', 4, 'Rotamer\nBond angle:CD1:CG:CD2', (193.401, 212.477, 214.804)), ('B', '966', 4, 'Rotamer\nside-chain clash\nBond angle:CD1:CG:CD2', (191.689, 213.75, 221.093)), ('B', '996', 4, 'smoc Outlier', (197.3, 215.792, 227.752)), ('B', '797', 5, 'cablam Outlier', (185.2, 215.3, 162.5)), ('B', '898', 5, 'Bond angle:CA:CB:CG', (190.435, 215.569, 162.195)), ('B', '902', 5, 'smoc Outlier', (194.642, 210.696, 162.51399999999998)), ('B', '903', 5, 'smoc Outlier', (196.671, 210.04399999999998, 159.38000000000002)), ('B', '121', 6, 'smoc Outlier', (157.03, 194.112, 242.945)), ('B', '123', 6, 'cablam Outlier', (150.3, 195.2, 243.6)), ('B', '1302', 6, 'Bond angle:C8:C7:N2', (149.121, 197.206, 247.797)), ('B', '939', 7, 'cablam Outlier', (178.7, 203.1, 185.0)), ('B', '940', 7, 'Ramachandran\ncablam Outlier', (178.928, 199.524, 186.226)), ('B', '942', 7, 'smoc Outlier', (182.66299999999998, 201.65800000000002, 190.978)), ('B', '291', 8, 'smoc Outlier', (183.72, 190.917, 219.156)), ('B', '293', 8, 'cablam CA Geom Outlier', (181.6, 185.5, 218.8)), ('B', '301', 8, 'smoc Outlier', (185.107, 195.147, 215.474)), ('B', '86', 9, 'cablam Outlier', (174.9, 185.2, 240.4)), ('B', '87', 9, 'cablam Outlier', (178.7, 185.4, 239.5)), ('B', '88', 9, 'cablam Outlier', (179.6, 188.8, 238.3)), ('B', '1012', 10, 'Bond angle:CD1:CG:CD2', (203.756, 214.961, 204.74599999999998)), ('B', '1014', 10, 'smoc Outlier', (201.342, 211.112, 201.72)), ('B', '1017', 10, 'Dihedral angle:CB:CG:CD:OE1\nsmoc Outlier', (203.12800000000001, 210.39100000000002, 197.118)), ('B', '1054', 11, 'smoc Outlier', (188.85100000000003, 214.083, 181.71499999999997)), ('B', '874', 11, 'smoc Outlier', (190.093, 220.063, 180.23)), ('B', '878', 11, 'smoc Outlier', (190.16299999999998, 218.47899999999998, 174.259)), ('B', '355', 12, 'Dihedral angle:CD:NE:CZ:NH1', (232.37800000000001, 177.147, 267.537)), ('B', '357', 12, 'smoc Outlier', (232.435, 177.011, 261.02099999999996)), ('B', '358', 12, 'smoc Outlier', (229.907, 176.292, 258.27099999999996)), ('B', '666', 13, 'cablam Outlier\nsmoc Outlier', (197.4, 184.7, 201.3)), ('B', '667', 13, 'cablam Outlier', (201.0, 184.8, 200.3)), ('B', '404', 14, 'smoc Outlier', (217.366, 172.541, 281.203)), ('B', '407', 14, 'smoc Outlier', (217.632, 176.98200000000003, 278.22299999999996)), ('B', '1109', 15, 'cablam Outlier', (199.7, 196.0, 158.7)), ('B', '714', 15, 'smoc Outlier', (201.707, 190.126, 160.228)), ('B', '273', 16, 'smoc Outlier', (183.348, 190.975, 226.555)), ('B', '55', 16, 'Bond angle:CA:CB:CG', (177.12800000000001, 191.789, 228.668)), ('B', '1087', 17, 'smoc Outlier', (221.129, 191.79299999999998, 147.375)), ('B', '1126', 17, 'smoc Outlier', (223.905, 187.68, 147.256)), ('B', '598', 18, 'smoc Outlier', (189.875, 185.85200000000003, 204.80100000000002)), ('B', '609', 18, 'smoc Outlier', (188.559, 181.30700000000002, 206.483)), ('B', '197', 19, 'side-chain clash', (177.931, 198.672, 238.449)), ('B', '202', 19, 'Rotamer\nside-chain clash', (177.931, 198.672, 238.449)), ('B', '111', 20, 'cablam Outlier', (169.2, 182.0, 255.3)), ('B', '113', 20, 'cablam Outlier', (173.3, 185.4, 258.9)), ('B', '391', 21, 'smoc Outlier', (221.77899999999997, 182.375, 252.242)), ('B', '525', 21, 'smoc Outlier', (223.055, 178.783, 250.889)), ('B', '220', 22, 'cablam CA Geom Outlier', (167.4, 193.0, 219.1)), ('B', '34', 22, 'cablam CA Geom Outlier', (169.6, 189.9, 223.5)), ('B', '450', 23, 'smoc Outlier', (232.51899999999998, 167.727, 283.42099999999994)), ('B', '451', 23, 'smoc Outlier', (230.21099999999998, 170.661, 282.64200000000005)), ('B', '741', 24, 'smoc Outlier', (193.577, 221.24499999999998, 218.728)), ('B', '856', 24, 'smoc Outlier', (188.77899999999997, 221.056, 217.407)), ('B', '749', 25, 'smoc Outlier', (196.939, 225.006, 228.738)), ('B', '753', 25, 'smoc Outlier', (202.097, 224.661, 225.389)), ('B', '474', 26, 'smoc Outlier', (237.01399999999998, 188.54899999999998, 294.734)), ('B', '475', 26, 'smoc Outlier', (233.538, 188.57399999999998, 296.23699999999997)), ('F', '13', 1, 'smoc Outlier', (225.312, 176.067, 298.05)), ('F', '17', 1, 'smoc Outlier', (226.16, 169.42600000000002, 296.515)), ('F', '9', 1, 'smoc Outlier', (224.95100000000002, 181.70299999999997, 300.879)), ('F', '53', 2, 'smoc Outlier', (214.40200000000002, 171.484, 303.89599999999996)), ('F', '54', 2, 'smoc Outlier', (217.292, 169.312, 302.67400000000004)), ('F', '1', 3, 'smoc Outlier', (229.095, 193.20499999999998, 306.49299999999994)), ('F', '2', 3, 'smoc Outlier', (227.42100000000002, 192.502, 303.067)), ('F', '33', 4, 'smoc Outlier', (223.74099999999999, 185.494, 291.43299999999994)), ('F', '40', 4, 'smoc Outlier', (217.92200000000003, 192.5, 299.203)), ('D', '1', 1, 'Bond angle:C8:C7:N2', (209.89700000000002, 234.72899999999998, 155.11899999999997)), ('H', '2', 1, 'Bond length:C5:O5', (201.599, 227.484, 136.778)), ('I', '2', 1, 'Bond angle:C8:C7:N2', (184.82000000000002, 211.319, 132.347)), ('J', '1', 1, 'Bond angle:C8:C7:N2', (232.24699999999999, 235.965, 167.259)), ('J', '2', 1, 'Bond length:C5:O5', (230.189, 240.71899999999997, 176.942)), ('L', '2', 1, 'Bond angle:C8:C7:N2\nBond length:C5:O5', (236.39200000000002, 205.999, 140.33800000000002)), ('O', '1', 1, 'Bond angle:C8:C7:N2', (184.045, 189.912, 247.196)), ('P', '1', 1, 'Bond angle:C8:C7:N2', (189.72299999999998, 192.789, 156.21899999999997)), ('Q', '1', 1, 'Bond length:C5:O5', (199.728, 180.267, 147.752)), ('Q', '2', 1, 'Bond length:C5:O5', (200.448, 187.05800000000002, 139.434)), ('R', '1', 1, 'Bond angle:C8:C7:N2', (218.463, 179.177, 147.123)), ('S', '2', 1, 'Bond length:C5:O5', (173.76299999999998, 210.64, 175.016))]
data['rama'] = [('A', ' 617 ', 'CYS', 0.026897145278777936, (181.084, 238.245, 207.288)), ('B', ' 940 ', 'SER', 0.02226717213776419, (178.928, 199.524, 186.226)), ('C', ' 123 ', 'ALA', 0.0308490682478646, (253.31799999999998, 168.425, 243.638)), ('C', ' 571 ', 'ASP', 0.0005180385488363291, (219.70099999999994, 233.223, 220.188)), ('C', ' 943 ', 'SER', 0.020103286011688957, (229.84599999999995, 194.646, 195.37900000000002))]
data['smoc'] = [('A', 42, u'VAL', 0.6479924395496458, (222.224, 242.2, 224.85100000000003)), ('A', 53, u'ASP', 0.7133888072110813, (207.68200000000002, 243.399, 226.95100000000002)), ('A', 88, u'ASP', 0.6670885659947704, (201.8, 248.431, 234.677)), ('A', 97, u'LYS', 0.5974655147745405, (212.77399999999997, 275.65200000000004, 227.701)), ('A', 101, u'ILE', 0.5465546752004661, (210.537, 269.553, 235.59)), ('A', 135, u'PHE', 0.6542237256559016, (205.79899999999998, 266.59799999999996, 251.435)), ('A', 141, u'LEU', 0.6264590459003133, (210.472, 271.676, 244.17899999999997)), ('A', 167, u'THR', 0.6304221536380974, (216.57, 251.037, 252.92800000000003)), ('A', 186, u'PHE', 0.5781618216298118, (210.52200000000002, 274.195, 223.186)), ('A', 191, u'GLU', 0.6038579861052045, (211.863, 260.746, 227.206)), ('A', 193, u'VAL', 0.6004150321819193, (210.344, 254.824, 230.768)), ('A', 204, u'TYR', 0.5987845262547928, (215.298, 254.155, 230.617)), ('A', 240, u'THR', 0.640415581964717, (205.54399999999998, 264.794, 238.429)), ('A', 276, u'LEU', 0.6075198872449794, (209.787, 243.536, 216.146)), ('A', 289, u'VAL', 0.6540526146150815, (206.989, 247.289, 214.39600000000002)), ('A', 298, u'GLU', 0.6617725147082993, (201.02800000000002, 241.547, 211.976)), ('A', 326, u'ILE', 0.6910040330502712, (175.055, 231.495, 231.319)), ('A', 334, u'ASN', 0.7500901934302079, (166.899, 223.122, 250.323)), ('A', 340, u'GLU', 0.7447583553836391, (173.542, 215.778, 260.677)), ('A', 341, u'VAL', 0.7389170520820509, (176.85800000000003, 214.379, 259.477)), ('A', 358, u'ILE', 0.753097760263983, (172.893, 213.404, 250.423)), ('A', 374, u'PHE', 0.8210662403423863, (189.007, 219.93800000000002, 261.20099999999996)), ('A', 387, u'LEU', 0.6892594878964355, (183.60399999999998, 221.829, 245.31)), ('A', 391, u'CYS', 0.6578354392420549, (177.22899999999998, 219.11299999999997, 240.829)), ('A', 406, u'GLU', 0.7549455138071169, (194.42600000000002, 205.185, 261.739)), ('A', 410, u'ILE', 0.6577869549547943, (191.348, 206.39700000000002, 255.17399999999998)), ('A', 432, u'CYS', 0.7821080717154462, (187.26999999999998, 214.26399999999998, 250.453)), ('A', 452, u'LEU', 0.783798211304827, (184.49200000000002, 198.31, 267.63599999999997)), ('A', 455, u'LEU', 0.8118727540418466, (190.841, 192.69899999999998, 263.78799999999995)), ('A', 456, u'PHE', 0.8162454387935025, (190.291, 189.192, 262.452)), ('A', 464, u'PHE', 0.7586844805409197, (182.707, 200.417, 249.972)), ('A', 466, u'ARG', 0.6912429186685644, (180.256, 196.848, 254.65200000000002)), ('A', 467, u'ASP', 0.777305247625851, (180.82800000000003, 193.629, 256.634)), ('A', 471, u'GLU', 0.8045337455402597, (180.87800000000001, 185.004, 263.265)), ('A', 474, u'GLN', 0.8316723514559755, (188.963, 180.472, 262.812)), ('A', 481, u'ASN', 0.8385310669733631, (181.45600000000002, 176.268, 265.71099999999996)), ('A', 486, u'PHE', 0.8424272305631617, (192.49200000000002, 178.365, 271.301)), ('A', 495, u'TYR', 0.8001988090559762, (188.833, 200.866, 271.209)), ('A', 503, u'VAL', 0.8441263277077246, (197.124, 211.681, 270.453)), ('A', 505, u'TYR', 0.8123742484744542, (195.24299999999997, 206.76, 270.454)), ('A', 508, u'TYR', 0.8152871978450146, (188.768, 210.848, 265.715)), ('A', 538, u'CYS', 0.7059731016297393, (177.978, 233.054, 221.725)), ('A', 574, u'ASP', 0.5867324546794855, (177.73899999999998, 218.67499999999998, 221.798)), ('A', 575, u'ALA', 0.6205525315444745, (174.32200000000003, 218.79399999999998, 223.431)), ('A', 586, u'ASP', 0.6107165241083439, (172.71699999999998, 221.758, 220.708)), ('A', 590, u'CYS', 0.7172855961994915, (181.67399999999998, 229.914, 218.086)), ('A', 619, u'GLU', 0.6877407054495331, (180.258, 237.38500000000002, 212.45800000000003)), ('A', 649, u'CYS', 0.6352977387164276, (185.045, 236.92800000000003, 204.32600000000002)), ('A', 695, u'TYR', 0.6457170510121018, (187.853, 238.963, 190.959)), ('A', 699, u'LEU', 0.6255224419415499, (192.08200000000002, 230.86100000000002, 182.791)), ('A', 718, u'PHE', 0.5878540533736917, (209.689, 230.117, 162.731)), ('A', 738, u'CYS', 0.4845488773217618, (222.82200000000003, 214.125, 218.87800000000001)), ('A', 814, u'LYS', 0.6456016719777888, (235.985, 229.283, 184.923)), ('A', 880, u'GLY', 0.487950980527016, (230.907, 218.01299999999998, 173.79399999999998)), ('A', 884, u'SER', 0.4999519781792544, (230.228, 216.54, 168.485)), ('A', 890, u'ALA', 0.5105878120072054, (226.686, 207.334, 173.20499999999998)), ('A', 894, u'LEU', 0.5387794944467346, (232.698, 212.454, 166.74099999999999)), ('A', 903, u'ALA', 0.48307173141143306, (220.60299999999998, 220.64299999999997, 160.43800000000002)), ('A', 916, u'LEU', 0.4951424503730806, (218.313, 225.48800000000003, 158.08)), ('A', 933, u'LYS', 0.5826410039325239, (217.712, 237.49200000000002, 176.441)), ('A', 950, u'ASP', 0.6151209762197739, (213.751, 228.118, 198.45700000000002)), ('A', 962, u'LEU', 0.5570759880883425, (216.278, 223.442, 215.61899999999997)), ('A', 965, u'GLN', 0.5836748477515129, (214.537, 224.753, 220.77399999999997)), ('A', 980, u'ILE', 0.6763132141769069, (219.553, 222.80800000000002, 237.053)), ('A', 1009, u'THR', 0.5724007952136453, (212.346, 213.411, 209.833)), ('A', 1010, u'GLN', 0.5743072742164218, (211.82200000000003, 216.672, 207.961)), ('A', 1059, u'GLY', 0.4950141045259831, (221.52700000000002, 222.97, 191.319)), ('A', 1087, u'ALA', 0.4772801340687177, (194.74699999999999, 207.783, 144.722)), ('A', 1095, u'PHE', 0.5246445978623648, (198.71699999999998, 218.345, 150.10999999999999)), ('A', 1107, u'ARG', 0.5627014054544508, (204.251, 219.592, 157.595)), ('A', 1149, u'LYS', 0.7519969919667597, (213.476, 209.534, 122.91900000000001)), ('A', 1304, u'NAG', 0.7911156931835833, (225.377, 251.748, 210.755)), ('A', 1305, u'NAG', 0.6391434800984295, (162.07299999999998, 220.68200000000002, 236.62800000000001)), ('A', 1307, u'NAG', 0.5417255773159169, (209.474, 246.899, 191.73399999999998)), ('A', 1308, u'NAG', 0.6833861062230561, (178.394, 232.24299999999997, 203.433)), ('A', 1309, u'NAG', 0.6427607578685651, (181.21399999999997, 244.71699999999998, 190.91)), ('E', 7, u'GLN', 0.8128091031675164, (196.88600000000002, 183.167, 271.173)), ('E', 18, u'GLU', 0.8548779754290697, (190.92700000000002, 194.474, 281.91099999999994)), ('E', 26, u'MET', 0.7774635974183908, (195.618, 199.228, 271.309)), ('E', 33, u'TYR', 0.7985127573373559, (197.529, 192.53, 262.8)), ('E', 44, u'LEU', 0.7782599222953608, (205.282, 188.39600000000002, 270.884)), ('E', 48, u'GLU', 0.8670407725856012, (205.031, 190.76, 276.548)), ('E', 55, u'GLU', 0.8362202813092461, (202.251, 195.469, 285.357)), ('C', 40, u'ASP', 0.6753527885236215, (231.671, 184.95600000000002, 230.53)), ('C', 58, u'PHE', 0.7042592432435175, (247.317, 194.695, 223.008)), ('C', 62, u'VAL', 0.6300490680060058, (254.85500000000002, 193.39800000000002, 230.598)), ('C', 102, u'ARG', 0.6093266083740252, (254.54399999999998, 176.846, 242.406)), ('C', 117, u'LEU', 0.5949777319228008, (244.877, 184.476, 249.67)), ('C', 119, u'ILE', 0.5585890135719684, (247.33200000000002, 179.605, 246.069)), ('C', 186, u'PHE', 0.6349989031062545, (261.646, 176.916, 227.49800000000002)), ('C', 187, u'LYS', 0.6747495372822896, (259.197, 174.056, 226.68)), ('C', 190, u'ARG', 0.6486309354793471, (251.35200000000003, 178.92600000000002, 231.105)), ('C', 215, u'ASP', 0.6546771405132165, (260.41999999999996, 186.09, 225.364)), ('C', 224, u'GLU', 0.571384570459925, (239.265, 179.575, 230.02700000000002)), ('C', 235, u'ILE', 0.5574634137796286, (243.798, 192.265, 246.942)), ('C', 240, u'THR', 0.5881455780034744, (254.95200000000003, 184.874, 242.999)), ('C', 270, u'LEU', 0.6503505074955638, (244.354, 194.577, 233.04399999999998)), ('C', 279, u'TYR', 0.7364543870030584, (234.01399999999998, 183.2, 217.88100000000003)), ('C', 291, u'CYS', 0.6774873149580433, (239.369, 198.68, 219.869)), ('C', 293, u'LEU', 0.6330385744275147, (244.993, 200.097, 219.93)), ('C', 299, u'THR', 0.7191793034352594, (237.434, 201.004, 212.298)), ('C', 322, u'PRO', 0.7618796319632183, (238.69899999999998, 223.201, 228.496)), ('C', 327, u'VAL', 0.7792820607581152, (235.33700000000002, 233.612, 236.593)), ('C', 332, u'ILE', 0.726096454002429, (234.796, 247.64499999999998, 242.454)), ('C', 333, u'THR', 0.6873428001887598, (233.539, 245.97, 245.596)), ('C', 336, u'CYS', 0.7519332751014592, (229.653, 246.96, 253.766)), ('C', 344, u'ALA', 0.7369683824856833, (233.66, 252.502, 266.548)), ('C', 359, u'SER', 0.6624046692763184, (222.43800000000002, 247.454, 252.845)), ('C', 360, u'ASN', 0.7262325563541978, (223.29399999999998, 247.972, 249.17)), ('C', 369, u'TYR', 0.790012244255322, (236.262, 236.153, 260.355)), ('C', 374, u'PHE', 0.8205545438620374, (237.657, 238.365, 268.22099999999995)), ('C', 381, u'GLY', 0.7134080578441405, (222.176, 228.76399999999998, 260.834)), ('C', 382, u'VAL', 0.7259504282377495, (225.101, 229.27899999999997, 258.45099999999996)), ('C', 390, u'LEU', 0.8019077857134462, (225.285, 234.201, 250.505)), ('C', 398, u'ASP', 0.7063862697139359, (223.24599999999998, 245.441, 266.813)), ('C', 400, u'PHE', 0.7524925021060704, (226.15200000000002, 246.724, 272.79499999999996)), ('C', 408, u'ARG', 0.8141434595982333, (227.38100000000003, 233.33800000000002, 276.789)), ('C', 423, u'TYR', 0.7874060673049706, (218.92600000000002, 242.121, 274.309)), ('C', 442, u'ASP', 0.7451615538510522, (236.407, 250.622, 277.70099999999996)), ('C', 451, u'TYR', 0.7851317004725092, (227.16899999999998, 252.21099999999998, 280.165)), ('C', 454, u'ARG', 0.7268498752956096, (218.508, 246.638, 283.126)), ('C', 460, u'ASN', 0.759499182734371, (210.92600000000002, 239.13, 279.397)), ('C', 463, u'PRO', 0.827040256086683, (213.20299999999997, 239.21399999999997, 270.051)), ('C', 467, u'ASP', 0.7613924639549188, (213.25, 249.207, 275.889)), ('C', 474, u'GLN', 0.773929054319944, (207.737, 248.49800000000002, 291.47999999999996)), ('C', 482, u'GLY', 0.8002879730359861, (207.39200000000002, 258.244, 290.832)), ('C', 495, u'TYR', 0.7398256361191664, (228.465, 248.59, 284.67400000000004)), ('C', 498, u'GLN', 0.7787323005490076, (237.475, 248.83700000000002, 286.074)), ('C', 508, u'TYR', 0.7888798542558378, (233.195, 242.983, 276.10200000000003)), ('C', 533, u'LEU', 0.7385743658673992, (241.586, 236.123, 231.83)), ('C', 538, u'CYS', 0.6883150275758011, (239.5, 226.637, 225.221)), ('C', 570, u'ALA', 0.5871426757381797, (219.812, 231.531, 216.765)), ('C', 574, u'ASP', 0.6170929891499367, (228.766, 235.033, 220.589)), ('C', 582, u'LEU', 0.736948612035651, (235.20299999999997, 246.538, 229.542)), ('C', 669, u'GLY', 0.5235746734954886, (237.954, 218.17399999999998, 195.738)), ('C', 690, u'GLN', 0.78171703987115, (253.96800000000002, 202.178, 199.267)), ('C', 699, u'LEU', 0.6360916978074936, (237.38100000000003, 214.76299999999998, 186.625)), ('C', 741, u'TYR', 0.6326928246304576, (206.27399999999997, 194.537, 221.379)), ('C', 774, u'GLN', 0.5316386184843499, (205.64, 195.467, 198.30700000000002)), ('C', 809, u'PRO', 0.7153121300075349, (215.72299999999998, 172.823, 182.85200000000003)), ('C', 816, u'SER', 0.5911882240848506, (219.121, 181.095, 184.12800000000001)), ('C', 856, u'ASN', 0.6002746399947906, (209.236, 190.121, 220.314)), ('C', 869, u'MET', 0.6231799056153945, (206.812, 182.76299999999998, 189.98000000000002)), ('C', 887, u'THR', 0.48573042297407193, (204.95800000000003, 193.02100000000002, 169.252)), ('C', 917, u'TYR', 0.5433220102383348, (222.89700000000002, 191.101, 157.74299999999997)), ('C', 951, u'VAL', 0.6088365948346168, (218.20399999999998, 197.43, 201.009)), ('C', 962, u'LEU', 0.5389354992134574, (214.16, 198.008, 217.17)), ('C', 989, u'ALA', 0.6744212478790671, (204.98800000000003, 200.26999999999998, 239.297)), ('C', 990, u'GLU', 0.6427988203550038, (202.576, 202.037, 236.955)), ('C', 1005, u'GLN', 0.6080437630107223, (206.965, 204.841, 216.045)), ('C', 1022, u'ALA', 0.5001036356430157, (210.15200000000002, 200.034, 191.516)), ('C', 1055, u'SER', 0.5309338603471561, (215.19899999999998, 188.061, 188.425)), ('C', 1066, u'THR', 0.489641190182999, (223.525, 198.601, 172.99800000000002)), ('C', 1089, u'PHE', 0.5569148917504738, (221.098, 217.781, 149.98000000000002)), ('C', 1302, u'NAG', 0.5827318410052089, (255.829, 198.20499999999998, 224.15)), ('C', 1303, u'NAG', 0.7193848478162603, (251.78, 165.48800000000003, 247.22)), ('C', 1304, u'NAG', 0.73525908328526, (237.718, 175.67499999999998, 214.04399999999998)), ('C', 1306, u'NAG', 0.7464215236656082, (238.48000000000002, 250.86, 258.73499999999996)), ('C', 1307, u'NAG', 0.6211366244198667, (241.667, 192.132, 195.71499999999997)), ('G', 2, u'LYS', 0.7369179123087499, (210.85500000000002, 238.71599999999998, 300.597)), ('G', 17, u'ASP', 0.7164538383223328, (229.58200000000002, 250.966, 293.879)), ('B', 104, u'TRP', 0.6025109747938878, (164.439, 188.58100000000002, 243.342)), ('B', 121, u'ASN', 0.6281119900886513, (157.03, 194.112, 242.945)), ('B', 164, u'ASN', 0.6494152381216405, (166.202, 193.183, 262.67)), ('B', 223, u'LEU', 0.6051040343708105, (168.072, 197.94299999999998, 227.90200000000002)), ('B', 240, u'THR', 0.5607229315070601, (163.598, 184.297, 241.575)), ('B', 242, u'LEU', 0.616130194263433, (157.05100000000002, 183.73899999999998, 241.60399999999998)), ('B', 273, u'ARG', 0.6043477931232384, (183.348, 190.975, 226.555)), ('B', 291, u'CYS', 0.6293624670205124, (183.72, 190.917, 219.156)), ('B', 301, u'CYS', 0.6551207842896779, (185.107, 195.147, 215.474)), ('B', 323, u'THR', 0.7593244798710121, (201.218, 175.08, 231.10299999999998)), ('B', 332, u'ILE', 0.8267626075057924, (223.89700000000002, 168.70399999999998, 245.63299999999998)), ('B', 357, u'ARG', 0.7885804155111573, (232.435, 177.011, 261.02099999999996)), ('B', 358, u'ILE', 0.779185923666402, (229.907, 176.292, 258.27099999999996)), ('B', 374, u'PHE', 0.794428504527228, (214.586, 168.39000000000001, 269.35200000000003)), ('B', 377, u'PHE', 0.7113798580879732, (213.38600000000002, 175.80200000000002, 268.161)), ('B', 379, u'CYS', 0.8326632405277565, (214.509, 181.95800000000003, 265.21099999999996)), ('B', 384, u'PRO', 0.7940107999332041, (212.366, 179.13, 260.561)), ('B', 385, u'THR', 0.8442874263743461, (210.559, 177.989, 257.414)), ('B', 391, u'CYS', 0.8147457512687071, (221.77899999999997, 182.375, 252.242)), ('B', 404, u'GLY', 0.695792024899809, (217.366, 172.541, 281.203)), ('B', 407, u'VAL', 0.7043554305794315, (217.632, 176.98200000000003, 278.22299999999996)), ('B', 412, u'PRO', 0.7767509547598765, (218.612, 187.991, 272.57599999999996)), ('B', 432, u'CYS', 0.7950952507259634, (218.23999999999998, 180.191, 265.316)), ('B', 440, u'ASN', 0.825445271250071, (220.853, 159.82700000000003, 278.93299999999994)), ('B', 445, u'VAL', 0.753645016497586, (225.27599999999998, 157.875, 288.059)), ('B', 450, u'ASN', 0.7404064696097639, (232.51899999999998, 167.727, 283.42099999999994)), ('B', 451, u'TYR', 0.7435725563991645, (230.21099999999998, 170.661, 282.64200000000005)), ('B', 474, u'GLN', 0.8089470834731188, (237.01399999999998, 188.54899999999998, 294.734)), ('B', 475, u'ALA', 0.7111091608983945, (233.538, 188.57399999999998, 296.23699999999997)), ('B', 478, u'THR', 0.7583750602206326, (239.883, 192.261, 300.58)), ('B', 482, u'GLY', 0.7621983737822413, (245.598, 183.846, 294.35200000000003)), ('B', 484, u'GLU', 0.7770864582495414, (240.48100000000002, 180.854, 297.749)), ('B', 485, u'GLY', 0.7828183419004595, (238.672, 181.123, 301.084)), ('B', 490, u'PHE', 0.7685508098684336, (236.961, 180.023, 291.841)), ('B', 525, u'CYS', 0.7386925980752855, (223.055, 178.783, 250.889)), ('B', 532, u'ASN', 0.7708088022043696, (211.576, 166.848, 235.638)), ('B', 546, u'LEU', 0.7609158974948227, (218.51299999999998, 181.589, 233.29299999999998)), ('B', 598, u'ILE', 0.6230500786058509, (189.875, 185.85200000000003, 204.80100000000002)), ('B', 603, u'ASN', 0.7760813121449113, (177.24899999999997, 191.43800000000002, 200.51899999999998)), ('B', 609, u'ALA', 0.6025086386622311, (188.559, 181.30700000000002, 206.483)), ('B', 658, u'ASN', 0.7410555822586579, (192.92000000000002, 174.18, 189.8)), ('B', 666, u'ILE', 0.6141404394891268, (197.38000000000002, 184.736, 201.286)), ('B', 676, u'THR', 0.7093588972851935, (180.502, 177.32100000000003, 193.455)), ('B', 714, u'ILE', 0.5686992294591386, (201.707, 190.126, 160.228)), ('B', 732, u'THR', 0.6002550198673096, (191.99, 217.69, 200.467)), ('B', 741, u'TYR', 0.5479607644780433, (193.577, 221.24499999999998, 218.728)), ('B', 749, u'CYS', 0.5539909139298124, (196.939, 225.006, 228.738)), ('B', 753, u'LEU', 0.5396028030621149, (202.097, 224.661, 225.389)), ('B', 781, u'VAL', 0.48201284343670137, (198.605, 218.97, 185.541)), ('B', 856, u'ASN', 0.4710544163099531, (188.77899999999997, 221.056, 217.407)), ('B', 874, u'THR', 0.4979120274706945, (190.093, 220.063, 180.23)), ('B', 878, u'LEU', 0.472750408996537, (190.16299999999998, 218.47899999999998, 174.259)), ('B', 888, u'PHE', 0.5639465731651029, (198.931, 223.835, 170.01)), ('B', 902, u'MET', 0.4710314195767854, (194.642, 210.696, 162.51399999999998)), ('B', 903, u'ALA', 0.4455563403132853, (196.671, 210.04399999999998, 159.38000000000002)), ('B', 942, u'PRO', 0.7398882126610054, (182.66299999999998, 201.65800000000002, 190.978)), ('B', 950, u'ASP', 0.6041461145951251, (191.58, 205.455, 198.157)), ('B', 979, u'ASP', 0.5639204358278438, (186.85500000000002, 218.88800000000003, 233.45700000000002)), ('B', 996, u'LEU', 0.5612785700151405, (197.3, 215.792, 227.752)), ('B', 1014, u'ARG', 0.5710779698071239, (201.342, 211.112, 201.72)), ('B', 1017, u'GLU', 0.543564360757476, (203.12800000000001, 210.39100000000002, 197.118)), ('B', 1031, u'GLU', 0.49085097114635434, (203.349, 213.44299999999998, 176.30200000000002)), ('B', 1054, u'GLN', 0.48158150740055167, (188.85100000000003, 214.083, 181.71499999999997)), ('B', 1087, u'ALA', 0.5961173350642462, (221.129, 191.79299999999998, 147.375)), ('B', 1094, u'VAL', 0.5224005418172867, (209.418, 193.19, 155.151)), ('B', 1126, u'CYS', 0.6225138555497641, (223.905, 187.68, 147.256)), ('B', 1138, u'TYR', 0.6184994464035589, (210.89700000000002, 194.83100000000002, 138.895)), ('B', 1145, u'LEU', 0.7585430655707971, (211.155, 202.706, 128.078)), ('B', 1301, u'NAG', 0.6083091199356967, (174.686, 177.27599999999998, 222.278)), ('B', 1303, u'NAG', 0.7400370653137515, (166.155, 205.333, 212.92600000000002)), ('B', 1304, u'NAG', 0.8179476072521091, (226.289, 166.96, 237.467)), ('B', 1308, u'NAG', 0.6277051626055461, (193.93200000000002, 169.75, 196.45100000000002)), ('F', 1, u'ASP', 0.778514568432276, (229.095, 193.20499999999998, 306.49299999999994)), ('F', 2, u'LYS', 0.7959889587535736, (227.42100000000002, 192.502, 303.067)), ('F', 9, u'ILE', 0.8561060950664164, (224.95100000000002, 181.70299999999997, 300.879)), ('F', 13, u'MET', 0.8210071185799039, (225.312, 176.067, 298.05)), ('F', 17, u'ASP', 0.7520583128846887, (226.16, 169.42600000000002, 296.515)), ('F', 33, u'TYR', 0.8119723147752306, (223.74099999999999, 185.494, 291.43299999999994)), ('F', 40, u'ASP', 0.7940828810347067, (217.92200000000003, 192.5, 299.203)), ('F', 53, u'GLU', 0.7484618637780704, (214.40200000000002, 171.484, 303.89599999999996)), ('F', 54, u'VAL', 0.7123770408639192, (217.292, 169.312, 302.67400000000004))]
handle_read_draw_probe_dots_unformatted("/home/ccpem/agnel/gisaid/countries_seq/structure_data/emdb/EMD-22532/7jzl/Model_validation_1/validation_cootdata/molprobity_probe7jzl_0.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
