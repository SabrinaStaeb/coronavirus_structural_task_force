# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 617 ', 'CYS', 0.026897145278759287, (181.084, 238.24500000000006, 207.288)), ('B', ' 940 ', 'SER', 0.022267172137763677, (178.928, 199.52400000000006, 186.22600000000003)), ('C', ' 123 ', 'ALA', 0.03084906824787668, (253.31800000000004, 168.425, 243.63800000000003)), ('C', ' 571 ', 'ASP', 0.0005180385488365086, (219.70099999999994, 233.22300000000007, 220.18800000000002)), ('C', ' 943 ', 'SER', 0.020103286011693623, (229.846, 194.646, 195.379))]
data['omega'] = []
data['rota'] = [('A', ' 938 ', 'LEU', 0.03126118846104845, (217.983, 236.385, 184.94500000000005)), ('A', ' 945 ', 'LEU', 0.25846161657874855, (215.97999999999993, 231.28100000000006, 190.612)), ('A', ' 962 ', 'LEU', 0.08334597697899382, (216.27799999999988, 223.44200000000006, 215.619)), ('C', ' 233 ', 'ILE', 0.0, (238.65499999999994, 190.885, 249.88500000000005)), ('C', ' 234 ', 'ASN', 0.0, (240.33399999999995, 193.585, 247.71700000000004)), ('C', ' 760 ', 'CYS', 0.11055494174382445, (198.815, 201.053, 217.99900000000002)), ('C', ' 774 ', 'GLN', 0.137467157452381, (205.63999999999993, 195.467, 198.30700000000002)), ('C', ' 916 ', 'LEU', 0.2545507903572299, (223.09999999999994, 193.71, 160.439)), ('B', ' 202 ', 'LYS', 0.007020933049127116, (172.925, 198.20600000000005, 238.995)), ('B', ' 603 ', 'ASN', 0.05170438029899739, (177.249, 191.438, 200.51900000000006)), ('B', ' 616 ', 'ASN', 0.22433385104038114, (201.75899999999993, 174.594, 212.101)), ('B', ' 962 ', 'LEU', 0.2800423603800275, (193.40099999999998, 212.477, 214.80400000000006)), ('B', ' 966 ', 'LEU', 0.0972101648480772, (191.68899999999994, 213.75000000000006, 221.093))]
data['cbeta'] = []
data['probe'] = [(' C 106  PHE  HB3', ' C 235  ILE HD13', -1.055, (244.634, 188.163, 245.558)), (' C 106  PHE  CB ', ' C 235  ILE HD13', -0.953, (245.464, 188.058, 245.303)), (' C 106  PHE  HB3', ' C 235  ILE HG21', -0.937, (245.823, 189.485, 245.383)), (' C 107  GLY  N  ', ' C 235  ILE HG23', -0.891, (246.729, 189.761, 247.534)), (' C 736  VAL HG13', ' C 858  LEU HD23', -0.863, (207.197, 194.024, 215.563)), (' C 107  GLY  H  ', ' C 235  ILE HG23', -0.634, (247.002, 190.228, 247.305)), (' C 196  ASN  ND2', ' C 233  ILE  O  ', -0.607, (239.434, 190.948, 246.218)), (' C 106  PHE  HB3', ' C 235  ILE  CG2', -0.57, (245.316, 189.525, 246.123)), (' C 736  VAL HG13', ' C 858  LEU  CD2', -0.555, (208.0, 194.227, 215.609)), (' A1028  LYS  NZ ', ' A1042  PHE  O  ', -0.553, (212.48, 218.834, 180.459)), (' B 123  ALA  HB3', ' B1302  NAG  H82', -0.551, (149.694, 196.564, 245.789)), (' B  81  ASN  N  ', ' B 265  TYR  HH ', -0.538, (162.683, 179.985, 239.759)), (' B 196  ASN  C  ', ' B 196  ASN HD22', -0.534, (178.13, 195.32, 242.469)), (' C 379  CYS  HA ', ' C 432  CYS  HA ', -0.532, (226.864, 233.873, 263.242)), (' B 197  ILE  CG1', ' B 202  LYS  HE2', -0.509, (177.975, 198.744, 238.958)), (' B1028  LYS  NZ ', ' B1042  PHE  O  ', -0.501, (200.852, 206.752, 180.85)), (' C 557  LYS  NZ ', ' C 574  ASP  OD2', -0.491, (228.853, 238.23, 217.275)), (' C 741  TYR  CD2', ' C1004  LEU HD22', -0.484, (206.866, 198.35, 219.378)), (' C1028  LYS  NZ ', ' C1042  PHE  O  ', -0.483, (217.565, 202.717, 182.241)), (' B1142  GLN  N  ', ' B1143  PRO  HD2', -0.475, (209.933, 199.482, 133.42)), (' A 592  PHE  CE2', ' B 740  MET  HE1', -0.474, (187.227, 225.945, 215.937)), (' C1142  GLN  N  ', ' C1143  PRO  CD ', -0.474, (221.216, 207.706, 132.622)), (' C 520  ALA  HB1', ' C 521  PRO  HD2', -0.46, (214.667, 242.281, 248.391)), (' B 975  SER  O  ', ' B1000  ARG  NH2', -0.459, (191.024, 216.51, 226.069)), (' A1142  GLN  N  ', ' A1143  PRO  CD ', -0.459, (208.319, 212.961, 131.589)), (' B 197  ILE  N  ', ' B 197  ILE HD13', -0.451, (179.214, 195.728, 239.43)), (' B 197  ILE  CG1', ' B 202  LYS  CE ', -0.446, (177.931, 198.672, 238.449)), (' C 106  PHE  HB2', ' C 235  ILE HD13', -0.44, (244.95, 187.229, 246.255)), (' A 520  ALA  HB1', ' A 521  PRO  CD ', -0.433, (172.281, 211.751, 235.334)), (' A 811  LYS  NZ ', ' A 820  ASP  OD2', -0.43, (231.564, 236.71, 185.048)), (' B 196  ASN  C  ', ' B 196  ASN  ND2', -0.427, (178.185, 194.537, 242.663)), (' C 862  PRO  HA ', ' C 863  PRO  HD3', -0.413, (207.709, 186.344, 202.096)), (' A 520  ALA  HB1', ' A 521  PRO  HD2', -0.412, (172.603, 211.382, 235.692)), (' C 570  ALA  O  ', ' C 572  THR  N  ', -0.408, (221.485, 231.75, 219.721)), (' B 908  GLY  O  ', ' B1038  LYS  NZ ', -0.404, (205.475, 207.014, 165.747)), (' A 898  PHE  N  ', ' A 899  PRO  CD ', -0.403, (228.624, 223.649, 162.35))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
