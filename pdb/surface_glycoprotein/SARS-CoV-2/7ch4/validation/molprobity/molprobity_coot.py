# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('H', '  54 ', 'GLY', 0.03573175907503383, (57.86800000000001, 19.719999999999995, 29.682999999999996)), ('H', ' 118 ', 'ALA', 0.012244240674206035, (28.925, 35.397, 51.722))]
data['omega'] = [('H', ' 151 ', 'PRO', None, (23.340000000000003, 31.616, 48.892)), ('H', ' 153 ', 'PRO', None, (20.784, 28.450000000000003, 43.99)), ('L', '   7 ', 'SER', None, (31.449, 39.895, 14.26)), ('L', ' 141 ', 'PRO', None, (12.017999999999999, 42.393, 19.2))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' R 377  PHE  CD1', ' R 434  ILE HG12', -0.873, (73.741, 40.778, 16.155)), (' H 201  ASN  ND2', ' H 212  ASP  OD1', -0.727, (3.764, 27.484, 47.527)), (' H   9  GLY  HA2', ' H  18  LEU HD11', -0.727, (36.214, 25.167, 43.963)), (' L 163  VAL HG12', ' L 175  LEU  HB3', -0.716, (14.815, 42.047, 29.056)), (' L 136  LEU HD11', ' L 196  VAL HG11', -0.7, (8.433, 48.142, 27.331)), (' R 369  TYR  HD1', ' R 377  PHE  CE2', -0.699, (75.739, 45.182, 16.827)), (' R 377  PHE  HD1', ' R 434  ILE HG12', -0.679, (73.346, 40.222, 17.075)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.625, (29.504, 25.73, 16.491)), (' H  22  CYS  HB3', ' H  78  LEU  HB3', -0.613, (43.405, 18.727, 34.645)), (' H   6  GLU  OE2', ' H  95  CYS  N  ', -0.609, (37.914, 22.696, 32.351)), (' R 369  TYR  HD1', ' R 377  PHE  CD2', -0.595, (75.018, 44.781, 16.313)), (' R 357  ARG HH11', ' R 394  ASN  ND2', -0.585, (86.796, 24.075, 18.175)), (' H  67  PHE  CE2', ' H  82  MET  HG2', -0.582, (42.527, 29.735, 40.187)), (' H  97  ARG  NH1', ' H 105  ASP  OD1', -0.582, (42.508, 16.004, 20.68)), (' H  90  THR HG23', ' H 114  THR  HA ', -0.579, (31.826, 32.511, 42.231)), (' R 408  ARG  HD3', ' R 414  GLN  OE1', -0.575, (62.065, 34.938, 27.058)), (' R 377  PHE  CE1', ' R 434  ILE HG12', -0.542, (74.716, 40.274, 16.871)), (' H  67  PHE  HD2', ' H  80  LEU HD11', -0.523, (44.413, 29.482, 38.105)), (' L  10  PHE  CZ ', ' L 105  GLU  HG3', -0.517, (19.105, 36.833, 19.813)), (' L   6  GLN  O  ', ' L 100  GLN  NE2', -0.514, (30.829, 41.068, 17.663)), (' R 369  TYR  CD1', ' R 377  PHE  CE2', -0.509, (76.054, 45.192, 16.569)), (' L   7  SER  HB3', ' L  22  THR  HB ', -0.506, (30.746, 39.67, 11.161)), (' R 357  ARG HH11', ' R 394  ASN HD21', -0.505, (87.358, 23.925, 18.393)), (' H  34  MET  HB3', ' H  78  LEU HD22', -0.504, (45.228, 20.235, 31.846)), (' H 169  THR HG23', ' H 184  SER  HB2', -0.5, (9.841, 33.251, 39.451)), (' H 123  PRO  HB3', ' H 149  TYR  HB3', -0.5, (15.985, 34.657, 48.867)), (' H  82  MET  HE2', ' H  85  LEU HD21', -0.49, (40.163, 31.9, 42.271)), (' L  48  ILE HD13', ' L  54  LEU  HA ', -0.482, (35.418, 22.163, 10.011)), (' L   8  PRO  O  ', ' L 102  THR HG23', -0.476, (26.685, 37.524, 15.973)), (' H  47  TRP  HE1', ' H  50  VAL HG13', -0.473, (47.061, 28.314, 28.346)), (' R 417  LYS  O  ', ' R 422  ASN  ND2', -0.473, (59.897, 24.731, 19.843)), (' H  22  CYS  N  ', ' H  78  LEU  O  ', -0.469, (42.295, 18.934, 37.58)), (' H 152  GLU  OE2', ' H 172  ALA  HB3', -0.463, (20.59, 34.66, 40.294)), (' R 395  VAL HG22', ' R 515  PHE  HD1', -0.462, (83.356, 33.352, 19.345)), (' R 474  GLN  HA ', ' R 480  CYS  SG ', -0.461, (50.938, 8.756, 19.967)), (' L  90  GLN  CD ', ' L  93  SER  HB3', -0.46, (46.925, 34.455, 18.715)), (' L   7  SER  HB3', ' L   8  PRO  HD3', -0.46, (29.869, 39.087, 12.207)), (' L  32  ASP  HB3', ' L  91  LEU  HB2', -0.455, (46.059, 29.648, 14.278)), (' H  63  VAL  HB ', ' H  67  PHE  CD1', -0.452, (45.275, 33.402, 37.988)), (' H 138  GLY  O  ', ' H 190  SER  N  ', -0.446, (-7.908, 38.653, 33.111)), (' H  51  ILE  HB ', ' H  69  ILE HG21', -0.443, (49.934, 23.607, 33.647)), (' H  66  ARG  HB3', ' H  83  SER  O  ', -0.442, (45.065, 34.35, 43.655)), (' L  34  ALA  HB2', ' L  91  LEU HD21', -0.442, (41.384, 27.138, 16.301)), (' H  37  VAL HG12', ' H  47  TRP  HA ', -0.437, (41.464, 30.452, 28.841)), (' L 113  PRO  HB3', ' L 139  PHE  HB3', -0.435, (7.788, 43.443, 24.859)), (' L  33  LEU HD12', ' L  89  GLN  O  ', -0.434, (40.616, 31.942, 15.632)), (' L   2  ILE HG13', ' L  26  SER  HB2', -0.433, (45.057, 42.514, 15.56)), (' L   2  ILE HD11', ' L  27  GLN  H  ', -0.431, (45.016, 41.026, 12.947)), (' H   2  VAL  HA ', ' H  25  SER  O  ', -0.431, (39.735, 10.39, 27.967)), (' H 157  SER  OG ', ' H 201  ASN  HB2', -0.43, (5.902, 26.428, 43.585)), (' R 393  THR  HA ', ' R 522  ALA  HA ', -0.427, (91.28, 29.781, 20.361)), (' H 130  PRO  HG2', ' H 217  PRO  HG3', -0.426, (-5.184, 41.1, 42.375)), (' R 401  VAL HG22', ' R 509  ARG  HG2', -0.422, (65.488, 33.203, 8.255)), (' R 350  VAL HG22', ' R 422  ASN  HB3', -0.419, (63.536, 25.444, 17.202)), (' H  60  ALA  O  ', ' H  63  VAL HG22', -0.416, (46.771, 35.14, 34.601)), (' L   2  ILE HG22', ' L  90  GLN  OE1', -0.415, (45.548, 37.076, 18.397)), (' L  73  LEU HD23', ' L  74  THR  N  ', -0.415, (29.792, 29.094, 9.017)), (' R 369  TYR  HB2', ' R 377  PHE  HE2', -0.413, (77.116, 44.711, 15.969)), (' R 384  PRO  HA ', ' R 387  LEU  HG ', -0.409, (81.327, 42.571, 20.597)), (' H  48  VAL HG13', ' H  63  VAL HG11', -0.406, (44.082, 32.358, 35.47)), (' L  27  GLN  HG2', ' R 502  GLY  HA3', -0.403, (50.174, 41.553, 12.38)), (' H 134  SER  HA ', ' L 116  PHE  HD2', -0.401, (-0.178, 45.578, 34.355)), (' R 421  TYR  CD2', ' R 457  ARG  HB3', -0.4, (59.308, 19.453, 23.743)), (' R 369  TYR  CB ', ' R 377  PHE  HE2', -0.4, (76.963, 44.922, 15.979))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
