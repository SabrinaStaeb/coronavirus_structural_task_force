# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 232 ', 'GLY', 0.0422496355737882, (223.58400000000006, 246.89799999999994, 222.96299999999994)), ('B', ' 232 ', 'GLY', 0.04223976213761281, (171.209, 203.417, 223.064)), ('C', ' 110 ', 'THR', 0.011887444432631122, (194.71, 207.54399999999995, 262.57)), ('E', ' 232 ', 'GLY', 0.042531874682264124, (235.096, 179.697, 223.064)), ('F', ' 110 ', 'THR', 0.011883900686148951, (219.77199999999996, 197.986, 262.57)), ('L', ' 110 ', 'THR', 0.011877105772541438, (215.51800000000003, 224.46899999999994, 262.57))]
data['omega'] = [('C', '   8 ', 'PRO', None, (206.391, 194.087, 257.534)), ('C', '  95 ', 'PRO', None, (210.65200000000004, 171.75099999999995, 242.389)), ('C', ' 142 ', 'PRO', None, (194.452, 200.312, 264.483)), ('D', ' 154 ', 'PRO', None, (177.472, 172.591, 256.03)), ('D', ' 156 ', 'PRO', None, (177.79100000000005, 178.36599999999996, 253.33199999999994)), ('F', '   8 ', 'PRO', None, (225.58599999999998, 214.83099999999993, 257.534)), ('F', '  95 ', 'PRO', None, (242.79900000000006, 229.689, 242.389)), ('F', ' 142 ', 'PRO', None, (226.165, 201.37899999999993, 264.483)), ('G', ' 154 ', 'PRO', None, (258.661, 200.53399999999993, 256.03)), ('G', ' 156 ', 'PRO', None, (253.50000000000006, 197.92299999999994, 253.33199999999994)), ('H', ' 154 ', 'PRO', None, (193.867, 256.875, 256.03)), ('H', ' 156 ', 'PRO', None, (198.70900000000012, 253.71099999999996, 253.33199999999994)), ('L', '   8 ', 'PRO', None, (198.024, 221.082, 257.534)), ('L', '  95 ', 'PRO', None, (176.54900000000006, 228.56, 242.389)), ('L', ' 142 ', 'PRO', None, (209.384, 228.309, 264.483))]
data['rota'] = []
data['cbeta'] = [('A', ' 939 ', 'SER', ' ', 0.8021269412846087, (225.23000000000008, 238.91599999999997, 162.079)), ('A', ' 940 ', 'SER', ' ', 0.6044256219155584, (223.12500000000009, 241.68799999999996, 165.255)), ('B', ' 939 ', 'SER', ' ', 0.8011815038551559, (177.343, 208.73199999999994, 162.079)), ('B', ' 940 ', 'SER', ' ', 0.6037294141857195, (175.995, 205.523, 165.255)), ('E', ' 939 ', 'SER', ' ', 0.8021550820209297, (227.427, 182.35199999999995, 162.079)), ('E', ' 940 ', 'SER', ' ', 0.6040552231136405, (230.88, 182.78899999999993, 165.255))]
data['probe'] = [(' B  81  ASN  N  ', ' B 265  TYR  HH ', -0.52, (156.443, 185.642, 212.129)), (' A  81  ASN  N  ', ' A 265  TYR  HH ', -0.515, (215.813, 268.526, 212.226)), (' E  81  ASN  N  ', ' E 265  TYR  HH ', -0.515, (257.927, 176.05, 212.098)), (' G 208  LYS  N  ', ' G 209  PRO  CD ', -0.451, (257.128, 194.223, 253.283)), (' L 135  CYS  SG ', ' L 195  CYS  CB ', -0.45, (205.811, 240.662, 276.302)), (' D 208  LYS  N  ', ' D 209  PRO  CD ', -0.448, (172.471, 177.273, 253.711)), (' C 135  CYS  SG ', ' C 195  CYS  CB ', -0.445, (185.479, 190.934, 276.292)), (' H 208  LYS  N  ', ' H 209  PRO  CD ', -0.442, (200.084, 258.573, 253.442)), (' E1142  GLN  N  ', ' E1143  PRO  CD ', -0.413, (217.995, 210.099, 108.394)), (' H 173  PHE  HA ', ' H 174  PRO  HD3', -0.413, (205.51, 244.068, 260.489)), (' A1142  GLN  N  ', ' A1143  PRO  CD ', -0.411, (205.9, 216.468, 108.489)), (' A  44  ARG  O  ', ' A 283  GLY  HA2', -0.411, (230.734, 242.604, 192.592)), (' B1142  GLN  N  ', ' B1143  PRO  CD ', -0.406, (206.116, 202.955, 108.408)), (' B  44  ARG  O  ', ' B 283  GLY  HA2', -0.404, (171.391, 211.774, 192.521)), (' E  44  ARG  O  ', ' E 283  GLY  HA2', -0.403, (227.485, 175.919, 192.681)), (' B  55  PHE  HB2', ' B 275  PHE  CE1', -0.401, (174.939, 195.583, 200.469))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
