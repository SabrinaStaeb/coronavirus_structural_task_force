# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('H', '  88 ', 'GLU', 1.0980164917705375e-05, (9.819000000000004, 35.716, -41.631)), ('L', '  60 ', 'ASP', 0.028284064312296228, (-17.024, 14.586, -22.842)), ('L', '  94 ', 'SER', 0.0113695, (-9.832, 30.231, -48.859))]
data['omega'] = [('H', '  88 ', 'GLU', None, (10.962000000000003, 36.336, -40.937)), ('H', ' 151 ', 'PRO', None, (22.197, 29.152, -32.138)), ('H', ' 153 ', 'PRO', None, (17.949999999999992, 25.638000000000005, -29.27)), ('L', '   8 ', 'PRO', None, (-12.133000000000003, 35.646, -24.997)), ('L', ' 141 ', 'PRO', None, (-1.2530000000000001, 38.192, -9.599))]
data['rota'] = []
data['cbeta'] = [('H', '  27 ', 'PHE', ' ', 0.324133027059691, (0.20600000000000004, 7.5120000000000005, -41.724))]
data['probe'] = [(' R 464  PHE  HA ', ' R 466  ARG HH12', -1.029, (-15.587, 11.276, -68.22)), (' R 464  PHE  HA ', ' R 466  ARG  NH1', -0.926, (-16.033, 10.845, -67.394)), (' R 342  PHE  HE2', ' R 434  ILE HD11', -0.865, (-28.33, 23.526, -68.248)), (' R 353  TRP  HZ2', ' R 466  ARG  NE ', -0.838, (-17.025, 9.914, -65.298)), (' H 201  ASN  ND2', ' H 212  ASP  OD2', -0.832, (26.925, 20.416, -14.651)), (' R 353  TRP  HE1', ' R 466  ARG  HG2', -0.805, (-17.883, 10.726, -62.799)), (' L  24  ARG  NH1', ' L  70  ASP  OD1', -0.746, (-20.828, 36.178, -34.641)), (' R 472  ILE HD11', ' R 480  CYS  HB3', -0.718, (-10.871, -1.297, -43.971)), (' L 149  LYS  HE2', ' L 154  LEU HD22', -0.693, (13.271, 55.5, -10.4)), (' R 342  PHE  CE2', ' R 434  ILE HD11', -0.693, (-28.421, 23.905, -68.671)), (' R 353  TRP  HZ2', ' R 466  ARG  CZ ', -0.645, (-17.323, 9.935, -65.711)), (' R 350  VAL  O  ', ' R 353  TRP  HD1', -0.64, (-19.771, 12.251, -60.679)), (' H 175  GLN  HG2', ' H 179  LEU  O  ', -0.64, (20.316, 38.613, -28.13)), (' L  35  TRP  HD1', ' L  48  ILE HD11', -0.63, (-15.0, 22.979, -32.133)), (' L 149  LYS  HE2', ' L 154  LEU  CD2', -0.627, (12.934, 56.124, -10.73)), (' H  82  MET  HB3', ' H  85  LEU HD21', -0.621, (12.449, 27.752, -46.945)), (' R 353  TRP  CZ2', ' R 466  ARG  CZ ', -0.602, (-17.862, 10.417, -65.901)), (' L  60  ASP  N  ', ' L  60  ASP  OD1', -0.575, (-16.127, 13.373, -21.934)), (' H  33  TYR  HB2', ' H  98  ASP  O  ', -0.553, (-5.514, 14.188, -45.138)), (' H  34  MET  HB3', ' H  78  LEU HD22', -0.552, (2.71, 15.46, -45.124)), (' R 353  TRP  CZ2', ' R 466  ARG  NE ', -0.544, (-17.559, 10.568, -65.111)), (' H  97  ARG  HG2', ' H  98  ASP  N  ', -0.532, (-3.709, 13.672, -42.637)), (' R 462  LYS  HB2', ' R 465  GLU  HB3', -0.518, (-10.701, 7.85, -66.297)), (' H 195  THR  OG1', ' H 196  GLN  N  ', -0.517, (24.984, 22.746, 2.036)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.515, (-7.963, 21.297, -26.515)), (' H   5  VAL  HA ', ' H 109  GLN HE22', -0.508, (9.225, 13.845, -35.21)), (' L  35  TRP  CD1', ' L  48  ILE HD11', -0.503, (-15.076, 23.795, -31.653)), (' L  33  LEU HD22', ' L  71  PHE  CG ', -0.493, (-16.818, 28.084, -35.145)), (' L  93  SER  OG ', ' L  94  SER  N  ', -0.489, (-12.026, 29.918, -49.221)), (' L 145  LYS  C  ', ' L 145  LYS  HD2', -0.47, (7.508, 48.118, -12.635)), (' H  35  SER  OG ', ' H  98  ASP  OD2', -0.47, (-3.043, 19.443, -44.994)), (' R 449  TYR  HA ', ' R 494  SER  OG ', -0.47, (-25.452, 14.377, -46.844)), (' H 123  PRO  HB3', ' H 149  TYR  HB3', -0.468, (24.764, 30.62, -25.222)), (' R 461  LEU HD13', ' R 466  ARG  HG3', -0.465, (-14.578, 10.246, -61.844)), (' L 124  GLN  O  ', ' L 127  SER  OG ', -0.464, (32.562, 40.458, -19.707)), (' H 152  GLU  HB3', ' H 153  PRO  HA ', -0.458, (17.029, 27.047, -27.943)), (' R 353  TRP  HB3', ' R 400  PHE  HB3', -0.449, (-22.973, 14.185, -61.349)), (' R 365  TYR  CD2', ' R 387  LEU  HB3', -0.438, (-26.3, 24.928, -79.956)), (' R 396  TYR  HB2', ' R 514  SER  HB2', -0.429, (-20.866, 14.594, -73.927)), (' R 464  PHE  CA ', ' R 466  ARG  NH1', -0.428, (-14.506, 10.995, -67.222)), (' R 383  SER  HB3', ' R 386  LYS  HB2', -0.424, (-20.322, 30.68, -81.318)), (' R 444  LYS  HG2', ' R 448  ASN  HB2', -0.422, (-31.658, 18.242, -47.179)), (' L  32  PHE  HB3', ' L  91  TYR  CD1', -0.422, (-14.673, 22.965, -42.77)), (' R 419  ALA  HA ', ' R 423  TYR  O  ', -0.416, (-13.16, 16.894, -61.462)), (' H 214  LYS  HB3', ' H 214  LYS  HE2', -0.416, (32.289, 26.522, -8.966)), (' R 466  ARG  HB2', ' R 466  ARG  HE ', -0.416, (-17.521, 8.732, -63.929)), (' H  86  ARG  HD3', ' H  88  GLU  OE1', -0.415, (10.402, 37.066, -46.554)), (' L  29  VAL  HA ', ' R 505  TYR  OH ', -0.415, (-17.616, 29.026, -44.71)), (' L  21  LEU  O  ', ' L  72  THR  HA ', -0.412, (-16.864, 29.51, -28.042)), (' L 145  LYS  HE3', ' L 197  THR  HB ', -0.411, (5.386, 49.11, -10.371)), (' H  98  ASP  CG ', ' L  96  ARG HH12', -0.407, (-5.564, 19.727, -44.027)), (' H 150  PHE  HA ', ' H 151  PRO  HA ', -0.406, (20.963, 31.107, -31.299)), (' H  33  TYR  CB ', ' H  98  ASP  HB3', -0.401, (-4.769, 16.036, -45.712)), (' L  75  ILE HG21', ' L  78  LEU HD23', -0.401, (-11.784, 22.686, -18.749)), (' H  33  TYR  HB2', ' H  98  ASP  HB3', -0.401, (-4.908, 15.496, -45.699))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
