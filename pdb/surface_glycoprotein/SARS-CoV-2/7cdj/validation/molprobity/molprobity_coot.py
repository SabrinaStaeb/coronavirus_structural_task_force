# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 153 ', 'PRO', None, (-82.91399999999997, 12.679, 7.696000000000001)), ('H', ' 155 ', 'PRO', None, (-80.08199999999997, 17.334999999999994, 10.517)), ('L', '   6 ', 'PRO', None, (-56.87400000000002, 15.69, 32.227)), ('L', '  93 ', 'PRO', None, (-49.731, 13.357000000000001, 9.525)), ('L', ' 139 ', 'PRO', None, (-77.492, 17.98, 40.353))]
data['rota'] = [('E', ' 350 ', 'VAL', 0.09260077506800798, (-38.161, 25.743, -14.175000000000002)), ('E', ' 367 ', 'VAL', 0.13501741946640053, (-36.097999999999985, 34.9, -38.729)), ('E', ' 375 ', 'SER', 0.006485455536212149, (-42.58799999999999, 39.80699999999999, -25.594)), ('E', ' 376 ', 'THR', 0.1295488613248861, (-39.009, 39.512999999999984, -24.356000000000005)), ('E', ' 383 ', 'SER', 0.20048914057025896, (-25.941000000000006, 40.90100000000002, -31.901)), ('E', ' 390 ', 'LEU', 0.00996853021311804, (-21.57, 33.268, -37.207)), ('E', ' 403 ', 'ARG', 0.0017372304832156589, (-44.51599999999999, 33.801000000000016, -14.514)), ('E', ' 405 ', 'ASP', 0.03171274105826697, (-43.294, 38.719, -12.313)), ('E', ' 407 ', 'VAL', 0.15494009642344997, (-39.265, 37.08600000000001, -16.417)), ('E', ' 445 ', 'VAL', 0.21040215137252483, (-59.714, 27.046, -15.104)), ('E', ' 452 ', 'LEU', 0.0333012204038515, (-43.265, 24.152, -10.274)), ('E', ' 470 ', 'THR', 0.021156671946881755, (-37.647000000000006, 16.715, -3.3810000000000002)), ('E', ' 477 ', 'SER', 0.09246899864247302, (-34.651, 24.288, 13.879)), ('E', ' 481 ', 'ASN', 0.016208696713359106, (-38.77, 13.316, 9.443)), ('E', ' 494 ', 'SER', 0.24843818397177003, (-46.82000000000001, 24.718000000000007, -7.883000000000001)), ('E', ' 514 ', 'SER', 0.0013399975614447612, (-26.316999999999997, 29.841, -25.152)), ('H', '   5 ', 'VAL', 0.26238766578885797, (-68.00399999999999, 28.68, 5.096)), ('H', '   7 ', 'SER', 0.004019992775283754, (-71.198, 23.568000000000005, 2.285)), ('H', '  25 ', 'SER', 0.07113944673644929, (-62.958, 34.799, 2.9890000000000008)), ('H', '  52 ', 'SER', 0.1084334596582772, (-50.22399999999999, 22.378, 0.333)), ('H', '  57 ', 'THR', 0.03575491352815563, (-48.407999999999994, 18.5, -2.239)), ('H', '  58 ', 'ILE', 0.023567227842767158, (-51.235, 16.28, -0.9980000000000001)), ('H', '  76 ', 'LYS', 0.0, (-62.233000000000004, 31.249, -6.152000000000001)), ('H', '  78 ', 'SER', 0.0754626206173893, (-62.598, 27.475, -2.042)), ('H', '  79 ', 'LEU', 0.024976209577963513, (-61.23599999999999, 24.09, -0.9370000000000002)), ('H', '  89 ', 'GLU', 0.0034676749751230526, (-68.269, 4.3260000000000005, 9.24)), ('H', ' 111 ', 'GLN', 0.0, (-68.891, 25.296, 10.778)), ('H', ' 113 ', 'THR', 0.050528378044271655, (-71.441, 19.556, 7.564)), ('H', ' 116 ', 'THR', 0.0013599335943581536, (-74.90999999999998, 11.042, 7.026)), ('H', ' 119 ', 'SER', 0.20083949901632298, (-79.986, 3.96, 3.237000000000001)), ('H', ' 122 ', 'THR', 0.0039560294698602425, (-85.51999999999998, 11.413000000000002, 3.9710000000000005)), ('H', ' 126 ', 'SER', 0.10017088918648402, (-94.47999999999999, 16.245, 12.332)), ('H', ' 141 ', 'THR', 0.021758937509730458, (-94.615, 30.69500000000001, 35.97800000000001)), ('H', ' 146 ', 'CYS', 0.061023980379104614, (-92.958, 21.982999999999997, 20.716)), ('H', ' 156 ', 'VAL', 0.03314876845549112, (-83.787, 19.794000000000008, 12.722)), ('H', ' 158 ', 'VAL', 0.1953151011987274, (-86.148, 24.803, 16.319)), ('H', ' 159 ', 'SER', 0.10687763497991998, (-86.391, 28.534, 16.887)), ('H', ' 167 ', 'SER', 0.18181999395679593, (-84.20799999999997, 33.514, 26.928000000000008)), ('H', ' 185 ', 'SER', 0.010333475964189173, (-88.57299999999998, 18.259, 21.972000000000005)), ('H', ' 192 ', 'SER', 0.1287187039262028, (-97.292, 33.032000000000004, 33.386)), ('H', ' 195 ', 'LEU', 0.0553995491508432, (-99.83999999999997, 34.288000000000004, 28.251)), ('H', ' 202 ', 'CYS', 0.058754235895295465, (-92.274, 27.744, 17.267)), ('H', ' 203 ', 'ASN', 0.030151068050386094, (-90.453, 27.576, 13.922000000000002)), ('L', '   9 ', 'LEU', 0.12021908659390214, (-62.49, 17.353, 35.13600000000001)), ('L', '  12 ', 'SER', 0.0916274859373767, (-66.674, 25.078, 40.496000000000016)), ('L', '  28 ', 'SER', 0.15748101572865048, (-41.068, 22.283, 20.242)), ('L', '  29 ', 'SER', 0.058424453544937464, (-44.042, 24.697, 20.502)), ('L', '  45 ', 'LEU', 0.196368876080418, (-57.845, 29.745, 22.142000000000003)), ('L', '  70 ', 'THR', 0.008159601566148922, (-50.574, 22.944, 29.656000000000002)), ('L', '  95 ', 'THR', 0.07046369402523128, (-52.959, 14.565, 15.546000000000001)), ('L', ' 112 ', 'SER', 0.01071998049155809, (-89.47400000000002, 22.024000000000008, 38.183)), ('L', ' 163 ', 'GLU', 0.08539177669285312, (-76.152, 20.587, 28.375)), ('L', ' 166 ', 'SER', 0.10354094353261759, (-74.326, 28.998, 29.822)), ('L', ' 201 ', 'SER', 0.04891867577064397, (-89.52499999999999, 13.498999999999997, 48.49800000000001))]
data['cbeta'] = []
data['probe'] = [(' L   9  LEU  CD2', ' L 102  VAL HG22', -1.329, (-62.163, 19.953, 32.148)), (' L   9  LEU HD21', ' L 102  VAL  CG2', -1.125, (-62.619, 20.816, 31.874)), (' L   9  LEU  CD1', ' L  17  VAL HG13', -0.968, (-59.586, 21.069, 33.75)), (' E 336  CYS  HB2', ' E 363  ALA  HB2', -0.895, (-31.037, 25.636, -37.154)), (' L   9  LEU HD11', ' L  17  VAL HG13', -0.892, (-60.31, 21.768, 34.768)), (' L   9  LEU HD11', ' L  17  VAL  CG1', -0.858, (-60.363, 22.24, 33.436)), (' H   6  GLU  OE1', ' H  96  CYS  N  ', -0.824, (-63.847, 22.468, 6.902)), (' L   9  LEU HD21', ' L 102  VAL HG22', -0.808, (-62.07, 21.23, 33.319)), (' L   9  LEU  CD2', ' L 102  VAL  CG2', -0.799, (-62.835, 20.16, 31.681)), (' H 125  PRO  HB3', ' H 151  TYR  HB3', -0.793, (-88.801, 15.433, 11.182)), (' L  81  PHE  CE2', ' L 163  GLU  HG3', -0.76, (-74.079, 23.498, 26.849)), (' L  81  PHE  HE2', ' L 163  GLU  HG3', -0.744, (-73.964, 22.737, 26.884)), (' H 199  THR HG23', ' H 216  LYS  HE3', -0.669, (-100.181, 33.522, 18.909)), (' L   9  LEU  O  ', ' L   9  LEU HD23', -0.668, (-64.259, 18.79, 33.694)), (' H 145  GLY  HA3', ' H 187  VAL HG12', -0.651, (-92.167, 22.393, 24.758)), (' E 360  ASN  H  ', ' E 523  THR  HB ', -0.645, (-23.531, 20.793, -35.89)), (' L   9  LEU HD23', ' L 102  VAL  HA ', -0.644, (-63.635, 19.233, 32.757)), (' H   6  GLU  OE1', ' H  96  CYS  SG ', -0.643, (-64.019, 23.716, 6.702)), (' H  48  VAL HG13', ' H  64  VAL HG21', -0.629, (-59.378, 11.489, 4.009)), (' L 199  LEU HD13', ' L 203  VAL HG23', -0.627, (-89.484, 16.217, 43.143)), (' L  28  SER  O  ', ' L  28  SER  OG ', -0.624, (-40.612, 23.834, 18.149)), (' E 391  CYS  HB3', ' E 522  ALA  HB1', -0.617, (-19.464, 27.325, -37.259)), (' E 381  GLY  HA3', ' E 430  THR HG22', -0.61, (-21.41, 37.468, -25.272)), (' H 120  ALA  HB3', ' H 152  PHE  CE2', -0.609, (-82.241, 7.086, 6.518)), (' E 384  PRO  HA ', ' E 387  LEU HD12', -0.6, (-29.233, 37.76, -33.307)), (' L 188  LYS  HE3', ' L 208  ASN  ND2', -0.598, (-109.6, 11.855, 35.969)), (' H   9  GLY  HA2', ' H  18  LEU HD21', -0.592, (-72.621, 16.577, 2.408)), (' H  67  ARG  NH2', ' H  90  ASP  OD2', -0.591, (-65.736, 6.139, 2.813)), (' E 456  PHE  HB3', ' E 473  TYR  CD2', -0.588, (-36.649, 25.077, 1.974)), (' E 409  GLN  NE2', ' E 416  GLY  HA3', -0.576, (-35.753, 36.748, -8.719)), (' E 350  VAL HG22', ' E 401  VAL  O  ', -0.569, (-40.278, 27.892, -15.158)), (' E 340  GLU  O  ', ' E 344  ALA  HB2', -0.568, (-40.69, 21.588, -29.189)), (' E 395  VAL HG22', ' E 515  PHE  HD1', -0.566, (-24.937, 29.058, -30.661)), (' L  88  GLN  NE2', ' L  91  SER  H  ', -0.565, (-46.995, 16.816, 13.374)), (' E 493  GLN  HG3', ' H  54  SER  HB3', -0.562, (-47.455, 26.713, -4.496)), (' L 188  LYS  HE3', ' L 208  ASN HD22', -0.558, (-110.147, 11.615, 35.722)), (' E 365  TYR  CD2', ' E 387  LEU  HB3', -0.544, (-27.795, 33.745, -35.681)), (' L 122  GLN  OE1', ' L 129  SER  HB2', -0.538, (-96.509, 12.285, 20.228)), (' E 418  ILE  HA ', ' E 422  ASN HD22', -0.537, (-36.305, 30.214, -9.468)), (' H  12  VAL HG11', ' H  86  LEU HD12', -0.531, (-71.888, 9.232, -0.008)), (' L  22  ARG  NH1', ' L  68  GLU  HB2', -0.531, (-43.966, 16.864, 29.416)), (' H  83  MET  HB3', ' H  86  LEU HD21', -0.529, (-67.013, 10.607, 0.479)), (' L  25  GLN  O  ', ' L  27  ILE HG23', -0.512, (-43.57, 16.256, 19.761)), (' L 113  VAL  O  ', ' L 205  LYS  HG3', -0.507, (-94.815, 19.178, 37.055)), (' L   8  PHE  C  ', ' L   8  PHE  CD2', -0.504, (-63.786, 15.563, 34.044)), (' H 148  VAL  HB ', ' H 184  LEU  HB3', -0.502, (-88.266, 17.873, 17.307)), (' H   9  GLY  CA ', ' H  18  LEU HD21', -0.5, (-72.809, 16.428, 1.76)), (' H  11  LEU  HB2', ' H 153  PRO  HG3', -0.495, (-80.066, 12.558, 5.328)), (' H 132  PRO  HD3', ' H 144  LEU  HB3', -0.494, (-97.711, 26.456, 26.254)), (' L  33  TRP  HB2', ' L  46  ILE  HB ', -0.494, (-54.304, 27.198, 23.261)), (' H  52  SER  O  ', ' H  72  ARG  NH1', -0.494, (-53.003, 24.74, -0.606)), (' E 486  PHE  CD2', ' H 105  LEU HD22', -0.493, (-45.545, 26.662, 13.213)), (' L 118  PRO  HB3', ' L 128  ALA  HB1', -0.492, (-100.813, 11.404, 22.863)), (' E 349  SER  OG ', ' E 451  TYR  HA ', -0.489, (-43.631, 22.781, -14.118)), (' H 171  THR HG23', ' H 186  SER  HB2', -0.485, (-86.406, 21.845, 20.501)), (' H 150  ASP  HA ', ' H 181  LEU  HB3', -0.481, (-88.957, 9.891, 12.834)), (' E 395  VAL HG22', ' E 515  PHE  CD1', -0.48, (-25.701, 29.184, -30.655)), (' E 443  SER  HB2', ' E 497  PHE  HB3', -0.479, (-52.535, 28.787, -16.106)), (' H 148  VAL HG11', ' H 156  VAL HG11', -0.479, (-87.313, 18.233, 13.975)), (' E 452  LEU HD23', ' E 494  SER  HA ', -0.477, (-45.821, 23.277, -8.708)), (' L 161  VAL HG22', ' L 173  LEU HD12', -0.473, (-82.217, 13.836, 31.497)), (' L  16  ARG  HG2', ' L  74  SER  O  ', -0.473, (-57.525, 30.132, 38.364)), (' E 444  LYS  HE3', ' E 446  GLY  H  ', -0.468, (-59.345, 24.082, -14.57)), (' E 406  GLU  HG2', ' E 418  ILE HG13', -0.467, (-39.061, 33.642, -11.285)), (' L 126  GLY  HA2', ' L 181  LYS  HB2', -0.467, (-104.171, 6.888, 17.235)), (' H  30  SER  HB2', ' H  74  ASN  ND2', -0.466, (-53.192, 30.223, -3.882)), (' E 391  CYS  HB3', ' E 522  ALA  CB ', -0.462, (-18.611, 27.185, -37.049)), (' L   9  LEU  CD2', ' L 102  VAL  HA ', -0.461, (-63.555, 19.995, 32.79)), (' H  71  SER  OG ', ' H  80  TYR  HB2', -0.461, (-61.573, 20.261, -4.903)), (' L  35  GLN  HB2', ' L  45  LEU HD11', -0.459, (-61.326, 26.095, 24.588)), (' L 179  LEU HD22', ' L 183  ASP  HB3', -0.459, (-100.772, 2.872, 25.333)), (' H 184  LEU  HG ', ' H 185  SER  H  ', -0.458, (-86.242, 18.144, 20.283)), (' E 379  CYS  HA ', ' E 432  CYS  HA ', -0.456, (-29.726, 37.317, -26.037)), (' E 403  ARG  HD2', ' E 406  GLU  OE2', -0.454, (-43.492, 34.129, -10.339)), (' L   9  LEU HD22', ' L 102  VAL HG22', -0.453, (-61.947, 20.101, 32.154)), (' H  94  TYR  O  ', ' H 112  GLY  HA2', -0.449, (-67.64, 20.36, 8.538)), (' H  60  TYR  OH ', ' H  69  THR  HA ', -0.448, (-57.808, 13.331, -3.274)), (' E 497  PHE  CD1', ' E 507  PRO  HD3', -0.448, (-49.838, 30.884, -15.391)), (' L  22  ARG  HA ', ' L  67  THR  O  ', -0.447, (-46.35, 16.616, 25.837)), (' E 358  ILE HG22', ' E 524  VAL HG21', -0.443, (-26.953, 24.1, -33.023)), (' H 127  VAL HG22', ' H 148  VAL HG22', -0.443, (-91.189, 19.646, 14.906)), (' H  60  TYR  CE1', ' H  70  ILE HG22', -0.443, (-56.849, 14.736, -1.026)), (' L 131  VAL HG22', ' L 176  THR HG23', -0.443, (-92.885, 13.778, 24.697)), (' H  33  TYR  CD2', ' H  52  SER  HA ', -0.443, (-49.749, 22.791, 2.406)), (' L 123  LEU  CD2', ' L 128  ALA  HB2', -0.442, (-102.617, 9.923, 21.436)), (' H 111  GLN  H  ', ' H 111  GLN  HG3', -0.442, (-68.413, 26.893, 8.656)), (' E 395  VAL HG21', ' E 524  VAL HG11', -0.442, (-26.462, 27.221, -33.329)), (' E 354  ASN  O  ', ' E 398  ASP  HA ', -0.441, (-33.853, 23.652, -22.09)), (' H  51  ILE HD12', ' H  58  ILE HD11', -0.44, (-55.006, 19.371, -3.181)), (' H   5  VAL  O  ', ' H  23  ALA  N  ', -0.44, (-66.347, 27.453, 2.393)), (' L 118  PRO  CB ', ' L 128  ALA  HB1', -0.44, (-101.326, 11.419, 23.119)), (' L 111  PRO  HD3', ' L 196  HIS  ND1', -0.438, (-83.422, 17.909, 41.155)), (' L 138  TYR  CG ', ' L 139  PRO  HA ', -0.432, (-76.083, 19.057, 38.902)), (' L 118  PRO  HG2', ' L 184  TYR  CE1', -0.432, (-102.598, 10.919, 25.783)), (' L  82  ALA  HB3', ' L  84  TYR  CE1', -0.431, (-64.237, 23.668, 27.207)), (' E 357  ARG  HG3', ' E 396  TYR  CE1', -0.43, (-25.06, 20.71, -26.723)), (' H 172  PHE  O  ', ' H 184  LEU HD11', -0.429, (-83.229, 18.186, 20.414)), (' H  32  TYR  CE1', ' H 101  SER  HB2', -0.424, (-51.381, 32.221, 6.089)), (' L 153  GLN  HB3', ' L 156  ASN HD21', -0.424, (-95.218, 2.239, 29.346)), (' E 417  LYS  HA ', ' E 417  LYS  HD3', -0.423, (-36.274, 33.044, -4.259)), (' E 440  ASN  N  ', ' E 440  ASN  OD1', -0.419, (-52.192, 31.329, -23.881)), (' H  37  ILE HG12', ' H  47  TRP  HA ', -0.418, (-58.239, 16.322, 10.648)), (' L  89  LEU HD23', ' L  94  LEU HD22', -0.417, (-51.347, 20.258, 12.963)), (' H  48  VAL  CG1', ' H  64  VAL HG21', -0.417, (-59.751, 11.74, 4.283)), (' H 184  LEU  HA ', ' H 184  LEU HD12', -0.416, (-85.063, 15.823, 19.864)), (' E 438  SER  CB ', ' E 509  ARG  HG3', -0.415, (-46.232, 29.517, -22.623)), (' E 364  ASP  HB3', ' E 367  VAL  HB ', -0.415, (-34.468, 32.396, -39.857)), (' H 127  VAL  HA ', ' H 147  LEU  O  ', -0.414, (-93.771, 18.471, 16.515)), (' L  63  SER  OG ', ' L  70  THR HG22', -0.414, (-48.945, 25.784, 30.581)), (' L 123  LEU HD21', ' L 128  ALA  HB2', -0.413, (-102.965, 10.391, 21.77)), (' H 216  LYS  HE2', ' H 218  GLU  OE2', -0.411, (-102.947, 31.35, 19.503)), (' L 116  PHE  HA ', ' L 117  PRO  HD3', -0.41, (-99.085, 18.502, 29.026)), (' L 106  ARG  HD2', ' L 168  ASP  O  ', -0.41, (-76.175, 26.199, 37.865)), (' L 184  TYR  HA ', ' L 190  TYR  OH ', -0.41, (-103.732, 6.518, 27.488)), (' L 115  ILE HD12', ' L 192  CYS  HB2', -0.41, (-95.886, 12.927, 33.89)), (' H  14  PRO  HD3', ' H 118  SER  O  ', -0.409, (-77.327, 5.22, 2.585)), (' L   1  GLN  N  ', ' L  24  SER  OG ', -0.409, (-47.499, 10.888, 19.081)), (' H 101  SER  OG ', ' H 102  HIS  N  ', -0.409, (-47.928, 31.375, 5.807)), (' H  73  ASP  OD1', ' H  76  LYS  HG3', -0.408, (-61.652, 28.891, -7.919)), (' L 118  PRO  CG ', ' L 128  ALA  HB1', -0.405, (-101.267, 11.088, 23.794)), (' H  87  ARG  HD3', ' H  89  GLU  OE2', -0.404, (-66.027, 1.095, 5.725)), (' H  12  VAL HG21', ' H  18  LEU  HB2', -0.403, (-72.395, 12.519, -0.146)), (' E 349  SER  HB3', ' E 452  LEU  H  ', -0.403, (-42.597, 23.563, -12.568)), (' H 156  VAL HG21', ' H 184  LEU HD22', -0.402, (-84.909, 18.607, 16.489)), (' E 398  ASP  O  ', ' E 511  VAL  HA ', -0.4, (-35.463, 28.31, -23.352)), (' L  35  GLN  HB3', ' L  45  LEU HD21', -0.4, (-61.907, 27.771, 23.642))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
