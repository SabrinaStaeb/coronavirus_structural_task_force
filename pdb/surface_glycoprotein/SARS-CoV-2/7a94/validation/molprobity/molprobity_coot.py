# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 527 ', 'PRO', None, (275.0929999999999, 246.09500000000006, 305.247)), ('D', ' 146 ', 'PRO', None, (254.89700000000005, 236.74199999999996, 380.762))]
data['rota'] = [('A', ' 215 ', 'ASP', 0.13755831593508036, (221.10399999999996, 271.58, 277.743)), ('A', ' 336 ', 'CYS', 0.23393518485285641, (282.46499999999986, 240.79400000000007, 311.58999999999986)), ('A', ' 614 ', 'ASP', 0.0048386507189552685, (260.0759999999999, 252.759, 264.4759999999999)), ('A', ' 710 ', 'ASN', 0.0884408788456442, (262.677, 244.104, 209.064)), ('A', ' 886 ', 'TRP', 0.0014539235892805384, (269.2689999999999, 284.113, 215.42699999999994)), ('A', '1004 ', 'LEU', 0.10727630479315158, (272.50899999999984, 286.20700000000005, 264.947)), ('B', ' 133 ', 'PHE', 0.18099379400341167, (308.092, 245.20100000000008, 311.19)), ('B', ' 318 ', 'PHE', 0.10278919479680604, (307.2159999999999, 269.51900000000006, 266.447)), ('B', ' 515 ', 'PHE', 0.05378938765856076, (299.719, 299.4630000000001, 291.827)), ('B', ' 544 ', 'ASN', 0.1953741937675626, (310.6159999999999, 293.263, 284.704)), ('B', ' 588 ', 'THR', 0.0, (311.321, 286.2, 266.864)), ('B', ' 633 ', 'TRP', 0.029786235438544317, (311.75799999999987, 259.67500000000007, 268.175)), ('B', '1135 ', 'ASN', 0.08527999097071401, (294.513, 267.8240000000001, 186.76)), ('C', ' 273 ', 'ARG', 0.00031701397560122556, (287.77999999999986, 312.351, 269.71)), ('C', ' 391 ', 'CYS', 0.22171052236322564, (256.7439999999999, 300.67700000000013, 291.681)), ('C', ' 525 ', 'CYS', 0.26159986084419895, (255.509, 303.0610000000001, 294.6239999999999)), ('C', ' 581 ', 'THR', 0.004519921083239702, (243.69899999999998, 310.068, 282.271)), ('C', ' 590 ', 'CYS', 0.08282209399089115, (262.6349999999998, 307.992, 267.721)), ('C', ' 615 ', 'VAL', 0.017584794624066348, (263.5769999999999, 309.02200000000005, 255.668)), ('C', ' 738 ', 'CYS', 0.08653147669407754, (293.9269999999999, 274.8480000000001, 266.70299999999986)), ('C', '1133 ', 'VAL', 0.2155099350740189, (256.2639999999999, 284.1180000000001, 192.03799999999995)), ('D', ' 123 ', 'MET', 0.0, (271.6239999999999, 244.531, 385.2859999999999)), ('D', ' 132 ', 'VAL', 0.2866642668717164, (258.47899999999987, 237.586, 391.389)), ('D', ' 156 ', 'LEU', 0.1859395642598731, (241.30600000000007, 244.741, 389.29)), ('D', ' 183 ', 'TYR', 0.29201848246989, (276.50099999999986, 252.371, 386.84)), ('D', ' 297 ', 'MET', 0.2964059674725385, (239.03, 242.492, 355.197)), ('D', ' 343 ', 'VAL', 0.21315837867167176, (261.26799999999986, 235.605, 366.596)), ('D', ' 385 ', 'TYR', 0.2832690918947692, (268.5639999999999, 259.768, 352.9999999999999)), ('D', ' 557 ', 'MET', 0.0015670061973171825, (262.6669999999998, 266.304, 354.653)), ('D', ' 599 ', 'ASN', 0.09821196349260818, (235.47499999999994, 266.652, 384.9459999999999))]
data['cbeta'] = [('A', ' 282 ', 'ASN', ' ', 0.3502218739069072, (237.52999999999997, 295.0190000000001, 268.572)), ('B', ' 590 ', 'CYS', ' ', 0.31115394024314513, (313.5719999999999, 280.138, 268.081)), ('C', ' 343 ', 'ASN', ' ', 0.3018203128777241, (260.78699999999986, 299.83300000000014, 315.99))]
data['probe'] = [(' C 706  ALA  CB ', ' C1306  NAG  H62', -0.957, (264.152, 298.532, 206.563)), (' C 706  ALA  HB2', ' C1306  NAG  H62', -0.861, (264.84, 298.578, 207.758)), (' A 353  TRP  O  ', ' A 466  ARG  NH1', -0.847, (291.028, 248.533, 326.659)), (' B 164  ASN  HB3', ' B1301  NAG  HN2', -0.836, (304.213, 248.907, 317.765)), (' B1101  HIS  HD2', ' B1103  PHE  CE1', -0.723, (292.828, 257.017, 191.652)), (' A 777  ASN  OD1', ' A1019  ARG  NH1', -0.722, (274.628, 286.005, 239.568)), (' C 777  ASN  OD1', ' C1019  ARG  NH1', -0.706, (288.086, 270.623, 241.242)), (' D  90  ASN  OD1', ' D  92  THR  OG1', -0.688, (280.809, 267.934, 352.727)), (' A 710  ASN  HB3', ' A1306  NAG  H82', -0.675, (263.29, 242.006, 207.279)), (' A1081  ILE HG23', ' A1135  ASN  HB3', -0.672, (265.822, 247.241, 194.484)), (' B 462  LYS  NZ ', ' B 465  GLU  OE2', -0.658, (285.974, 313.512, 293.373)), (' C 706  ALA  HB1', ' C1306  NAG  H62', -0.648, (263.429, 298.265, 206.884)), (' A 122  ASN  OD1', ' A 125  ASN  N  ', -0.639, (221.49, 293.594, 298.728)), (' C 706  ALA  HB2', ' C1306  NAG  C6 ', -0.634, (264.29, 299.373, 207.409)), (' D 152  MET  HG3', ' D 270  MET  HB3', -0.618, (252.023, 245.516, 386.705)), (' D 382  ASP  OD1', ' D 385  TYR  OH ', -0.611, (267.197, 255.403, 357.909)), (' C 318  PHE  HD1', ' C 593  GLY  HA3', -0.606, (268.419, 308.005, 259.276)), (' B 105  ILE HG12', ' B 241  LEU HD11', -0.596, (310.256, 240.891, 301.888)), (' A  91  TYR  OH ', ' A 191  GLU  OE2', -0.594, (230.188, 278.076, 279.96)), (' C 295  PRO  HD3', ' C 633  TRP  CG ', -0.586, (279.853, 315.118, 257.135)), (' B  21  ARG  HE ', ' B  79  PHE  HB3', -0.579, (324.348, 237.667, 297.195)), (' D 120  LEU HD23', ' D 123  MET  HE1', -0.575, (273.902, 249.293, 382.172)), (' B 581  THR HG22', ' B 583  GLU  HG2', -0.569, (323.377, 297.927, 275.704)), (' D 273  ARG  O  ', ' D 449  THR HG22', -0.567, (252.25, 255.708, 379.226)), (' D 468  ILE HD12', ' D 473  TRP  HA ', -0.566, (267.123, 260.346, 393.616)), (' D 230  PHE  CZ ', ' D 484  ILE HG23', -0.563, (255.231, 265.781, 383.978)), (' C 905  ARG  NH1', ' C1049  LEU  O  ', -0.56, (287.741, 275.985, 215.343)), (' B1083  HIS  CE1', ' B1137  VAL  H  ', -0.559, (288.654, 267.592, 183.938)), (' B 484  GLU  HA ', ' B 488  CYS  HB2', -0.554, (272.057, 321.915, 312.51)), (' C 244  LEU HD12', ' C 246  ARG HH21', -0.549, (305.022, 345.357, 285.814)), (' A 437  ASN  ND2', ' A 507  PRO  O  ', -0.549, (273.557, 244.047, 335.682)), (' C 124  THR HG22', ' C 125  ASN  ND2', -0.543, (317.149, 329.487, 292.352)), (' D 388  GLN  O  ', ' D 393  ARG  NE ', -0.542, (274.851, 257.578, 351.809)), (' B 551  VAL HG23', ' B 590  CYS  HB3', -0.541, (314.614, 281.085, 268.504)), (' B1083  HIS  CG ', ' B1084  ASP  H  ', -0.54, (288.765, 271.442, 183.437)), (' D 262  LEU  HB3', ' D 267  LEU HD21', -0.539, (246.213, 255.582, 389.67)), (' B 340  GLU  O  ', ' B 356  LYS  NZ ', -0.538, (303.509, 304.376, 306.704)), (' A1083  HIS  CG ', ' A1084  ASP  H  ', -0.535, (271.496, 247.157, 189.439)), (' A 474  GLN  NE2', ' A 478  THR  H  ', -0.533, (302.012, 263.631, 351.233)), (' A1002  GLN HE22', ' B1002  GLN HE22', -0.53, (276.532, 278.077, 270.345)), (' C 825  LYS  NZ ', ' C 940  SER  O  ', -0.528, (297.526, 297.605, 233.237)), (' C 408  ARG  O  ', ' C 414  GLN  NE2', -0.527, (272.511, 281.637, 305.017)), (' D 174  LYS  HD3', ' D 496  THR HG22', -0.525, (265.447, 245.266, 398.163)), (' B 123  ALA  HA ', ' B 177  MET  HE3', -0.524, (305.387, 226.472, 300.016)), (' A  31  SER  OG ', ' A  60  SER  N  ', -0.524, (234.162, 268.197, 276.895)), (' C 310  LYS  HG2', ' C 664  ILE HD11', -0.523, (282.433, 305.413, 241.331)), (' B  30  ASN  OD1', ' B  59  PHE  HA ', -0.521, (313.557, 246.378, 273.8)), (' C 453  TYR  CZ ', ' C 493  GLN  HB3', -0.516, (264.475, 274.167, 319.314)), (' A 317  ASN  ND2', ' B 737  ASP  OD2', -0.516, (262.141, 263.295, 269.363)), (' D 474  MET  HE3', ' D 478  TRP  HE1', -0.516, (259.253, 254.151, 395.293)), (' B1125  ASN HD22', ' B1127  ASP  HB2', -0.513, (293.217, 283.118, 187.68)), (' D 414  THR HG23', ' D 417  HIS  H  ', -0.512, (240.732, 258.37, 356.309)), (' D 396  ALA  HA ', ' D 562  LYS  HA ', -0.507, (269.57, 264.036, 360.928)), (' A 170  TYR  CE2', ' A 172  SER  HA ', -0.506, (229.899, 295.134, 297.689)), (' D 208  GLU  HA ', ' D 217  TYR  O  ', -0.503, (271.617, 271.464, 369.997)), (' B 793  PRO  O  ', ' B 795  LYS  NZ ', -0.501, (264.648, 237.386, 224.692)), (' A  64  TRP  HE1', ' A 264  ALA  HB1', -0.496, (219.522, 271.651, 284.773)), (' A1083  HIS  CG ', ' A1084  ASP  N  ', -0.496, (271.137, 246.78, 189.423)), (' B 597  VAL HG12', ' B 610  VAL HG22', -0.491, (308.182, 260.408, 258.9)), (' C 352  ALA  HA ', ' C 466  ARG  HD3', -0.49, (253.665, 279.676, 311.688)), (' C 390  LEU  HB2', ' C 392  PHE  CZ ', -0.49, (260.616, 299.438, 292.955)), (' D 183  TYR  OH ', ' D 509  ASP  OD2', -0.489, (272.723, 254.595, 380.942)), (' A1002  GLN HE22', ' B1002  GLN  NE2', -0.489, (276.944, 277.668, 270.673)), (' B 416  GLY  O  ', ' B 420  ASP  N  ', -0.487, (280.188, 303.984, 301.933)), (' A 105  ILE HG23', ' A 241  LEU HD21', -0.486, (227.252, 279.46, 300.736)), (' B1072  GLU  N  ', ' B1072  GLU  OE1', -0.486, (296.777, 255.869, 211.595)), (' C 455  LEU  N  ', ' C 491  PRO  O  ', -0.484, (261.04, 271.25, 316.082)), (' C  34  ARG  NH2', ' C 219  GLY  O  ', -0.483, (301.309, 322.04, 261.016)), (' A1083  HIS  CD2', ' A1084  ASP  H  ', -0.481, (271.379, 247.517, 188.928)), (' D 457  GLU  OE1', ' D 460  ARG  NH2', -0.478, (266.265, 259.508, 379.123)), (' D 351  LEU  HB2', ' D 355  ASP  HB3', -0.478, (270.378, 245.006, 352.122)), (' D 470  LYS  HA ', ' D 473  TRP  CE2', -0.476, (271.658, 258.11, 394.449)), (' A 578  ASP  OD1', ' A 581  THR  N  ', -0.476, (273.866, 236.624, 289.613)), (' C 676  THR  H  ', ' C 690  GLN  NE2', -0.476, (282.075, 317.296, 234.395)), (' C 950  ASP  OD2', ' C 951  VAL  N  ', -0.475, (289.107, 287.33, 243.781)), (' D 536  GLU  OE2', ' D 541  LYS  HE2', -0.475, (236.741, 267.231, 357.733)), (' C  53  ASP  HB3', ' C  55  PHE  CE2', -0.473, (293.442, 310.836, 270.96)), (' C  77  LYS  HB3', ' C 258  TRP  CZ3', -0.473, (301.354, 348.234, 279.741)), (' C 825  LYS  HE3', ' C 938  LEU  O  ', -0.472, (298.068, 295.255, 231.427)), (' D 187  LYS  HD2', ' D 199  TYR  CE1', -0.471, (276.605, 256.218, 379.929)), (' B 131  CYS  HB2', ' B 133  PHE  CZ ', -0.471, (303.875, 243.908, 309.483)), (' A 145  TYR  HB2', ' A 152  TRP  CH2', -0.47, (206.143, 283.598, 297.535)), (' A  80  ASP  OD1', ' A  81  ASN  N  ', -0.469, (221.783, 269.406, 295.783)), (' C 329  PHE  N  ', ' C 530  SER  OG ', -0.468, (253.212, 309.655, 287.785)), (' C 294  ASP  CG ', ' C 295  PRO  HD2', -0.467, (281.936, 315.483, 255.571)), (' D 582  ARG  HG2', ' D 582  ARG HH11', -0.467, (247.634, 274.612, 367.994)), (' D 239  HIS  ND1', ' D 592  PHE  HE1', -0.467, (241.483, 270.039, 380.221)), (' D 453  THR  HA ', ' D 512  PHE  CE2', -0.467, (259.163, 258.598, 380.03)), (' C 143  VAL  HA ', ' C 154  GLU  HA ', -0.465, (312.091, 341.126, 286.359)), (' A 886  TRP  CD1', ' A 886  TRP  N  ', -0.464, (268.576, 283.699, 213.92)), (' A 453  TYR  CZ ', ' A 493  GLN  HB2', -0.464, (286.568, 250.982, 344.243)), (' B  53  ASP  HB3', ' B  55  PHE  CE2', -0.463, (298.138, 252.269, 280.033)), (' C1081  ILE HG23', ' C1135  ASN  HB3', -0.46, (260.41, 281.568, 189.14)), (' B1101  HIS  CD2', ' B1103  PHE  CE1', -0.46, (292.667, 257.411, 191.186)), (' B 437  ASN  HB2', ' B 508  TYR  CZ ', -0.459, (291.502, 293.315, 315.327)), (' B1097  SER  HB3', ' B1102  TRP  CD2', -0.459, (296.997, 263.389, 194.099)), (' A1107  ARG  HD3', ' B 904  TYR  CE1', -0.459, (266.992, 257.657, 210.445)), (' A 118  LEU HD13', ' A 120  VAL HG23', -0.459, (227.142, 284.958, 301.279)), (' D 382  ASP  HA ', ' D 385  TYR  CE1', -0.459, (267.251, 255.751, 355.89)), (' B 993  ILE  O  ', ' B 997  ILE HG22', -0.458, (273.928, 272.665, 280.748)), (' B1125  ASN  ND2', ' B1127  ASP  HB2', -0.457, (292.707, 283.084, 188.092)), (' B  30  ASN  OD1', ' B  31  SER  N  ', -0.455, (313.341, 245.001, 275.549)), (' A 437  ASN  HB2', ' A 508  TYR  CZ ', -0.455, (271.31, 246.026, 334.697)), (' D 536  GLU  O  ', ' D 541  LYS  NZ ', -0.454, (237.023, 268.978, 359.898)), (' D 582  ARG  NH1', ' D 586  ASN  OD1', -0.454, (247.084, 274.111, 367.039)), (' C 203  ILE  N  ', ' C 203  ILE HD12', -0.452, (302.819, 316.973, 282.033)), (' C 762  GLN  HG2', ' C 765  ARG  NH2', -0.452, (285.487, 266.382, 263.764)), (' B 145  TYR  HB2', ' B 152  TRP  CH2', -0.452, (317.494, 220.82, 300.493)), (' D 279  TYR  O  ', ' D 283  VAL HG13', -0.451, (236.656, 252.697, 377.582)), (' C 878  LEU  HA ', ' C 878  LEU HD23', -0.45, (296.96, 275.616, 221.318)), (' A 102  ARG HH11', ' A 141  LEU HD13', -0.448, (219.664, 285.961, 300.623)), (' A 188  ASN  HB3', ' A 207  HIS  NE2', -0.447, (220.984, 286.432, 281.623)), (' A 745  ASP  OD1', ' C 319  ARG  NH1', -0.446, (269.449, 303.471, 269.608)), (' B 231  ILE HG22', ' B 233  ILE HG23', -0.445, (299.212, 250.191, 303.397)), (' C 327  VAL  O  ', ' C 531  THR  N  ', -0.445, (255.059, 313.179, 285.603)), (' A 408  ARG  NH2', ' A 409  GLN HE21', -0.445, (278.469, 257.756, 339.201)), (' D 535  HIS  CG ', ' D 536  GLU  N  ', -0.444, (241.228, 269.257, 358.085)), (' C 452  LEU  HA ', ' C 494  SER  HA ', -0.444, (261.69, 277.79, 321.49)), (' D 520  LEU  C  ', ' D 524  GLN HE21', -0.444, (256.08, 267.361, 367.666)), (' B 411  ALA  HB3', ' B 414  GLN  HG3', -0.444, (283.104, 294.697, 299.708)), (' D 201  ASP  HA ', ' D 204  ARG  HB2', -0.442, (272.713, 266.298, 377.376)), (' A 922  LEU HD21', ' A1307  NAG  H5 ', -0.442, (246.763, 269.008, 211.149)), (' C 164  ASN  HB3', ' C1301  NAG  HN2', -0.441, (300.203, 326.523, 306.461)), (' B 517  LEU  H  ', ' B 519  HIS  CE1', -0.439, (299.468, 298.258, 285.045)), (' A 146  HIS  O  ', ' A 150  LYS  N  ', -0.438, (202.306, 290.257, 299.261)), (' D 295  ASP  N  ', ' D 295  ASP  OD2', -0.437, (235.548, 244.161, 359.47)), (' B 709  ASN  HA ', ' C 897  PRO  HB3', -0.437, (299.641, 272.474, 204.422)), (' A1023  ASN  C  ', ' A1023  ASN HD22', -0.435, (274.122, 280.083, 234.971)), (' D 535  HIS  NE2', ' D 539  LEU  HA ', -0.435, (242.06, 267.391, 361.614)), (' A 403  ARG  HE ', ' A 505  TYR  HA ', -0.434, (276.329, 249.297, 342.887)), (' C 200  TYR  CE2', ' C 230  PRO  HB3', -0.433, (301.573, 310.642, 290.263)), (' C 408  ARG  CZ ', ' C 409  GLN  HG2', -0.433, (271.602, 278.517, 308.627)), (' B  91  TYR  OH ', ' B 191  GLU  OE2', -0.429, (307.328, 239.818, 281.23)), (' B 353  TRP  O  ', ' B 466  ARG  NH2', -0.429, (294.397, 310.707, 302.386)), (' C 926  GLN  NE2', ' C1305  NAG  H62', -0.429, (288.551, 293.105, 207.073)), (' B1142  GLN  HB3', ' B1143  PRO  HD3', -0.428, (281.986, 260.831, 179.442)), (' A 358  ILE  HB ', ' A 395  VAL  HB ', -0.426, (284.198, 248.509, 313.788)), (' A1002  GLN  NE2', ' B1002  GLN HE22', -0.426, (276.36, 278.325, 270.446)), (' B 295  PRO  HA ', ' B 633  TRP  CH2', -0.425, (306.914, 259.076, 264.182)), (' A 542  ASN  OD1', ' A 547  THR HG22', -0.425, (272.536, 252.16, 289.558)), (' A 996  LEU  HA ', ' A 996  LEU HD23', -0.424, (270.602, 286.664, 277.342)), (' A 676  THR  HA ', ' A 690  GLN  HG2', -0.423, (235.176, 259.032, 249.15)), (' D 133  CYS  HA ', ' D 141  CYS  HA ', -0.422, (256.908, 233.813, 392.229)), (' B  70  VAL  HB ', ' B  76  THR HG22', -0.422, (331.365, 229.621, 290.687)), (' B 517  LEU HD13', ' C 983  ARG  NH1', -0.422, (297.875, 292.684, 286.587)), (' C  31  SER  O  ', ' C  59  PHE  N  ', -0.421, (291.465, 323.371, 262.954)), (' A 520  ALA  HB1', ' A 521  PRO  HD2', -0.421, (292.698, 253.624, 303.478)), (' C 416  GLY  O  ', ' C 420  ASP  N  ', -0.421, (266.044, 274.364, 306.889)), (' B1135  ASN  HA ', ' B1135  ASN HD22', -0.42, (295.643, 266.612, 186.23)), (' A  97  LYS  HD2', ' A 185  ASN  HB3', -0.42, (211.662, 281.754, 283.416)), (' C 271  GLN HE21', ' C 273  ARG  NH2', -0.42, (284.736, 317.282, 269.349)), (' C 454  ARG  HA ', ' C 492  LEU HD23', -0.419, (258.888, 272.792, 316.198)), (' C 858  LEU  O  ', ' C 859  THR  CG2', -0.419, (301.921, 278.48, 259.576)), (' B 418  ILE  HA ', ' B 422  ASN  ND2', -0.418, (282.764, 305.877, 305.63)), (' C 353  TRP  O  ', ' C 466  ARG  NH2', -0.418, (253.173, 283.13, 309.422)), (' C 748  GLU  CD ', ' C 748  GLU  H  ', -0.417, (299.463, 275.298, 281.559)), (' A 447  GLY  HA2', ' A 497  PHE  O  ', -0.417, (278.929, 239.398, 344.627)), (' B1083  HIS  CG ', ' B1084  ASP  N  ', -0.417, (289.242, 271.57, 183.85)), (' A 140  PHE  CD2', ' A 244  LEU HD12', -0.415, (215.875, 277.335, 302.598)), (' A 336  CYS  C  ', ' A 338  PHE  H  ', -0.415, (281.196, 240.549, 313.513)), (' C1101  HIS  CE1', ' C1307  NAG  H5 ', -0.415, (270.293, 291.611, 185.788)), (' D 165  TRP  CH2', ' D 490  PRO  HD2', -0.414, (253.959, 251.669, 395.37)), (' D 468  ILE HG13', ' D 473  TRP  CD1', -0.414, (269.371, 260.907, 393.256)), (' A 437  ASN HD21', ' A 439  ASN  HB2', -0.414, (272.589, 242.69, 337.477)), (' C 126  VAL  O  ', ' C 172  SER  N  ', -0.414, (313.858, 322.95, 288.653)), (' B 620  VAL  HB ', ' B 621  PRO  HD3', -0.413, (317.291, 268.064, 260.882)), (' C 125  ASN  HB3', ' C 171  VAL HG13', -0.412, (314.866, 325.306, 290.985)), (' C 858  LEU  O  ', ' C 859  THR HG23', -0.411, (301.77, 277.972, 259.735)), (' D 446  ILE  O  ', ' D 449  THR  OG1', -0.411, (252.333, 259.304, 376.351)), (' A 790  LYS  NZ ', ' C 702  GLU  OE2', -0.411, (262.696, 302.572, 218.444)), (' B 384  PRO  HA ', ' B 387  LEU  HG ', -0.41, (300.772, 288.418, 296.418)), (' A1031  GLU  OE2', ' C1039  ARG  NE ', -0.41, (275.605, 275.153, 225.939)), (' C 922  LEU  H  ', ' C 922  LEU HD22', -0.409, (292.629, 288.426, 201.759)), (' C  77  LYS  HB3', ' C 258  TRP  CH2', -0.409, (300.595, 348.208, 280.039)), (' D 257  SER  HB2', ' D 610  TRP  CE2', -0.409, (242.925, 259.087, 399.032)), (' A  14  GLN  O  ', ' A 158  ARG  NH1', -0.408, (216.58, 279.283, 311.653)), (' A 295  PRO  HD3', ' A 633  TRP  CG ', -0.408, (244.644, 262.166, 268.777)), (' B 104  TRP  HB2', ' B 106  PHE  CE1', -0.408, (306.242, 242.376, 297.369)), (' A 431  GLY  HA2', ' A 515  PHE  CE1', -0.407, (279.224, 255.455, 316.116)), (' B 433  VAL HG23', ' B 512  VAL  HB ', -0.407, (293.244, 297.719, 302.382)), (' C  87  ASN  N  ', ' C  87  ASN HD22', -0.407, (289.037, 325.105, 280.421)), (' C 295  PRO  HD3', ' C 633  TRP  CD2', -0.407, (279.232, 314.588, 257.476)), (' D 213  ASP  N  ', ' D 213  ASP  OD1', -0.406, (274.166, 280.131, 361.094)), (' C 139  PRO  CB ', ' C 159  VAL  HA ', -0.406, (301.69, 336.821, 290.957)), (' A 156  GLU  CD ', ' A 158  ARG HH21', -0.406, (213.075, 280.62, 308.601)), (' B 444  LYS  O  ', ' B 498  GLN  HA ', -0.406, (289.247, 303.361, 325.65)), (' C 474  GLN  NE2', ' C 476  GLY  O  ', -0.405, (258.922, 254.597, 315.036)), (' D 132  VAL  O  ', ' D 142  LEU  N  ', -0.405, (256.605, 234.92, 390.187)), (' C 206  LYS  NZ ', ' C 224  GLU  OE2', -0.405, (309.977, 315.646, 269.28)), (' A 347  PHE  HB2', ' A 401  VAL HG23', -0.404, (282.731, 243.199, 331.528)), (' C1072  GLU  N  ', ' C1072  GLU  OE1', -0.404, (275.115, 295.094, 206.429)), (' D 176  LEU HD13', ' D 501  ALA  O  ', -0.404, (265.632, 247.455, 387.289)), (' B 357  ARG  HD3', ' B 396  TYR  CE2', -0.404, (302.453, 307.288, 294.926)), (' C 281  GLU  CD ', ' C 281  GLU  H  ', -0.404, (308.855, 304.78, 257.264)), (' A  53  ASP  HB3', ' A  55  PHE  CE2', -0.404, (245.351, 278.452, 280.299)), (' A  81  ASN  ND2', ' A  81  ASN  O  ', -0.402, (224.862, 267.744, 296.494)), (' A 404  GLY  HA2', ' A 407  VAL HG23', -0.402, (275.068, 250.912, 335.414)), (' D 504  PHE  O  ', ' D 508  ASN  N  ', -0.402, (267.16, 249.395, 380.569)), (' C 328  ARG  HG3', ' C 543  PHE  CE1', -0.402, (252.541, 309.352, 281.354)), (' B 299  THR  CG2', ' B 597  VAL HG21', -0.402, (303.223, 258.239, 259.582)), (' A  93  ALA  HA ', ' A 191  GLU  HA ', -0.401, (227.794, 279.723, 284.477)), (' D 435  GLU  HG2', ' D 540  HIS  CD2', -0.401, (237.286, 262.476, 365.01)), (' B  24  LEU  HB2', ' B  78  ARG  CZ ', -0.4, (327.895, 240.356, 289.518)), (' C 426  PRO  HB2', ' C 428  ASP  OD2', -0.4, (262.435, 279.588, 294.249)), (' C  70  VAL HG21', ' C  78  ARG  CZ ', -0.4, (297.29, 347.907, 269.512))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
