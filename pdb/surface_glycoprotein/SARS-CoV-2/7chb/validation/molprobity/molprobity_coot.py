# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('L', '  95 ', 'PRO', 0.0, (-45.532, -5.433999999999999, -1.4900000000000002))]
data['omega'] = [('H', ' 152 ', 'PRO', None, (-69.07599999999996, -7.81, 21.143)), ('H', ' 154 ', 'PRO', None, (-71.402, -11.153, 16.508)), ('L', '   8 ', 'PRO', None, (-65.177, -0.8719999999999998, -13.805)), ('L', '  95 ', 'PRO', None, (-44.40400000000001, -6.349999999999999, -1.409)), ('L', ' 141 ', 'PRO', None, (-81.558, 1.4309999999999998, -9.072))]
data['rota'] = [('H', '  27 ', 'ILE', 0.273733769830197, (-48.823, -28.715, 0.027000000000000003)), ('H', '  43 ', 'LYS', 0.20113724471925976, (-62.437, -3.095, 2.167)), ('H', '  53 ', 'SER', 0.20352548076630078, (-39.01299999999999, -21.655999999999995, 0.734)), ('H', '  63 ', 'VAL', 0.03777700319597286, (-46.632, -4.277, 9.984000000000002)), ('H', ' 101 ', 'GLU', 0.13259462367100935, (-45.441, -15.418999999999997, -11.665)), ('H', ' 155 ', 'VAL', 0.2553283510460756, (-76.262, -10.095, 16.523)), ('L', '  33 ', 'LEU', 0.09305490212951613, (-51.232, -9.972, -13.386000000000001)), ('L', ' 185 ', 'ASP', 0.20933002487300206, (-79.65299999999999, 18.708, 21.002000000000002)), ('L', ' 202 ', 'SER', 0.08726166759088279, (-88.781, 12.507999999999997, -10.652)), ('R', ' 333 ', 'THR', 0.284212384665157, (2.207, -5.062999999999999, -19.224)), ('R', ' 354 ', 'ASN', 0.142460405466388, (-20.879000000000005, -15.649, -16.144000000000002)), ('R', ' 371 ', 'SER', 0.19063821372625922, (-17.365, 6.957999999999998, -17.387)), ('R', ' 383 ', 'SER', 0.07708973329496333, (-12.623, 3.297, -2.766)), ('R', ' 393 ', 'THR', 0.03958161008618472, (-3.3849999999999993, -11.933000000000002, -7.374)), ('R', ' 483 ', 'VAL', 0.061941263842752156, (-43.036, -33.481999999999985, -15.577000000000002))]
data['cbeta'] = []
data['probe'] = [(' R 493  GLN  NE2', ' R 701  HOH  O  ', -0.953, (-42.992, -17.151, -15.648)), (' L  42  LYS  NZ ', ' L 302  HOH  O  ', -0.721, (-71.861, -20.107, 1.317)), (' H  97  ARG  NH1', ' R 487  ASN  OD1', -0.709, (-48.854, -26.735, -4.885)), (' H 172  PRO  O  ', ' H 301  HOH  O  ', -0.66, (-76.608, -2.235, 9.699)), (' H 131  PRO  HG3', ' H 143  LEU  HB3', -0.622, (-94.259, -0.573, 12.332)), (' R 444  LYS  HG2', ' R 448  ASN  HB2', -0.59, (-36.249, -9.013, -26.089)), (' R 376  THR HG23', ' R 378  LYS  HG2', -0.56, (-23.916, 1.056, -6.499)), (' H  63  VAL HG13', ' H  67  PHE  HB2', -0.538, (-46.518, -7.694, 10.33)), (' R 384  PRO  HA ', ' R 387  LEU  HG ', -0.537, (-10.76, 1.588, -6.272)), (' H  22  CYS  HB3', ' H  78  LEU  HB3', -0.518, (-49.701, -21.448, 7.733)), (' H 101  GLU  HG3', ' L  92  ASN  HB2', -0.517, (-43.704, -12.143, -11.394)), (' H  82  MET  HE1', ' H 114  VAL HG21', -0.509, (-54.908, -11.945, 14.003)), (' H  12  ILE HG21', ' H  85  LEU HD13', -0.509, (-55.035, -8.53, 18.054)), (' H 101  GLU  CD ', ' H 101  GLU  H  ', -0.499, (-43.958, -15.233, -10.238)), (' H  71  ARG  NH1', ' H 303  HOH  O  ', -0.487, (-41.247, -21.869, 3.513)), (' H  32  ASN  OD1', ' H  97  ARG  HD2', -0.484, (-46.211, -24.148, -3.225)), (' R 393  THR  HA ', ' R 522  ALA  HA ', -0.483, (-1.553, -11.01, -7.605)), (' H  97  ARG  NH2', ' H 106  ASP  OD2', -0.47, (-50.818, -24.547, -6.329)), (' H  33  TYR  HB2', ' H  98  ASP  O  ', -0.457, (-45.191, -19.005, -3.412)), (' H 106  ASP  O  ', ' H 302  HOH  O  ', -0.453, (-56.723, -21.338, -5.722)), (' L  30  SER  OG ', ' L  31  SER  N  ', -0.453, (-45.85, -8.754, -18.177)), (' H 134  LYS  HB2', ' H 134  LYS  HE2', -0.448, (-98.598, 10.451, 8.997)), (' L   2  ILE HD13', ' L  27  GLN  HB2', -0.439, (-45.692, 0.556, -12.145)), (' R 394  ASN  HB2', ' R 516  GLU  OE2', -0.438, (-8.026, -14.94, -7.578)), (' L   6  GLN  HG3', ' L  88  CYS  SG ', -0.435, (-58.334, -4.227, -10.903)), (' L 113  PRO  HB3', ' L 139  PHE  HB3', -0.431, (-85.572, 2.592, -3.089)), (' L 125  LEU  O  ', ' L 183  LYS  HD3', -0.425, (-83.713, 11.64, 26.858)), (' L 103  LYS  NZ ', ' L 105  GLU  OE2', -0.424, (-73.759, -5.216, -5.119)), (' H  29  VAL HG13', ' H  34  MET  HG3', -0.422, (-46.004, -22.466, 4.554)), (' H  47  TRP  CZ3', ' L  95  PRO  HD3', -0.415, (-44.649, -6.92, 1.12)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.414, (-63.57, -14.752, -10.116)), (' R 339  GLY  O  ', ' R 343  ASN  HB2', -0.411, (-16.745, -4.609, -24.03)), (' R 333  THR  O  ', ' R 333  THR  OG1', -0.403, (1.924, -3.173, -20.091))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
