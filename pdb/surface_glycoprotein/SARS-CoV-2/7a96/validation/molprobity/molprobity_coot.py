# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 337 ', 'PRO', 0.04287795000299942, (321.08, 300.8200000000001, 293.876))]
data['omega'] = [('A', ' 527 ', 'PRO', None, (276.60999999999996, 246.64000000000007, 305.066)), ('B', ' 527 ', 'PRO', None, (313.493, 294.2140000000001, 291.087)), ('D', ' 146 ', 'PRO', None, (262.3969999999999, 239.76, 379.726))]
data['rota'] = [('A', ' 206 ', 'LYS', 0.0, (228.24699999999996, 284.06900000000013, 286.094)), ('A', ' 212 ', 'LEU', 0.2355755437351349, (214.95899999999997, 273.044, 280.882)), ('A', ' 331 ', 'ASN', 0.0747626069504142, (278.3749999999999, 239.65300000000005, 296.335)), ('A', ' 731 ', 'MET', 0.20954236755676164, (260.3659999999999, 284.48000000000013, 247.075)), ('A', ' 776 ', 'LYS', 0.021928861346374673, (268.9369999999999, 288.02100000000013, 239.012)), ('A', ' 895 ', 'GLN', 0.0, (256.39999999999986, 289.2200000000001, 209.285)), ('A', ' 935 ', 'GLN', 0.26231598679525164, (240.47900000000007, 278.25300000000004, 232.096)), ('A', '1104 ', 'VAL', 0.24156164146027845, (253.15000000000006, 253.609, 201.232)), ('A', '1138 ', 'TYR', 0.21976932527939713, (253.89700000000005, 250.71600000000007, 188.898)), ('B', '  23 ', 'GLN', 0.01279255506583814, (328.5009999999999, 241.00500000000008, 289.103)), ('B', ' 362 ', 'VAL', 0.15089012647279154, (314.2859999999999, 301.4450000000001, 289.147)), ('B', ' 468 ', 'ILE', 0.15988170836254972, (309.471, 318.1080000000001, 315.613)), ('B', ' 557 ', 'LYS', 0.03416175596904193, (312.755, 298.9740000000001, 257.813)), ('B', ' 581 ', 'THR', 0.12185927548352858, (321.059, 297.3120000000001, 270.422)), ('B', ' 690 ', 'GLN', 0.26440866398911855, (310.433, 247.45400000000006, 243.227)), ('B', ' 731 ', 'MET', 0.26887809386457373, (269.39, 256.88800000000003, 250.555)), ('B', ' 895 ', 'GLN', 0.0, (253.08700000000005, 247.398, 218.287)), ('B', '1039 ', 'ARG', 0.005418176816899669, (273.275, 265.914, 221.945)), ('C', '  14 ', 'GLN', 0.22423654284922484, (299.006, 337.109, 295.047)), ('C', '  15 ', 'CYS', 0.16268936263749784, (300.325, 338.834, 291.929)), ('C', ' 187 ', 'LYS', 0.022203697582386384, (307.016, 332.156, 261.268)), ('C', ' 212 ', 'LEU', 0.19403464971304482, (301.571, 332.92800000000005, 256.033)), ('C', ' 231 ', 'ILE', 0.11689496375300265, (300.995, 312.401, 288.508)), ('C', ' 738 ', 'CYS', 0.21258162764680905, (292.126, 272.1680000000001, 264.881)), ('C', '1086 ', 'LYS', 0.09016484303685039, (246.085, 269.5350000000001, 192.266)), ('D', ' 213 ', 'ASP', 0.0, (281.80599999999987, 280.495, 359.577)), ('D', ' 291 ', 'ILE', 0.09710702579536572, (241.43500000000006, 250.7, 366.978))]
data['cbeta'] = [('D', ' 602 ', 'SER', ' ', 0.26552925940224603, (241.47099999999995, 270.202, 394.753))]
data['probe'] = [(' B 740  MET  HA ', ' B 740  MET  HE3', -0.782, (265.611, 259.732, 275.43)), (' B 335  LEU  HB2', ' B 362  VAL  H  ', -0.774, (316.431, 302.5, 287.907)), (' D 423  LEU  H  ', ' D 423  LEU HD23', -0.77, (244.198, 248.128, 353.835)), (' B 335  LEU  HB3', ' B 361  CYS  HB2', -0.693, (317.082, 304.206, 288.18)), (' B1039  ARG  H  ', ' B1039  ARG HH11', -0.684, (270.578, 264.942, 222.462)), (' D 285  PHE  HB2', ' D 437  ASN HD21', -0.67, (237.935, 258.449, 374.022)), (' B 362  VAL  HA ', ' B 524  VAL HG13', -0.642, (312.652, 301.574, 289.134)), (' A1047  TYR  HB2', ' A1067  TYR  HB3', -0.63, (253.16, 265.836, 219.035)), (' B1047  TYR  HB2', ' B1067  TYR  HB3', -0.629, (276.578, 256.322, 217.021)), (' C 896  ILE HG23', ' C 901  GLN HE21', -0.624, (288.02, 268.479, 208.58)), (' D 599  ASN  C  ', ' D 601  ASN  H  ', -0.622, (241.245, 268.903, 388.549)), (' C 593  GLY  HA2', ' C 614  ASP  HB2', -0.613, (261.365, 303.283, 258.492)), (' C  19  THR HG22', ' C  20  THR HG23', -0.608, (293.053, 351.178, 283.124)), (' A 825  LYS  HB3', ' A 944  ALA  HA ', -0.607, (244.884, 278.899, 243.799)), (' B 701  ALA  HB3', ' C 787  GLN HE22', -0.601, (298.157, 258.686, 222.296)), (' B 335  LEU  CB ', ' B 362  VAL  H  ', -0.596, (316.475, 302.751, 287.918)), (' A 357  ARG HH22', ' B 167  THR  HA ', -0.594, (297.561, 246.669, 308.429)), (' C1076  THR  HB ', ' C1097  SER  HB3', -0.592, (253.548, 287.34, 195.998)), (' D 557  MET  HG3', ' D 569  ALA  HB1', -0.592, (269.798, 269.785, 356.541)), (' B1054  GLN  HB2', ' B1061  VAL  HB ', -0.588, (270.824, 249.462, 235.798)), (' C 523  THR HG23', ' C 524  VAL HG23', -0.587, (250.633, 297.039, 297.567)), (' B 396  TYR  HB2', ' B 514  SER  HB3', -0.586, (307.521, 304.139, 301.558)), (' C 906  PHE  HB3', ' C 911  VAL  HB ', -0.582, (273.215, 276.885, 205.856)), (' C 212  LEU HD21', ' C 217  PRO  HG3', -0.58, (299.116, 328.062, 258.04)), (' C 393  THR HG21', ' C 520  ALA  HB3', -0.58, (250.604, 292.117, 292.818)), (' C1047  TYR  HB2', ' C1067  TYR  HB3', -0.574, (272.888, 280.707, 212.65)), (' C  41  LYS  HE3', ' C 225  PRO  HG3', -0.573, (303.608, 308.788, 271.615)), (' A  28  TYR  HB3', ' A  61  ASN HD21', -0.57, (227.45, 258.553, 286.125)), (' B  19  THR HG22', ' B  20  THR HG23', -0.57, (334.208, 233.959, 297.269)), (' A 129  LYS  HG2', ' A 169  GLU  HG3', -0.567, (233.04, 289.028, 308.708)), (' B 822  LEU HD21', ' B 938  LEU HD13', -0.567, (276.609, 245.494, 236.528)), (' D  82  MET  N  ', ' D  82  MET  SD ', -0.566, (301.312, 263.098, 361.286)), (' B1076  THR  HB ', ' B1097  SER  HB3', -0.566, (290.129, 260.774, 194.621)), (' D 389  PRO  HD2', ' D 392  LEU HD12', -0.565, (282.485, 262.946, 350.078)), (' B 379  CYS  HA ', ' B 432  CYS  HA ', -0.562, (308.905, 293.316, 305.768)), (' C 101  ILE HG13', ' C 242  LEU  HG ', -0.561, (299.704, 334.6, 274.986)), (' D  47  SER  O  ', ' D  51  ASN  ND2', -0.56, (275.569, 239.764, 362.919)), (' B 439  ASN  O  ', ' B 443  SER  OG ', -0.559, (329.89, 302.948, 316.303)), (' D 189  GLU  HG2', ' D 192  ARG HH11', -0.559, (292.445, 264.054, 384.179)), (' D 425  SER  C  ', ' D 427  ASP  H  ', -0.558, (235.275, 252.515, 357.512)), (' B 103  GLY  HA3', ' B 120  VAL  HA ', -0.558, (307.739, 235.904, 296.504)), (' A 457  ARG  NH2', ' A 460  ASN  O  ', -0.558, (298.919, 262.002, 331.048)), (' C 379  CYS  HA ', ' C 432  CYS  HA ', -0.557, (267.523, 290.359, 300.234)), (' A 379  CYS  HA ', ' A 432  CYS  HA ', -0.556, (278.427, 256.016, 319.56)), (' D 201  ASP  OD1', ' D 204  ARG  NH2', -0.555, (279.815, 270.847, 378.293)), (' B 126  VAL  HB ', ' B 172  SER  HB3', -0.555, (299.765, 231.971, 297.222)), (' A 126  VAL  HB ', ' A 172  SER  HB3', -0.555, (228.076, 289.686, 299.925)), (' D 457  GLU  OE1', ' D 460  ARG  NH2', -0.55, (273.167, 263.214, 379.401)), (' A 907  ASN HD21', ' A 913  GLN  HB3', -0.549, (255.149, 271.894, 206.831)), (' B  81  ASN  ND2', ' B 240  THR  O  ', -0.547, (317.488, 239.972, 293.09)), (' A 457  ARG  NH1', ' A 467  ASP  OD2', -0.546, (300.928, 258.194, 331.955)), (' A 366  SER  O  ', ' A 370  ASN  ND2', -0.543, (268.939, 244.839, 314.601)), (' B 332  ILE  O  ', ' B 332  ILE HG23', -0.541, (323.412, 297.45, 279.91)), (' D 247  LYS  HG2', ' D 282  THR HG22', -0.539, (244.935, 256.218, 384.715)), (' B 134  GLN  HB3', ' B 161  SER  HB3', -0.539, (315.787, 242.94, 309.696)), (' D 476  LYS  HE3', ' D 480  MET  HE2', -0.536, (270.707, 269.583, 392.147)), (' B 716  THR HG21', ' B1073  LYS  HE2', -0.535, (287.375, 251.259, 202.941)), (' D 246  ALA  HA ', ' D 249  MET  HE2', -0.533, (243.564, 261.613, 391.575)), (' A1035  GLY  HA3', ' C1040  VAL HG21', -0.532, (264.362, 277.482, 218.802)), (' A  56  LEU HD12', ' A  57  PRO  HD2', -0.531, (235.75, 268.332, 284.232)), (' B 725  GLU  OE1', ' B1028  LYS  NZ ', -0.529, (274.541, 258.658, 231.401)), (' B 106  PHE  HB2', ' B 117  LEU  HB3', -0.529, (305.284, 245.573, 297.161)), (' A 571  ASP  OD2', ' B 964  LYS  NZ ', -0.528, (283.942, 254.118, 271.664)), (' A1040  VAL HG21', ' B1035  GLY  HA3', -0.527, (262.575, 260.722, 222.169)), (' B 957  GLN  OE1', ' C 765  ARG  NH2', -0.525, (283.325, 261.392, 260.782)), (' A 103  GLY  HA3', ' A 120  VAL  HA ', -0.523, (226.63, 281.409, 302.178)), (' D 145  GLU  HG2', ' D 149  ASN  HB2', -0.523, (261.549, 244.202, 380.84)), (' B  56  LEU HD12', ' B  57  PRO  HD2', -0.521, (307.88, 249.342, 276.138)), (' D 542  CYS  SG ', ' D 543  ASP  N  ', -0.52, (249.5, 266.114, 356.836)), (' A 617  CYS  H  ', ' A 649  CYS  HB2', -0.519, (250.809, 245.565, 265.985)), (' C  56  LEU HD12', ' C  57  PRO  HD2', -0.518, (287.311, 318.546, 267.369)), (' A 119  ILE HG23', ' A 128  ILE HG12', -0.518, (231.296, 285.263, 300.952)), (' B  24  LEU  O  ', ' B  78  ARG  NH1', -0.516, (325.939, 241.759, 285.034)), (' C 103  GLY  HA3', ' C 120  VAL  HA ', -0.514, (304.362, 328.261, 281.141)), (' C  89  GLY  HA2', ' C 195  LYS  HG2', -0.513, (292.499, 315.732, 275.428)), (' A 353  TRP  O  ', ' A 466  ARG  NH1', -0.513, (296.156, 248.298, 325.516)), (' A 560  LEU  O  ', ' A 577  ARG  NH2', -0.511, (283.613, 236.264, 281.624)), (' B 376  THR  HB ', ' B 435  ALA  HB3', -0.508, (316.445, 294.562, 311.462)), (' C 327  VAL  H  ', ' C 531  THR  HB ', -0.508, (254.905, 310.628, 285.123)), (' B  39  PRO  HB3', ' B  55  PHE  HZ ', -0.507, (295.721, 248.787, 276.887)), (' A1138  TYR  CG ', ' A1138  TYR  O  ', -0.505, (253.565, 252.701, 189.03)), (' A1090  PRO  O  ', ' B 913  GLN  NE2', -0.505, (264.278, 254.091, 204.109)), (' A 119  ILE HG12', ' A 128  ILE HG23', -0.504, (233.56, 284.52, 302.061)), (' B1090  PRO  O  ', ' C 913  GLN  NE2', -0.504, (275.416, 268.906, 198.205)), (' B 454  ARG  NH2', ' B 469  SER  O  ', -0.504, (308.242, 318.065, 320.058)), (' C  98  SER  OG ', ' C 182  LYS  O  ', -0.5, (307.15, 338.817, 265.602)), (' B1037  SER  OG ', ' B1039  ARG  NH1', -0.5, (270.311, 263.923, 223.348)), (' B 555  SER  OG ', ' B 557  LYS  NZ ', -0.498, (311.246, 294.729, 258.892)), (' D 152  MET  O  ', ' D 161  ARG  NH2', -0.498, (254.852, 249.614, 387.365)), (' D 116  LEU HD11', ' D 187  LYS  HE2', -0.498, (285.385, 255.264, 380.517)), (' A 598  ILE HD11', ' A 611  LEU HD22', -0.496, (248.79, 255.304, 259.335)), (' D  22  GLU  O  ', ' D  26  LYS  NZ ', -0.496, (293.662, 269.056, 347.842)), (' C 119  ILE HG23', ' C 128  ILE HG12', -0.495, (306.952, 322.323, 282.395)), (' A1041  ASP  HB2', ' B1030  SER  HB3', -0.494, (260.858, 262.707, 228.463)), (' C  24  LEU  O  ', ' C  78  ARG  NH1', -0.494, (288.547, 340.443, 271.817)), (' D 599  ASN  C  ', ' D 601  ASN  N  ', -0.493, (241.186, 269.622, 388.771)), (' B 108  THR  HA ', ' B 236  THR  HB ', -0.49, (310.169, 253.562, 297.386)), (' A  68  ILE HG12', ' A  70  VAL  H  ', -0.487, (210.56, 266.508, 296.182)), (' D  19  SER  N  ', ' D  23  GLU  OE2', -0.487, (302.105, 270.206, 346.264)), (' D 529  LEU  HG ', ' D 550  ALA  HB1', -0.487, (257.435, 267.089, 353.19)), (' B 129  LYS  HG2', ' B 169  GLU  HG3', -0.487, (300.484, 237.956, 305.798)), (' C 721  SER  OG ', ' C1066  THR  OG1', -0.487, (276.724, 286.467, 216.504)), (' D 397  ASN HD22', ' D 399  GLY  H  ', -0.485, (271.38, 264.307, 365.275)), (' D 294  THR  HA ', ' D 297  MET  HE2', -0.485, (247.399, 243.791, 361.946)), (' D 320  LEU HD13', ' D 380  GLN  HG2', -0.483, (263.368, 259.234, 351.177)), (' A 444  LYS  NZ ', ' A 447  GLY  O  ', -0.482, (288.156, 238.934, 344.792)), (' B 454  ARG HH22', ' B 470  THR  HA ', -0.481, (309.001, 318.462, 321.2)), (' C 128  ILE  HB ', ' C 170  TYR  HB3', -0.481, (309.562, 319.704, 285.237)), (' B 907  ASN  HB2', ' B 913  GLN  HB3', -0.48, (267.596, 254.194, 208.07)), (' A 392  PHE  N  ', ' A 524  VAL  O  ', -0.479, (283.278, 251.545, 305.515)), (' A 559  PHE  HB2', ' A 577  ARG HH21', -0.479, (282.177, 236.41, 280.713)), (' B 246  ARG  NH1', ' B 252  GLY  O  ', -0.478, (324.821, 226.535, 303.359)), (' B 418  ILE HG23', ' B 422  ASN HD22', -0.478, (311.095, 306.788, 319.463)), (' A 985  ASP  N  ', ' A 985  ASP  OD1', -0.477, (272.031, 294.598, 290.143)), (' B 853  GLN  HB3', ' B 858  LEU HD12', -0.477, (271.968, 255.585, 266.605)), (' A  53  ASP  OD1', ' A  54  LEU  N  ', -0.477, (244.383, 275.412, 285.72)), (' B 331  ASN  C  ', ' B 331  ASN HD22', -0.477, (320.682, 297.739, 277.569)), (' A 401  VAL HG22', ' A 509  ARG  HG2', -0.474, (284.695, 243.378, 331.047)), (' A  37  TYR  HB3', ' A 223  LEU  HB2', -0.473, (235.561, 280.618, 284.009)), (' C 424  LYS  NZ ', ' C 425  LEU  O  ', -0.472, (264.915, 275.927, 299.718)), (' A 901  GLN HE22', ' A1050  MET  HE1', -0.472, (252.684, 278.843, 216.04)), (' C1087  ALA  HB3', ' C1123  SER  HB3', -0.472, (247.229, 269.297, 197.141)), (' A 935  GLN  NE2', ' A 936  ASP  OD1', -0.471, (236.745, 278.479, 231.182)), (' B 976  VAL HG12', ' B 978  ASN  H  ', -0.471, (273.479, 259.02, 284.272)), (' C  94  SER  HA ', ' C 265  TYR  HA ', -0.47, (297.969, 330.138, 268.821)), (' C 129  LYS  HG2', ' C 169  GLU  HG3', -0.469, (309.831, 321.827, 290.465)), (' B 204  TYR  HA ', ' B 225  PRO  HA ', -0.469, (296.978, 240.002, 285.35)), (' D 336  PRO  HB2', ' D 340  GLN  HB2', -0.469, (266.002, 230.813, 359.95)), (' B 995  ARG  NH1', ' C 994  ASP  OD2', -0.469, (282.402, 274.934, 279.698)), (' B  28  TYR  HB3', ' B  61  ASN HD21', -0.466, (320.628, 245.89, 273.561)), (' B 559  PHE  HB2', ' B 577  ARG HH21', -0.465, (310.628, 301.696, 266.338)), (' C 106  PHE  HB2', ' C 117  LEU  HB3', -0.461, (298.32, 321.835, 285.354)), (' A 983  ARG  HG3', ' A 984  LEU  HG ', -0.46, (266.77, 291.802, 288.469)), (' B  57  PRO  HG3', ' B 271  GLN HE21', -0.459, (308.458, 252.788, 274.576)), (' A 909  ILE HG13', ' A 911  VAL HG23', -0.458, (255.545, 265.181, 212.986)), (' C 980  ILE HG23', ' C 984  LEU HD12', -0.457, (292.666, 283.696, 283.172)), (' D 207  TYR  O  ', ' D 566  TRP  NE1', -0.457, (275.9, 271.571, 365.996)), (' B 105  ILE HD11', ' B 239  GLN  HB3', -0.455, (314.274, 243.898, 296.67)), (' C 761  THR  O  ', ' C 765  ARG  NE ', -0.454, (286.34, 263.222, 260.394)), (' C1071  GLN  NE2', ' C1071  GLN  O  ', -0.454, (267.467, 291.43, 203.097)), (' D 296  ALA  HB1', ' D 423  LEU  HB2', -0.454, (242.609, 245.838, 357.042)), (' A 426  PRO  HG3', ' A 463  PRO  HB3', -0.454, (291.091, 260.667, 321.145)), (' B 329  PHE  HB3', ' B 528  LYS  HD3', -0.453, (313.412, 294.45, 282.112)), (' C 122  ASN  ND2', ' C 154  GLU  OE1', -0.452, (311.218, 333.897, 282.856)), (' A 382  VAL HG23', ' A 430  THR  HB ', -0.449, (281.384, 260.028, 313.731)), (' D 177  ARG  HB3', ' D 178  PRO  HD3', -0.449, (280.246, 249.564, 394.763)), (' A 935  GLN  HB3', ' A 935  GLN HE21', -0.448, (238.396, 278.641, 230.456)), (' C 745  ASP  O  ', ' C 978  ASN  ND2', -0.447, (301.714, 279.255, 276.06)), (' C 550  GLY  HA2', ' C 589  PRO  HA ', -0.445, (257.269, 303.657, 271.042)), (' B 981  LEU HD21', ' B 993  ILE HD11', -0.445, (270.813, 266.502, 287.45)), (' B1010  GLN HE22', ' C 762  GLN HE21', -0.445, (279.995, 266.608, 259.564)), (' A 442  ASP  N  ', ' A 442  ASP  OD1', -0.444, (282.542, 238.931, 334.863)), (' D 470  LYS  HD2', ' D 470  LYS  N  ', -0.444, (283.271, 262.043, 394.924)), (' B 972  ALA  HB2', ' B 995  ARG  HD2', -0.443, (280.298, 270.119, 281.537)), (' B 815  ARG  HB3', ' B 819  GLU  HB2', -0.442, (267.266, 242.36, 238.469)), (' C 353  TRP  HZ3', ' C 355  ARG  HB2', -0.442, (254.218, 283.975, 307.159)), (' B 882  ILE HG13', ' B 883  THR HG23', -0.442, (259.319, 244.352, 223.737)), (' C 119  ILE HG12', ' C 128  ILE HG23', -0.441, (305.302, 321.098, 284.202)), (' A 105  ILE HD11', ' A 239  GLN  HB3', -0.439, (230.006, 272.315, 305.303)), (' A1116  THR  OG1', ' A1119  ASN  ND2', -0.437, (256.44, 257.359, 195.443)), (' C 353  TRP  HH2', ' C 355  ARG HH21', -0.435, (255.227, 281.758, 304.906)), (' A1052  PHE  HB2', ' A1063  LEU  HB2', -0.435, (250.784, 278.833, 226.918)), (' B 457  ARG HH22', ' B 461  LEU  HG ', -0.435, (303.184, 311.756, 318.555)), (' B  48  LEU  H  ', ' B  48  LEU HD23', -0.435, (287.157, 247.372, 265.98)), (' C 105  ILE HD11', ' C 239  GLN  HB3', -0.434, (295.314, 330.38, 284.216)), (' C 887  THR HG21', ' C 894  LEU HD12', -0.433, (284.901, 260.976, 211.027)), (' A 721  SER  OG ', ' A1066  THR  OG1', -0.433, (248.544, 267.339, 224.67)), (' C  97  LYS  HB3', ' C 186  PHE  HA ', -0.432, (304.209, 334.744, 262.803)), (' C  81  ASN  ND2', ' C 138  ASP  OD1', -0.432, (295.286, 336.769, 282.105)), (' A 330  PRO  HB3', ' A 528  LYS  HB2', -0.431, (275.491, 244.011, 299.14)), (' C  21  ARG  NH1', ' C 138  ASP  OD2', -0.431, (294.308, 340.03, 282.604)), (' D 425  SER  C  ', ' D 427  ASP  N  ', -0.431, (235.501, 252.963, 357.532)), (' C  91  TYR  N  ', ' C 268  GLY  O  ', -0.429, (291.788, 321.558, 272.321)), (' B  24  LEU  H  ', ' B  78  ARG  HD3', -0.429, (327.028, 240.169, 287.058)), (' C  81  ASN  N  ', ' C  81  ASN  OD1', -0.428, (293.208, 337.335, 279.103)), (' D 414  THR HG22', ' D 416  LYS  H  ', -0.428, (244.278, 260.418, 360.006)), (' A1074  ASN  ND2', ' B 895  GLN  OE1', -0.427, (248.478, 247.172, 215.843)), (' A  81  ASN  N  ', ' A  81  ASN  OD1', -0.427, (222.516, 265.328, 303.847)), (' A  57  PRO  HG3', ' A 271  GLN HE21', -0.427, (238.815, 265.607, 283.029)), (' B 721  SER  OG ', ' B1066  THR  OG1', -0.426, (280.065, 251.621, 222.518)), (' B 365  TYR  H  ', ' B 527  PRO  HG3', -0.425, (315.59, 294.447, 293.127)), (' C 426  PRO  HG2', ' C 429  PHE  HB2', -0.425, (263.379, 281.748, 297.644)), (' D 129  THR  HA ', ' D 143  LEU HD22', -0.423, (271.035, 238.452, 383.759)), (' B1041  ASP  HB2', ' C1030  SER  HB3', -0.423, (280.015, 265.783, 225.407)), (' B 776  LYS  NZ ', ' B 780  GLU  OE2', -0.423, (258.875, 265.208, 241.437)), (' A 142  GLY  HA3', ' A 156  GLU  HB2', -0.422, (215.243, 278.753, 309.928)), (' A 394  ASN HD22', ' A 518  LEU HD23', -0.422, (292.434, 254.078, 308.986)), (' A  18  LEU  HB2', ' A  21  ARG  HD3', -0.422, (218.089, 266.093, 310.315)), (' B 246  ARG  HD3', ' B 252  GLY  HA2', -0.421, (324.915, 224.899, 301.337)), (' A 976  VAL HG12', ' A 978  ASN  H  ', -0.421, (262.82, 294.453, 279.156)), (' B1006  THR HG23', ' C1005  GLN HE22', -0.42, (278.505, 271.31, 261.74)), (' B 335  LEU  HB2', ' B 362  VAL  N  ', -0.419, (315.805, 302.291, 288.219)), (' A 736  VAL  H  ', ' A 767  LEU HD13', -0.418, (268.22, 290.211, 258.028)), (' B 374  PHE  HD2', ' B 436  TRP  HB3', -0.417, (321.233, 295.288, 307.459)), (' A 111  ASP  OD2', ' A 113  LYS  NZ ', -0.416, (238.618, 268.153, 314.961)), (' D 144  LEU  HG ', ' D 145  GLU  HG3', -0.415, (264.902, 244.711, 381.594)), (' A  91  TYR  HB2', ' A 270  LEU HD21', -0.415, (234.946, 272.393, 287.33)), (' A1138  TYR  CD2', ' A1138  TYR  O  ', -0.414, (253.602, 253.31, 189.57)), (' B 391  CYS  HA ', ' B 525  CYS  HA ', -0.414, (307.842, 296.85, 289.5)), (' D 450  LEU  HB3', ' D 451  PRO  HD3', -0.413, (259.539, 265.782, 378.749)), (' C 821  LEU HD21', ' C 939  SER  HB3', -0.412, (293.156, 292.809, 224.921)), (' A 895  GLN  HB3', ' A 895  GLN HE21', -0.411, (256.36, 291.85, 209.397)), (' D 481  LYS  O  ', ' D 486  GLY  N  ', -0.411, (259.975, 266.0, 389.971)), (' B 328  ARG  HD3', ' B 532  ASN  O  ', -0.41, (319.641, 287.92, 275.686)), (' A 189  LEU  HB2', ' A 210  ILE HD13', -0.41, (220.89, 276.887, 283.884)), (' B 131  CYS  HA ', ' B 166  CYS  HA ', -0.41, (302.771, 245.24, 308.171)), (' A 331  ASN  HA ', ' A 331  ASN HD22', -0.409, (277.453, 238.632, 295.254)), (' A 108  THR  HA ', ' A 236  THR  HB ', -0.409, (239.633, 269.837, 305.618)), (' D 539  LEU  HB2', ' D 587  TYR  HD1', -0.409, (250.907, 267.535, 365.073)), (' D 158  TYR  HB2', ' D 252  TYR  HE1', -0.409, (249.64, 249.535, 396.429)), (' B 780  GLU  O  ', ' B 784  GLN  NE2', -0.408, (261.369, 260.02, 235.613)), (' C 882  ILE HG13', ' C 883  THR HG23', -0.408, (293.476, 271.261, 212.636)), (' A 986  PRO  N  ', ' A 987  PRO  HD2', -0.407, (274.556, 296.81, 288.037)), (' A 329  PHE  N  ', ' A 330  PRO  HD2', -0.407, (273.356, 244.179, 295.078)), (' C 108  THR  HA ', ' C 236  THR  HB ', -0.407, (289.165, 322.976, 288.442)), (' A1048  HIS  HD2', ' A1064  HIS  HB3', -0.407, (254.438, 272.417, 225.195)), (' D 293  VAL HG12', ' D 424  LEU HD13', -0.406, (242.072, 249.205, 361.196)), (' D 394  ASN  OD1', ' D 401  HIS  NE2', -0.405, (273.547, 259.848, 360.361)), (' C1052  PHE  HB2', ' C1063  LEU  HB2', -0.405, (286.483, 280.364, 220.415)), (' A1106  GLN  HG3', ' A1108  ASN  H  ', -0.405, (253.566, 259.032, 208.953)), (' C 387  LEU  HB3', ' C 392  PHE  HZ ', -0.404, (262.535, 297.862, 297.17)), (' A 533  LEU HD21', ' A 535  LYS  HE3', -0.404, (268.297, 235.544, 285.939)), (' A  86  PHE  N  ', ' A 236  THR  O  ', -0.404, (238.483, 268.388, 300.042)), (' C 983  ARG  HG3', ' C 984  LEU  HG ', -0.404, (295.013, 285.614, 285.188)), (' A  39  PRO  HG3', ' A  51  THR HG21', -0.402, (244.577, 279.532, 280.273)), (' A 278  LYS  NZ ', ' A 286  THR  OG1', -0.401, (235.613, 281.691, 268.687)), (' A 391  CYS  HA ', ' A 525  CYS  HA ', -0.401, (281.476, 250.767, 304.26)), (' B 609  ALA  HB1', ' B 650  LEU HD11', -0.4, (307.586, 259.43, 250.032))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
