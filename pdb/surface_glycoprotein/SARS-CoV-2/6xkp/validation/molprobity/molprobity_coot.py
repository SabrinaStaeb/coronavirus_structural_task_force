# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 102 ', 'PRO', None, (-57.931, -22.99, -23.42)), ('H', ' 147 ', 'PRO', None, (-63.09199999999999, -49.028, -10.018)), ('H', ' 149 ', 'PRO', None, (-61.66599999999998, -45.443, -14.637000000000002)), ('L', ' 142 ', 'PRO', None, (-77.119, -47.761, -39.022)), ('M', ' 102 ', 'PRO', None, (-60.006, -0.987, 20.041)), ('M', ' 147 ', 'PRO', None, (-59.353, 25.624, 6.526)), ('M', ' 149 ', 'PRO', None, (-58.981999999999985, 21.991000000000007, 11.294)), ('N', ' 142 ', 'PRO', None, (-78.796, 25.721999999999998, 32.525))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' B 391  CYS  SG ', ' B 525  CYS  SG ', -1.269, (-38.675, -45.934, 3.303)), (' M  47  TRP  HZ2', ' M  50  TYR  HD1', -0.985, (-67.343, -2.584, 6.78)), (' H  47  TRP  HZ2', ' H  50  TYR  HD1', -0.904, (-67.275, -20.069, -11.943)), (' M  47  TRP  HZ2', ' M  50  TYR  CD1', -0.877, (-67.251, -3.505, 6.629)), (' H  47  TRP  HZ2', ' H  50  TYR  CD1', -0.826, (-67.024, -19.383, -12.576)), (' M  47  TRP  CZ2', ' M  50  TYR  HD1', -0.745, (-67.624, -3.045, 6.535)), (' H  47  TRP  CZ2', ' H  50  TYR  HD1', -0.71, (-67.101, -20.093, -12.443)), (' L 120  PRO  HA ', ' L 133  LEU HD23', -0.696, (-63.611, -67.937, -27.763)), (' H  56  THR HG23', ' H 100C ARG  HD2', -0.691, (-64.706, -10.745, -7.248)), (' B 350  VAL HG11', ' B 402  ILE HG23', -0.69, (-60.733, -29.352, 17.537)), (' M  47  TRP  CZ2', ' M  50  TYR  CD1', -0.669, (-67.81, -3.143, 6.779)), (' H  47  TRP  CZ2', ' H  50  TYR  CD1', -0.664, (-67.393, -19.854, -12.661)), (' A 381  GLY  HA3', ' A 430  THR HG23', -0.661, (-44.314, 22.834, -15.947)), (' A 393  THR HG23', ' A 517  LEU HD12', -0.658, (-43.72, 22.96, -3.69)), (' H  32  TYR  CD1', ' H  94  ARG  HD2', -0.652, (-56.002, -17.317, -20.287)), (' L 131  ALA  HB3', ' L 181  LEU  O  ', -0.65, (-66.159, -70.609, -19.609)), (' N 131  ALA  HB3', ' N 181  LEU  O  ', -0.626, (-62.427, 47.032, 14.561)), (' H  71  ARG  HD3', ' H  73  ASN  OD1', -0.621, (-53.125, -18.267, -10.349)), (' A 350  VAL HG21', ' A 402  ILE HG22', -0.615, (-56.829, 4.262, -21.404)), (' M  35  THR  CG2', ' M  50  TYR  HB3', -0.601, (-65.225, -2.041, 9.365)), (' M 119  PRO  HB3', ' M 145  TYR  HB3', -0.601, (-56.397, 30.599, 10.984)), (' H  11  LEU HD23', ' H 147  PRO  HG3', -0.581, (-64.507, -46.251, -7.989)), (' H  35  THR HG22', ' H  50  TYR  HB3', -0.58, (-64.65, -21.05, -13.86)), (' B 357  ARG  HB3', ' B 396  TYR  HE1', -0.577, (-52.013, -36.939, 1.219)), (' A 392  PHE  HA ', ' A 517  LEU HD13', -0.575, (-41.883, 22.094, -5.271)), (' M  35  THR HG22', ' M  50  TYR  HB3', -0.571, (-65.298, -1.898, 9.165)), (' H  35  THR  CG2', ' H  50  TYR  HB3', -0.565, (-64.025, -20.643, -14.14)), (' B 350  VAL HG11', ' B 402  ILE  CG2', -0.565, (-61.458, -28.862, 17.686)), (' H  63  VAL HG13', ' H  67  PHE  CG ', -0.561, (-67.569, -27.955, -5.13)), (' B 444  LYS  HG2', ' B 448  ASN  HB2', -0.558, (-56.993, -14.218, 19.863)), (' H 126  PRO  HD3', ' H 138  LEU HD23', -0.553, (-53.233, -62.435, -32.36)), (' B 357  ARG  HB3', ' B 396  TYR  CE1', -0.553, (-51.992, -36.836, 1.705)), (' H  66  ARG  NH2', ' H  86  ASP  OD2', -0.551, (-71.06, -33.75, -4.412)), (' M  32  TYR  CG ', ' M  94  ARG  HD2', -0.551, (-57.697, -6.743, 16.237)), (' H 151  THR HG22', ' H 199  ASN  HB3', -0.55, (-53.095, -46.783, -17.702)), (' N  27C VAL  O  ', ' N  66  LYS  NZ ', -0.548, (-81.424, -9.228, 15.995)), (' A 358  ILE  HB ', ' A 395  VAL HG13', -0.538, (-42.254, 11.422, -6.977)), (' B 388  ASN  HB3', ' B 527  PRO  HD2', -0.538, (-36.06, -43.551, 11.21)), (' M   9  GLY  H  ', ' M 107  THR HG21', -0.536, (-56.001, 12.987, 8.081)), (' N   3  ALA  HB3', ' N  97  VAL HG21', -0.531, (-78.356, 1.31, 8.032)), (' M  32  TYR  CD1', ' M  94  ARG  HD2', -0.522, (-57.955, -6.714, 16.238)), (' A 457  ARG  CZ ', ' A 461  LEU HD23', -0.519, (-65.458, 12.056, -14.264)), (' B 366  SER  HA ', ' B 369  TYR  CE1', -0.516, (-37.751, -39.486, 17.757)), (' A 346  ARG  HG2', ' H 100A TRP  CZ2', -0.513, (-50.332, -7.651, -15.36)), (' B 431  GLY  HA3', ' B 513  LEU  O  ', -0.512, (-52.231, -42.085, 12.542)), (' H  94  ARG  HG3', ' H  95  ALA  N  ', -0.51, (-58.378, -19.415, -19.595)), (' H  27  PHE  CE2', ' H  94  ARG  HD3', -0.51, (-54.393, -19.948, -19.241)), (' L 145  VAL HG12', ' L 198  HIS  HB2', -0.507, (-75.984, -54.649, -36.658)), (' B 350  VAL  CG1', ' B 402  ILE HG23', -0.503, (-60.718, -28.761, 16.826)), (' A 393  THR HG21', ' A 518  LEU  H  ', -0.502, (-46.002, 22.39, -2.939)), (' M 150  VAL HG13', ' M 178  LEU HD21', -0.501, (-59.382, 26.138, 16.945)), (' H  63  VAL HG13', ' H  67  PHE  HB2', -0.501, (-68.027, -27.26, -4.968)), (' L 180  SER  O  ', ' L 181  LEU HD23', -0.501, (-70.837, -68.514, -19.731)), (' A 490  PHE  HZ ', ' H 100D ILE HD11', -0.499, (-67.142, -3.156, -14.213)), (' L 133  LEU HD22', ' L 207  VAL HG11', -0.496, (-65.448, -68.424, -29.03)), (' M  63  VAL HG13', ' M  67  PHE  HB2', -0.494, (-65.93, 4.261, -0.211)), (' A 346  ARG  HG2', ' H 100A TRP  CH2', -0.493, (-50.295, -7.343, -15.51)), (' A 376  THR  HB ', ' A 435  ALA  HB3', -0.49, (-45.612, 8.85, -25.301)), (' M   9  GLY  HA3', ' M 107  THR HG22', -0.49, (-57.289, 14.173, 7.931)), (' H 181  VAL  CG2', ' L 136  LEU HD13', -0.488, (-61.988, -56.255, -30.152)), (' M 164  HIS  NE2', ' N 168  GLN  OE1', -0.488, (-65.635, 25.807, 28.748)), (' H   9  GLY  H  ', ' H 107  THR HG21', -0.486, (-57.731, -37.57, -11.134)), (' H 143  LYS  HD2', ' H 177  SER  OG ', -0.48, (-64.805, -58.431, -17.695)), (' B 354  ASN  O  ', ' B 398  ASP  HA ', -0.479, (-54.9, -32.264, 8.701)), (' H 119  PRO  HD2', ' H 205  THR HG21', -0.478, (-55.452, -54.248, -12.678)), (' M  66  ARG  NH2', ' M  86  ASP  OD1', -0.476, (-68.366, 10.821, -0.57)), (' B 412  PRO  HG3', ' B 429  PHE  HB3', -0.474, (-58.512, -44.765, 15.752)), (' A 354  ASN  O  ', ' A 398  ASP  HA ', -0.472, (-50.524, 7.019, -11.715)), (' B 347  PHE  CE1', ' B 509  ARG  HD3', -0.472, (-50.922, -24.958, 15.629)), (' M   8  GLY  O  ', ' M  18  LEU HD11', -0.47, (-55.105, 13.4, 3.514)), (' A 403  ARG  HD3', ' A 495  TYR  CE1', -0.468, (-58.304, 1.252, -26.406)), (' H  40  ALA  HB3', ' H  43  LYS  HB2', -0.468, (-73.744, -36.69, -16.002)), (' M  94  ARG  HG3', ' M  95  ALA  N  ', -0.467, (-60.079, -4.459, 15.695)), (' A 392  PHE  CD1', ' A 515  PHE  HB3', -0.467, (-42.147, 20.344, -9.494)), (' B 520  ALA  HB1', ' B 521  PRO  HD2', -0.465, (-46.513, -48.029, -6.216)), (' L 160  VAL  O  ', ' L 161  GLU  HG2', -0.463, (-74.339, -61.0, -19.719)), (' H  32  TYR  CG ', ' H  94  ARG  HD2', -0.463, (-55.678, -17.437, -19.305)), (' M  82  MET  HB3', ' M  82C LEU HD21', -0.461, (-62.735, 10.51, -0.704)), (' L 146  THR  OG1', ' L 197  THR  HB ', -0.461, (-80.053, -58.636, -34.824)), (' H 195  ILE HD11', ' H 210  LYS  HD3', -0.46, (-44.002, -57.971, -25.879)), (' M  63  VAL HG13', ' M  67  PHE  CG ', -0.458, (-65.597, 5.443, -0.237)), (' H  35  THR HG21', ' H 100L PHE  CZ ', -0.457, (-65.316, -21.102, -16.743)), (' A 368  LEU  O  ', ' A 374  PHE  HE2', -0.453, (-36.497, 7.901, -19.887)), (' H  33  TYR  CD1', ' H 100  GLY  HA2', -0.451, (-59.636, -13.287, -14.054)), (' A 396  TYR  HB2', ' A 514  SER  HB2', -0.449, (-48.217, 14.385, -10.245)), (' A1001  NAG  H3 ', ' A1001  NAG  H83', -0.445, (-33.627, 1.328, -16.848)), (' N  48  ILE HD13', ' N  54  ARG  HG2', -0.443, (-72.52, -4.298, 27.875)), (' M 170  LEU HD13', ' M 176  TYR  CZ ', -0.443, (-66.258, 27.343, 9.67)), (' H 150  VAL HG12', ' H 178  LEU HD21', -0.443, (-60.64, -49.872, -20.339)), (' B 417  LYS  NZ ', ' B 455  LEU HD13', -0.442, (-71.591, -26.562, 20.903)), (' M 136  ALA  O  ', ' M 183  THR  HA ', -0.441, (-57.255, 33.159, 34.428)), (' B 350  VAL  O  ', ' B 353  TRP  HD1', -0.44, (-62.48, -30.449, 10.774)), (' A 431  GLY  HA3', ' A 513  LEU  O  ', -0.44, (-45.681, 16.247, -14.965)), (' A 431  GLY  HA2', ' A 515  PHE  CE2', -0.439, (-43.255, 17.785, -14.556)), (' A 369  TYR  HA ', ' A 377  PHE  HE2', -0.438, (-36.448, 11.513, -20.579)), (' N  28  GLY  HA3', ' N  69  ASN  OD1', -0.438, (-85.641, -7.891, 12.846)), (' B 359  SER  HB3', ' B 394  ASN  OD1', -0.435, (-47.29, -39.084, -0.606)), (' M  28  THR HG23', ' M 302  SO4  O1 ', -0.435, (-50.877, -9.429, 18.62)), (' A 431  GLY  HA2', ' A 515  PHE  CD2', -0.435, (-43.818, 18.034, -14.519)), (' A 384  PRO  O  ', ' A 387  LEU  HB2', -0.434, (-34.854, 17.344, -16.433)), (' B 350  VAL HG12', ' B 400  PHE  CD1', -0.433, (-59.43, -29.925, 15.367)), (' H  63  VAL  CG1', ' H  67  PHE  HB2', -0.432, (-67.689, -26.816, -4.794)), (' A 425  LEU HD21', ' A 512  VAL HG11', -0.432, (-50.449, 13.885, -16.407)), (' N  35  TRP  CD2', ' N  73  LEU  HB2', -0.428, (-77.846, 0.365, 23.388)), (' H  63  VAL HG13', ' H  67  PHE  CD2', -0.426, (-68.13, -27.991, -5.42)), (' B 362  VAL  HA ', ' B 525  CYS  O  ', -0.425, (-38.151, -40.905, 5.354)), (' B 388  ASN  HA ', ' B 526  GLY  HA3', -0.425, (-38.182, -43.689, 9.769)), (' B 401  VAL  HB ', ' B 451  TYR  CD1', -0.425, (-57.731, -23.639, 16.161)), (' L  14  SER  O  ', ' L  17 BGLN  HG2', -0.424, (-79.302, -30.379, -43.549)), (' A 403  ARG  HB2', ' A 406  GLU  HG3', -0.423, (-56.044, 4.079, -27.637)), (' M  96  ARG  NH2', ' N 301  SO4  S  ', -0.422, (-63.625, -8.233, 26.46)), (' B 518  LEU  O  ', ' B 520  ALA  N  ', -0.421, (-48.774, -49.724, -2.768)), (' M  35  THR HG23', ' M  50  TYR  HB3', -0.42, (-64.752, -2.518, 9.722)), (' H 121  VAL  O  ', ' H 209  LYS  HE3', -0.419, (-53.075, -60.825, -18.951)), (' M  35  THR HG21', ' M 100L PHE  CZ ', -0.418, (-66.111, -1.738, 11.512)), (' M 142  VAL HG11', ' M 150  VAL HG21', -0.418, (-56.035, 29.031, 15.594)), (' A 456  PHE  HB3', ' A 473  TYR  CG ', -0.417, (-72.875, 6.013, -19.686)), (' B 391  CYS  SG ', ' B 525  CYS  CB ', -0.415, (-39.245, -45.396, 3.582)), (' B 472  ILE HD12', ' B 484  GLU  HG2', -0.414, (-79.337, -18.757, 10.039)), (' A 403  ARG  HD3', ' A 495  TYR  HE1', -0.412, (-58.312, 1.748, -26.384)), (' H 100G ARG  O  ', ' H 100J ASN  ND2', -0.411, (-67.793, -12.679, -19.534)), (' N  54  ARG  HD3', ' N  62  PHE  O  ', -0.411, (-74.084, -3.585, 30.993)), (' B 336  CYS  O  ', ' B 338  PHE  N  ', -0.411, (-41.573, -32.438, 7.659)), (' N  20  THR HG23', ' N  74  THR HG22', -0.409, (-83.653, -0.045, 27.97)), (' H  96  ARG  NH2', ' H 302  SO4  O3 ', -0.408, (-59.511, -15.134, -30.518)), (' M 138  LEU  HG ', ' M 182  VAL HG12', -0.407, (-53.873, 33.508, 29.973)), (' L 140  PHE  CE1', ' L 173  TYR  HB2', -0.407, (-73.147, -49.065, -34.29)), (' M 150  VAL  CG1', ' M 178  LEU HD21', -0.405, (-59.042, 26.415, 16.518)), (' H 105  GLN  CD ', ' H 105  GLN  H  ', -0.405, (-56.696, -33.177, -19.9)), (' M   6  GLU  H  ', ' M   6  GLU  HG2', -0.405, (-55.69, 8.606, 13.848)), (' M  50  TYR  OH ', ' M 100F THR  HB ', -0.404, (-68.515, -7.951, 8.722)), (' B 502  GLY  O  ', ' B 506  GLN  HG3', -0.404, (-58.127, -22.823, 29.953)), (' A 350  VAL HG12', ' A 422  ASN  HB3', -0.404, (-58.548, 6.941, -18.313)), (' N 129  ASN  HA ', ' N 183  PRO  HG2', -0.404, (-57.166, 49.747, 12.284)), (' H 171  GLN  NE2', ' H 177  SER  OG ', -0.403, (-66.23, -57.947, -16.674)), (' A 350  VAL  CG2', ' A 402  ILE HG22', -0.403, (-56.088, 4.195, -20.901)), (' M 146  PHE  HB2', ' M 175  LEU HD23', -0.402, (-61.408, 30.538, 6.084)), (' M  33  TYR  CD1', ' M 100  GLY  HA2', -0.402, (-60.911, -10.48, 9.992)), (' L 159  GLY  O  ', ' L 179  LEU HD12', -0.402, (-72.354, -65.471, -21.769)), (' N  78  LEU  HA ', ' N  78  LEU HD23', -0.402, (-77.207, 6.98, 34.208)), (' A 393  THR  CG2', ' A 518  LEU  H  ', -0.402, (-45.334, 22.384, -2.752)), (' B 472  ILE  CD1', ' B 484  GLU  HG2', -0.402, (-79.018, -18.606, 9.839))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
