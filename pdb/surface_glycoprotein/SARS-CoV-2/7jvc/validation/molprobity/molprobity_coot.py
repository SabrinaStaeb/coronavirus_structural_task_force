# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('D', '  99 ', 'HIS', 0.036528933190146724, (258.471, 198.401, 250.114)), ('D', ' 204 ', 'GLY', 0.03138878407682168, (237.827, 184.861, 273.939)), ('G', '  99 ', 'HIS', 0.03658701579706296, (195.8090000000001, 257.777, 250.114)), ('G', ' 204 ', 'GLY', 0.031482556685891894, (217.85700000000006, 246.668, 273.939)), ('L', '  99 ', 'HIS', 0.036240513741370384, (175.71900000000005, 173.82199999999995, 250.114)), ('L', ' 204 ', 'GLY', 0.03137896420864947, (174.316, 198.47000000000006, 273.939))]
data['omega'] = [('C', ' 153 ', 'PRO', None, (258.072, 161.70599999999996, 251.716)), ('C', ' 155 ', 'PRO', None, (251.72700000000006, 162.39, 250.981)), ('D', ' 146 ', 'PRO', None, (233.146, 179.016, 264.56)), ('F', ' 153 ', 'PRO', None, (227.78800000000007, 275.77900000000005, 251.716)), ('F', ' 155 ', 'PRO', None, (230.36800000000005, 269.942, 250.981)), ('G', ' 146 ', 'PRO', None, (225.25900000000004, 245.53699999999995, 264.56)), ('H', ' 153 ', 'PRO', None, (144.14, 192.516, 251.716)), ('H', ' 155 ', 'PRO', None, (147.90500000000006, 197.669, 250.981)), ('L', ' 146 ', 'PRO', None, (171.594, 205.447, 264.56))]
data['rota'] = [('A', ' 165 ', 'ASN', 0.010705041181013912, (167.21400000000006, 230.00099999999995, 238.758)), ('B', ' 165 ', 'ASN', 0.01010339816069763, (214.07200000000006, 162.946, 238.758)), ('E', ' 165 ', 'ASN', 0.010143786382735156, (248.7140000000001, 237.053, 238.758))]
data['cbeta'] = []
data['probe'] = [(' B 965  GLN  NE2', ' E 759  PHE  CD1', -0.784, (210.879, 199.317, 202.141)), (' A 965  GLN  NE2', ' B 759  PHE  CD1', -0.769, (200.297, 214.606, 202.03)), (' A 759  PHE  CD1', ' E 965  GLN  NE2', -0.75, (218.825, 216.126, 202.068)), (' B 970  PHE  HE2', ' E 759  PHE  CE1', -0.7, (210.044, 199.76, 204.498)), (' A 759  PHE  CE1', ' E 970  PHE  HE2', -0.691, (218.629, 214.879, 203.891)), (' A 970  PHE  HE2', ' B 759  PHE  CE1', -0.687, (201.633, 214.887, 203.912)), (' E 756  TYR  O  ', ' E 759  PHE  HD1', -0.673, (212.703, 198.457, 203.158)), (' B 756  TYR  O  ', ' B 759  PHE  HD1', -0.671, (198.616, 213.854, 203.194)), (' A 756  TYR  O  ', ' A 759  PHE  HD1', -0.664, (218.443, 218.129, 203.248)), (' A 965  GLN  NE2', ' B 759  PHE  CE1', -0.657, (200.078, 215.271, 202.6)), (' B 965  GLN  NE2', ' E 759  PHE  CE1', -0.638, (210.424, 198.886, 202.241)), (' A 759  PHE  CE1', ' E 965  GLN  NE2', -0.625, (219.444, 215.894, 202.363)), (' A 970  PHE  HE2', ' B 759  PHE  HE1', -0.572, (201.5, 215.102, 203.891)), (' B 970  PHE  HE2', ' E 759  PHE  HE1', -0.561, (209.752, 199.935, 203.912)), (' B 965  GLN HE22', ' E 759  PHE  HD1', -0.558, (211.839, 198.626, 202.844)), (' A 759  PHE  HE1', ' E 970  PHE  HE2', -0.552, (218.88, 214.886, 203.922)), (' A 965  GLN HE22', ' B 759  PHE  HD1', -0.546, (199.312, 214.126, 202.769)), (' A 759  PHE  HD1', ' E 965  GLN HE22', -0.539, (218.898, 217.115, 202.818)), (' E 811  LYS  NZ ', ' E 820  ASP  OD2', -0.521, (244.523, 213.836, 168.066)), (' A 759  PHE  HE1', ' E 970  PHE  CE2', -0.513, (219.169, 214.571, 204.364)), (' B 811  LYS  NZ ', ' B 820  ASP  OD2', -0.512, (196.128, 178.124, 168.286)), (' A 811  LYS  NZ ', ' A 820  ASP  OD2', -0.508, (189.504, 238.013, 168.135)), (' B 970  PHE  CE2', ' E 759  PHE  HE1', -0.506, (209.392, 199.685, 204.346)), (' A 970  PHE  CE2', ' B 759  PHE  HE1', -0.504, (201.406, 215.624, 204.377)), (' A1028  LYS  NZ ', ' A1042  PHE  O  ', -0.503, (201.135, 213.747, 162.659)), (' B1028  LYS  NZ ', ' B1042  PHE  O  ', -0.5, (211.017, 200.02, 163.032)), (' A 389  ASP  OD1', ' A 528  LYS  NZ ', -0.5, (192.47, 179.692, 227.116)), (' E1028  LYS  NZ ', ' E1042  PHE  O  ', -0.498, (218.143, 215.875, 163.028)), (' B 389  ASP  OD1', ' B 528  LYS  NZ ', -0.493, (245.065, 210.064, 227.116)), (' B1142  GLN  N  ', ' B1143  PRO  CD ', -0.486, (216.492, 205.595, 113.396)), (' A1142  GLN  N  ', ' A1143  PRO  CD ', -0.481, (202.856, 206.352, 113.472)), (' E1142  GLN  N  ', ' E1143  PRO  CD ', -0.474, (210.399, 218.034, 113.511)), (' E 389  ASP  OD1', ' E 528  LYS  NZ ', -0.47, (192.465, 240.427, 227.116)), (' A 970  PHE  CE2', ' B 759  PHE  CE1', -0.46, (201.796, 215.28, 204.437)), (' H 207  LYS  N  ', ' H 208  PRO  CD ', -0.457, (142.039, 199.132, 250.48)), (' C 207  LYS  N  ', ' C 208  PRO  CD ', -0.454, (253.329, 156.545, 250.355)), (' F 207  LYS  N  ', ' F 208  PRO  CD ', -0.453, (234.684, 274.39, 250.331)), (' B 756  TYR  O  ', ' B 759  PHE  CD1', -0.453, (199.393, 213.284, 203.373)), (' E 578  ASP  HA ', ' E 579  PRO  HD3', -0.423, (186.84, 243.791, 211.264)), (' E 756  TYR  O  ', ' E 759  PHE  CD1', -0.418, (212.551, 199.1, 203.211)), (' A 759  PHE  CE1', ' E 970  PHE  CE2', -0.413, (218.696, 214.373, 204.383)), (' E 190  ARG HH11', ' E 207  HIS  CE1', -0.412, (255.391, 242.859, 211.728)), (' A 986  PRO  HB2', ' A 987  PRO  HD3', -0.412, (213.212, 223.283, 224.968)), (' B 986  PRO  HB2', ' B 987  PRO  HD3', -0.412, (197.257, 206.163, 225.167)), (' A 190  ARG HH11', ' A 207  HIS  CE1', -0.409, (159.221, 233.093, 211.612)), (' E  81  ASN  N  ', ' E  82  PRO  CD ', -0.408, (245.128, 256.575, 220.218)), (' E 986  PRO  HB2', ' E 987  PRO  HD3', -0.406, (219.937, 200.679, 224.892)), (' B  81  ASN  N  ', ' B  82  PRO  CD ', -0.403, (232.843, 156.684, 220.329)), (' A  81  ASN  N  ', ' A  82  PRO  CD ', -0.403, (152.048, 217.076, 220.243)), (' B 190  ARG HH11', ' B 207  HIS  CE1', -0.402, (215.46, 154.543, 211.636)), (' A 756  TYR  O  ', ' A 759  PHE  CD1', -0.402, (218.08, 217.49, 203.58)), (' F 172  PHE  HA ', ' F 173  PRO  HD3', -0.402, (230.181, 260.515, 260.481))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
