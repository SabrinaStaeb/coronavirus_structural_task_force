# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('A', ' 152 ', 'PRO', None, (1.184, -7.016, -2.362)), ('A', ' 154 ', 'PRO', None, (-2.296, -8.812, -7.113999999999999)), ('B', '   8 ', 'PRO', None, (8.438, -36.809999999999995, -21.59)), ('B', '  95 ', 'PRO', None, (4.533, -40.775999999999996, 0.5329999999999999)), ('B', ' 141 ', 'PRO', None, (9.475, -22.932999999999996, -31.343))]
data['rota'] = [('A', ' 138 ', 'GLU', 0.09142588249258739, (11.349, -4.397, -38.966)), ('C', ' 375 ', 'SER', 0.21533673179693116, (12.731, -60.374, 9.117)), ('C', ' 527 ', 'PRO', 0.10299107889801482, (11.514999999999997, -77.275, 27.525))]
data['cbeta'] = []
data['probe'] = [(' A 138  GLU  HG3', ' A 138  GLU  O  ', -0.935, (9.63, -5.526, -40.652)), (' A  95  CYS  SG ', ' A 413  HOH  O  ', -0.813, (-12.951, -28.17, -0.096)), (' C 455  LEU  HG ', ' C 703  HOH  O  ', -0.736, (-11.573, -47.337, 1.905)), (' A  33  TYR  HE2', ' C 703  HOH  O  ', -0.729, (-10.896, -46.127, 2.445)), (' A  22  CYS  SG ', ' A 413  HOH  O  ', -0.725, (-13.383, -28.277, 0.558)), (' A  45  LEU HD13', ' A 502  HOH  O  ', -0.72, (-1.66, -32.52, -9.601)), (' A   9  GLY  HA2', ' A 357  HOH  O  ', -0.609, (-4.672, -18.551, 3.342)), (' C 447  GLY  HA2', ' C 498  GLN  HG2', -0.598, (0.648, -58.664, -9.784)), (' B  37  GLN  HB2', ' B  47  LEU HD11', -0.592, (-6.351, -34.719, -17.662)), (' B 166  GLN  HG3', ' B 173  TYR  CZ ', -0.58, (3.758, -22.034, -26.655)), (' C 443  SER  HB3', ' C 499  PRO  HD3', -0.574, (4.488, -62.342, -7.446)), (' A  45  LEU  HB2', ' A 455  HOH  O  ', -0.556, (0.718, -32.354, -8.781)), (' C 487  ASN  ND2', ' C 704  HOH  O  ', -0.541, (-21.584, -38.203, -2.467)), (' A 184  SER  HB3', ' A 481  HOH  O  ', -0.536, (9.684, -5.2, -18.25)), (' B   8  PRO  HD2', ' B 347  HOH  O  ', -0.533, (6.138, -37.991, -22.668)), (' C 386  LYS  HB2', ' C 834  HOH  O  ', -0.531, (11.862, -64.423, 29.02)), (' A 114  VAL HG22', ' A 357  HOH  O  ', -0.523, (-4.072, -19.336, 3.509)), (' C 527  PRO  CG ', ' C 711  HOH  O  ', -0.521, (12.855, -75.117, 24.427)), (' A 220  TYR  OH ', ' B 213  GLU  O  ', -0.515, (22.386, 8.729, -27.939)), (' C 449  TYR  O  ', ' C 494  SER  OG ', -0.514, (-7.159, -59.108, -4.778)), (' C 527  PRO  HG2', ' C 711  HOH  O  ', -0.495, (13.067, -74.461, 24.792)), (' C 365  TYR  H  ', ' C 388  ASN HD21', -0.494, (11.125, -72.552, 23.259)), (' C 346  ARG  HG3', ' C 346  ARG HH11', -0.493, (-4.022, -73.812, 1.772)), (' B 163  VAL HG22', ' B 175  LEU HD12', -0.489, (10.575, -17.736, -21.697)), (' B  32  TRP  HB3', ' B  92  ASN  HB2', -0.477, (-1.831, -47.786, -4.864)), (' A 159  TRP  HB3', ' A 342  HOH  O  ', -0.476, (-1.046, 1.492, -24.959)), (' C 365  TYR  N  ', ' C 388  ASN HD21', -0.474, (11.426, -72.649, 22.853)), (' C 498  GLN  H  ', ' C 501  ASN  ND2', -0.458, (3.146, -57.2, -6.313)), (' A 124  PRO  HB3', ' A 150  TYR  HB3', -0.458, (4.323, -2.546, -8.143)), (' B  27  GLN  HG2', ' B 512  HOH  O  ', -0.452, (12.524, -51.138, -5.553)), (' A  29  VAL HG13', ' A  34  MET  HG3', -0.449, (-13.726, -34.97, 5.403)), (' A  82  MET  HB3', ' A  85  LEU HD21', -0.447, (0.131, -23.146, 7.913)), (' A 204  ASP  HB2', ' A 465  HOH  O  ', -0.439, (-5.328, 0.773, -12.758)), (' C 527  PRO  HG3', ' C 711  HOH  O  ', -0.433, (13.03, -75.277, 24.389)), (' C 502  GLY  O  ', ' C 506  GLN  HG3', -0.427, (7.856, -55.216, -2.834)), (' C 519  HIS  NE2', ' C 701  HOH  O  ', -0.426, (-4.058, -62.463, 40.957)), (' A   2  VAL HG23', ' A  26  GLY  HA3', -0.426, (-21.992, -34.889, -2.068)), (' C 431  GLY  HA2', ' C 515  PHE  CD2', -0.425, (4.104, -62.938, 24.115)), (' C 364  ASP  O  ', ' C 367  VAL HG12', -0.418, (11.099, -73.777, 18.889)), (' A 183  LEU  C  ', ' A 183  LEU HD23', -0.409, (5.345, -6.182, -15.663)), (' A 129  LEU HD11', ' A 481  HOH  O  ', -0.409, (9.958, -4.026, -18.661)), (' C 444  LYS  HD3', ' C 830  HOH  O  ', -0.407, (-2.058, -66.627, -7.374)), (' A  20  LEU  HG ', ' A  82  MET  HE2', -0.405, (-4.434, -23.153, 6.171)), (' C 388  ASN  ND2', ' C 711  HOH  O  ', -0.403, (12.758, -73.904, 24.129)), (' C 447  GLY  CA ', ' C 498  GLN  HG2', -0.402, (0.278, -58.925, -9.763))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
