# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', ' 331 ', 'ASN', 0.2689708714295625, (192.7030000000001, 246.60700000000003, 187.03100000000003)), ('A', '1074 ', 'ASN', 0.1709873267855105, (192.11, 222.90000000000006, 278.913)), ('B', ' 331 ', 'ASN', 0.2704823729880148, (207.057, 182.10599999999997, 187.03100000000003)), ('B', '1074 ', 'ASN', 0.17139764922835093, (227.885, 193.44600000000003, 278.913)), ('C', ' 331 ', 'ASN', 0.27040503545240197, (255.74, 226.787, 187.03100000000003)), ('C', '1074 ', 'ASN', 0.1708294975931257, (235.50500000000005, 239.15400000000005, 278.913))]
data['cbeta'] = []
data['probe'] = [(' C 725  GLU  OE2', ' C1028  LYS  NZ ', -0.545, (217.124, 229.331, 253.044)), (' B 707  TYR  CG ', ' B 707  TYR  O  ', -0.544, (217.568, 189.698, 273.12)), (' C 707  TYR  CG ', ' C 707  TYR  O  ', -0.541, (243.743, 231.725, 272.815)), (' A 707  TYR  CG ', ' A 707  TYR  O  ', -0.539, (194.48, 233.646, 272.853)), (' B1503  VCG  C24', ' B1503  VCG  O35', -0.538, (261.435, 196.291, 191.47)), (' A1302  VCG  C24', ' A1302  VCG  O35', -0.538, (177.796, 192.381, 191.493)), (' B 171  VAL HG11', ' b   2  NAG  H82', -0.533, (261.822, 198.375, 177.402)), (' C1503  VCG  C24', ' C1503  VCG  O35', -0.533, (216.278, 266.29, 191.6)), (' A 725  GLU  OE2', ' A1028  LYS  NZ ', -0.532, (210.039, 211.727, 252.885)), (' B 725  GLU  OE2', ' B1028  LYS  NZ ', -0.521, (228.619, 214.63, 252.866)), (' A 171  VAL HG11', ' M   2  NAG  H82', -0.521, (179.589, 190.976, 177.515)), (' C 171  VAL HG11', ' q   2  NAG  H82', -0.52, (214.376, 266.306, 177.397)), (' A 843  ASP  N  ', ' A 843  ASP  OD1', -0.492, (205.184, 184.282, 215.288)), (' C 843  ASP  N  ', ' C 843  ASP  OD1', -0.489, (195.753, 246.885, 214.837)), (' C 663  ASP  O  ', ' C 664  ILE  C  ', -0.482, (232.603, 244.187, 238.616)), (' B 843  ASP  N  ', ' B 843  ASP  OD1', -0.479, (254.423, 224.061, 214.913)), (' A 663  ASP  O  ', ' A 664  ILE  C  ', -0.478, (189.253, 217.956, 238.649)), (' B 663  ASP  O  ', ' B 664  ILE  C  ', -0.474, (233.644, 193.529, 238.649)), (' A1302  VCG  C22', ' A1302  VCG  C40', -0.446, (175.636, 190.789, 192.781)), (' C1503  VCG  C22', ' C1503  VCG  C40', -0.444, (216.416, 269.566, 192.785)), (' B1503  VCG  C22', ' B1503  VCG  C40', -0.439, (264.008, 195.137, 192.651)), (' B  81  ASN  N  ', ' B  82  PRO  CD ', -0.432, (252.497, 177.68, 191.856)), (' A  81  ASN  N  ', ' A  82  PRO  CD ', -0.427, (166.106, 209.481, 191.894)), (' C  81  ASN  N  ', ' C  82  PRO  CD ', -0.424, (236.99, 268.38, 191.79)), (' B1084  ASP  N  ', ' B1084  ASP  OD1', -0.422, (209.883, 201.98, 298.47)), (' C 707  TYR  CD2', ' C 707  TYR  O  ', -0.401, (244.002, 231.49, 272.995)), (' A 707  TYR  CD2', ' A 707  TYR  O  ', -0.4, (193.798, 234.164, 272.756))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
