# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('H', ' 100 ', 'GLY', 0.036579651502129634, (-48.031000000000006, 1.013, 11.563))]
data['omega'] = [('H', ' 147 ', 'PRO', None, (-27.929, 11.960999999999999, -21.583)), ('H', ' 149 ', 'PRO', None, (-25.689, 8.756, -16.887)), ('L', '   8 ', 'PRO', None, (-32.11900000000001, 20.443000000000005, 13.528)), ('L', ' 141 ', 'PRO', None, (-16.903999999999993, 22.099, 8.967))]
data['rota'] = [('A', ' 367 ', 'VAL', 0.11482514936997318, (-84.677, 25.612000000000002, 18.462)), ('A', ' 373 ', 'SER', 0.06143179591938853, (-74.074, 26.609999999999996, 19.223)), ('H', ' 210 ', 'ARG', 0.00045984561798849074, (-4.314, 15.021, -20.691))]
data['cbeta'] = [('A', ' 369 ', 'TYR', ' ', 0.3603153701624144, (-82.791, 26.58400000000001, 12.001)), ('A', ' 370 ', 'ASN', ' ', 0.3004620779165264, (-83.154, 30.263000000000005, 15.916))]
data['probe'] = [(' A 365  TYR  CD2', ' A 387  LEU  HB3', -0.897, (-88.244, 21.293, 9.568)), (' L 165  GLU  OE1', ' L 301  HOH  O  ', -0.784, (-23.697, 13.728, -1.956)), (' A 387  LEU  HA ', ' A 390  LEU HD12', -0.76, (-89.247, 21.622, 5.939)), (' H  98  ARG  HD2', ' L  31  SER  HB3', -0.758, (-53.581, 7.501, 15.558)), (' A 364  ASP  OD1', ' A 388  ASN  ND2', -0.741, (-90.041, 24.558, 13.445)), (' H 134  GLY  N  ', ' H 302  HOH  O  ', -0.735, (3.665, 24.481, -2.712)), (' H  66  ARG  NH2', ' H  86  ASP  OD2', -0.611, (-45.288, 16.307, -14.845)), (' L  33  LEU HD13', ' L  34  ALA  N  ', -0.593, (-44.173, 11.047, 12.368)), (' A 384  PRO  HA ', ' A 387  LEU HD12', -0.585, (-84.795, 22.932, 7.99)), (' A 365  TYR  H  ', ' A 388  ASN HD21', -0.572, (-89.763, 23.325, 13.422)), (' A 365  TYR  HD2', ' A 387  LEU  HB3', -0.559, (-88.674, 21.981, 10.374)), (' H  71  ARG  NH1', ' H 303  HOH  O  ', -0.544, (-56.133, -1.059, -3.323)), (' A 366  SER  HA ', ' A 369  TYR  CE1', -0.538, (-86.718, 27.376, 13.685)), (' A 371  SER  OG ', ' A 373  SER  OG ', -0.505, (-76.722, 26.299, 19.949)), (' L 105  ASP  OD2', ' L 173  TYR  OH ', -0.496, (-21.756, 15.675, 6.7)), (' L 183  LYS  O  ', ' L 187  GLU  HG3', -0.478, (-14.9, 37.029, -24.357)), (' A 354  ASN  O  ', ' A 398  ASP  HA ', -0.463, (-78.069, 8.07, 14.522)), (' A 335  LEU HD12', ' A 362  VAL  O  ', -0.454, (-92.532, 18.719, 18.154)), (' L 125  LEU  O  ', ' L 183  LYS  HD3', -0.45, (-14.371, 31.92, -27.147)), (' A 376  THR  O  ', ' A 434  ILE  HA ', -0.448, (-74.784, 21.266, 11.742)), (' L   2  ILE HG12', ' L  27  GLN  OE1', -0.442, (-52.35, 21.78, 8.458)), (' L 123  GLU  HA ', ' L 126  LYS  HE2', -0.441, (-10.349, 25.413, -28.399)), (' L 123  GLU  CD ', ' L 123  GLU  H  ', -0.441, (-8.437, 24.676, -24.76)), (' A 440  ASN  N  ', ' A 440  ASN  OD1', -0.437, (-65.714, 20.257, 24.725)), (' H  87  THR  HA ', ' H 109  VAL  O  ', -0.432, (-37.737, 12.196, -13.814)), (' L 113  PRO  HB3', ' L 139  PHE  HB3', -0.421, (-12.703, 23.662, 2.711)), (' A 420  ASP  OD2', ' H  56  SER  OG ', -0.42, (-63.376, 6.048, -0.831)), (' H   4  LEU HD22', ' H  22  CYS  SG ', -0.419, (-45.432, -2.289, -4.722)), (' A 386  LYS  HD3', ' A 389  ASP  HB2', -0.416, (-92.568, 25.282, 5.076)), (' A 398  ASP  O  ', ' A 511  VAL  HA ', -0.412, (-76.66, 12.845, 14.221)), (' H  29  VAL HG13', ' H  34  MET  HG3', -0.41, (-51.77, -1.465, -3.739)), (' L  54  ARG  HD3', ' L  62  PHE  O  ', -0.404, (-36.851, 3.142, 19.674)), (' A 366  SER  HA ', ' A 369  TYR  CZ ', -0.401, (-86.837, 27.153, 13.648))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
