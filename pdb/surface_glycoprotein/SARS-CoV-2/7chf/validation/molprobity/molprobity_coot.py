# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('A', ' 156 ', 'ASP', 0.048922339689617, (58.399, 52.943, 3.6799999999999997)), ('B', '  31 ', 'HIS', 0.005488578858361337, (29.538, 12.762000000000004, -15.176999999999998)), ('B', '  33 ', 'ASN', 0.004365703692405914, (30.756, 8.609, -13.287))]
data['omega'] = [('A', ' 159 ', 'PRO', None, (59.795, 44.187, 0.452)), ('A', ' 161 ', 'PRO', None, (55.05200000000001, 40.958, 3.009)), ('B', '   8 ', 'PRO', None, (25.457000000000015, 37.264, -9.347)), ('B', ' 146 ', 'PRO', None, (27.427999999999997, 52.957, 5.577)), ('H', ' 151 ', 'PRO', None, (5.03, -7.287, 30.185)), ('H', ' 153 ', 'PRO', None, (6.699, -2.466, 26.413)), ('L', '   8 ', 'PRO', None, (31.05900000000001, 17.531, 33.298)), ('L', ' 141 ', 'PRO', None, (11.506, 25.079, 37.65999999999998))]
data['rota'] = [('H', '  41 ', 'PRO', 0.2283941046906921, (17.777000000000008, 0.533, 31.970000000000002)), ('H', '  73 ', 'ASN', 0.03254099030445322, (23.75700000000001, -12.595000000000002, 3.2759999999999994)), ('H', ' 147 ', 'LYS', 0.0828674781701592, (-3.025, 0.109, 34.915)), ('L', ' 152 ', 'ASN', 0.15988325644828147, (-7.422, 16.705, 56.139)), ('R', ' 362 ', 'VAL', 0.026729632291770472, (75.59100000000001, -18.684, 8.924999999999999)), ('R', ' 367 ', 'VAL', 0.19676937649582416, (72.814, -12.861, 19.762)), ('R', ' 371 ', 'SER', 0.2343618723737695, (69.963, -9.566, 23.261)), ('R', ' 494 ', 'SER', 0.15359571191087545, (46.47900000000001, 5.611, 9.63)), ('R', ' 524 ', 'VAL', 0.05857582193367373, (72.229, -20.912, 5.944)), ('R', ' 525 ', 'CYS', 0.07710998536447139, (72.775, -22.669, 9.325)), ('A', '  12 ', 'VAL', 0.06126355615284766, (63.60800000000001, 37.186, -6.228)), ('A', '  13 ', 'GLN', 0.0, (65.084, 39.34400000000001, -9.018)), ('A', '  53 ', 'ASP', 0.05583399042500671, (50.10100000000001, 10.293, -4.216)), ('A', '  63 ', 'SER', 0.08578389438196493, (51.19200000000001, 29.338999999999988, -18.617)), ('A', '  65 ', 'LYS', 0.006524227452319055, (54.855000000000004, 24.422, -18.234)), ('A', '  67 ', 'ARG', 0.013510942693435415, (59.827000000000005, 26.634, -15.469)), ('A', ' 104 ', 'LEU', 0.2678975908986445, (40.175000000000004, 7.219, -9.132)), ('A', ' 122 ', 'THR', 0.0027198671887163073, (56.944, 39.11200000000001, -5.292999999999999)), ('A', ' 123 ', 'VAL', 0.040723486526030514, (59.11100000000001, 39.553, -8.404)), ('A', ' 129 ', 'LYS', 0.1831098402324154, (64.22200000000001, 47.424, 3.371)), ('A', ' 155 ', 'LYS', 0.0, (56.383, 53.811, 6.828)), ('A', ' 213 ', 'LYS', 0.10514103297282955, (60.532, 39.30500000000001, 8.557999999999998)), ('B', '  31 ', 'HIS', 0.04488782861832575, (29.538, 12.762000000000004, -15.176999999999998)), ('B', ' 206 ', 'LEU', 0.22718987262122206, (25.484999999999996, 62.993, 9.768))]
data['cbeta'] = [('L', ' 137 ', 'ASN', ' ', 0.290421516217352, (0.2820000000000001, 21.01000000000001, 33.31)), ('L', ' 151 ', 'ASP', ' ', 0.4298343388715208, (-10.856000000000003, 13.649999999999997, 55.858999999999995)), ('R', ' 403 ', 'ARG', ' ', 0.2972928761875717, (48.940000000000005, -1.226, 17.651)), ('R', ' 405 ', 'ASP', ' ', 0.2529775560012164, (47.343, -3.228, 21.593999999999998)), ('R', ' 495 ', 'TYR', ' ', 0.39683277667809547, (49.117000000000004, 3.904, 13.28)), ('A', '  29 ', 'PHE', ' ', 0.26452416516918603, (50.463, 13.582, 4.029)), ('A', '  53 ', 'ASP', ' ', 0.47143206699397766, (49.628, 8.882, -4.503)), ('A', ' 104 ', 'LEU', ' ', 0.2898093065369519, (40.269, 5.841, -9.766)), ('A', ' 105 ', 'TYR', ' ', 0.37775249069838635, (36.32600000000001, 9.31, -10.925)), ('A', ' 213 ', 'LYS', ' ', 0.3461480059069734, (60.01600000000001, 37.973, 9.106)), ('A', ' 214 ', 'PRO', ' ', 0.3068266339927829, (61.155000000000015, 40.055, 3.603)), ('B', '  33 ', 'ASN', ' ', 0.4364230916369727, (31.32, 8.514, -11.886)), ('B', ' 202 ', 'THR', ' ', 0.25329443613111563, (30.865000000000002, 64.701, 4.254)), ('B', ' 204 ', 'GLN', ' ', 0.2629201387711641, (25.159, 57.978, 4.855))]
data['probe'] = [(' A  68  PHE  CE1', ' A  83  MET  HB3', -1.439, (58.096, 28.874, -10.522)), (' A  68  PHE  HE1', ' A  83  MET  CB ', -1.34, (58.949, 28.998, -10.053)), (' L 187  GLU  HA ', ' L 211  ARG HH11', -1.152, (-15.55, 6.387, 50.181)), (' R 369  TYR  CE2', ' R 384  PRO  HG3', -1.088, (64.475, -18.021, 21.731)), (' A  72  ARG  NH1', ' A  74  ASN  OD1', -1.041, (55.069, 11.634, -1.406)), (' L 187  GLU  O  ', ' L 211  ARG  NH1', -1.002, (-16.975, 6.043, 51.118)), (' L 187  GLU  CA ', ' L 211  ARG HH11', -0.957, (-16.298, 5.711, 49.906)), (' R 391  CYS  SG ', ' R 525  CYS  HB3', -0.922, (72.39, -25.762, 8.376)), (' A  68  PHE  CE1', ' A  83  MET  CB ', -0.908, (58.459, 29.104, -10.783)), (' R 391  CYS  SG ', ' R 525  CYS  SG ', -0.908, (74.159, -25.754, 7.338)), (' L 187  GLU  HA ', ' L 211  ARG  NH1', -0.903, (-16.343, 7.109, 50.284)), (' R 382  VAL HG12', ' R 383  SER  H  ', -0.886, (63.797, -25.76, 18.983)), (' R 391  CYS  SG ', ' R 525  CYS  CB ', -0.875, (73.358, -25.342, 7.986)), (' H 196  GLN  OE1', ' H 197  THR  N  ', -0.867, (-13.634, 15.172, 19.661)), (' A  68  PHE  HE1', ' A  83  MET  HB3', -0.856, (57.931, 29.698, -8.965)), (' R 391  CYS  HA ', ' R 525  CYS  HB3', -0.844, (72.119, -24.625, 8.239)), (' L 187  GLU  C  ', ' L 211  ARG  NH1', -0.82, (-15.633, 6.52, 51.26)), (' R 335  LEU  O  ', ' R 335  LEU HD12', -0.815, (76.498, -11.41, 7.147)), (' L 187  GLU  CA ', ' L 211  ARG  NH1', -0.808, (-16.9, 6.169, 50.506)), (' R 337  PRO  HB2', ' R 340  GLU  HG3', -0.808, (72.058, -7.52, 5.908)), (' B 141  LEU HD11', ' B 201  VAL HG11', -0.789, (34.637, 60.544, 8.261)), (' R 369  TYR  HE2', ' R 384  PRO  HG3', -0.782, (63.594, -18.369, 22.221)), (' B  99  THR HG23', ' B 100  PRO  HD3', -0.775, (43.489, 20.875, -19.549)), (' A  30  THR HG22', ' A  74  ASN  HB3', -0.77, (54.711, 9.794, 1.134)), (' R 391  CYS  HG ', ' R 525  CYS  HG ', -0.76, (74.876, -25.402, 7.554)), (' A  68  PHE  CD1', ' A  83  MET  HA ', -0.751, (58.967, 27.972, -11.12)), (' A  72  ARG HH12', ' A  74  ASN  ND2', -0.751, (54.753, 10.377, -1.805)), (' R 371  SER  OG ', ' R 373  SER  OG ', -0.75, (68.492, -6.411, 21.983)), (' H 196  GLN  OE1', ' H 197  THR  O  ', -0.738, (-12.741, 13.869, 19.323)), (' A  72  ARG  CZ ', ' A  74  ASN  OD1', -0.722, (53.581, 12.084, -1.389)), (' A  72  ARG HH12', ' A  74  ASN HD21', -0.716, (53.901, 9.843, -2.082)), (' R 369  TYR  CD2', ' R 384  PRO  HG3', -0.714, (64.733, -18.05, 21.73)), (' R 391  CYS  HG ', ' R 525  CYS  CB ', -0.707, (73.343, -24.575, 8.089)), (' R 391  CYS  CA ', ' R 525  CYS  HB3', -0.703, (71.798, -25.249, 8.165)), (' A 104  LEU  O  ', ' R 482  GLY  O  ', -0.68, (37.163, 7.779, -8.726)), (' B 151  VAL HG12', ' B 201  VAL HG22', -0.675, (36.89, 62.051, 6.275)), (' A 207  ILE HG12', ' A 222  LYS  HG2', -0.674, (56.161, 49.703, 24.403)), (' R 388  ASN  O  ', ' R 526  GLY  HA3', -0.671, (73.553, -23.517, 13.906)), (' A  68  PHE  HD1', ' A  83  MET  HA ', -0.653, (58.368, 27.085, -10.428)), (' R 369  TYR  CE2', ' R 384  PRO  CG ', -0.652, (65.02, -18.946, 22.066)), (' B 152  GLN  HG2', ' B 159  LEU HD11', -0.652, (38.308, 69.106, 0.14)), (' R 369  TYR  HD2', ' R 384  PRO  CB ', -0.648, (65.302, -17.842, 20.935)), (' R 395  VAL HG22', ' R 515  PHE  HD1', -0.646, (65.198, -19.747, 8.09)), (' L  21  ILE HD12', ' L 102  THR HG21', -0.644, (28.259, 16.461, 29.662)), (' R 369  TYR  CD2', ' R 384  PRO  CB ', -0.642, (65.997, -17.857, 21.177)), (' H  61  ASP  HA ', ' H  64  LYS  HD3', -0.642, (34.076, -12.342, 27.064)), (' R 369  TYR  CD2', ' R 384  PRO  CG ', -0.635, (65.06, -18.21, 21.598)), (' R 361  CYS  O  ', ' R 524  VAL  HA ', -0.631, (73.867, -20.409, 5.679)), (' L   2  ILE HD11', ' L  27  GLN  CB ', -0.628, (45.184, 4.053, 27.3)), (' A  72  ARG HH12', ' A  74  ASN  CG ', -0.627, (54.664, 10.604, -1.325)), (' A 157  TYR  CE1', ' A 162  VAL HG23', -0.623, (54.73, 45.777, 4.313)), (' A  18  LEU HD12', ' A  19  ARG  H  ', -0.621, (62.628, 29.685, -3.612)), (' B  14  THR  HB ', ' B  17  GLU  HG3', -0.603, (18.383, 40.541, 4.203)), (' H 128  LEU HD11', ' H 145  LEU  HB2', -0.603, (-5.31, 7.233, 34.253)), (' R 381  GLY  HA3', ' R 430  THR HG23', -0.596, (59.307, -24.436, 14.097)), (' A  68  PHE  HE1', ' A  83  MET  HB2', -0.592, (58.498, 30.136, -10.003)), (' A  72  ARG  NH1', ' A  74  ASN  CG ', -0.588, (54.967, 11.122, -1.428)), (' R 360  ASN  H  ', ' R 523  THR  HB ', -0.585, (72.12, -20.084, 1.423)), (' A  72  ARG  HB3', ' A  79  LEU HD12', -0.583, (54.273, 17.239, -3.412)), (' H   1  GLU  HG3', ' H   2  VAL HG23', -0.581, (20.814, 4.376, 1.786)), (' R 357  ARG  HG3', ' R 396  TYR  CE1', -0.572, (63.767, -16.19, 0.772)), (' H 199  ILE HD13', ' H 214  LYS  N  ', -0.568, (-12.851, 5.808, 24.131)), (' H 216  GLU  HG2', ' H 217  PRO  HD2', -0.565, (-18.542, 13.889, 28.142)), (' L 144  ALA  HB2', ' L 198  HIS  HD2', -0.565, (7.303, 21.874, 41.278)), (' H 199  ILE HD13', ' H 213  LYS  C  ', -0.564, (-11.941, 5.988, 24.011)), (' B 163  ASN  HB2', ' B 184  LEU HD12', -0.563, (47.613, 65.425, 1.956)), (' B  52  LEU  HA ', ' B  63  VAL HG21', -0.561, (32.103, 23.777, 2.801)), (' B 153  TRP  CD1', ' B 184  LEU HD13', -0.559, (45.327, 65.368, 3.171)), (' R 338  PHE  HE1', ' R 358  ILE HD13', -0.556, (68.313, -13.192, 8.162)), (' R 395  VAL HG22', ' R 515  PHE  CD1', -0.555, (64.909, -19.595, 8.746)), (' R 365  TYR  HB2', ' R 388  ASN  HB3', -0.553, (71.188, -19.884, 16.039)), (' A 157  TYR  CE1', ' A 162  VAL  CG2', -0.552, (55.381, 45.697, 5.048)), (' L   2  ILE HD11', ' L  27  GLN  HB2', -0.544, (44.913, 3.93, 27.738)), (' H 146  VAL HG11', ' H 154  VAL HG11', -0.543, (-0.929, 1.239, 28.676)), (' R 438  SER  HB3', ' R 509  ARG  HG3', -0.542, (59.979, 0.204, 16.509)), (' B 144  PHE  HZ ', ' B 180  LEU HD23', -0.542, (35.688, 54.461, 5.542)), (' L   2  ILE HD11', ' L  27  GLN  HB3', -0.535, (45.632, 4.366, 27.324)), (' L 181  LEU  CD1', ' L 186  TYR  HB2', -0.535, (-9.847, 4.716, 47.192)), (' B  32  SER  O  ', ' B  32  SER  OG ', -0.532, (34.545, 10.249, -14.771)), (' B   6  GLN HE22', ' B  92  TYR  HA ', -0.529, (33.573, 32.45, -7.915)), (' A  68  PHE  CE1', ' A  83  MET  CA ', -0.525, (58.907, 28.46, -10.348)), (' R 382  VAL HG12', ' R 383  SER  N  ', -0.524, (63.539, -25.789, 18.982)), (' R 403  ARG  HG2', ' R 505  TYR  HA ', -0.522, (48.368, 1.08, 19.915)), (' A 128  THR  HA ', ' A 158  PHE  O  ', -0.515, (62.741, 45.269, 0.402)), (' R 338  PHE  CD2', ' R 368  LEU HD11', -0.515, (69.306, -13.067, 13.735)), (' A  67  ARG  O  ', ' A  84  ASN  ND2', -0.513, (61.726, 26.05, -13.394)), (' R 391  CYS  CB ', ' R 525  CYS  HB3', -0.513, (72.145, -25.676, 8.38)), (' L 181  LEU HD13', ' L 186  TYR  HB2', -0.51, (-9.874, 4.434, 47.935)), (' H 109  GLN  N  ', ' H 109  GLN  OE1', -0.508, (15.793, 0.58, 15.248)), (' B 144  PHE  CZ ', ' B 180  LEU HD23', -0.508, (35.096, 54.916, 5.328)), (' A 211  ASN  HB2', ' A 218  LYS  NZ ', -0.507, (56.877, 40.413, 15.011)), (' L  14  SER  N  ', ' L  17  ASP  OD2', -0.506, (22.004, 28.183, 29.007)), (' A 139  SER  HB3', ' B 121  PHE  HD2', -0.506, (40.99, 59.79, 18.588)), (' R 382  VAL  CG1', ' R 383  SER  H  ', -0.505, (63.332, -26.411, 19.069)), (' R 387  LEU HD21', ' R 515  PHE  CE2', -0.504, (64.603, -20.064, 13.126)), (' H 214  LYS  NZ ', ' H 216  GLU  HB2', -0.503, (-18.175, 10.608, 26.648)), (' A 131  PRO  HB3', ' A 157  TYR  HB3', -0.502, (58.312, 49.307, 6.338)), (' L   2  ILE  CD1', ' L  27  GLN  HB2', -0.501, (44.611, 4.307, 27.925)), (' L 145  LYS  HD2', ' L 146  VAL  H  ', -0.5, (5.444, 16.725, 46.902)), (' H  13  GLN  CD ', ' H  13  GLN  H  ', -0.498, (10.956, -17.44, 28.75)), (' B 191  TYR  O  ', ' B 197  TYR  OH ', -0.497, (52.355, 72.236, 9.041)), (' B 195  LYS  HG3', ' B 196  VAL  N  ', -0.495, (47.192, 76.253, 11.906)), (' L 108  ARG  HG2', ' L 109  THR  N  ', -0.493, (12.765, 29.405, 31.259)), (' L 190  LYS  HG3', ' L 191  VAL HG23', -0.493, (-14.726, 15.874, 52.725)), (' L 145  LYS  HD2', ' L 146  VAL  N  ', -0.491, (5.381, 17.143, 47.552)), (' H 199  ILE HD11', ' H 214  LYS  HB2', -0.489, (-14.903, 6.563, 22.777)), (' B 141  LEU  HB2', ' B 180  LEU  HG ', -0.488, (37.371, 56.366, 7.586)), (' H  82  MET  HE2', ' H  85  LEU HD21', -0.486, (19.618, -12.91, 25.758)), (' R 369  TYR  CD1', ' R 369  TYR  O  ', -0.483, (67.22, -14.908, 23.729)), (' B 163  ASN  HB2', ' B 184  LEU  CD1', -0.478, (47.316, 65.801, 1.801)), (' H  63  VAL HG13', ' H  67  PHE  CG ', -0.476, (26.2, -13.116, 24.128)), (' A  88  ALA  HA ', ' A 123  VAL HG12', -0.475, (57.196, 39.875, -11.69)), (' R 369  TYR  HD1', ' R 369  TYR  O  ', -0.474, (67.366, -14.468, 23.969)), (' R 441  LEU  H  ', ' R 441  LEU HD12', -0.473, (61.592, 4.985, 17.605)), (' A 127  SER  O  ', ' A 158  PHE  HD1', -0.465, (61.658, 45.44, -2.086)), (' L 105  GLU  HG2', ' L 106  ILE  N  ', -0.462, (17.631, 21.096, 31.095)), (' R 358  ILE HD12', ' R 395  VAL HG12', -0.461, (66.464, -14.996, 7.119)), (' R 369  TYR  HD2', ' R 384  PRO  HB3', -0.459, (65.335, -18.135, 20.486)), (' H  11  LEU HD22', ' H 151  PRO  HD3', -0.457, (6.364, -9.865, 29.762)), (' A 166  TRP  CZ3', ' A 208  CYS  HB3', -0.455, (50.764, 49.174, 18.668)), (' L 116  PHE  HD2', ' L 135  LEU HD23', -0.454, (-3.444, 19.197, 34.64)), (' H  12  ILE HG21', ' H  85  LEU HD13', -0.454, (16.083, -14.137, 26.969)), (' A  68  PHE  CE1', ' A  83  MET  HE2', -0.453, (56.73, 28.771, -9.23)), (' H 101  PRO  HG3', ' L  92  ASN HD21', -0.452, (41.118, 4.377, 13.283)), (' A 146  GLY  C  ', ' A 198  SER  HB2', -0.451, (37.561, 57.014, 26.368)), (' B  31  HIS  C  ', ' B  31  HIS  ND1', -0.45, (30.491, 11.598, -16.158)), (' B 152  GLN  CG ', ' B 159  LEU HD11', -0.449, (37.893, 68.708, 0.774)), (' R 353  TRP  O  ', ' R 466  ARG  HD2', -0.448, (55.683, -6.556, 1.784)), (' A  30  THR  HA ', ' A  72  ARG HH22', -0.448, (51.824, 11.076, -0.049)), (' R 378  LYS  HD3', ' R 379  CYS  H  ', -0.446, (58.242, -18.858, 20.337)), (' A  68  PHE  CE1', ' A  83  MET  HA ', -0.446, (58.364, 28.338, -10.628)), (' A  18  LEU  O  ', ' A  83  MET  HG2', -0.443, (60.777, 28.515, -7.125)), (' L  11  LEU HD21', ' L  19  VAL HG13', -0.442, (27.117, 22.175, 28.583)), (' B 136  SER  HA ', ' B 184  LEU  O  ', -0.442, (51.59, 63.153, 6.517)), (' B   4  MET  HE3', ' B  23  CYS  SG ', -0.441, (30.882, 27.879, -12.62)), (' L 144  ALA  HB1', ' L 197  THR  O  ', -0.44, (6.2, 21.807, 43.877)), (' B 190  ASP  O  ', ' B 194  HIS  ND1', -0.44, (52.774, 74.11, 5.995)), (' B   6  GLN HE21', ' B 104  GLY  HA3', -0.438, (33.575, 32.297, -10.592)), (' A  68  PHE  CE1', ' A  83  MET  HB2', -0.438, (58.674, 29.955, -10.283)), (' H  22  CYS  HB3', ' H  78  LEU  HB3', -0.437, (21.78, -7.525, 12.161)), (' H 100  GLY  HA3', ' H 101  PRO  HD3', -0.437, (38.098, 2.262, 11.429)), (' A  72  ARG  NH1', ' A  74  ASN  ND2', -0.437, (54.422, 10.773, -2.1)), (' H 199  ILE HD13', ' H 214  LYS  CA ', -0.435, (-12.928, 6.726, 23.648)), (' H  63  VAL HG13', ' H  67  PHE  HB2', -0.434, (27.098, -13.051, 24.035)), (' B 110  GLU  OE2', ' B 178  TYR  OH ', -0.431, (30.979, 46.353, 1.881)), (' A  72  ARG  NH1', ' A  74  ASN HD21', -0.431, (54.268, 10.665, -2.348)), (' A 156  ASP  HB3', ' A 187  LEU HD12', -0.43, (60.52, 53.905, 1.699)), (' A 142  SER  OG ', ' A 143  THR  N  ', -0.426, (39.167, 61.935, 30.703)), (' H  67  PHE  HA ', ' H  81  GLN  O  ', -0.426, (23.922, -15.585, 21.702)), (' L  54  LEU  HA ', ' L  54  LEU HD12', -0.425, (30.611, 16.7, 13.782)), (' B 154  LYS  HB3', ' B 154  LYS  HE2', -0.425, (40.441, 74.009, 6.124)), (' A 157  TYR  OH ', ' A 190  LEU HD23', -0.424, (51.961, 47.075, 5.242)), (' A 166  TRP  CH2', ' A 208  CYS  HB3', -0.422, (50.768, 49.691, 17.953)), (' R 387  LEU HD21', ' R 515  PHE  CZ ', -0.42, (64.669, -19.817, 13.136)), (' A 134  PHE  CE2', ' B 129  GLN  HG3', -0.419, (58.289, 58.847, 9.732)), (' A  85  SER  O  ', ' A  85  SER  OG ', -0.418, (60.53, 32.933, -16.816)), (' R 444  LYS  HB2', ' R 448  ASN  HB2', -0.418, (55.27, 10.475, 13.818)), (' A  29  PHE  CE2', ' A  77  ASN  HA ', -0.416, (54.438, 14.159, 3.11)), (' H  63  VAL  CG1', ' H  67  PHE  HB2', -0.416, (27.205, -13.215, 23.547)), (' A  68  PHE  CD1', ' A  83  MET  CA ', -0.415, (58.735, 27.924, -10.116)), (' L  90  GLN  CD ', ' L  93  SER  HB2', -0.415, (39.749, 1.996, 22.314)), (' R 369  TYR  CD2', ' R 384  PRO  HB2', -0.415, (66.298, -18.448, 21.251)), (' B  33  ASN  HB2', ' R 481  ASN  HB3', -0.413, (30.918, 7.22, -11.221)), (' B 130  LEU  C  ', ' B 132  SER  H  ', -0.41, (62.795, 64.15, 10.394)), (' B 153  TRP  CG ', ' B 184  LEU HD13', -0.408, (44.973, 65.706, 3.962)), (' L  33  LEU HD13', ' L  34  ALA  N  ', -0.408, (35.358, 10.48, 20.852)), (' A  99  THR HG21', ' A 108  VAL  O  ', -0.408, (44.405, 16.981, -6.451)), (' B 149  ALA  HB2', ' B 203  HIS  HD2', -0.405, (30.94, 57.426, 5.16)), (' A  86  LEU  HA ', ' A  86  LEU HD23', -0.404, (58.397, 33.445, -12.98)), (' R 439  ASN  O  ', ' R 443  SER  HB3', -0.402, (57.379, 7.526, 19.109)), (' A  27  PHE  CE2', ' A  98  LYS  HD2', -0.402, (45.778, 16.223, 3.069)), (' L 211  ARG  HB3', ' L 211  ARG  HE ', -0.402, (-17.089, 10.48, 49.282)), (' R 396  TYR  O  ', ' R 513  LEU  HA ', -0.402, (62.142, -14.927, 9.114)), (' A 156  ASP  HB3', ' A 187  LEU  CD1', -0.401, (60.272, 53.475, 1.68)), (' H 199  ILE HG22', ' H 201  ASN  ND2', -0.4, (-8.741, 6.156, 20.626)), (' L  39  LYS  HE3', ' L  83  PHE  O  ', -0.4, (17.809, 15.732, 23.881))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
