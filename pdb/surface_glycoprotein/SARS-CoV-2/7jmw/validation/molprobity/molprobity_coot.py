# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('H', ' 144 ', 'ASP', 0.0011105322865414269, (5.1430000000000025, -10.643, 30.195))]
data['omega'] = [('H', ' 147 ', 'PRO', None, (8.950000000000003, -13.997, 38.17699999999999)), ('H', ' 149 ', 'PRO', None, (13.995999999999999, -16.979, 36.142)), ('L', '   8 ', 'PRO', None, (43.467, -5.847999999999998, 33.84499999999999)), ('L', '  95 ', 'PRO', None, (37.592, -14.192, 55.792999999999985)), ('L', ' 141 ', 'PRO', None, (31.503000000000014, -5.206, 14.459))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' H  87  THR HG22', ' H 111  VAL  H  ', -0.699, (15.42, -10.19, 44.282)), (' H  14  PRO  HB3', ' H  83  ARG  HD2', -0.674, (12.92, -5.825, 51.088)), (' L  63  SER  HB2', ' L  74  THR  HB ', -0.663, (49.758, -17.705, 31.243)), (' L 187  GLU  HG3', ' L 211  ARG  HD2', -0.651, (-3.513, -3.9, 11.591)), (' A 485  GLY  H  ', ' A 488  CYS  HB2', -0.642, (44.612, -50.816, 15.947)), (' A 371  SER  HG ', ' A 373  SER  HG ', -0.622, (63.52, -37.41, 53.706)), (' A 350  VAL HG12', ' A 422  ASN  HB3', -0.606, (48.937, -45.802, 37.939)), (' H  70  THR  HB ', ' H  79  TYR  HB2', -0.601, (20.04, -27.404, 55.155)), (' H  34  MET  HG3', ' H  78  VAL HG21', -0.598, (27.119, -29.825, 50.567)), (' A 339  GLY  HA2', ' B   1  NAG  O7 ', -0.586, (63.646, -47.345, 54.744)), (' L  35  TRP  HB2', ' L  48  ILE  HB ', -0.586, (43.481, -19.831, 37.664)), (' H 100L PHE  HD2', ' L  36  TYR  HH ', -0.58, (35.792, -21.667, 44.086)), (' H  75  THR HG23', ' H  77  THR HG22', -0.58, (19.547, -34.695, 51.868)), (' A 343  ASN  ND2', ' B   1  NAG  O7 ', -0.577, (65.374, -45.986, 54.55)), (' H  11  VAL  HB ', ' H 147  PRO  HG3', -0.559, (10.398, -15.113, 41.966)), (' A 371  SER  OG ', ' A 373  SER  OG ', -0.558, (63.893, -36.978, 53.128)), (' L  83  ILE HD12', ' L 166  GLN  HB3', -0.557, (32.655, -13.561, 23.263)), (' H  19  LYS  HB2', ' H  81  GLU  HG3', -0.556, (15.617, -21.744, 53.884)), (' L  93  ASN HD22', ' L  94  PRO  HD2', -0.546, (41.823, -16.375, 57.671)), (' H  12  LYS  HG3', ' H  18  VAL HG13', -0.543, (12.525, -16.411, 49.515)), (' H   6  GLN  O  ', ' H 105  GLN  NE2', -0.531, (18.818, -27.24, 40.693)), (' A 408  ARG  HD2', ' L  49  TYR  OH ', -0.527, (47.083, -30.089, 40.772)), (' H  82C LEU  O  ', ' H  83  ARG  HG2', -0.515, (14.33, -7.936, 53.014)), (' H 144  ASP  HB3', ' H 175  LEU HD13', -0.495, (3.285, -9.105, 32.054)), (' A 350  VAL HG21', ' A 402  ILE HG22', -0.495, (52.273, -43.283, 38.054)), (' H  51  ILE HG21', ' H  78  VAL HG11', -0.49, (26.416, -27.435, 53.095)), (' A 520  ALA  HB1', ' A 521  PRO  HD2', -0.489, (41.58, -58.071, 64.862)), (' L  61  ARG  HB2', ' L  76  SER  HB3', -0.486, (47.593, -21.107, 25.762)), (' A 402  ILE HD11', ' A 407  VAL  HA ', -0.486, (51.836, -37.645, 41.862)), (' L  78  LEU HD11', ' L 104  LEU HD21', -0.481, (40.355, -14.043, 25.449)), (' A 497  PHE  CE2', ' A 507  PRO  HB3', -0.48, (60.238, -41.098, 36.014)), (' H   3  GLN  HB3', ' H  25  SER  OG ', -0.478, (25.02, -36.37, 41.544)), (' A 447  GLY  CA ', ' A 498  GLN HE21', -0.478, (65.901, -40.367, 27.789)), (' A 350  VAL  CG2', ' A 402  ILE HG22', -0.478, (52.56, -43.147, 38.563)), (' A 438  SER  OG ', ' A 509  ARG  HG3', -0.476, (61.583, -41.836, 42.824)), (' A 403  ARG  HG2', ' A 406  GLU  HG3', -0.476, (52.885, -37.264, 35.658)), (' H  32  TYR  CE1', ' H  97  ARG  HG3', -0.475, (37.998, -34.526, 49.852)), (' H 170  LEU  HG ', ' H 176  TYR  CE1', -0.473, (13.162, -7.101, 34.154)), (' L 187  GLU  HG2', ' L 211  ARG  NH1', -0.473, (-4.75, -3.491, 10.183)), (' H  32  TYR  O  ', ' H  52A SER  OG ', -0.471, (31.287, -32.454, 53.631)), (' H  93  ALA  HB1', ' H 100L PHE  HB3', -0.47, (33.31, -24.583, 44.548)), (' H   6  GLN  NE2', ' H  90  TYR  O  ', -0.466, (23.259, -22.448, 44.317)), (' L 113  PRO  HB3', ' L 139  PHE  HB3', -0.461, (25.23, -8.065, 12.219)), (' H  18  VAL HG22', ' H  82C LEU HD11', -0.46, (15.089, -15.565, 50.81)), (' H  63  PHE  O  ', ' H  67  VAL HG12', -0.454, (24.29, -15.293, 58.403)), (' L  83  ILE  CG2', ' L 106  ILE HG12', -0.45, (36.481, -13.673, 22.75)), (' L  65  SER  HB3', ' L  72  THR HG22', -0.445, (52.382, -15.444, 36.544)), (' A 350  VAL  CG1', ' A 422  ASN  HB3', -0.443, (49.341, -45.237, 38.235)), (' H 108  LEU HD23', ' H 149  PRO  HD3', -0.442, (15.488, -17.141, 37.849)), (' L 162  SER  HB3', ' L 176  SER  HB3', -0.442, (17.321, -8.836, 21.904)), (' A 378  LYS  HD3', ' H  99  TYR  CE2', -0.442, (48.825, -31.199, 52.237)), (' H 150  VAL HG12', ' H 200  HIS  HB2', -0.439, (9.578, -18.521, 32.277)), (' H  18  VAL  O  ', ' H  81  GLU  HA ', -0.436, (17.551, -19.992, 53.309)), (' H  82  LEU HD23', ' H  82C LEU  CD2', -0.433, (17.846, -13.412, 51.79)), (' A 402  ILE HD13', ' A 410  ILE HD11', -0.433, (51.443, -40.1, 41.641)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.427, (38.974, -20.123, 32.662)), (' A 348  ALA  HB2', ' A 354  ASN  OD1', -0.426, (55.998, -52.297, 42.159)), (' H 196  CYS  SG ', ' H 209  LYS  HB3', -0.426, (7.243, -22.121, 21.335)), (' A 341  VAL HG11', ' A 397  ALA  HB1', -0.424, (55.688, -48.45, 52.015)), (' L 145  LYS  HB3', ' L 197  THR  OG1', -0.419, (22.9, 2.537, 12.391)), (' A 380  TYR  CZ ', ' A 412  PRO  HD2', -0.419, (43.664, -36.203, 50.254)), (' L 197  THR HG22', ' L 204  PRO  HB3', -0.415, (21.298, 2.541, 8.102)), (' H  19  LYS  CB ', ' H  81  GLU  HG3', -0.412, (15.551, -22.141, 53.635)), (' H  71  ARG  HG2', ' H  72  ASP  N  ', -0.409, (23.303, -33.135, 56.107)), (' H  82B SER  O  ', ' H  82B SER  OG ', -0.409, (16.785, -9.951, 56.578)), (' L  12  SER  HB3', ' L 107  LYS  HG3', -0.401, (39.155, -6.738, 21.528))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
