# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('H', '  88 ', 'GLU', 0.0207180969162177, (-33.453, -6.549000000000002, -60.28600000000001)), ('H', ' 120 ', 'THR', 0.025675393212056266, (-37.182999999999986, -24.607, -55.02000000000002)), ('L', '  94 ', 'SER', 0.0113695, (-27.303, 12.903, -54.585000000000015))]
data['omega'] = [('A', ' 159 ', 'PRO', None, (22.471999999999998, 32.237, -30.457)), ('A', ' 161 ', 'PRO', None, (19.16099999999999, 27.19600000000001, -32.409)), ('B', '   8 ', 'PRO', None, (12.371999999999996, 1.377, -14.575000000000003)), ('B', ' 146 ', 'PRO', None, (28.733999999999995, -0.75, -26.926000000000005)), ('H', ' 151 ', 'PRO', None, (-32.67499999999998, -22.391, -55.157)), ('H', ' 153 ', 'PRO', None, (-27.73899999999999, -20.775, -51.93100000000001)), ('L', '   8 ', 'PRO', None, (-7.032999999999998, 0.8950000000000002, -62.368000000000016)), ('L', ' 141 ', 'PRO', None, (-0.657, -17.525, -65.439))]
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' R 464  PHE  HA ', ' R 466  ARG HH21', -0.953, (-36.264, 28.111, -35.069)), (' R 423  TYR  HA ', ' R 466  ARG  NH1', -0.876, (-33.347, 26.176, -37.011)), (' B  14  THR  HB ', ' B  17  GLU  HG3', -0.873, (16.464, -9.426, -26.546)), (' R 353  TRP  HE1', ' R 466  ARG  HG2', -0.865, (-31.67, 27.078, -34.345)), (' H  27  PHE  HE2', ' H  97  ARG  HG3', -0.79, (-23.321, 1.165, -36.103)), (' B 150  LYS  HB3', ' B 202  THR HG22', -0.749, (38.961, 4.589, -23.821)), (' R 464  PHE  HA ', ' R 466  ARG  NH2', -0.747, (-35.739, 27.897, -35.389)), (' R 423  TYR  HA ', ' R 466  ARG HH11', -0.733, (-32.662, 25.994, -36.159)), (' R 472  ILE HD11', ' R 480  CYS  HB3', -0.721, (-18.695, 9.099, -24.067)), (' R 498  GLN  HB3', ' R 501  ASN HD21', -0.71, (-13.12, 22.739, -49.989)), (' H  27  PHE  CE2', ' H  97  ARG  HG3', -0.709, (-23.356, 0.767, -35.605)), (' L  35  TRP  HD1', ' L  48  ILE HD11', -0.705, (-9.398, 7.003, -49.692)), (' R 353  TRP  HE1', ' R 466  ARG  CG ', -0.705, (-32.025, 26.493, -33.908)), (' R 342  PHE  HE2', ' R 434  ILE HD11', -0.698, (-30.547, 39.32, -47.134)), (' H  82  MET  HB3', ' H  85  LEU HD21', -0.687, (-38.344, -5.928, -51.82)), (' H   5  VAL  HA ', ' H 109  GLN HE22', -0.681, (-25.603, -10.435, -39.641)), (' A   9  GLY  HA2', ' A  18  LEU HD21', -0.67, (11.111, 33.651, -27.826)), (' H  27  PHE  HA ', ' R 476  GLY  HA2', -0.67, (-24.352, 0.923, -29.439)), (' B 154  LYS  NZ ', ' B 200  GLU  OE1', -0.665, (48.053, 6.972, -26.578)), (' L  35  TRP  CD1', ' L  48  ILE HD11', -0.656, (-9.207, 6.532, -50.341)), (' B  33  ASN  HB2', ' R 481  ASN  HB3', -0.645, (-16.815, 8.073, -16.683)), (' A  69  THR  HB ', ' A  82  GLN  HB3', -0.637, (0.132, 35.917, -21.26)), (' H 123  PRO  HB3', ' H 149  TYR  HB3', -0.627, (-29.227, -28.668, -57.59)), (' A 221  LYS  NZ ', ' B 128  GLU  OE2', -0.625, (36.626, 28.682, -46.642)), (' B 113  ARG HH12', ' B 116  ALA  HB2', -0.625, (27.939, -2.992, -33.951)), (' A   1  GLU  HG3', ' A  26  GLY  HA3', -0.616, (-5.982, 20.552, -41.11)), (' L 105  GLU  HB3', ' L 166  GLN  NE2', -0.614, (-4.787, -12.347, -58.812)), (' B  85  ALA  HA ', ' B 111  ILE HD13', -0.611, (16.16, -0.482, -31.771)), (' A  83  MET  HE2', ' A  86  LEU HD21', -0.6, (9.188, 33.413, -20.534)), (' R 342  PHE  CE2', ' R 434  ILE HD11', -0.589, (-30.473, 39.804, -46.783)), (' R 465  GLU  O  ', ' R 466  ARG  HD3', -0.582, (-34.389, 23.984, -32.36)), (' H  34  MET  HB3', ' H  78  LEU HD22', -0.581, (-30.098, 0.65, -40.111)), (' L 163  VAL HG22', ' L 175  LEU HD12', -0.58, (-11.371, -19.992, -66.128)), (' R 355  ARG HH11', ' R 396  TYR  HB3', -0.575, (-36.173, 35.503, -35.281)), (' H 152  GLU  HB3', ' H 153  PRO  HA ', -0.572, (-25.951, -21.071, -53.579)), (' H 158  TRP  HB3', ' H 163  LEU HD23', -0.57, (-13.37, -35.301, -50.421)), (' R 405  ASP  O  ', ' R 408  ARG  HD3', -0.569, (-28.665, 21.615, -50.792)), (' H  20  LEU  HG ', ' H  82  MET  HE2', -0.565, (-35.141, -7.96, -47.243)), (' R 470  THR HG23', ' R 490  PHE  HE1', -0.563, (-18.74, 19.701, -27.225)), (' A  12  VAL HG11', ' A  86  LEU HD13', -0.56, (12.422, 35.311, -22.397)), (' L  33  LEU HD22', ' L  71  PHE  CG ', -0.552, (-11.677, 9.932, -54.21)), (' A  50  ALA  HB1', ' A 108  VAL HG12', -0.547, (-6.178, 22.917, -20.331)), (' B 150  LYS  HE2', ' B 202  THR HG21', -0.535, (40.499, 3.201, -22.913)), (' B  59  ARG  NH1', ' B  63  VAL  O  ', -0.535, (-1.977, 0.757, -32.339)), (' H 163  LEU HD21', ' H 186  VAL HG21', -0.528, (-10.547, -34.959, -52.129)), (' L  37  GLN  HB2', ' L  47  LEU HD11', -0.526, (-9.488, -2.438, -48.463)), (' A 200  SER  HB2', ' A 204  GLN  CG ', -0.526, (31.807, 9.573, -55.456)), (' L 105  GLU  HB3', ' L 166  GLN HE21', -0.525, (-4.74, -12.491, -58.114)), (' H   1  GLU  OE1', ' H  26  GLU  HG3', -0.524, (-19.937, -3.948, -27.135)), (' A  95  TYR  HB3', ' A 118  GLY  HA2', -0.524, (7.03, 23.189, -29.883)), (' A 131  PRO  HB3', ' A 157  TYR  HB3', -0.523, (27.538, 29.869, -35.056)), (' R 465  GLU  C  ', ' R 466  ARG  HD3', -0.518, (-34.507, 24.799, -32.153)), (' L  48  ILE HD13', ' L  64  GLY  HA3', -0.516, (-7.268, 7.31, -48.615)), (' B 113  ARG  NH1', ' B 116  ALA  HB2', -0.513, (27.374, -3.386, -33.364)), (' B 113  ARG  HG3', ' B 176  SER  HB2', -0.51, (21.564, -1.423, -32.306)), (' B 125  PRO  HG3', ' B 135  ALA  HB1', -0.502, (44.932, 23.131, -35.8)), (' A  75  SER  OG ', ' R 346  ARG  NH2', -0.5, (-11.884, 37.273, -36.668)), (' H 197  THR HG23', ' H 214  LYS  HE3', -0.499, (-16.299, -45.542, -52.053)), (' R 461  LEU  HG ', ' R 465  GLU  O  ', -0.497, (-34.311, 23.392, -32.299)), (' R 347  PHE  CE2', ' R 509  ARG  HB3', -0.496, (-24.815, 35.578, -43.655)), (' H  33  TYR  HB2', ' H  98  ASP  O  ', -0.495, (-25.439, 6.616, -39.468)), (' B  29  LEU  HA ', ' B  97  LEU HD11', -0.494, (-6.207, 9.656, -10.336)), (' A 100  ARG  HA ', ' A 113  ASP  HB2', -0.493, (-6.286, 14.545, -28.369)), (' R 498  GLN  HB3', ' R 501  ASN  ND2', -0.492, (-13.639, 22.903, -50.221)), (' L 151  ASP  OD1', ' L 190  LYS  HB3', -0.492, (-15.734, -40.177, -82.892)), (' B  66  ARG  NH1', ' B  87  ASP  OD2', -0.49, (8.679, -1.776, -30.752)), (' H 197  THR HG22', ' H 199  ILE HD11', -0.49, (-16.797, -43.286, -49.88)), (' A  51  ILE HD11', ' A  55  GLY  HA2', -0.489, (-9.225, 30.641, -23.18)), (' A 115  TRP  CE3', ' B  49  PRO  HG2', -0.488, (5.418, 16.844, -26.518)), (' L  30  SER  OG ', ' L  31  SER  N  ', -0.487, (-13.91, 17.693, -50.76)), (' R 431  GLY  HA2', ' R 515  PHE  CD2', -0.486, (-41.667, 37.004, -43.924)), (' H 150  PHE  HA ', ' H 151  PRO  HA ', -0.485, (-31.18, -22.64, -57.399)), (' H  88  GLU  N  ', ' H  88  GLU  OE1', -0.477, (-35.044, -6.761, -61.023)), (' B  35  TYR  CD2', ' B  55  LEU HD13', -0.477, (-11.038, 6.719, -20.67)), (' A  72  ARG  HD3', ' A  74  ASN  OD1', -0.476, (-9.777, 29.171, -29.214)), (' R 490  PHE  CE2', ' R 492  LEU  HB2', -0.473, (-18.296, 19.744, -31.81)), (' R 355  ARG  HD3', ' R 396  TYR  CD1', -0.472, (-36.705, 36.748, -33.298)), (' A  97  ALA  HB3', ' A 112  LYS  HD2', -0.471, (0.234, 19.001, -24.715)), (' L 155  GLN  OE1', ' L 158  ASN  ND2', -0.469, (-21.32, -28.47, -79.628)), (' A  22  CYS  HB3', ' A  79  LEU  HB3', -0.468, (-0.886, 28.231, -30.089)), (' L  75  ILE HG21', ' L  78  LEU HD23', -0.466, (-1.015, -3.555, -50.559)), (' A 200  SER  HB2', ' A 204  GLN  HG2', -0.465, (32.53, 9.785, -55.446)), (' B 168  VAL HG22', ' B 180  LEU HD12', -0.464, (30.603, 10.073, -27.252)), (' B 113  ARG  HD3', ' B 114  THR  N  ', -0.464, (24.268, -4.991, -31.068)), (' R 355  ARG  HG3', ' R 398  ASP  OD1', -0.463, (-33.984, 35.026, -35.524)), (' R 470  THR HG23', ' R 490  PHE  CE1', -0.463, (-18.478, 19.594, -27.618)), (' R 364  ASP  O  ', ' R 367  VAL HG22', -0.462, (-33.863, 47.677, -47.893)), (' A  63  SER  O  ', ' A  67  ARG  NH2', -0.461, (7.639, 30.878, -13.422)), (' R 468  ILE  HA ', ' R 468  ILE HD12', -0.456, (-25.804, 25.313, -29.372)), (' A  34  MET  HG2', ' A  72  ARG  NH2', -0.456, (-7.192, 25.507, -27.105)), (' L  48  ILE HG22', ' L  54  ARG  HA ', -0.454, (-7.554, 5.672, -43.422)), (' L  16  GLY  HA2', ' L  77  ARG  HD3', -0.45, (6.261, -5.374, -49.65)), (' A 200  SER  HB2', ' A 204  GLN  HG3', -0.449, (31.494, 9.592, -55.015)), (' A  61  ALA  O  ', ' A  65  LYS  HG3', -0.446, (1.378, 28.727, -11.959)), (' R 353  TRP  HE1', ' R 466  ARG  CB ', -0.444, (-31.359, 26.778, -33.091)), (' B 150  LYS  HE2', ' B 202  THR  CG2', -0.443, (40.564, 3.345, -23.114)), (' R 353  TRP  NE1', ' R 466  ARG  HG2', -0.442, (-30.909, 26.992, -34.349)), (' L   4  LEU  HA ', ' L   4  LEU HD23', -0.441, (-16.678, 8.301, -59.758)), (' B 145  TYR  CG ', ' B 146  PRO  HA ', -0.44, (26.594, -0.132, -27.199)), (' H  66  ARG  HB3', ' H  83  ASN  O  ', -0.438, (-41.57, -2.752, -53.568)), (' B 130  LEU HD21', ' B 135  ALA  HB2', -0.437, (45.493, 25.405, -35.503)), (' A 131  PRO  HD2', ' A 217  THR HG21', -0.436, (26.588, 32.074, -39.488)), (' A  32  TYR  CD1', ' A  98  LYS  HD3', -0.434, (-8.762, 18.779, -29.942)), (' R 338  PHE  O  ', ' R 342  PHE  HD1', -0.433, (-29.175, 43.706, -42.667)), (' H  19  ARG  HD2', ' H  81  GLN  OE1', -0.43, (-42.142, -6.118, -43.021)), (' A  13  GLN  HG2', ' A  14  PRO  HD2', -0.429, (19.207, 39.449, -19.951)), (' H 193  LEU  HA ', ' H 193  LEU HD23', -0.427, (-9.043, -43.46, -55.498)), (' B  13  VAL  O  ', ' B 112  LYS  N  ', -0.426, (18.706, -3.496, -26.354)), (' A  33  ALA  HB1', ' A 108  VAL HG13', -0.425, (-7.909, 23.088, -22.096)), (' A  86  LEU  HA ', ' A  86  LEU HD23', -0.424, (10.5, 34.511, -17.43)), (' H 175  GLN  H  ', ' H 175  GLN  HG2', -0.422, (-27.733, -23.242, -65.18)), (' A  39  GLN  NE2', ' A  43  ARG  O  ', -0.421, (13.381, 16.724, -21.813)), (' B 112  LYS  HA ', ' B 145  TYR  OH ', -0.42, (22.181, -2.542, -25.52)), (' A 183  GLN  NE2', ' A 189  SER  HB2', -0.42, (32.139, 26.048, -30.153)), (' L 140  TYR  CG ', ' L 141  PRO  HA ', -0.418, (-1.389, -16.426, -63.535)), (' R 398  ASP  O  ', ' R 511  VAL  HA ', -0.418, (-30.477, 35.185, -41.61)), (' A  98  LYS  HD2', ' A  99  THR  O  ', -0.416, (-7.033, 17.713, -28.364)), (' H 149  TYR  CZ ', ' H 180  TYR  HB3', -0.415, (-26.839, -23.765, -58.663)), (' A 154  VAL HG11', ' A 162  VAL HG11', -0.414, (25.976, 25.156, -37.087)), (' A  35  ASN  O  ', ' A  96  CYS  HA ', -0.414, (0.475, 23.907, -25.968)), (' A   3  GLN  HG2', ' A  25  SER  HB3', -0.414, (-2.122, 22.791, -39.573)), (' H  13  GLN  CD ', ' H  13  GLN  H  ', -0.414, (-42.807, -15.831, -53.985)), (' H 147  LYS  NZ ', ' H 148  ASP  OD1', -0.411, (-29.833, -30.524, -66.032)), (' B  42  LEU HD13', ' B  91  TYR  CZ ', -0.411, (9.454, 4.911, -26.199)), (' A  98  LYS  HE3', ' A 114  TYR  HD1', -0.408, (-4.772, 17.008, -32.247)), (' L 186  TYR  CZ ', ' L 211  ARG  HG3', -0.408, (-20.295, -40.235, -74.913)), (' R 392  PHE  CD1', ' R 515  PHE  HB3', -0.407, (-44.969, 40.393, -41.053)), (' R 350  VAL HG22', ' R 422  ASN  HB3', -0.406, (-28.022, 24.377, -37.916)), (' H 167  VAL HG22', ' H 186  VAL  HB ', -0.406, (-11.669, -32.464, -53.025)), (' R 423  TYR  CD2', ' R 466  ARG  NH1', -0.406, (-32.444, 27.409, -36.646)), (' B  95  GLN  NE2', ' B 100  PRO  O  ', -0.406, (-0.773, 16.955, -12.005)), (' R 465  GLU  N  ', ' R 466  ARG  HE ', -0.405, (-35.463, 26.301, -32.897)), (' R 472  ILE HD12', ' R 488  CYS  HB3', -0.403, (-18.308, 9.833, -25.951)), (' L 183  LYS  HE2', ' L 187  GLU  OE2', -0.403, (-27.993, -42.977, -74.381)), (' B  21  ILE HD13', ' B 107  THR  HB ', -0.401, (10.54, 4.288, -19.517)), (' H   6  GLU  OE1', ' H 109  GLN  NE2', -0.4, (-25.705, -9.974, -41.336)), (' H   6  GLU  H  ', ' H 109  GLN  NE2', -0.4, (-26.389, -10.39, -41.024)), (' L   8  PRO  HG3', ' L  11  LEU HD13', -0.4, (-3.492, -1.112, -62.086)), (' H  90  THR HG23', ' H 114  THR  HA ', -0.4, (-31.959, -13.243, -55.623))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
