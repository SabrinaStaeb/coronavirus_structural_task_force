
from __future__ import division
import cPickle
try :
  import gobject
except ImportError :
  gobject = None
import sys

dict_residue_prop_objects = {}
class coot_extension_gui (object) :
  def __init__ (self, title) :
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window (self) :
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window (self, *args) :
    self.window.destroy()
    self.window = None

  def confirm_data (self, data) :
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists (self, data) :
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)
        ##save property list frame object
        dict_residue_prop_objects[data_key] = list_obj
# Molprobity result viewer
class coot_molprobity_todo_list_gui (coot_extension_gui) :
  data_keys = [ "clusters","rama", "rota", "cbeta", "probe", "smoc", "cablam",
               "jpred"]
  data_titles = { "clusters"  : "Outlier residue clusters",
                  "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes",
                  "smoc"  : "Local density fit (SMOC)",
                  "cablam": "Ca geometry (CaBLAM)",
                  "jpred":"SS prediction"}
  data_names = { "clusters"  : ["Chain","Residue","Cluster","Outlier types"],
                 "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"],
                 "smoc" : ["Chain", "Residue", "Name", "Score"],
                 "cablam" : ["Chain", "Residue","Name","recommendation","DSSP"],
                 "jpred" : ["Chain", "Residue","Name","predicted SS","current SS"]}
  if (gobject is not None) :
    data_types = {  "clusters" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_INT, gobject.TYPE_STRING,
                             gobject.TYPE_PYOBJECT],
                    "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "smoc" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cablam" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_STRING,
                             gobject.TYPE_STRING,gobject.TYPE_PYOBJECT],
                   "jpred" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING,gobject.TYPE_STRING,
                             gobject.TYPE_STRING,gobject.TYPE_PYOBJECT]}
  else :
    data_types = dict([ (s, []) for s in ["clusters","rama","rota","cbeta","probe","smoc",
                                          "cablam","jpred"] ])

  def __init__ (self, data_file=None, data=None) :
    assert ([data, data_file].count(None) == 1)
    if (data is None) :
      data = load_pkl(data_file)
    if not self.confirm_data(data) :
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets (self, data_key, box) :
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots (self, *args) :
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots (self, *args) :
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui (coot_extension_gui) :
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list (object) :
  def __init__ (self, columns, column_types, rows, box,
      default_size=(380,200)) :
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)) :
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    ##adding a column type for checkbox (bool) before atom coordinate
    if gobject is not None:
        column_types = column_types[:-1]+[bool]+[column_types[-1]]
    
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns) :
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    ##add a cell for checkbox
    cell1 = gtk.CellRendererToggle()
    cell1.connect ("toggled", self.on_selected_toggled)
    column = gtk.TreeViewColumn('Dealt with',cell1,active=i+1)
    self.listctrl.append_column(column)
    #column.set_sort_column_id(i+1)
    #column.pack_start(cell1, True)
    
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      row = row[:-1] + (False,)+(row[-1],)
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange (self, treeview) :
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()
  ##check box toggle
  def on_selected_toggled(self,renderer,path):
    if path is not None:
      model = self.listmodel.get_model()
      it = model.get_iter(path)
      #set toggle
      model[it][-2] = not model[it][-2]
      #set checkboxes for same residues in other lists
      try:
        chain = model[it][0]
        residue = model[it][1]
        for data_key in dict_residue_prop_objects:
          prop_obj = dict_residue_prop_objects[data_key]
          for row in prop_obj.listmodel.get_model():
            if data_key == 'probe':
              atom1_split = row[0].split()
              atom2_split = row[1].split()
              if atom1_split[0] == chain and atom1_split[1] == residue:
                row[-2] = model[it][-2]
              elif atom2_split[0] == chain and atom2_split[1] == residue:
                row[-2] = model[it][-2]
            elif row[0] == chain and row[1] == residue:
              row[-2] = model[it][-2]
      except IndexError: pass

  def check_chain_residue(self,chain,residue):
      pass
  
def show_probe_dots (show_dots, overlaps_only) :
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects) :
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects) :
      set_display_generic_object(object_number, 0)

def load_pkl (file_name) :
  pkl = open(file_name, "rb")
  data = cPickle.load(pkl)
  pkl.close()
  return data
data = {}
data['jpred'] = []
data['probe'] = [(' A 655  HIS  O  ', ' A1310  NAG  H81', -0.508, (171.433, 227.409, 185.822)), (' A 520  ALA  HB1', ' A 521  PRO  HD2', -0.503, (178.881, 190.394, 229.766)), (' A 360  ASN  H  ', ' A 523  THR HG22', -0.496, (176.727, 193.575, 239.453)), (' C 360  ASN  H  ', ' C 523  THR HG22', -0.48, (208.829, 245.671, 241.612)), (' B 574  ASP  OD1', ' B 575  ALA  N  ', -0.468, (234.28, 189.691, 216.639)), (' B 655  HIS  O  ', ' B1309  NAG  H81', -0.456, (214.587, 167.849, 188.827)), (' B1028  LYS  NZ ', ' B1042  PHE  O  ', -0.451, (204.769, 203.202, 173.697)), (' B 343  ASN  OD1', ' B1306  NAG  C7 ', -0.444, (238.448, 179.41, 257.789)), (' C1142  GLN  N  ', ' C1143  PRO  CD ', -0.438, (221.229, 215.228, 125.318)), (' B 811  LYS  NZ ', ' B 820  ASP  OD2', -0.437, (179.047, 199.262, 175.895)), (' C 796  ASP  N  ', ' C 796  ASP  OD1', -0.436, (232.119, 186.704, 158.57)), (' B 123  ALA  HB3', ' B1302  NAG  H82', -0.433, (164.354, 167.306, 237.47)), (' A 579  PRO  O  ', ' A1306  NAG  H82', -0.43, (169.03, 197.732, 231.681)), (' A 360  ASN  H  ', ' A 523  THR  CG2', -0.427, (176.566, 193.369, 238.893)), (' A1142  GLN  N  ', ' A1143  PRO  CD ', -0.423, (207.688, 213.252, 124.581)), (' C 520  ALA  HB1', ' C 521  PRO  HD2', -0.416, (206.117, 244.935, 231.243)), (' C 599  THR HG22', ' C 601  GLY  H  ', -0.415, (243.135, 217.156, 198.14)), (' C 202  LYS  NZ ', ' C 228  ASP  OD2', -0.412, (240.12, 200.117, 234.156)), (' A 266  TYR  CD1', ' A 266  TYR  N  ', -0.411, (178.826, 252.985, 223.634)), (' C 391  CYS  SG ', ' C 522  ALA  HB1', -0.41, (211.944, 241.196, 236.299)), (' A 391  CYS  SG ', ' A 522  ALA  HB1', -0.403, (177.952, 199.039, 233.807))]
data['cbeta'] = [('B', '1070 ', 'ALA', ' ', 0.2755474738544204, (204.092, 187.736, 157.531))]
data['smoc'] = [('A', 36, u'VAL', 0.6700510390560095, (190.985, 244.424, 218.73899999999998)), ('A', 44, u'ARG', 0.7615551191737412, (206.27499999999998, 242.52200000000002, 216.577)), ('A', 53, u'ASP', 0.654589131463342, (191.79299999999998, 235.598, 222.85800000000003)), ('A', 66, u'HIS', 0.7486324314935756, (172.447, 257.247, 225.296)), ('A', 82, u'PRO', 0.6629811196737293, (171.85500000000002, 250.805, 234.434)), ('A', 83, u'VAL', 0.720127659267315, (173.52700000000002, 247.585, 235.697)), ('A', 88, u'ASP', 0.7111724403594958, (183.192, 236.70499999999998, 230.018)), ('A', 98, u'SER', 0.6977720199112509, (182.478, 267.397, 227.79399999999998)), ('A', 108, u'THR', 0.6727543715966715, (178.363, 241.136, 241.865)), ('A', 113, u'LYS', 0.619334988466415, (179.77499999999998, 243.95700000000002, 249.541)), ('A', 118, u'LEU', 0.6589313174945226, (185.288, 251.695, 241.607)), ('A', 121, u'ASN', 0.600135838018823, (188.08200000000002, 260.345, 236.905)), ('A', 128, u'ILE', 0.6276341434787358, (191.1, 253.945, 241.38500000000002)), ('A', 132, u'GLU', 0.6505744543943984, (183.125, 247.995, 249.11899999999997)), ('A', 135, u'PHE', 0.6148318203984734, (176.27899999999997, 253.30200000000002, 246.372)), ('A', 186, u'PHE', 0.7070296291740179, (180.95200000000003, 264.38599999999997, 219.909)), ('A', 191, u'GLU', 0.7026585059032067, (187.52800000000002, 252.904, 224.184)), ('A', 193, u'VAL', 0.6940681958210392, (188.41299999999998, 246.561, 227.306)), ('A', 266, u'TYR', 0.7127366814262537, (178.286, 251.23, 223.946)), ('A', 276, u'LEU', 0.7651428384487741, (194.785, 237.27499999999998, 212.313)), ('A', 285, u'ILE', 0.7849406534470247, (198.21399999999997, 246.71599999999998, 214.564)), ('A', 291, u'CYS', 0.6807970197704826, (188.48800000000003, 234.102, 211.483)), ('A', 298, u'GLU', 0.697572058957136, (188.012, 231.96, 207.038)), ('A', 308, u'VAL', 0.781921603571818, (193.138, 235.848, 198.525)), ('A', 309, u'GLU', 0.7775774047012205, (193.936, 234.836, 194.977)), ('A', 312, u'ILE', 0.7755781684513338, (189.10399999999998, 227.21299999999997, 195.537)), ('A', 315, u'THR', 0.7428599731729287, (189.32800000000003, 225.997, 205.03)), ('A', 324, u'GLU', 0.800352909221269, (170.58200000000002, 216.291, 223.585)), ('A', 333, u'THR', 0.7533956161121559, (168.22, 200.05700000000002, 242.71299999999997)), ('A', 343, u'ASN', 0.7316864540189709, (183.624, 198.865, 258.05400000000003)), ('A', 346, u'ARG', 0.6972317701689679, (187.54299999999998, 191.58200000000002, 260.812)), ('A', 348, u'ALA', 0.7959052176689235, (192.311, 188.86800000000002, 256.84900000000005)), ('A', 356, u'LYS', 0.7836130979778733, (184.904, 189.971, 247.924)), ('A', 388, u'ASN', 0.7369012965511154, (180.834, 207.71099999999998, 239.42600000000002)), ('A', 403, u'ARG', 0.7604776860264278, (202.046, 197.6, 258.815)), ('A', 408, u'ARG', 0.7800330450881525, (203.439, 202.108, 249.89800000000002)), ('A', 414, u'GLN', 0.7333765037117492, (206.503, 197.937, 243.32000000000002)), ('A', 417, u'LYS', 0.7644910127722575, (208.80700000000002, 191.99800000000002, 251.10399999999998)), ('A', 437, u'ASN', 0.7770543714058895, (195.15200000000002, 203.272, 260.365)), ('A', 450, u'ASN', 0.7347773386386771, (197.136, 187.162, 264.522)), ('A', 466, u'ARG', 0.7706465954585481, (197.069, 184.07399999999998, 246.915)), ('A', 495, u'TYR', 0.7124757336456164, (203.377, 191.48700000000002, 262.858)), ('A', 497, u'PHE', 0.7093444727418721, (201.108, 195.01899999999998, 266.459)), ('A', 498, u'GLN', 0.6737683655625947, (200.349, 196.883, 269.663)), ('A', 499, u'PRO', 0.6636688036964208, (198.165, 199.995, 270.33799999999997)), ('A', 511, u'VAL', 0.7616069703982268, (191.305, 197.572, 250.589)), ('A', 527, u'PRO', 0.7931639549550163, (174.974, 206.85200000000003, 241.118)), ('A', 533, u'LEU', 0.6859859698976114, (166.596, 208.089, 224.52)), ('A', 537, u'LYS', 0.7753741283725657, (168.939, 213.091, 216.053)), ('A', 549, u'THR', 0.793439820555571, (178.664, 211.74599999999998, 219.689)), ('A', 569, u'ILE', 0.7354193009642179, (187.19899999999998, 198.194, 211.417)), ('A', 578, u'ASP', 0.7529753324420777, (170.576, 199.73499999999999, 225.17)), ('A', 595, u'VAL', 0.7624617013668976, (184.221, 223.129, 203.46800000000002)), ('A', 609, u'ALA', 0.7996065578554901, (180.447, 230.786, 197.11399999999998)), ('A', 620, u'VAL', 0.7470425739967171, (173.597, 222.476, 205.70399999999998)), ('A', 641, u'ASN', 0.7141612707341088, (170.531, 229.912, 195.147)), ('A', 649, u'CYS', 0.801844820834166, (176.251, 221.11599999999999, 198.042)), ('A', 658, u'ASN', 0.7643713580240571, (175.63299999999998, 227.698, 179.278)), ('A', 662, u'CYS', 0.7686027479936546, (186.83700000000002, 226.153, 183.141)), ('A', 675, u'GLN', 0.7317621875131509, (180.889, 237.071, 185.497)), ('A', 702, u'GLU', 0.7360421407321133, (182.51899999999998, 221.292, 168.374)), ('A', 714, u'ILE', 0.6957103600427487, (195.147, 220.677, 151.162)), ('A', 719, u'THR', 0.7859171612668487, (201.965, 230.955, 158.92700000000002)), ('A', 725, u'GLU', 0.7458945663921132, (207.583, 226.77399999999997, 176.698)), ('A', 738, u'CYS', 0.641542352589589, (220.71099999999998, 220.511, 211.782)), ('A', 743, u'CYS', 0.6915180881428172, (220.288, 223.202, 219.612)), ('A', 749, u'CYS', 0.697038897481079, (221.007, 220.403, 224.14)), ('A', 759, u'PHE', 0.7396186599898243, (219.85500000000002, 211.218, 212.73299999999998)), ('A', 762, u'GLN', 0.706815364511148, (222.483, 212.23999999999998, 207.584)), ('A', 765, u'ARG', 0.7760672041245706, (224.196, 214.91899999999998, 203.994)), ('A', 792, u'PRO', 0.8061582068079176, (228.918, 238.26399999999998, 163.08700000000002)), ('A', 802, u'PHE', 0.7489179411059509, (217.02200000000002, 237.833, 165.829)), ('A', 811, u'LYS', 0.7307405323779119, (224.255, 246.354, 179.008)), ('A', 822, u'LEU', 0.7413916698938052, (211.911, 236.9, 181.761)), ('A', 856, u'ASN', 0.6859360606217112, (218.22, 229.58700000000002, 212.304)), ('A', 861, u'LEU', 0.8213155078859764, (224.511, 228.618, 198.64299999999997)), ('A', 864, u'LEU', 0.7539550271279283, (228.095, 227.461, 190.268)), ('A', 869, u'MET', 0.7621681893089387, (227.287, 232.54, 182.57899999999998)), ('A', 877, u'LEU', 0.7325921585274371, (223.68800000000002, 227.85000000000002, 171.531)), ('A', 895, u'GLN', 0.7614810814923553, (228.525, 227.86800000000002, 158.45800000000003)), ('A', 900, u'MET', 0.7394696310912251, (219.478, 228.089, 153.11399999999998)), ('A', 909, u'ILE', 0.7552278925050327, (208.732, 218.752, 157.463)), ('A', 912, u'THR', 0.7429165626428945, (209.74299999999997, 221.434, 149.218)), ('A', 913, u'GLN', 0.7663716040945148, (212.288, 224.20499999999998, 149.78)), ('A', 958, u'ALA', 0.6814665401384076, (209.046, 224.923, 202.915)), ('A', 962, u'LEU', 0.6917772704116559, (210.505, 224.98200000000003, 209.02100000000002)), ('A', 979, u'ASP', 0.7295241846037118, (214.36700000000002, 229.844, 228.847)), ('A', 980, u'ILE', 0.7165393473439396, (214.354, 226.18, 229.772)), ('A', 990, u'GLU', 0.7544967379536336, (216.97, 217.664, 230.02)), ('A', 995, u'ARG', 0.7524691158466624, (210.752, 217.12800000000001, 224.078)), ('A', 1002, u'GLN', 0.7217381373271056, (211.05800000000002, 215.43800000000002, 213.393)), ('A', 1005, u'GLN', 0.6993146706187191, (213.076, 215.072, 208.754)), ('A', 1011, u'GLN', 0.7271186905133165, (212.918, 218.632, 199.56)), ('A', 1019, u'ARG', 0.7149178941929698, (215.341, 216.79899999999998, 188.23399999999998)), ('A', 1032, u'CYS', 0.6709919897522477, (214.659, 220.66299999999998, 169.651)), ('A', 1038, u'LYS', 0.7970453795943987, (209.909, 215.05, 164.323)), ('A', 1041, u'ASP', 0.7740098036551928, (203.88000000000002, 218.45200000000003, 169.948)), ('A', 1072, u'GLU', 0.7238565938827471, (192.991, 225.305, 152.864)), ('A', 1077, u'THR', 0.7505259381251999, (191.15, 213.124, 145.04899999999998)), ('A', 1081, u'ILE', 0.7789411716436291, (195.268, 207.30800000000002, 137.9)), ('A', 1082, u'CYS', 0.6814942630575892, (194.834, 205.11899999999997, 134.762)), ('A', 1105, u'THR', 0.7781400798343173, (201.059, 218.18800000000002, 144.495)), ('A', 1119, u'ASN', 0.7589894586737723, (206.16, 212.646, 139.029)), ('A', 1129, u'VAL', 0.7729747599368283, (193.346, 199.636, 142.67399999999998)), ('A', 1301, u'NAG', 0.6766464561218002, (173.42800000000003, 246.253, 214.984)), ('A', 1302, u'NAG', 0.6379405929548648, (191.187, 266.974, 240.984)), ('A', 1305, u'NAG', 0.7079415158956315, (204.177, 252.12, 208.73999999999998)), ('A', 1306, u'NAG', 0.7116059244893721, (168.186, 196.60399999999998, 232.61399999999998)), ('A', 1307, u'NAG', 0.6362855653251538, (182.26999999999998, 202.60399999999998, 253.864)), ('A', 1308, u'NAG', 0.7081653757385635, (192.772, 247.455, 194.54399999999998)), ('A', 1309, u'NAG', 0.6938464989237, (172.687, 214.061, 196.238)), ('A', 1310, u'NAG', 0.6027009963059984, (170.265, 226.24599999999998, 185.35000000000002)), ('A', 1311, u'NAG', 0.727137640842764, (186.313, 206.08800000000002, 145.16899999999998)), ('A', 1313, u'NAG', 0.735810984260114, (202.854, 239.433, 156.804)), ('A', 1319, u'NAG', 0.7797365127836343, (187.475, 204.79299999999998, 135.942)), ('B', 30, u'ASN', 0.8024076446193921, (190.002, 163.788, 213.82000000000002)), ('B', 41, u'LYS', 0.7878549219183069, (180.918, 189.565, 223.23299999999998)), ('B', 51, u'THR', 0.7843125577509891, (192.35100000000003, 187.085, 217.16)), ('B', 98, u'SER', 0.6078161036273018, (170.048, 158.172, 225.43)), ('B', 123, u'ALA', 0.6304174884158696, (165.377, 165.61499999999998, 235.165)), ('B', 166, u'CYS', 0.6594564290254458, (180.222, 176.58100000000002, 249.446)), ('B', 169, u'GLU', 0.7111285396344106, (175.62, 177.925, 243.845)), ('B', 172, u'SER', 0.6373089217347084, (168.88200000000003, 176.80700000000002, 236.142)), ('B', 191, u'GLU', 0.7485192084434473, (179.901, 170.685, 221.726)), ('B', 202, u'LYS', 0.7352232496407105, (183.685, 180.287, 230.959)), ('B', 211, u'ASN', 0.6504217315790439, (173.17399999999998, 161.681, 211.075)), ('B', 215, u'ASP', 0.7371205442680898, (182.894, 159.134, 214.084)), ('B', 219, u'GLY', 0.7436807227892785, (181.871, 170.476, 209.20399999999998)), ('B', 229, u'LEU', 0.6648845493510274, (181.037, 181.30200000000002, 236.74599999999998)), ('B', 233, u'ILE', 0.650017621724754, (188.43200000000002, 177.38100000000003, 241.253)), ('B', 235, u'ILE', 0.6923216309005684, (191.236, 173.339, 237.781)), ('B', 240, u'THR', 0.6788019756488296, (183.031, 163.38600000000002, 233.007)), ('B', 267, u'VAL', 0.7708717836705825, (188.258, 165.23899999999998, 224.685)), ('B', 268, u'GLY', 0.6639014320207564, (190.631, 167.74299999999997, 223.151)), ('B', 281, u'GLU', 0.7751511784894741, (176.376, 189.48000000000002, 207.221)), ('B', 299, u'THR', 0.7926351340385559, (199.737, 182.923, 204.017)), ('B', 301, u'CYS', 0.7701664791108137, (196.359, 184.872, 207.85500000000002)), ('B', 309, u'GLU', 0.8003528451027012, (196.39200000000002, 184.506, 194.576)), ('B', 312, u'ILE', 0.7980057219136962, (205.26399999999998, 184.122, 196.343)), ('B', 315, u'THR', 0.766452632111075, (204.74499999999998, 185.176, 205.80700000000002)), ('B', 335, u'LEU', 0.743892456662736, (239.83800000000002, 185.094, 247.231)), ('B', 336, u'CYS', 0.6805458381630628, (239.606, 187.176, 250.43800000000002)), ('B', 353, u'TRP', 0.6590900475317033, (237.963, 193.77899999999997, 269.151)), ('B', 356, u'LYS', 0.7290475292400254, (240.42100000000002, 193.371, 259.628)), ('B', 361, u'CYS', 0.6545653357112128, (239.03, 189.88100000000003, 245.853)), ('B', 377, u'PHE', 0.6796517483082402, (224.341, 182.976, 260.566)), ('B', 385, u'THR', 0.6660633794405244, (221.83700000000002, 183.798, 250.118)), ('B', 391, u'CYS', 0.6340757310903208, (229.42800000000003, 193.46, 245.662)), ('B', 408, u'ARG', 0.7023945800211862, (221.965, 188.106, 270.88)), ('B', 414, u'GLN', 0.6301918270966713, (220.008, 196.291, 270.52299999999997)), ('B', 415, u'THR', 0.6544703263530872, (220.90800000000002, 197.393, 274.043)), ('B', 423, u'TYR', 0.6462053848697092, (230.505, 196.76399999999998, 270.48599999999993)), ('B', 432, u'CYS', 0.661365162763595, (226.242, 189.798, 258.444)), ('B', 437, u'ASN', 0.620113894351167, (230.972, 178.29299999999998, 270.292)), ('B', 439, u'ASN', 0.6066906298637567, (234.13, 175.89100000000002, 274.508)), ('B', 443, u'SER', 0.6159005428298857, (237.605, 178.038, 277.666)), ('B', 448, u'ASN', 0.6155099625504687, (239.945, 182.01399999999998, 280.824)), ('B', 491, u'PRO', 0.5870471108034956, (236.172, 199.94, 284.258)), ('B', 515, u'PHE', 0.6854587869481537, (229.38500000000002, 196.117, 254.242)), ('B', 549, u'THR', 0.7483255702394649, (223.026, 184.524, 220.844)), ('B', 550, u'GLY', 0.7807683524832657, (225.20499999999998, 182.893, 218.21899999999997)), ('B', 556, u'ASN', 0.7570417785294535, (241.662, 182.535, 212.835)), ('B', 565, u'PHE', 0.7596934611375714, (236.448, 191.349, 222.318)), ('B', 568, u'ASP', 0.7260209783637424, (233.142, 194.171, 212.999)), ('B', 586, u'ASP', 0.7433539038864322, (234.161, 183.718, 216.26299999999998)), ('B', 598, u'ILE', 0.7885171717692442, (205.212, 179.654, 196.865)), ('B', 602, u'THR', 0.7822992743006697, (193.906, 178.437, 195.70499999999998)), ('B', 609, u'ALA', 0.7807919500053402, (206.19299999999998, 174.9, 198.472)), ('B', 617, u'CYS', 0.68868836372673, (219.107, 172.627, 204.02200000000002)), ('B', 620, u'VAL', 0.7084792392201907, (215.648, 173.712, 208.571)), ('B', 641, u'ASN', 0.7286537152026666, (212.007, 166.56, 197.72299999999998)), ('B', 661, u'GLU', 0.78611765861359, (208.90800000000002, 180.411, 180.95800000000003)), ('B', 671, u'CYS', 0.6957121921734921, (211.27399999999997, 180.002, 189.032)), ('B', 676, u'THR', 0.6992779496483151, (201.176, 168.08200000000002, 185.21699999999998)), ('B', 702, u'GLU', 0.742818654353935, (217.32800000000003, 179.93, 170.859)), ('B', 720, u'ILE', 0.7327770321357341, (198.69899999999998, 193.971, 160.69)), ('B', 722, u'VAL', 0.7782054919371171, (197.089, 195.35200000000003, 167.2)), ('B', 729, u'VAL', 0.7695818963424638, (197.22899999999998, 208.36200000000002, 184.657)), ('B', 753, u'LEU', 0.6939445182869431, (197.634, 218.87, 218.94)), ('B', 759, u'PHE', 0.7023928734983342, (202.641, 219.592, 211.415)), ('B', 760, u'CYS', 0.6436801885429362, (198.869, 218.959, 210.966)), ('B', 775, u'ASP', 0.7785164426548231, (193.58100000000002, 216.504, 187.58)), ('B', 781, u'VAL', 0.6473908819104166, (196.97, 213.125, 178.812)), ('B', 795, u'LYS', 0.7334835090165525, (181.42600000000002, 204.71899999999997, 157.939)), ('B', 820, u'ASP', 0.7718067976171296, (183.102, 199.278, 178.342)), ('B', 827, u'THR', 0.7698768585524391, (187.471, 197.334, 190.737)), ('B', 854, u'LYS', 0.7677239449129677, (185.034, 206.725, 206.24699999999999)), ('B', 860, u'VAL', 0.8000829620722081, (187.58200000000002, 211.178, 198.52700000000002)), ('B', 861, u'LEU', 0.8059721651439086, (187.18800000000002, 214.083, 196.155)), ('B', 885, u'GLY', 0.7360957625114477, (195.27599999999998, 211.783, 160.13)), ('B', 903, u'ALA', 0.6585905530302392, (198.984, 205.023, 152.14499999999998)), ('B', 918, u'GLU', 0.7786217007617368, (196.994, 196.40800000000002, 145.85600000000002)), ('B', 945, u'LEU', 0.7661790765259472, (194.51899999999998, 195.548, 183.185)), ('B', 954, u'GLN', 0.7299503516245756, (197.909, 200.19299999999998, 196.584)), ('B', 975, u'SER', 0.7563896406340832, (193.44, 203.45800000000003, 221.78)), ('B', 979, u'ASP', 0.7291954735552622, (187.784, 206.228, 226.95100000000002)), ('B', 997, u'ILE', 0.7163105704621745, (198.841, 212.046, 219.207)), ('B', 1011, u'GLN', 0.6784143543416584, (201.33, 209.08200000000002, 198.781)), ('B', 1018, u'ILE', 0.7238351274133549, (201.945, 208.086, 188.629)), ('B', 1032, u'CYS', 0.6811908436210077, (201.64499999999998, 207.889, 168.73899999999998)), ('B', 1043, u'CYS', 0.7531471771258385, (204.06, 201.916, 170.066)), ('B', 1045, u'LYS', 0.7537257259725658, (206.16299999999998, 195.512, 168.071)), ('B', 1046, u'GLY', 0.6648384779018707, (206.73899999999998, 195.965, 164.344)), ('B', 1049, u'LEU', 0.6863739424983081, (201.38700000000003, 202.947, 161.577)), ('B', 1050, u'MET', 0.6958726237262888, (198.738, 204.47, 163.824)), ('B', 1056, u'ALA', 0.7879038732730178, (189.86700000000002, 203.52200000000002, 181.15200000000002)), ('B', 1082, u'CYS', 0.7111650734464287, (228.621, 196.461, 137.092)), ('B', 1094, u'VAL', 0.7229124485955056, (218.375, 196.484, 147.518)), ('B', 1120, u'THR', 0.7838894528810639, (219.934, 203.039, 140.282)), ('B', 1123, u'SER', 0.804922848907887, (229.102, 206.395, 141.508)), ('B', 1138, u'TYR', 0.7595432056284879, (218.267, 198.501, 131.222)), ('B', 1147, u'SER', 0.6062916722425062, (211.967, 203.076, 117.40400000000001)), ('B', 1301, u'NAG', 0.738342031852422, (198.34, 164.843, 215.441)), ('B', 1304, u'NAG', 0.6679421054906985, (174.45100000000002, 185.60899999999998, 205.67)), ('B', 1305, u'NAG', 0.7396364305323139, (243.015, 182.784, 232.77399999999997)), ('B', 1306, u'NAG', 0.6217321099623383, (236.765, 180.497, 256.41999999999996)), ('B', 1307, u'NAG', 0.631528494478488, (189.73399999999998, 180.059, 186.90200000000002)), ('B', 1309, u'NAG', 0.5905042555098654, (216.687, 167.54299999999998, 188.41)), ('B', 1310, u'NAG', 0.749924493506155, (232.554, 189.905, 148.737)), ('B', 1311, u'NAG', 0.7164678575373461, (200.85200000000003, 189.431, 149.425)), ('B', 1312, u'NAG', 0.7608096315532664, (180.9, 198.636, 158.74099999999999)), ('B', 1314, u'NAG', 0.720203942812365, (212.947, 181.82600000000002, 154.493)), ('C', 29, u'THR', 0.7016719002684818, (259.692, 219.975, 222.789)), ('C', 36, u'VAL', 0.7731915224155832, (248.122, 207.58200000000002, 221.20499999999998)), ('C', 41, u'LYS', 0.7951175724301084, (240.258, 196.32800000000003, 224.778)), ('C', 44, u'ARG', 0.7781042125301072, (239.595, 195.74499999999998, 215.236)), ('C', 45, u'SER', 0.7771421813692142, (241.202, 194.999, 211.933)), ('C', 90, u'VAL', 0.6635881576451949, (249.16, 212.941, 231.95000000000002)), ('C', 96, u'GLU', 0.7076274335825447, (267.07099999999997, 206.122, 229.58100000000002)), ('C', 106, u'PHE', 0.670551902559549, (249.993, 210.819, 242.348)), ('C', 126, u'VAL', 0.6696939705773935, (257.579, 196.97299999999998, 240.99800000000002)), ('C', 129, u'LYS', 0.6895822760245197, (250.748, 201.23499999999999, 247.153)), ('C', 137, u'ASN', 0.7646312864122453, (260.59799999999996, 217.585, 251.016)), ('C', 143, u'VAL', 0.7392607441598201, (272.343, 203.82200000000003, 244.27599999999998)), ('C', 202, u'LYS', 0.6762253169321288, (244.52, 203.571, 233.93200000000002)), ('C', 218, u'GLN', 0.7251180816175387, (259.52, 211.343, 215.496)), ('C', 222, u'ALA', 0.7719071930827249, (250.311, 203.108, 220.22899999999998)), ('C', 224, u'GLU', 0.7860866054767531, (248.797, 199.094, 225.228)), ('C', 233, u'ILE', 0.7177875687817296, (241.39700000000002, 208.289, 244.946)), ('C', 269, u'TYR', 0.7314679118395161, (248.55700000000002, 216.787, 229.046)), ('C', 273, u'ARG', 0.7090594562177018, (239.80800000000002, 215.312, 221.255)), ('C', 285, u'ILE', 0.7620972539557167, (247.11399999999998, 200.88200000000003, 215.531)), ('C', 291, u'CYS', 0.6274707321831904, (240.701, 215.631, 213.942)), ('C', 298, u'GLU', 0.7885174628224931, (239.21899999999997, 217.651, 209.702)), ('C', 319, u'ARG', 0.7358905410117494, (231.033, 230.497, 214.653)), ('C', 333, u'THR', 0.7443284006984758, (218.47, 248.476, 245.478)), ('C', 334, u'ASN', 0.7744202006614566, (215.405, 248.05, 247.689)), ('C', 343, u'ASN', 0.7801431943974227, (207.89000000000001, 235.916, 260.08599999999996)), ('C', 357, u'ARG', 0.7629694638907567, (201.82100000000003, 241.653, 246.304)), ('C', 369, u'TYR', 0.7518816934469785, (215.92100000000002, 228.208, 250.17299999999997)), ('C', 375, u'SER', 0.7258052897392426, (209.631, 221.54399999999998, 256.395)), ('C', 391, u'CYS', 0.7411534701653398, (213.455, 238.21599999999998, 237.19299999999998)), ('C', 394, u'ASN', 0.7244710317800768, (205.283, 240.304, 239.97299999999998)), ('C', 398, u'ASP', 0.7390221750943414, (199.553, 233.578, 249.418)), ('C', 403, u'ARG', 0.6773626849897126, (196.537, 221.015, 258.85400000000004)), ('C', 408, u'ARG', 0.713552709675481, (200.288, 217.72899999999998, 250.045)), ('C', 412, u'PRO', 0.6430695376263444, (199.017, 221.959, 240.948)), ('C', 444, u'LYS', 0.7106900183112801, (196.895, 226.04399999999998, 271.95599999999996)), ('C', 449, u'TYR', 0.6999995116269078, (189.935, 226.879, 266.78799999999995)), ('C', 454, u'ARG', 0.6803537016244015, (185.248, 224.176, 253.97899999999998)), ('C', 497, u'PHE', 0.7051238841216717, (194.947, 222.626, 266.561)), ('C', 504, u'GLY', 0.6866841999190716, (199.51299999999998, 215.123, 260.605)), ('C', 509, u'ARG', 0.7606218680572026, (202.08800000000002, 227.839, 257.953)), ('C', 510, u'VAL', 0.7262410413257522, (202.029, 227.88500000000002, 254.196)), ('C', 519, u'HIS', 0.6872128909514602, (206.05700000000002, 238.961, 229.622)), ('C', 537, u'LYS', 0.8019026044257394, (230.541, 243.02200000000002, 219.565)), ('C', 538, u'CYS', 0.7248382826486304, (229.539, 239.38400000000001, 220.26299999999998)), ('C', 555, u'SER', 0.7745305761030356, (217.79899999999998, 249.80800000000002, 216.816)), ('C', 571, u'ASP', 0.7585049770011143, (210.034, 233.20999999999998, 218.242)), ('C', 574, u'ASP', 0.7681323741582433, (214.58100000000002, 240.289, 217.91899999999998)), ('C', 586, u'ASP', 0.8107084108764325, (218.64899999999997, 245.02700000000002, 218.11899999999997)), ('C', 590, u'CYS', 0.7529369046039268, (226.95200000000003, 236.155, 215.73399999999998)), ('C', 617, u'CYS', 0.7494611059975129, (236.672, 237.92200000000003, 205.836)), ('C', 619, u'GLU', 0.7498714302643118, (235.24499999999998, 238.023, 211.046)), ('C', 641, u'ASN', 0.7461181437466811, (246.437, 235.43200000000002, 200.585)), ('C', 649, u'CYS', 0.7951109492788431, (235.73, 233.98100000000002, 202.448)), ('C', 653, u'ALA', 0.8018810378940686, (244.061, 230.107, 197.485)), ('C', 662, u'CYS', 0.7316547076619189, (236.52800000000002, 224.372, 186.18)), ('C', 671, u'CYS', 0.7394725104425879, (236.508, 227.281, 190.80100000000002)), ('C', 690, u'GLN', 0.6414062532849533, (252.966, 224.767, 192.94899999999998)), ('C', 705, u'VAL', 0.7250601370908232, (231.493, 231.26399999999998, 163.096)), ('C', 711, u'SER', 0.7574411140862642, (229.315, 230.51399999999998, 151.97299999999998)), ('C', 725, u'GLU', 0.6890699394417471, (227.295, 205.531, 178.08800000000002)), ('C', 738, u'CYS', 0.7349537790613742, (211.82600000000002, 195.194, 211.27899999999997)), ('C', 743, u'CYS', 0.676138336951959, (213.69299999999998, 193.88400000000001, 219.33800000000002)), ('C', 755, u'GLN', 0.8229595894762664, (201.621, 198.534, 220.503)), ('C', 765, u'ARG', 0.7522809778089263, (206.023, 195.727, 202.785)), ('C', 775, u'ASP', 0.6913781817782273, (213.696, 192.766, 189.01399999999998)), ('C', 787, u'GLN', 0.7343534587971264, (214.541, 184.70399999999998, 171.053)), ('C', 796, u'ASP', 0.7540453526323595, (233.092, 188.034, 158.017)), ('C', 802, u'PHE', 0.7528034689855282, (233.253, 192.685, 166.942)), ('C', 805, u'ILE', 0.7572887197447752, (232.137, 192.905, 172.317)), ('C', 827, u'THR', 0.7329388565354504, (232.933, 196.912, 193.97899999999998)), ('C', 856, u'ASN', 0.7274334077251697, (220.835, 192.58100000000002, 212.85700000000003)), ('C', 881, u'THR', 0.6743812148296958, (222.138, 193.82600000000002, 165.875)), ('C', 887, u'THR', 0.7255889080018775, (214.472, 193.54899999999998, 161.768)), ('C', 900, u'MET', 0.6577958470819509, (224.694, 196.389, 153.45700000000002)), ('C', 911, u'VAL', 0.7486360211720815, (224.91, 210.11899999999997, 153.598)), ('C', 913, u'GLN', 0.6973531358213515, (225.39000000000001, 204.53, 150.601)), ('C', 923, u'ILE', 0.7132328976886732, (235.256, 202.803, 157.941)), ('C', 927, u'PHE', 0.7409645964716671, (235.547, 201.292, 163.893)), ('C', 931, u'ILE', 0.7085064805885013, (236.751, 199.752, 170.024)), ('C', 934, u'ILE', 0.7479859516488795, (237.227, 201.83200000000002, 174.624)), ('C', 948, u'LEU', 0.7859775894126705, (227.42000000000002, 202.346, 188.94299999999998)), ('C', 954, u'GLN', 0.741063001363127, (224.937, 204.942, 198.414)), ('C', 955, u'ASN', 0.7655800166745929, (223.222, 201.66, 199.159)), ('C', 977, u'LEU', 0.7594210850361811, (218.35200000000003, 196.032, 225.18)), ('C', 990, u'GLU', 0.6633411764167934, (209.657, 199.257, 229.727)), ('C', 994, u'ASP', 0.6644011901047465, (210.055, 202.507, 224.59)), ('C', 1005, u'GLN', 0.672205592906608, (211.33, 204.76399999999998, 208.667)), ('C', 1022, u'ALA', 0.6956078257664665, (216.121, 202.016, 184.117)), ('C', 1030, u'SER', 0.7153217011134331, (214.772, 199.903, 172.172)), ('C', 1032, u'CYS', 0.654478311060451, (219.29899999999998, 203.089, 170.02800000000002)), ('C', 1043, u'CYS', 0.7299329729233841, (223.01899999999998, 208.126, 171.474)), ('C', 1047, u'TYR', 0.7439368569371465, (224.98200000000003, 211.189, 163.728)), ('C', 1050, u'MET', 0.7257575480234414, (224.20899999999997, 201.871, 165.621)), ('C', 1062, u'PHE', 0.7249106959756265, (226.092, 201.089, 175.71699999999998)), ('C', 1072, u'GLU', 0.6770600258037834, (235.88600000000002, 220.4, 155.843)), ('C', 1073, u'LYS', 0.6937752400776553, (236.106, 223.032, 153.126)), ('C', 1080, u'ALA', 0.7881801719207754, (219.131, 228.048, 143.092)), ('C', 1095, u'PHE', 0.7458739943580925, (224.71299999999997, 223.871, 145.156)), ('C', 1104, u'VAL', 0.7203153145820117, (225.647, 219.819, 143.349)), ('C', 1123, u'SER', 0.8006301246806793, (209.883, 225.835, 140.225)), ('C', 1129, u'VAL', 0.7669796980477332, (214.52100000000002, 233.629, 144.218)), ('C', 1135, u'ASN', 0.7610597193944465, (224.60299999999998, 228.47, 135.51399999999998)), ('C', 1145, u'LEU', 0.6395173567014296, (218.864, 212.91899999999998, 120.367))]
data['rota'] = [('B', ' 122 ', 'ASN', 0.028550186514166194, (169.05099999999993, 165.987, 236.229)), ('B', ' 603 ', 'ASN', 0.050240964668624905, (191.358, 178.296, 192.816)), ('C', ' 331 ', 'ASN', 0.034279124792121377, (218.79199999999994, 249.672, 239.18))]
data['clusters'] = [('A', '1072', 1, 'smoc Outlier', (192.991, 225.305, 152.864)), ('A', '1105', 1, 'smoc Outlier', (201.059, 218.18800000000002, 144.495)), ('A', '1107', 1, 'Dihedral angle:CD:NE:CZ:NH1', (201.093, 216.842, 150.65800000000002)), ('A', '1109', 1, 'cablam Outlier', (201.2, 222.8, 150.4)), ('A', '714', 1, 'smoc Outlier', (195.147, 220.677, 151.162)), ('A', '291', 2, 'smoc Outlier', (188.48800000000003, 234.102, 211.483)), ('A', '293', 2, 'cablam CA Geom Outlier', (183.0, 236.2, 210.6)), ('A', '298', 2, 'smoc Outlier', (188.012, 231.96, 207.038)), ('A', '315', 2, 'smoc Outlier', (189.32800000000003, 225.997, 205.03)), ('A', '595', 2, 'smoc Outlier', (184.221, 223.129, 203.46800000000002)), ('A', '391', 3, 'side-chain clash', (177.952, 199.039, 233.807)), ('A', '519', 3, 'Bond angle:C', (183.034, 194.88100000000003, 228.74699999999999)), ('A', '520', 3, 'side-chain clash\nBond angle:N:CA\nBond angle:C:CA:CB\nBond angle:CA:C\nBond angle:N:CA:C', (180.237, 192.38400000000001, 228.789)), ('A', '521', 3, 'side-chain clash\nBond angle:N', (176.824, 193.437, 230.137)), ('A', '522', 3, 'side-chain clash', (177.952, 199.039, 233.807)), ('A', '1032', 4, 'smoc Outlier', (214.659, 220.66299999999998, 169.651)), ('A', '1036', 4, 'cablam Outlier', (215.0, 219.1, 164.3)), ('A', '1038', 4, 'smoc Outlier', (209.909, 215.05, 164.323)), ('A', '1041', 4, 'smoc Outlier', (203.88000000000002, 218.45200000000003, 169.948)), ('A', '1043', 4, 'cablam Outlier', (208.4, 221.4, 170.4)), ('A', '111', 5, 'cablam Outlier', (176.4, 247.6, 247.0)), ('A', '113', 5, 'smoc Outlier', (179.77499999999998, 243.95700000000002, 249.541)), ('A', '132', 5, 'smoc Outlier', (183.125, 247.995, 249.11899999999997)), ('A', '135', 5, 'smoc Outlier', (176.27899999999997, 253.30200000000002, 246.372)), ('A', '495', 6, 'smoc Outlier', (203.377, 191.48700000000002, 262.858)), ('A', '497', 6, 'smoc Outlier', (201.108, 195.01899999999998, 266.459)), ('A', '498', 6, 'smoc Outlier', (200.349, 196.883, 269.663)), ('A', '499', 6, 'smoc Outlier', (198.165, 199.995, 270.33799999999997)), ('A', '1306', 7, 'smoc Outlier', (168.186, 196.60399999999998, 232.61399999999998)), ('A', '331', 7, 'Bond angle:CA:CB:CG', (168.197, 200.629, 236.436)), ('A', '333', 7, 'smoc Outlier', (168.22, 200.05700000000002, 242.71299999999997)), ('A', '759', 8, 'smoc Outlier', (219.85500000000002, 211.218, 212.73299999999998)), ('A', '762', 8, 'smoc Outlier', (222.483, 212.23999999999998, 207.584)), ('A', '765', 8, 'smoc Outlier', (224.196, 214.91899999999998, 203.994)), ('A', '417', 9, 'smoc Outlier', (208.80700000000002, 191.99800000000002, 251.10399999999998)), ('A', '422', 9, 'Bond length:CB:CG', (203.093, 188.347, 249.70899999999997)), ('A', '454', 9, 'Dihedral angle:CD:NE:CZ:NH1', (205.548, 186.095, 254.29399999999998)), ('A', '36', 10, 'smoc Outlier', (190.985, 244.424, 218.73899999999998)), ('A', '53', 10, 'smoc Outlier', (191.79299999999998, 235.598, 222.85800000000003)), ('A', '55', 10, 'Bond angle:CA:CB:CG', (187.85100000000003, 239.841, 221.371)), ('A', '1081', 11, 'smoc Outlier', (195.268, 207.30800000000002, 137.9)), ('A', '1082', 11, 'smoc Outlier', (194.834, 205.11899999999997, 134.762)), ('A', '1084', 11, 'cablam Outlier', (197.2, 202.9, 129.3)), ('A', '797', 12, 'cablam Outlier', (220.2, 236.5, 158.1)), ('A', '898', 12, 'Bond angle:CA:CB:CG', (220.436, 231.32200000000003, 157.13299999999998)), ('A', '900', 12, 'smoc Outlier', (219.478, 228.089, 153.11399999999998)), ('A', '466', 13, 'smoc Outlier', (197.069, 184.07399999999998, 246.915)), ('A', '467', 13, 'Dihedral angle:CA:CB:CG:OD1', (199.201, 181.287, 248.304)), ('A', '468', 13, 'Ramachandran', (198.701, 179.066, 251.355)), ('A', '214', 14, 'cablam CA Geom Outlier', (175.7, 259.7, 215.8)), ('A', '215', 14, 'cablam CA Geom Outlier', (177.4, 256.5, 216.9)), ('A', '666', 15, 'cablam Outlier', (185.1, 222.3, 191.6)), ('A', '667', 15, 'cablam Outlier', (184.9, 218.7, 190.5)), ('A', '1307', 16, 'smoc Outlier', (182.26999999999998, 202.60399999999998, 253.864)), ('A', '343', 16, 'smoc Outlier', (183.624, 198.865, 258.05400000000003)), ('A', '346', 17, 'smoc Outlier', (187.54299999999998, 191.58200000000002, 260.812)), ('A', '348', 17, 'smoc Outlier', (192.311, 188.86800000000002, 256.84900000000005)), ('A', '118', 18, 'smoc Outlier', (185.288, 251.695, 241.607)), ('A', '128', 18, 'smoc Outlier', (191.1, 253.945, 241.38500000000002)), ('A', '912', 19, 'smoc Outlier', (209.74299999999997, 221.434, 149.218)), ('A', '913', 19, 'smoc Outlier', (212.288, 224.20499999999998, 149.78)), ('A', '1125', 20, 'cablam CA Geom Outlier', (197.0, 198.0, 137.0)), ('A', '1129', 20, 'smoc Outlier', (193.346, 199.636, 142.67399999999998)), ('A', '979', 21, 'smoc Outlier', (214.36700000000002, 229.844, 228.847)), ('A', '980', 21, 'smoc Outlier', (214.354, 226.18, 229.772)), ('A', '82', 22, 'smoc Outlier', (171.85500000000002, 250.805, 234.434)), ('A', '83', 22, 'smoc Outlier', (173.52700000000002, 247.585, 235.697)), ('A', '86', 23, 'cablam Outlier', (179.7, 241.3, 232.5)), ('A', '88', 23, 'cablam Outlier\nsmoc Outlier', (183.2, 236.7, 230.0)), ('A', '388', 24, 'smoc Outlier', (180.834, 207.71099999999998, 239.42600000000002)), ('A', '527', 24, 'smoc Outlier', (174.974, 206.85200000000003, 241.118)), ('A', '360', 25, 'side-chain clash\nbackbone clash', (176.566, 193.369, 238.893)), ('A', '523', 25, 'side-chain clash\nbackbone clash', (176.566, 193.369, 238.893)), ('A', '308', 26, 'smoc Outlier', (193.138, 235.848, 198.525)), ('A', '309', 26, 'smoc Outlier', (193.936, 234.836, 194.977)), ('A', '1002', 27, 'smoc Outlier', (211.05800000000002, 215.43800000000002, 213.393)), ('A', '1005', 27, 'smoc Outlier', (213.076, 215.072, 208.754)), ('A', '618', 28, 'cablam Outlier', (169.8, 219.0, 203.6)), ('A', '620', 28, 'smoc Outlier', (173.597, 222.476, 205.70399999999998)), ('A', '958', 29, 'smoc Outlier', (209.046, 224.923, 202.915)), ('A', '962', 29, 'smoc Outlier', (210.505, 224.98200000000003, 209.02100000000002)), ('A', '743', 30, 'smoc Outlier', (220.288, 223.202, 219.612)), ('A', '749', 30, 'smoc Outlier', (221.007, 220.403, 224.14)), ('B', '108', 1, 'cablam Outlier', (192.7, 169.4, 241.6)), ('B', '202', 1, 'smoc Outlier', (183.685, 180.287, 230.959)), ('B', '229', 1, 'smoc Outlier', (181.037, 181.30200000000002, 236.74599999999998)), ('B', '231', 1, 'cablam Outlier', (184.3, 181.0, 241.1)), ('B', '233', 1, 'smoc Outlier', (188.43200000000002, 177.38100000000003, 241.253)), ('B', '235', 1, 'smoc Outlier', (191.236, 173.339, 237.781)), ('B', '86', 1, 'cablam Outlier', (192.4, 170.0, 232.1)), ('B', '88', 1, 'cablam Outlier', (194.9, 175.2, 229.6)), ('B', '332', 2, 'Ramachandran', (238.11099999999993, 182.358, 240.319)), ('B', '333', 2, 'cablam CA Geom Outlier', (241.5, 182.8, 242.0)), ('B', '334', 2, 'cablam Outlier', (242.3, 185.6, 244.4)), ('B', '335', 2, 'smoc Outlier', (239.83800000000002, 185.094, 247.231)), ('B', '336', 2, 'smoc Outlier', (239.606, 187.176, 250.43800000000002)), ('B', '359', 2, 'cablam CA Geom Outlier', (239.3, 194.0, 249.9)), ('B', '361', 2, 'smoc Outlier', (239.03, 189.88100000000003, 245.853)), ('B', '122', 3, 'Rotamer\nBond angle:CA:CB:CG\nBond angle:CB:CG:ND2', (169.05100000000002, 165.98700000000002, 236.22899999999998)), ('B', '123', 3, 'smoc Outlier', (165.377, 165.61499999999998, 235.165)), ('B', '124', 3, 'Bond angle:N:CA:CB\nBond angle:N:CA:C', (164.469, 169.255, 234.40800000000002)), ('B', '1302', 3, 'Bond length:C5:O5', (163.681, 167.918, 238.82200000000003)), ('B', '811', 3, 'side-chain clash', (164.354, 167.306, 237.47)), ('B', '820', 3, 'side-chain clash\nsmoc Outlier', (164.354, 167.306, 237.47)), ('B', '1032', 4, 'smoc Outlier', (201.64499999999998, 207.889, 168.73899999999998)), ('B', '1034', 4, 'cablam Outlier', (198.4, 212.6, 166.9)), ('B', '1043', 4, 'cablam Outlier\nsmoc Outlier', (204.1, 201.9, 170.1)), ('B', '1049', 4, 'smoc Outlier', (201.38700000000003, 202.947, 161.577)), ('B', '1050', 4, 'smoc Outlier', (198.738, 204.47, 163.824)), ('B', '1307', 5, 'smoc Outlier', (189.73399999999998, 180.059, 186.90200000000002)), ('B', '309', 5, 'smoc Outlier', (196.39200000000002, 184.506, 194.576)), ('B', '310', 5, 'cablam CA Geom Outlier', (199.2, 182.9, 192.6)), ('B', '602', 5, 'smoc Outlier', (193.906, 178.437, 195.70499999999998)), ('B', '603', 5, 'Rotamer', (191.358, 178.296, 192.816)), ('B', '1306', 6, 'Bond length:C5:O5\nBond length:C3:C4\nsmoc Outlier', (236.765, 180.497, 256.41999999999996)), ('B', '343', 6, 'Bond angle:CA:CB:CG', (239.86700000000002, 179.88400000000001, 261.597)), ('B', '574', 6, 'backbone clash\nside-chain clash', (238.448, 179.41, 257.789)), ('B', '575', 6, 'backbone clash\nside-chain clash', (238.448, 179.41, 257.789)), ('B', '437', 7, 'smoc Outlier', (230.972, 178.29299999999998, 270.292)), ('B', '439', 7, 'smoc Outlier', (234.13, 175.89100000000002, 274.508)), ('B', '443', 7, 'smoc Outlier', (237.605, 178.038, 277.666)), ('B', '448', 7, 'smoc Outlier', (239.945, 182.01399999999998, 280.824)), ('B', '1018', 8, 'smoc Outlier', (201.945, 208.086, 188.629)), ('B', '1056', 8, 'smoc Outlier', (189.86700000000002, 203.52200000000002, 181.15200000000002)), ('B', '1058', 8, 'cablam Outlier', (192.2, 206.0, 186.3)), ('B', '729', 8, 'smoc Outlier', (197.22899999999998, 208.36200000000002, 184.657)), ('B', '666', 9, 'cablam Outlier', (212.2, 182.6, 193.3)), ('B', '667', 9, 'cablam Outlier', (215.5, 184.2, 192.5)), ('B', '671', 9, 'smoc Outlier', (211.27399999999997, 180.002, 189.032)), ('B', '219', 10, 'smoc Outlier', (181.871, 170.476, 209.20399999999998)), ('B', '220', 10, 'cablam CA Geom Outlier', (182.1, 173.9, 210.7)), ('B', '34', 10, 'cablam CA Geom Outlier', (185.7, 172.2, 215.2)), ('B', '1312', 11, 'smoc Outlier', (180.9, 198.636, 158.74099999999999)), ('B', '795', 11, 'smoc Outlier', (181.42600000000002, 204.71899999999997, 157.939)), ('B', '797', 11, 'cablam CA Geom Outlier', (186.7, 204.1, 155.7)), ('B', '299', 12, 'smoc Outlier', (199.737, 182.923, 204.017)), ('B', '301', 12, 'smoc Outlier', (196.359, 184.872, 207.85500000000002)), ('B', '315', 12, 'smoc Outlier', (204.74499999999998, 185.176, 205.80700000000002)), ('B', '312', 13, 'smoc Outlier', (205.26399999999998, 184.122, 196.343)), ('B', '598', 13, 'smoc Outlier', (205.212, 179.654, 196.865)), ('B', '609', 13, 'smoc Outlier', (206.19299999999998, 174.9, 198.472)), ('B', '1304', 14, 'Bond length:C5:O5\nsmoc Outlier', (174.45100000000002, 185.60899999999998, 205.67)), ('B', '281', 14, 'smoc Outlier', (176.376, 189.48000000000002, 207.221)), ('B', '759', 15, 'smoc Outlier', (202.641, 219.592, 211.415)), ('B', '760', 15, 'smoc Outlier', (198.869, 218.959, 210.966)), ('B', '1070', 16, 'C-beta\nBond angle:C:CA:CB\nBond angle:N:CA:C', (205.57399999999998, 187.916, 157.817)), ('B', '1071', 16, 'Bond angle:N:CA:C\nBond angle:N:CA:CB', (206.41299999999998, 185.295, 155.20499999999998)), ('B', '549', 17, 'cablam CA Geom Outlier\nsmoc Outlier', (223.0, 184.5, 220.8)), ('B', '550', 17, 'smoc Outlier', (225.20499999999998, 182.893, 218.21899999999997)), ('B', '753', 18, 'smoc Outlier', (197.634, 218.87, 218.94)), ('B', '997', 18, 'smoc Outlier', (198.841, 212.046, 219.207)), ('B', '267', 19, 'smoc Outlier', (188.258, 165.23899999999998, 224.685)), ('B', '268', 19, 'smoc Outlier', (190.631, 167.74299999999997, 223.151)), ('B', '414', 20, 'smoc Outlier', (220.008, 196.291, 270.52299999999997)), ('B', '415', 20, 'smoc Outlier', (220.90800000000002, 197.393, 274.043)), ('B', '1082', 21, 'smoc Outlier', (228.621, 196.461, 137.092)), ('B', '1084', 21, 'cablam Outlier', (229.9, 199.5, 131.5)), ('B', '1123', 22, 'smoc Outlier', (229.102, 206.395, 141.508)), ('B', '1125', 22, 'cablam CA Geom Outlier', (233.5, 201.9, 139.6)), ('B', '111', 23, 'cablam Outlier', (188.2, 164.5, 246.8)), ('B', '113', 23, 'cablam Outlier', (190.2, 169.0, 251.0)), ('B', '240', 24, 'smoc Outlier', (183.031, 163.38600000000002, 233.007)), ('B', '242', 24, 'Bond length:CB:CG', (177.89800000000002, 159.35800000000003, 232.901)), ('B', '617', 25, 'smoc Outlier', (219.107, 172.627, 204.02200000000002)), ('B', '620', 25, 'smoc Outlier', (215.648, 173.712, 208.571)), ('B', '860', 26, 'smoc Outlier', (187.58200000000002, 211.178, 198.52700000000002)), ('B', '861', 26, 'smoc Outlier', (187.18800000000002, 214.083, 196.155)), ('B', '720', 27, 'smoc Outlier', (198.69899999999998, 193.971, 160.69)), ('B', '722', 27, 'smoc Outlier', (197.089, 195.35200000000003, 167.2)), ('B', '1045', 28, 'smoc Outlier', (206.16299999999998, 195.512, 168.071)), ('B', '1046', 28, 'smoc Outlier', (206.73899999999998, 195.965, 164.344)), ('C', '220', 1, 'cablam CA Geom Outlier', (254.2, 206.6, 215.6)), ('C', '222', 1, 'smoc Outlier', (250.311, 203.108, 220.22899999999998)), ('C', '224', 1, 'smoc Outlier', (248.797, 199.094, 225.228)), ('C', '285', 1, 'smoc Outlier', (247.11399999999998, 200.88200000000003, 215.531)), ('C', '34', 1, 'cablam CA Geom Outlier', (252.9, 210.4, 219.8)), ('C', '36', 1, 'smoc Outlier', (248.122, 207.58200000000002, 221.20499999999998)), ('C', '1030', 2, 'smoc Outlier', (214.772, 199.903, 172.172)), ('C', '1032', 2, 'smoc Outlier', (219.29899999999998, 203.089, 170.02800000000002)), ('C', '1036', 2, 'cablam Outlier', (218.5, 203.7, 164.6)), ('C', '1043', 2, 'cablam Outlier\nsmoc Outlier', (223.0, 208.1, 171.5)), ('C', '1050', 2, 'smoc Outlier', (224.20899999999997, 201.871, 165.621)), ('C', '1305', 3, 'Bond length:C5:O5', (214.814, 251.124, 238.336)), ('C', '331', 3, 'Rotamer', (218.79199999999994, 249.672, 239.18)), ('C', '333', 3, 'smoc Outlier', (218.47, 248.476, 245.478)), ('C', '334', 3, 'smoc Outlier', (215.405, 248.05, 247.689)), ('C', '662', 4, 'smoc Outlier', (236.52800000000002, 224.372, 186.18)), ('C', '666', 4, 'cablam Outlier', (233.4, 226.8, 194.8)), ('C', '667', 4, 'cablam Outlier', (230.3, 228.7, 193.6)), ('C', '671', 4, 'smoc Outlier', (236.508, 227.281, 190.80100000000002)), ('C', '1070', 5, 'Bond angle:C:CA:CB\nBond angle:N:CA:C', (235.809, 215.69299999999998, 160.009)), ('C', '1071', 5, 'Bond angle:N:CA:C\nBond angle:N:CA:CB', (237.889, 217.62800000000001, 157.493)), ('C', '1072', 5, 'smoc Outlier', (235.88600000000002, 220.4, 155.843)), ('C', '1073', 5, 'smoc Outlier', (236.106, 223.032, 153.126)), ('C', '923', 6, 'smoc Outlier', (235.256, 202.803, 157.941)), ('C', '927', 6, 'smoc Outlier', (235.547, 201.292, 163.893)), ('C', '931', 6, 'smoc Outlier', (236.751, 199.752, 170.024)), ('C', '934', 6, 'smoc Outlier', (237.227, 201.83200000000002, 174.624)), ('C', '537', 7, 'smoc Outlier', (230.541, 243.02200000000002, 219.565)), ('C', '538', 7, 'smoc Outlier', (229.539, 239.38400000000001, 220.26299999999998)), ('C', '549', 7, 'cablam CA Geom Outlier', (224.4, 235.2, 222.4)), ('C', '590', 7, 'smoc Outlier', (226.95200000000003, 236.155, 215.73399999999998)), ('C', '269', 8, 'smoc Outlier', (248.55700000000002, 216.787, 229.046)), ('C', '86', 8, 'cablam Outlier', (247.8, 216.2, 236.8)), ('C', '88', 8, 'cablam Outlier', (242.7, 215.5, 233.1)), ('C', '90', 8, 'smoc Outlier', (249.16, 212.941, 231.95000000000002)), ('C', '310', 9, 'cablam CA Geom Outlier', (240.3, 215.9, 195.1)), ('C', '599', 9, 'side-chain clash', (243.135, 217.156, 198.14)), ('C', '600', 9, 'cablam CA Geom Outlier', (243.8, 219.0, 195.5)), ('C', '601', 9, 'side-chain clash', (243.135, 217.156, 198.14)), ('C', '444', 10, 'smoc Outlier', (196.895, 226.04399999999998, 271.95599999999996)), ('C', '449', 10, 'smoc Outlier', (189.935, 226.879, 266.78799999999995)), ('C', '497', 10, 'smoc Outlier', (194.947, 222.626, 266.561)), ('C', '360', 11, 'side-chain clash', (208.829, 245.671, 241.612)), ('C', '394', 11, 'smoc Outlier', (205.283, 240.304, 239.97299999999998)), ('C', '523', 11, 'side-chain clash', (208.829, 245.671, 241.612)), ('C', '123', 12, 'Bond angle:N:CA:C', (265.89599999999996, 197.353, 241.569)), ('C', '124', 12, 'Bond angle:N:CA:CB\nBond angle:N:CA:C', (263.90599999999995, 194.296, 240.489)), ('C', '126', 12, 'smoc Outlier', (257.579, 196.97299999999998, 240.99800000000002)), ('C', '555', 13, 'smoc Outlier', (217.79899999999998, 249.80800000000002, 216.816)), ('C', '574', 13, 'smoc Outlier', (214.58100000000002, 240.289, 217.91899999999998)), ('C', '586', 13, 'smoc Outlier', (218.64899999999997, 245.02700000000002, 218.11899999999997)), ('C', '1109', 14, 'cablam Outlier', (229.7, 214.8, 152.4)), ('C', '911', 14, 'smoc Outlier', (224.91, 210.11899999999997, 153.598)), ('C', '913', 14, 'smoc Outlier', (225.39000000000001, 204.53, 150.601)), ('C', '291', 15, 'smoc Outlier', (240.701, 215.631, 213.942)), ('C', '293', 15, 'cablam CA Geom Outlier', (244.9, 219.7, 214.2)), ('C', '298', 15, 'smoc Outlier', (239.21899999999997, 217.651, 209.702)), ('C', '519', 16, 'smoc Outlier', (206.05700000000002, 238.961, 229.622)), ('C', '520', 16, 'side-chain clash', (206.117, 244.935, 231.243)), ('C', '521', 16, 'side-chain clash', (206.117, 244.935, 231.243)), ('C', '617', 17, 'smoc Outlier', (236.672, 237.92200000000003, 205.836)), ('C', '619', 17, 'smoc Outlier', (235.24499999999998, 238.023, 211.046)), ('C', '649', 17, 'smoc Outlier', (235.73, 233.98100000000002, 202.448)), ('C', '1303', 18, 'Bond length:C5:O5', (238.489, 209.873, 247.471)), ('C', '233', 18, 'smoc Outlier', (241.39700000000002, 208.289, 244.946)), ('C', '403', 19, 'smoc Outlier', (196.537, 221.015, 258.85400000000004)), ('C', '504', 19, 'smoc Outlier', (199.51299999999998, 215.123, 260.605)), ('C', '1019', 20, 'Dihedral angle:CD:NE:CZ:NH1', (213.61499999999998, 203.447, 188.13)), ('C', '1022', 20, 'smoc Outlier', (216.121, 202.016, 184.117)), ('C', '990', 21, 'smoc Outlier', (209.657, 199.257, 229.727)), ('C', '994', 21, 'smoc Outlier', (210.055, 202.507, 224.59)), ('C', '1062', 22, 'smoc Outlier', (226.092, 201.089, 175.71699999999998)), ('C', '725', 22, 'smoc Outlier', (227.295, 205.531, 178.08800000000002)), ('C', '1123', 23, 'smoc Outlier', (209.883, 225.835, 140.225)), ('C', '1125', 23, 'cablam CA Geom Outlier', (211.9, 231.7, 138.0)), ('C', '391', 24, 'side-chain clash\nsmoc Outlier', (211.944, 241.196, 236.299)), ('C', '522', 24, 'side-chain clash', (211.944, 241.196, 236.299)), ('C', '202', 25, 'side-chain clash\nsmoc Outlier', (240.12, 200.117, 234.156)), ('C', '228', 25, 'side-chain clash', (240.12, 200.117, 234.156)), ('C', '111', 26, 'cablam Outlier', (251.8, 215.1, 252.6)), ('C', '113', 26, 'cablam Outlier', (247.0, 214.2, 254.9)), ('C', '796', 27, 'side-chain clash\nsmoc Outlier', (232.119, 186.704, 158.57)), ('C', '797', 27, 'cablam CA Geom Outlier', (231.2, 191.2, 159.0)), ('C', '509', 28, 'smoc Outlier', (202.08800000000002, 227.839, 257.953)), ('C', '510', 28, 'smoc Outlier', (202.029, 227.88500000000002, 254.196)), ('C', '641', 29, 'smoc Outlier', (246.437, 235.43200000000002, 200.585)), ('C', '653', 29, 'smoc Outlier', (244.061, 230.107, 197.485)), ('C', '1058', 30, 'cablam Outlier', (223.7, 196.6, 188.5)), ('C', '948', 30, 'smoc Outlier', (227.42000000000002, 202.346, 188.94299999999998)), ('C', '1095', 31, 'smoc Outlier', (224.71299999999997, 223.871, 145.156)), ('C', '1104', 31, 'smoc Outlier', (225.647, 219.819, 143.349)), ('C', '44', 32, 'smoc Outlier', (239.595, 195.74499999999998, 215.236)), ('C', '45', 32, 'smoc Outlier', (241.202, 194.999, 211.933)), ('C', '954', 33, 'smoc Outlier', (224.937, 204.942, 198.414)), ('C', '955', 33, 'smoc Outlier', (223.222, 201.66, 199.159)), ('C', '802', 34, 'smoc Outlier', (233.253, 192.685, 166.942)), ('C', '805', 34, 'smoc Outlier', (232.137, 192.905, 172.317))]
data['rama'] = [('A', ' 468 ', 'ILE', 0.05139440272668836, (198.701, 179.066, 251.355)), ('B', ' 332 ', 'ILE', 0.04342067805715458, (238.11099999999993, 182.358, 240.319))]
data['cablam'] = [('A', '86', 'PHE', 'check CA trace,carbonyls, peptide', ' \nEE-TT', (179.7, 241.3, 232.5)), ('A', '88', 'ASP', 'check CA trace,carbonyls, peptide', 'turn\n-TT-E', (183.2, 236.7, 230.0)), ('A', '108', 'THR', 'check CA trace,carbonyls, peptide', 'bend\nEESS-', (178.4, 241.1, 241.9)), ('A', '111', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\nS-S--', (176.4, 247.6, 247.0)), ('A', '618', 'THR', 'check CA trace,carbonyls, peptide', 'turn\n-TTT-', (169.8, 219.0, 203.6)), ('A', '666', 'ILE', 'check CA trace,carbonyls, peptide', 'strand\nEEEET', (185.1, 222.3, 191.6)), ('A', '667', 'GLY', 'check CA trace,carbonyls, peptide', 'strand\nEEETT', (184.9, 218.7, 190.5)), ('A', '797', 'PHE', 'check CA trace,carbonyls, peptide', 'bend\n--STT', (220.2, 236.5, 158.1)), ('A', '1036', 'GLN', 'check CA trace,carbonyls, peptide', ' \nSS---', (215.0, 219.1, 164.3)), ('A', '1043', 'CYS', 'check CA trace,carbonyls, peptide', 'turn\nBTTBS', (208.4, 221.4, 170.4)), ('A', '1084', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\nESSSE', (197.2, 202.9, 129.3)), ('A', '1109', 'PHE', 'check CA trace,carbonyls, peptide', 'bend\nTTS--', (201.2, 222.8, 150.4)), ('A', '214', 'ARG', 'check CA trace', 'bend\n-SSSS', (175.7, 259.7, 215.8)), ('A', '215', 'ASP', 'check CA trace', 'bend\nSSSS-', (177.4, 256.5, 216.9)), ('A', '220', 'PHE', 'check CA trace', ' \nS----', (190.1, 250.4, 212.9)), ('A', '293', 'LEU', 'check CA trace', 'bend\nTTSSH', (183.0, 236.2, 210.6)), ('A', '549', 'THR', 'check CA trace', 'strand\nEEEEE', (178.7, 211.7, 219.7)), ('A', '1058', 'HIS', 'check CA trace', 'turn\nETTEE', (215.9, 228.9, 188.0)), ('A', '1125', 'ASN', 'check CA trace', 'strand\nEEETT', (197.0, 198.0, 137.0)), ('B', '86', 'PHE', 'check CA trace,carbonyls, peptide', ' \nEE-TT', (192.4, 170.0, 232.1)), ('B', '88', 'ASP', 'check CA trace,carbonyls, peptide', 'turn\n-TTEE', (194.9, 175.2, 229.6)), ('B', '108', 'THR', 'check CA trace,carbonyls, peptide', 'bend\nEESS-', (192.7, 169.4, 241.6)), ('B', '111', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\nS-SSS', (188.2, 164.5, 246.8)), ('B', '113', 'LYS', 'check CA trace,carbonyls, peptide', 'bend\nSSSS-', (190.2, 169.0, 251.0)), ('B', '231', 'ILE', ' beta sheet', 'turn\nETT--', (184.3, 181.0, 241.1)), ('B', '334', 'ASN', 'check CA trace,carbonyls, peptide', ' \n---B-', (242.3, 185.6, 244.4)), ('B', '666', 'ILE', 'check CA trace,carbonyls, peptide', 'strand\nEEEET', (212.2, 182.6, 193.3)), ('B', '667', 'GLY', 'check CA trace,carbonyls, peptide', 'strand\nEEETT', (215.5, 184.2, 192.5)), ('B', '1034', 'LEU', 'check CA trace,carbonyls, peptide', 'bend\nIISS-', (198.4, 212.6, 166.9)), ('B', '1043', 'CYS', 'check CA trace,carbonyls, peptide', 'bend\nTTSSS', (204.1, 201.9, 170.1)), ('B', '1058', 'HIS', 'check CA trace,carbonyls, peptide', 'turn\nETTEE', (192.2, 206.0, 186.3)), ('B', '1084', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\nESSSE', (229.9, 199.5, 131.5)), ('B', '1109', 'PHE', 'check CA trace,carbonyls, peptide', 'bend\nTTS--', (208.5, 194.1, 151.0)), ('B', '34', 'ARG', 'check CA trace', ' \nTT--E', (185.7, 172.2, 215.2)), ('B', '220', 'PHE', 'check CA trace', ' \n----E', (182.1, 173.9, 210.7)), ('B', '293', 'LEU', 'check CA trace', 'bend\nTTS-H', (198.3, 174.7, 210.9)), ('B', '310', 'LYS', 'check CA trace', 'bend\n--SEE', (199.2, 182.9, 192.6)), ('B', '333', 'THR', 'check CA trace', ' \n----B', (241.5, 182.8, 242.0)), ('B', '359', 'SER', 'check CA trace', ' \nEE-SE', (239.3, 194.0, 249.9)), ('B', '549', 'THR', 'check CA trace', 'strand\nEEEEE', (223.0, 184.5, 220.8)), ('B', '797', 'PHE', 'check CA trace', 'bend\n--SSS', (186.7, 204.1, 155.7)), ('B', '1125', 'ASN', 'check CA trace', 'strand\nEEETT', (233.5, 201.9, 139.6)), ('C', '86', 'PHE', 'check CA trace,carbonyls, peptide', ' \nEE-TT', (247.8, 216.2, 236.8)), ('C', '88', 'ASP', 'check CA trace,carbonyls, peptide', 'turn\n-TT-E', (242.7, 215.5, 233.1)), ('C', '108', 'THR', 'check CA trace,carbonyls, peptide', 'bend\nEESS-', (246.4, 215.9, 246.0)), ('C', '111', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\nS-SSS', (251.8, 215.1, 252.6)), ('C', '113', 'LYS', 'check CA trace,carbonyls, peptide', 'bend\nSSSS-', (247.0, 214.2, 254.9)), ('C', '666', 'ILE', 'check CA trace,carbonyls, peptide', 'strand\nEEEET', (233.4, 226.8, 194.8)), ('C', '667', 'GLY', 'check CA trace,carbonyls, peptide', 'strand\nEEETT', (230.3, 228.7, 193.6)), ('C', '1036', 'GLN', 'check CA trace,carbonyls, peptide', ' \nSS---', (218.5, 203.7, 164.6)), ('C', '1043', 'CYS', 'check CA trace,carbonyls, peptide', 'turn\nBTTBS', (223.0, 208.1, 171.5)), ('C', '1045', 'LYS', 'check CA trace,carbonyls, peptide', 'bend\nTBSSE', (227.5, 213.3, 170.0)), ('C', '1058', 'HIS', 'check CA trace,carbonyls, peptide', 'turn\nETTEE', (223.7, 196.6, 188.5)), ('C', '1084', 'ASP', 'check CA trace,carbonyls, peptide', 'bend\nESSSE', (216.7, 229.5, 130.6)), ('C', '1092', 'GLU', 'check CA trace,carbonyls, peptide', 'bend\nESSSE', (218.4, 216.4, 147.6)), ('C', '1109', 'PHE', 'check CA trace,carbonyls, peptide', 'bend\nTTS--', (229.7, 214.8, 152.4)), ('C', '34', 'ARG', 'check CA trace', ' \nTT--E', (252.9, 210.4, 219.8)), ('C', '220', 'PHE', 'check CA trace', ' \n----E', (254.2, 206.6, 215.6)), ('C', '293', 'LEU', 'check CA trace', 'bend\nTTSSH', (244.9, 219.7, 214.2)), ('C', '310', 'LYS', 'check CA trace', 'bend\n--SEE', (240.3, 215.9, 195.1)), ('C', '549', 'THR', 'check CA trace', 'strand\nEEEEE', (224.4, 235.2, 222.4)), ('C', '600', 'PRO', 'check CA trace', ' \nEE--T', (243.8, 219.0, 195.5)), ('C', '797', 'PHE', 'check CA trace', 'bend\n--STT', (231.2, 191.2, 159.0)), ('C', '1125', 'ASN', 'check CA trace', 'strand\nEEETT', (211.9, 231.7, 138.0))]
handle_read_draw_probe_dots_unformatted("/home/ccpem/agnel/gisaid/countries_seq/structure_data/emdb/EMD-21457/6vyb/Model_validation_9/validation_cootdata/molprobity_probe6vyb_0.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
