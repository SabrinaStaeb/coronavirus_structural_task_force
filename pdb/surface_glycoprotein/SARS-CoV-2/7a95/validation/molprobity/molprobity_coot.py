# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('D', ' 146 ', 'PRO', None, (265.2469999999999, 237.242, 378.738))]
data['rota'] = [('A', '  21 ', 'ARG', 0.06799913434884369, (217.97499999999994, 264.503, 311.603)), ('A', ' 212 ', 'LEU', 0.27669405895258714, (217.291, 276.493, 284.827)), ('A', ' 301 ', 'CYS', 0.10489201198964564, (248.001, 274.234, 270.559)), ('A', ' 328 ', 'ARG', 0.013880712078276496, (272.04499999999996, 244.10800000000006, 293.083)), ('A', ' 581 ', 'THR', 0.12021334967084996, (272.8859999999999, 233.839, 288.0)), ('A', ' 738 ', 'CYS', 0.12627919372761226, (274.0219999999999, 294.645, 266.322)), ('A', '1050 ', 'MET', 0.29568908538595323, (254.62, 280.586, 222.183)), ('A', '1104 ', 'VAL', 0.2820888619530968, (250.989, 258.66, 202.676)), ('B', ' 212 ', 'LEU', 0.24593770101953424, (313.566, 226.05200000000002, 271.663)), ('B', ' 497 ', 'PHE', 0.09718320569867399, (292.388, 300.288, 319.827)), ('B', ' 581 ', 'THR', 0.10370301966799189, (322.867, 295.925, 274.274)), ('B', ' 805 ', 'ILE', 0.0428326468885667, (265.258, 245.524, 231.088)), ('B', ' 864 ', 'LEU', 0.24132629619263896, (257.13399999999996, 257.10600000000005, 250.51100000000002)), ('B', '1092 ', 'GLU', 0.057586954644274775, (272.67599999999993, 269.82000000000005, 202.238)), ('B', '1098 ', 'ASN', 0.011581552882470052, (286.37399999999997, 258.94200000000006, 193.507)), ('B', '1107 ', 'ARG', 0.005700805222017795, (278.564, 264.236, 205.974)), ('C', ' 210 ', 'ILE', 0.24795893371658795, (310.043, 327.465, 258.724)), ('C', ' 212 ', 'LEU', 0.2500996696424551, (306.797, 332.426, 256.613)), ('C', ' 336 ', 'CYS', 0.17700551983491297, (248.959, 307.8980000000001, 308.393)), ('C', ' 387 ', 'LEU', 0.2943926927143106, (262.5069999999999, 305.88100000000003, 305.214)), ('C', ' 529 ', 'LYS', 0.0, (256.81799999999987, 312.406, 294.47)), ('C', ' 530 ', 'SER', 0.05154842783388158, (257.5699999999999, 313.087, 290.769)), ('C', ' 581 ', 'THR', 0.24295462744755159, (243.72199999999998, 310.10699999999997, 283.419)), ('C', ' 693 ', 'ILE', 0.07968347406638547, (271.5209999999999, 315.677, 241.494)), ('C', ' 739 ', 'THR', 0.16240433955752667, (295.543, 272.864, 266.87)), ('C', ' 749 ', 'CYS', 0.2608532246541296, (296.127, 274.59, 275.956)), ('C', ' 866 ', 'THR', 0.11248672719500374, (299.362, 274.853, 236.413)), ('C', ' 935 ', 'GLN', 0.2948144141806807, (291.262, 293.386, 221.97)), ('D', ' 259 ', 'ILE', 0.15519991475612954, (253.481, 263.924, 397.911)), ('D', ' 541 ', 'LYS', 0.027662054718660536, (249.236, 263.058, 362.741))]
data['cbeta'] = [('B', ' 481 ', 'ASN', ' ', 0.25547432971309936, (279.907, 324.266, 306.948)), ('C', '1109 ', 'PHE', ' ', 0.28064986671244424, (269.5989999999999, 287.053, 203.744))]
data['probe'] = [(' C 529  LYS  H  ', ' C 529  LYS  HD2', -0.758, (258.419, 311.191, 295.213)), (' D 305  GLN  NE2', ' D 305  GLN  O  ', -0.717, (259.574, 238.592, 350.347)), (' A1047  TYR  HB2', ' A1067  TYR  HB3', -0.667, (252.118, 270.455, 220.067)), (' A 106  PHE  HB2', ' A 117  LEU  HB3', -0.65, (240.395, 282.416, 304.866)), (' B1107  ARG  H  ', ' B1107  ARG HH11', -0.626, (276.756, 265.34, 204.934)), (' C1047  TYR  HB2', ' C1067  TYR  HB3', -0.624, (272.758, 284.28, 213.857)), (' C 749  CYS  O  ', ' C 749  CYS  SG ', -0.613, (295.468, 274.442, 273.418)), (' C 391  CYS  HA ', ' C 525  CYS  HA ', -0.606, (257.121, 300.777, 302.503)), (' B 106  PHE  HB2', ' B 117  LEU  HB3', -0.603, (306.079, 244.02, 296.199)), (' C 906  PHE  HB3', ' C 911  VAL  HB ', -0.598, (273.134, 280.968, 206.711)), (' A 391  CYS  HA ', ' A 525  CYS  HA ', -0.588, (283.751, 249.521, 303.783)), (' D  29  LEU HD11', ' D  93  VAL HG13', -0.583, (293.73, 261.591, 353.192)), (' B 379  CYS  HA ', ' B 432  CYS  HA ', -0.582, (298.472, 290.069, 295.521)), (' A 129  LYS  HG2', ' A 169  GLU  HG3', -0.582, (237.468, 293.96, 310.488)), (' A 822  LEU HD21', ' A 938  LEU HD13', -0.58, (246.174, 283.692, 237.975)), (' A 379  CYS  HA ', ' A 432  CYS  HA ', -0.574, (280.312, 254.084, 319.142)), (' C 129  LYS  HG2', ' C 169  GLU  HG3', -0.573, (315.097, 321.269, 291.103)), (' A 913  GLN  NE2', ' C1090  PRO  O  ', -0.565, (254.696, 277.416, 202.407)), (' B1088  HIS  HB3', ' B1120  THR  HB ', -0.564, (273.96, 271.71, 191.017)), (' C1052  PHE  HB2', ' C1063  LEU  HB2', -0.562, (286.221, 283.09, 220.793)), (' A  34  ARG  NH2', ' A 217  PRO  O  ', -0.562, (227.11, 277.962, 280.824)), (' A 126  VAL  HB ', ' A 172  SER  HB3', -0.562, (231.683, 293.662, 302.042)), (' C 131  CYS  HA ', ' C 166  CYS  HA ', -0.557, (308.619, 321.204, 296.11)), (' C 382  VAL HG23', ' C 430  THR  HB ', -0.557, (266.861, 299.405, 311.364)), (' D 201  ASP  OD2', ' D 219  ARG  NH1', -0.552, (289.557, 265.876, 375.25)), (' B 906  PHE  HB3', ' B 911  VAL  HB ', -0.552, (270.603, 258.404, 210.32)), (' B 567  ARG  NH1', ' B 571  ASP  OD1', -0.551, (300.239, 293.323, 269.315)), (' B 103  GLY  HA3', ' B 120  VAL  HA ', -0.549, (308.014, 234.38, 294.941)), (' A 906  PHE  HB3', ' A 911  VAL  HB ', -0.548, (252.48, 272.354, 212.403)), (' B 822  LEU HD21', ' B 938  LEU HD13', -0.547, (274.453, 248.359, 236.28)), (' C 326  ILE  O  ', ' C 326  ILE HG13', -0.546, (258.159, 309.986, 282.542)), (' B 356  LYS  HB3', ' B 397  ALA  HB3', -0.546, (305.81, 302.178, 298.536)), (' A 318  PHE  H  ', ' A 594  GLY  HA2', -0.545, (256.929, 259.868, 270.441)), (' A 790  LYS  NZ ', ' C 703  ASN  O  ', -0.544, (256.277, 303.245, 221.527)), (' A 103  GLY  HA3', ' A 120  VAL  HA ', -0.543, (230.358, 285.726, 304.64)), (' B 907  ASN HD21', ' B 913  GLN HE21', -0.543, (263.325, 259.737, 208.065)), (' B 295  PRO  HB2', ' B 608  VAL HG21', -0.541, (305.619, 256.022, 255.488)), (' C 777  ASN  OD1', ' C1019  ARG  NH1', -0.54, (283.107, 270.25, 240.286)), (' C 379  CYS  HA ', ' C 432  CYS  HA ', -0.538, (265.531, 306.143, 314.947)), (' A 454  ARG  HG3', ' A 491  PRO  HB2', -0.538, (300.434, 251.261, 338.562)), (' D 144  LEU  HG ', ' D 145  GLU  HG3', -0.537, (269.834, 240.064, 380.28)), (' D 318  VAL  O  ', ' D 551  GLY  HA3', -0.536, (261.483, 263.079, 349.277)), (' A 935  GLN  NE2', ' A 936  ASP  OD1', -0.536, (237.007, 283.515, 233.824)), (' A 596  SER  HB2', ' A 611  LEU  HB3', -0.534, (250.747, 259.395, 263.651)), (' A 102  ARG HH21', ' A 122  ASN  HA ', -0.532, (224.3, 288.888, 305.582)), (' D 189  GLU  OE1', ' D 192  ARG  NH1', -0.532, (297.205, 259.764, 383.469)), (' D 145  GLU  HG2', ' D 149  ASN HD21', -0.532, (267.09, 241.001, 380.204)), (' A 701  ALA  HB3', ' B 787  GLN HE22', -0.531, (244.584, 254.769, 233.513)), (' A 742  ILE  O  ', ' A1000  ARG  NH1', -0.53, (269.775, 293.61, 273.625)), (' B 905  ARG  NH1', ' B1049  LEU  O  ', -0.528, (265.512, 257.562, 220.291)), (' A 765  ARG  NH1', ' C 957  GLN  OE1', -0.527, (284.502, 292.698, 255.18)), (' C 142  GLY  HA3', ' C 156  GLU  HB2', -0.527, (315.847, 340.887, 283.98)), (' D 252  TYR  HB3', ' D 255  TYR  HB2', -0.525, (253.514, 251.135, 397.958)), (' B 119  ILE HG12', ' B 128  ILE HG23', -0.524, (302.086, 238.282, 296.883)), (' B 609  ALA  HB1', ' B 650  LEU HD11', -0.523, (307.039, 259.767, 248.393)), (' D 271  TRP  NE1', ' D 502  SER  O  ', -0.522, (272.589, 247.09, 385.411)), (' D 116  LEU HD11', ' D 187  LYS  HE2', -0.518, (290.058, 250.48, 380.003)), (' D 407  ILE HG21', ' D 525  PHE  HB2', -0.517, (264.543, 263.167, 361.717)), (' A 535  LYS  NZ ', ' A 554  GLU  OE2', -0.516, (265.555, 235.159, 280.361)), (' B 153  MET  SD ', ' B 155  SER  OG ', -0.509, (315.522, 219.457, 300.88)), (' B1048  HIS  NE2', ' B1051  SER  OG ', -0.509, (268.396, 258.716, 225.62)), (' D 302  TRP  CD1', ' D 302  TRP  N  ', -0.506, (249.705, 238.942, 353.816)), (' A1030  SER  HB3', ' C1041  ASP  HB2', -0.505, (267.417, 283.207, 226.111)), (' A1048  HIS  NE2', ' A1051  SER  OG ', -0.504, (256.032, 279.281, 225.498)), (' B 119  ILE HG23', ' B 128  ILE HG12', -0.502, (302.39, 235.943, 295.807)), (' B1074  ASN  OD1', ' C 895  GLN  NE2', -0.501, (291.817, 262.927, 205.122)), (' C 529  LYS  HD2', ' C 529  LYS  N  ', -0.501, (257.802, 311.276, 295.721)), (' B 560  LEU  O  ', ' B 577  ARG  NH2', -0.5, (314.02, 302.347, 269.259)), (' D 261  CYS  SG ', ' D 262  LEU  N  ', -0.498, (259.567, 258.897, 394.313)), (' B  48  LEU  HB3', ' B 276  LEU HD11', -0.494, (290.675, 250.126, 265.478)), (' B  81  ASN  ND2', ' B 239  GLN  OE1', -0.494, (319.942, 239.683, 294.157)), (' B 777  ASN  OD1', ' B1019  ARG  NH1', -0.491, (262.896, 267.853, 245.033)), (' C 327  VAL  O  ', ' C 327  VAL HG12', -0.489, (257.144, 308.014, 287.747)), (' C  30  ASN  ND2', ' C  60  SER  O  ', -0.488, (289.971, 326.449, 261.841)), (' B  37  TYR  HB3', ' B 223  LEU  HB2', -0.485, (298.673, 241.125, 278.597)), (' B  89  GLY  HA2', ' B 195  LYS  HG2', -0.485, (303.536, 248.33, 284.114)), (' B 561  PRO  HA ', ' B 577  ARG HH12', -0.485, (315.623, 303.278, 271.308)), (' A 777  ASN  OD1', ' A1019  ARG  NH1', -0.481, (271.351, 286.934, 240.685)), (' C 965  GLN  NE2', ' C1003  SER  OG ', -0.478, (286.25, 285.36, 265.943)), (' D 365  THR  OG1', ' D 368  ASP  OD1', -0.477, (256.367, 240.078, 364.605)), (' D 526  GLN  NE2', ' D 530  CYS  SG ', -0.477, (256.79, 263.952, 360.357)), (' A 134  GLN  HB3', ' A 161  SER  HB3', -0.477, (234.68, 281.049, 319.907)), (' C 193  VAL HG23', ' C 223  LEU HD22', -0.476, (303.132, 318.497, 270.133)), (' A 781  VAL HG22', ' A1026  ALA  HB2', -0.475, (265.745, 284.988, 235.346)), (' B1047  TYR  HB2', ' B1067  TYR  HB3', -0.474, (274.871, 259.521, 217.04)), (' C 295  PRO  HB2', ' C 608  VAL HG21', -0.471, (279.678, 313.62, 253.123)), (' D 204  ARG  HG2', ' D 222  LEU HD23', -0.47, (281.3, 266.17, 374.867)), (' A 366  SER  O  ', ' A 370  ASN  ND2', -0.469, (270.769, 244.083, 313.088)), (' A  97  LYS  H  ', ' A  97  LYS  HD3', -0.469, (218.638, 280.031, 294.103)), (' C 289  VAL HG11', ' C 300  LYS  HB2', -0.469, (289.301, 308.522, 255.292)), (' C  99  ASN HD22', ' C 177  MET  HB3', -0.469, (316.246, 330.764, 271.861)), (' C  32  PHE  HD2', ' C  33  THR HG23', -0.467, (295.006, 319.886, 257.034)), (' C 822  LEU HD21', ' C 938  LEU HD13', -0.467, (290.107, 289.877, 227.687)), (' A 787  GLN  HB3', ' C 703  ASN HD21', -0.467, (262.74, 299.892, 221.552)), (' C 144  TYR  HA ', ' C 246  ARG  HB2', -0.466, (318.877, 343.925, 280.203)), (' B 108  THR  HA ', ' B 236  THR  HB ', -0.466, (311.715, 251.55, 296.125)), (' D 425  SER  C  ', ' D 427  ASP  H  ', -0.465, (238.327, 251.119, 357.737)), (' C 743  CYS  HB3', ' C 977  LEU  CD1', -0.46, (297.436, 278.73, 272.581)), (' A 490  PHE  HB3', ' D  31  LYS  HZ3', -0.459, (300.637, 248.504, 346.224)), (' C  97  LYS  H  ', ' C  97  LYS  HD3', -0.459, (310.077, 335.285, 265.959)), (' C 935  GLN  NE2', ' C 936  ASP  OD1', -0.459, (293.681, 296.069, 220.224)), (' B  95  THR HG22', ' B 189  LEU HD13', -0.458, (310.16, 232.165, 277.096)), (' C 271  GLN  OE1', ' C 273  ARG  NH2', -0.458, (285.539, 318.457, 269.317)), (' B 474  GLN  HG2', ' B 480  CYS  HB2', -0.457, (277.222, 320.82, 307.418)), (' A 353  TRP  HZ3', ' A 355  ARG  HB2', -0.456, (295.485, 247.062, 320.639)), (' D 503  LEU HD23', ' D 506  VAL HG23', -0.456, (276.35, 251.295, 381.389)), (' A 822  LEU HD22', ' A 945  LEU HD11', -0.456, (247.538, 283.781, 240.722)), (' D 126  ILE HD13', ' D 175  GLN HE21', -0.455, (281.295, 238.889, 389.595)), (' B 599  THR  HB ', ' B 608  VAL HG12', -0.454, (302.544, 254.195, 252.424)), (' D 424  LEU  HA ', ' D 424  LEU HD12', -0.454, (243.733, 248.128, 360.253)), (' D 303  ASP  H  ', ' D 306  ARG  HD3', -0.453, (253.295, 237.806, 351.561)), (' C 822  LEU HD13', ' C1061  VAL HG21', -0.453, (289.776, 286.328, 229.451)), (' D 482  ARG  HE ', ' D 488  VAL HG12', -0.452, (265.123, 260.068, 397.66)), (' C 102  ARG HH22', ' C 143  VAL HG21', -0.451, (317.184, 336.715, 277.834)), (' C 581  THR  HB ', ' C 583  GLU  HG2', -0.451, (244.944, 309.683, 281.015)), (' A 328  ARG  NH1', ' A 533  LEU  HB2', -0.451, (268.652, 239.061, 289.436)), (' A 396  TYR  HB2', ' A 514  SER  HB3', -0.451, (290.742, 250.673, 316.546)), (' A 985  ASP  HB2', ' A 987  PRO  HD2', -0.45, (277.927, 297.069, 291.326)), (' D 560  LEU HD13', ' D 564  GLU  HG3', -0.448, (278.526, 268.253, 353.379)), (' C 742  ILE  HA ', ' C1000  ARG HH11', -0.447, (294.08, 280.074, 269.241)), (' B  34  ARG  NH2', ' B 217  PRO  O  ', -0.446, (307.321, 235.019, 271.042)), (' B 391  CYS  SG ', ' B 392  PHE  N  ', -0.442, (309.067, 294.446, 285.468)), (' D 499  ASP  H  ', ' D 500  PRO  HD2', -0.442, (276.823, 251.899, 390.752)), (' C1142  GLN  HB3', ' C1143  PRO  HD3', -0.442, (255.739, 276.238, 180.47)), (' D 199  TYR  OH ', ' D 509  ASP  OD1', -0.44, (285.247, 252.593, 377.457)), (' D 183  TYR  OH ', ' D 509  ASP  OD1', -0.44, (285.107, 251.29, 378.482)), (' C1104  VAL HG13', ' C1113  GLN  HB2', -0.439, (261.539, 282.764, 195.186)), (' D 336  PRO  HB2', ' D 340  GLN  HB3', -0.439, (265.999, 227.689, 360.098)), (' C 476  GLY  H  ', ' C 487  ASN  HB3', -0.438, (265.895, 292.933, 351.585)), (' C 805  ILE  HB ', ' C1054  GLN HE22', -0.437, (291.365, 282.485, 221.194)), (' B 930  ALA  HA ', ' B 933  LYS  HE2', -0.437, (278.142, 246.045, 223.732)), (' D 425  SER  C  ', ' D 427  ASP  N  ', -0.437, (238.403, 251.614, 357.758)), (' D 581  VAL  HA ', ' D 584  LEU HD13', -0.436, (264.144, 269.619, 371.891)), (' C 733  LYS  HD2', ' C 771  ALA  HB1', -0.436, (292.306, 271.791, 247.889)), (' C 746  SER  HB3', ' C 749  CYS  HB3', -0.435, (298.727, 276.166, 274.936)), (' D 397  ASN HD22', ' D 399  GLY  H  ', -0.435, (276.535, 260.607, 367.442)), (' C 126  VAL  HB ', ' C 172  SER  HB3', -0.434, (316.581, 320.806, 281.124)), (' A  89  GLY  HA2', ' A 195  LYS  HG2', -0.434, (242.648, 279.593, 292.788)), (' D 184  VAL HG13', ' D 464  PHE  HD1', -0.434, (286.832, 257.408, 385.744)), (' C 853  GLN  HB3', ' C 858  LEU HD12', -0.433, (296.713, 283.576, 257.207)), (' C  68  ILE HG12', ' C  70  VAL  H  ', -0.433, (305.826, 345.427, 268.441)), (' C 935  GLN  HB3', ' C 935  GLN HE21', -0.433, (292.385, 294.241, 219.841)), (' B  91  TYR  N  ', ' B 268  GLY  O  ', -0.43, (308.569, 245.207, 281.823)), (' B 129  LYS  HG2', ' B 169  GLU  HG3', -0.43, (300.816, 236.274, 304.364)), (' C  52  GLN  OE1', ' C 274  THR  OG1', -0.43, (287.49, 307.813, 268.732)), (' B 882  ILE HG13', ' B 883  THR HG23', -0.43, (256.343, 249.013, 223.516)), (' A 770  ILE HD11', ' A1012  LEU HD23', -0.429, (272.6, 285.827, 253.368)), (' C 717  ASN  OD1', ' C 718  PHE  N  ', -0.429, (274.375, 292.956, 206.349)), (' B 550  GLY  HA2', ' B 589  PRO  HA ', -0.428, (310.379, 281.121, 265.668)), (' C 189  LEU  HB2', ' C 210  ILE HG12', -0.428, (307.937, 327.242, 262.342)), (' A  24  LEU  HB2', ' A  78  ARG  HD3', -0.428, (220.306, 266.128, 301.029)), (' D 457  GLU  HG2', ' D 513  ILE HD13', -0.427, (276.203, 261.996, 377.848)), (' B1082  CYS  HB3', ' B1134  ASN HD22', -0.426, (282.52, 275.664, 186.102)), (' C 719  THR HG23', ' C1070  ALA  HB2', -0.426, (274.352, 294.762, 209.601)), (' A1050  MET  N  ', ' A1050  MET  SD ', -0.425, (252.914, 279.806, 221.08)), (' C 210  ILE HG21', ' C 217  PRO  HG3', -0.424, (306.393, 326.116, 259.894)), (' C1076  THR  HB ', ' C1097  SER  HB3', -0.424, (254.156, 293.111, 197.685)), (' C 119  ILE HG12', ' C 128  ILE HG23', -0.424, (310.149, 320.993, 285.118)), (' C 717  ASN  HB3', ' C1070  ALA  HB3', -0.422, (272.666, 295.316, 207.416)), (' B 642  VAL HG22', ' B 651  ILE HG12', -0.42, (314.729, 263.951, 250.863)), (' A1127  ASP  N  ', ' A1127  ASP  OD1', -0.419, (265.043, 242.809, 196.283)), (' C 767  LEU HD21', ' C1008  VAL HG22', -0.418, (286.836, 275.354, 257.35)), (' B 741  TYR  OH ', ' B 962  LEU  O  ', -0.417, (275.769, 262.956, 270.65)), (' B  96  GLU  HB3', ' B 100  ILE  H  ', -0.417, (312.467, 227.839, 284.935)), (' C  48  LEU HD23', ' C 276  LEU HD21', -0.415, (293.111, 303.288, 257.584)), (' A 732  THR HG22', ' A 955  ASN HD22', -0.415, (261.561, 288.2, 252.627)), (' B 854  LYS  HG2', ' B 859  THR  HA ', -0.414, (265.262, 255.771, 265.097)), (' B  48  LEU HD13', ' B 276  LEU HD21', -0.414, (291.84, 249.478, 263.477)), (' C 375  SER  H  ', ' C 436  TRP  HA ', -0.414, (262.371, 317.35, 321.388)), (' A 375  SER  H  ', ' A 436  TRP  HA ', -0.413, (276.634, 244.234, 327.627)), (' C 287  ASP  OD1', ' C 288  ALA  N  ', -0.412, (296.035, 311.33, 257.257)), (' D 215  TYR  HD1', ' D 577  LYS  HD3', -0.411, (277.341, 276.625, 361.143)), (' B 105  ILE HD11', ' B 239  GLN  HB3', -0.411, (315.186, 241.777, 295.149)), (' A 131  CYS  HA ', ' A 166  CYS  HA ', -0.411, (243.063, 288.923, 314.21)), (' A 490  PHE  CE1', ' A 492  LEU  HB2', -0.411, (301.327, 245.479, 341.709)), (' A  97  LYS  HB3', ' A 186  PHE  HA ', -0.409, (217.374, 280.209, 291.22)), (' C 986  PRO  N  ', ' C 987  PRO  HD2', -0.409, (298.179, 276.754, 288.229)), (' A  37  TYR  HB3', ' A 223  LEU  HB2', -0.408, (237.532, 284.209, 285.738)), (' C 226  LEU  HG ', ' C 227  VAL HG12', -0.408, (312.003, 315.067, 278.379)), (' B 490  PHE  HE1', ' B 492  LEU  HB2', -0.407, (288.397, 315.064, 312.012)), (' C 815  ARG  NH2', ' C 819  GLU  O  ', -0.407, (296.654, 285.215, 229.799)), (' A 300  LYS  HD3', ' A 306  PHE  HA ', -0.407, (241.573, 275.361, 266.781)), (' D 291  ILE HD13', ' D 415  PRO  HG3', -0.407, (248.028, 254.269, 365.529)), (' C  28  TYR  HB3', ' C  61  ASN HD21', -0.407, (289.266, 332.307, 265.351)), (' A 316  SER  OG ', ' A 317  ASN  N  ', -0.406, (255.507, 264.209, 272.752)), (' A  29  THR  OG1', ' A  30  ASN  N  ', -0.406, (227.549, 267.225, 286.59)), (' D  91  LEU HD13', ' D 212  VAL  HA ', -0.405, (286.839, 273.519, 356.635)), (' A  53  ASP  HB3', ' A  55  PHE  CE2', -0.405, (245.533, 280.1, 283.27)), (' D 145  GLU  HA ', ' D 146  PRO  HA ', -0.405, (265.776, 238.892, 380.38)), (' A  24  LEU  HB2', ' A  78  ARG HH11', -0.405, (220.504, 266.018, 299.803)), (' C 743  CYS  HB3', ' C 977  LEU HD13', -0.404, (297.506, 278.264, 273.171)), (' A  68  ILE  HA ', ' A 262  ALA  HA ', -0.404, (216.567, 273.68, 299.106)), (' C  91  TYR  N  ', ' C 268  GLY  O  ', -0.403, (296.759, 322.762, 273.122)), (' C 483  VAL HG22', ' C 485  GLY  H  ', -0.403, (256.927, 294.885, 354.838)), (' A 454  ARG HH22', ' A 470  THR  HA ', -0.402, (304.706, 249.366, 334.609)), (' C 246  ARG  NH1', ' C 252  GLY  O  ', -0.402, (315.479, 346.78, 284.141)), (' A 105  ILE HD11', ' A 239  GLN  HB3', -0.402, (233.712, 276.569, 307.532)), (' D 302  TRP  HD1', ' D 302  TRP  N  ', -0.402, (249.391, 238.919, 353.954)), (' C  25  PRO  HA ', ' C  26  PRO  HD3', -0.402, (292.502, 341.751, 272.128)), (' A 983  ARG  HG3', ' A 984  LEU  HG ', -0.402, (270.056, 292.873, 290.616)), (' D 344  CYS  HA ', ' D 359  LEU  HG ', -0.402, (269.292, 237.601, 362.561)), (' B 805  ILE  H  ', ' B 805  ILE HD13', -0.401, (265.198, 244.497, 228.847)), (' B 770  ILE HD11', ' B1012  LEU HD23', -0.401, (268.114, 270.575, 256.446)), (' A 763  LEU HD22', ' A1008  VAL HG21', -0.401, (274.354, 287.358, 260.874)), (' D 207  TYR  O  ', ' D 566  TRP  NE1', -0.401, (280.068, 267.934, 366.719)), (' C 905  ARG  HB3', ' C1049  LEU HD22', -0.4, (276.968, 279.693, 211.665)), (' A  91  TYR  N  ', ' A 268  GLY  O  ', -0.4, (236.621, 275.033, 292.166))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
