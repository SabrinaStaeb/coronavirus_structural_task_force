# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = [('H', ' 147 ', 'PRO', None, (-18.956999999999994, 28.587, 26.995)), ('H', ' 149 ', 'PRO', None, (-15.526999999999997, 25.506999999999998, 22.945)), ('L', ' 141 ', 'PRO', None, (-15.056000000000001, -3.249999999999999, 24.59))]
data['rota'] = [('H', ' 149 ', 'PRO', 0.2770993606729344, (-14.552, 24.508, 23.372)), ('L', ' 137 ', 'SER', 0.06433169955446859, (-7.1925, 6.275499999999999, 29.158499999999997))]
data['cbeta'] = []
data['probe'] = [(' L 129  LYS  NZ ', ' L 301  HOH  O  ', -1.008, (-12.498, 26.234, 40.542)), (' A 355  ARG  HD3', ' A 398  ASP  OD1', -0.892, (-82.24, 8.95, -0.079)), (' H 199  ASN HD21', ' H 201  LYS  HE2', -0.775, (-6.69, 30.803, 21.446)), (' A 381  GLY  HA3', ' A 430  THR HG22', -0.698, (-82.108, -0.414, -13.045)), (' H 199  ASN  ND2', ' H 201  LYS  HE2', -0.582, (-6.792, 30.337, 21.219)), (' A 417  LYS  HD2', ' H 469  HOH  O  ', -0.544, (-60.594, 1.84, 6.076)), (' L 194  GLN  HG2', ' L 203  GLU  HG3', -0.535, (-12.802, 0.426, 43.513)), (' H  87  THR  CG2', ' H 108  ARG  NH2', -0.53, (-29.511, 18.717, 27.119)), (' A 424  LYS  HD3', ' A1104  HOH  O  ', -0.524, (-71.663, -1.965, 2.212)), (' H   4  LEU HD22', ' H  22  CYS  SG ', -0.518, (-43.347, 15.728, 12.986)), (' A 353  TRP  O  ', ' A 466  ARG  NH1', -0.511, (-79.023, 11.28, 6.199)), (' H 167  PRO  HG2', ' L 165  SER  OG ', -0.482, (-14.571, 11.262, 24.257)), (' H  87  THR HG22', ' H 108  ARG  NH2', -0.477, (-29.672, 18.079, 27.146)), (' H  42  GLY  HA3', ' L 163  THR HG21', -0.463, (-24.467, 10.028, 27.234)), (' A 396  TYR  HB2', ' A 514  SER  OG ', -0.453, (-84.671, 7.087, -2.725)), (' L 120  PRO  HD3', ' L 132  LEU HD12', -0.45, (-8.971, 14.584, 45.489)), (' L 129  LYS  HB2', ' L 129  LYS  HE3', -0.445, (-11.46, 24.759, 44.004)), (' A 431  GLY  HA2', ' A 515  PHE  CE2', -0.444, (-82.824, 6.261, -10.678)), (' A 376  THR  HB ', ' A 435  ALA  HB3', -0.444, (-70.199, 12.816, -9.659)), (' H 171  GLN  HG3', ' H 175  LEU  O  ', -0.436, (-19.952, 21.166, 33.701)), (' A 354  ASN  O  ', ' A 398  ASP  HA ', -0.435, (-79.92, 12.027, 0.677)), (' A 498  GLN  H  ', ' A 501  ASN  ND2', -0.425, (-58.003, 20.223, 1.082)), (' H 199  ASN HD21', ' H 201  LYS  CE ', -0.42, (-7.002, 31.442, 21.09)), (' A 431  GLY  HA2', ' A 515  PHE  CD2', -0.416, (-82.928, 5.507, -10.264)), (' H  43  LYS  HA ', ' H  43  LYS  HE2', -0.411, (-28.197, 7.307, 29.708)), (' A 353  TRP  HZ3', ' A 355  ARG  HE ', -0.402, (-81.093, 7.733, 2.562)), (' H 100C GLU  HB3', ' H 374  HOH  O  ', -0.402, (-49.617, 2.263, 17.401)), (' H  42  GLY  C  ', ' H  43  LYS  HD2', -0.401, (-26.964, 9.008, 28.664))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
