# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 602 ', 'THR', 0.019479898531630502, (179.609, 189.983, 203.254)), ('B', ' 814 ', 'LYS', 0.007039647580274808, (179.474, 221.887, 181.487)), ('C', ' 123 ', 'ALA', 0.005566875606895578, (253.50800000000012, 170.506, 243.07900000000004))]
data['omega'] = []
data['rota'] = [('B', ' 814 ', 'LYS', 0.04937761931462058, (179.474, 221.887, 181.487)), ('C', ' 603 ', 'ASN', 0.08995744785219037, (243.363, 194.03600000000006, 201.222)), ('C', '1072 ', 'GLU', 0.1957436840621297, (236.30999999999997, 206.067, 162.785)), ('C', '1074 ', 'ASN', 0.0, (237.691, 212.005, 159.08800000000002))]
data['cbeta'] = [('A', '1071 ', 'GLN', ' ', 0.3747463334772864, (203.065, 234.168, 159.893))]
data['probe'] = [(' B 123  ALA  HB3', ' B1302  NAG  C8 ', -0.93, (148.367, 199.114, 242.733)), (' B 123  ALA  HB3', ' B1302  NAG  H82', -0.805, (149.377, 199.073, 242.476)), (' B 123  ALA  CB ', ' B1302  NAG  H81', -0.685, (147.469, 198.679, 242.947)), (' B 123  ALA  HB3', ' B1302  NAG  H81', -0.662, (148.086, 198.878, 242.972)), (' B 339  GLY  HA2', ' B1305  NAG  O7 ', -0.633, (224.791, 168.282, 261.909)), (' B 123  ALA  CB ', ' B1302  NAG  C8 ', -0.604, (148.267, 198.625, 242.425)), (' B 599  THR  O  ', ' B 599  THR HG23', -0.59, (186.195, 189.194, 202.888)), (' B 557  LYS  NZ ', ' B 574  ASP  OD1', -0.589, (222.645, 179.398, 218.741)), (' A1028  LYS  NZ ', ' A1042  PHE  O  ', -0.499, (212.051, 219.374, 180.131)), (' B1142  GLN  N  ', ' B1143  PRO  CD ', -0.499, (209.745, 198.034, 132.047)), (' A1084  ASP  N  ', ' A1084  ASP  OD1', -0.496, (195.844, 207.442, 137.201)), (' B 391  CYS  SG ', ' B 522  ALA  O  ', -0.486, (225.036, 184.165, 249.281)), (' B 601  GLY  C  ', ' B 603  ASN  H  ', -0.481, (179.946, 190.473, 201.012)), (' B 856  ASN  N  ', ' B 856  ASN  OD1', -0.467, (187.377, 221.135, 215.077)), (' B 898  PHE  N  ', ' B 899  PRO  HD2', -0.466, (189.346, 215.652, 160.22)), (' C 898  PHE  N  ', ' C 899  PRO  HD2', -0.455, (216.144, 185.326, 163.748)), (' B1028  LYS  NZ ', ' B1042  PHE  O  ', -0.452, (201.359, 206.291, 180.597)), (' A 898  PHE  N  ', ' A 899  PRO  HD2', -0.452, (228.969, 223.248, 161.883)), (' B 905  ARG  HD3', ' B1049  LEU  O  ', -0.451, (197.936, 210.141, 167.523)), (' B 601  GLY  C  ', ' B 603  ASN  N  ', -0.447, (179.753, 190.123, 201.241)), (' C1142  GLN  N  ', ' C1143  PRO  HD2', -0.418, (220.815, 206.857, 132.705)), (' A1110  TYR  CZ ', ' A1112  PRO  HG3', -0.412, (203.044, 225.975, 148.879)), (' B 986  PRO  HB2', ' B 987  PRO  HD3', -0.405, (198.065, 228.083, 239.85)), (' C1011  GLN  OE1', ' C1014  ARG  NH1', -0.404, (213.361, 201.194, 207.387)), (' A 986  PRO  N  ', ' A 987  PRO  HD2', -0.4, (220.568, 216.811, 243.113))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
