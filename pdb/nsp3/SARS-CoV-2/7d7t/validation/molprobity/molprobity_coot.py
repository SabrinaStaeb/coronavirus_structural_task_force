# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = []
data['cbeta'] = []
data['probe'] = [(' A  28  TYR  HB3', ' A  35  THR HG21', -0.953, (2.334, -17.893, 31.185)), (' B   4  ARG  HG2', ' B  24  MET  HE3', -0.935, (-62.959, -10.795, 19.048)), (' B   6  ILE  HB ', ' B  52  GLU  CD ', -0.901, (-58.623, -15.449, 21.554)), (' A  78  PRO  HG2', ' B 180  ASP  OD1', -0.821, (-13.694, -26.522, 26.279)), (' A 186  LEU HD13', ' A 233  LYS  HE2', -0.815, (-33.9, -19.13, -5.651)), (' A 264  GLU  OE1', ' A 297  TYR  OH ', -0.803, (-6.028, -18.118, -13.785)), (' B 208  TYR  HE1', ' B 233  LYS  HZ3', -0.788, (-4.235, -33.879, 8.108)), (' A 269  TYR  HE1', ' B 269  TYR  HE1', -0.772, (-15.481, -31.115, -3.334)), (' B  27  THR HG22', ' B  46  LYS  HG2', -0.769, (-54.678, -10.732, 9.135)), (' B  64  THR HG23', ' B  65  LEU HD12', -0.746, (-39.507, -9.179, 25.376)), (' B 244  MET  HG3', ' B 305  PHE  HE1', -0.739, (-16.323, -38.484, 10.233)), (' B 213  SER  HG ', ' B 252  TYR  HH ', -0.726, (-8.853, -47.731, 5.634)), (' B  52  GLU  H  ', ' B  54  LYS  HE3', -0.721, (-57.485, -20.365, 20.008)), (' B  39  GLY  HA3', ' B  88  LEU HD22', -0.704, (-42.866, -25.692, 12.282)), (' A 237  GLN  HG2', ' A 312  THR HG22', -0.691, (-36.798, -6.75, -5.968)), (' B  60  PRO  HD3', ' B  81  LEU HD12', -0.687, (-37.235, -14.055, 17.186)), (' B 284  TYR  HB3', ' B 291  LEU HD11', -0.684, (-29.395, -52.334, 8.427)), (' B 185  VAL HG22', ' B 199  THR HG22', -0.673, (-0.925, -33.499, 20.858)), (' B  27  THR  HA ', ' B  46  LYS  HA ', -0.668, (-54.745, -11.311, 11.69)), (' B 185  VAL HG13', ' B 197  GLN  NE2', -0.663, (1.181, -34.114, 19.31)), (' B 213  SER  OG ', ' B 252  TYR  OH ', -0.655, (-9.316, -48.447, 5.481)), (' A 203  VAL  HB ', ' B 157  ASN HD22', -0.654, (-25.577, -19.128, 6.025)), (' B 261  CYS  HB2', ' B 276  HIS  HE1', -0.652, (-22.698, -44.795, 10.171)), (' A 294  SER  OG ', ' A 296  GLU  O  ', -0.639, (-6.623, -10.956, -20.411)), (' A  64  THR HG23', ' A  65  LEU HD12', -0.635, (-12.071, -13.09, 34.5)), (' A  83  ARG  NH2', ' A 154  ALA  O  ', -0.634, (-11.702, -22.1, 15.654)), (' A 265  TYR  OH ', ' A 268  ASN  O  ', -0.634, (-7.528, -28.712, -5.463)), (' B 261  CYS  HB2', ' B 276  HIS  CE1', -0.628, (-22.936, -45.172, 10.06)), (' B 237  GLN  HG3', ' B 312  THR HG22', -0.621, (-2.126, -41.391, 23.989)), (' B  24  MET  HB2', ' B  47  PRO  HB2', -0.617, (-58.98, -12.872, 16.434)), (' B 200  LEU HD23', ' B 204  GLU  HB3', -0.614, (-7.573, -29.622, 13.566)), (' B 240  SER  O  ', ' B 309  ASN  N  ', -0.611, (-12.718, -41.802, 22.163)), (' B  72  TYR  HD2', ' B 131  PRO  HB2', -0.611, (-31.55, -24.015, 25.076)), (' B 167  ARG  NH1', ' B 209  MET  SD ', -0.599, (-13.773, -30.768, 6.041)), (' A  39  GLY  HA2', ' A  85  MET  HE3', -0.598, (-0.385, -15.511, 20.565)), (' B 264  GLU  OE1', ' B 297  TYR  OH ', -0.597, (-22.642, -48.656, -0.147)), (' A   5  THR HG22', ' A  23  ASP  HA ', -0.597, (7.36, -14.033, 41.606)), (' A 186  LEU  HB2', ' A 198  THR HG23', -0.595, (-36.715, -19.133, -3.489)), (' A 281  GLU  OE2', ' A 284  TYR  OH ', -0.594, (-4.232, -0.834, -13.869)), (' B   4  ARG  HG2', ' B  24  MET  CE ', -0.593, (-62.761, -11.059, 19.725)), (' B 128  PHE  CG ', ' B 133  LEU HD22', -0.591, (-26.185, -30.392, 20.012)), (' A 172  TYR  O  ', ' A 175  GLN  HG2', -0.59, (-19.957, -17.78, 9.699)), (' B  22  VAL HG11', ' B  32  PHE  HZ ', -0.589, (-50.914, -11.601, 20.384)), (' B 113  TYR  CD2', ' B 164  GLY  HA3', -0.588, (-27.347, -31.492, 2.986)), (' B 223  ILE  O  ', ' B 231  ALA  N  ', -0.579, (4.594, -34.349, 2.499)), (' B   6  ILE HD11', ' B  47  PRO  HB3', -0.576, (-56.945, -14.043, 17.708)), (' B 165  ASP  OD1', ' B 168  GLU  HB2', -0.572, (-20.88, -29.787, 3.787)), (' B  13  ASP  HB2', ' B  72  TYR  CD1', -0.568, (-35.953, -21.483, 23.813)), (' B  42  VAL HG23', ' B  45  ILE HD12', -0.565, (-51.653, -18.451, 10.34)), (' B 187  ASN  HA ', ' B 197  GLN  HA ', -0.554, (4.093, -33.472, 15.174)), (' A  14  ASN  HB2', ' A  57  TYR  OH ', -0.553, (-5.425, -8.53, 22.561)), (' B 162  GLU  HG3', ' B 402  GYX  C17', -0.551, (-29.602, -25.086, -1.887)), (' B   7  LYS  O  ', ' B  53  GLY  N  ', -0.55, (-55.445, -17.903, 23.827)), (' B  72  TYR  CD2', ' B 131  PRO  HB2', -0.548, (-32.277, -24.252, 24.877)), (' B 149  CYS  O  ', ' B 153  LEU HD12', -0.543, (-33.532, -28.968, 9.835)), (' A 235  LEU HD23', ' A 311  TYR  CE2', -0.542, (-32.28, -10.78, -9.325)), (' B 207  MET  HA ', ' B 244  MET  HB3', -0.542, (-13.797, -36.004, 11.938)), (' A  62  ASP  HB2', ' A  65  LEU HD13', -0.537, (-11.213, -15.247, 34.779)), (' B  22  VAL HG11', ' B  32  PHE  CZ ', -0.536, (-51.076, -11.582, 19.901)), (' A 158  LYS  HD3', ' A 162  GLU  OE1', -0.535, (-8.985, -26.45, 7.466)), (' A  36  TYR  CD1', ' A  41  ASP  HA ', -0.535, (2.124, -19.059, 23.795)), (' B 166  VAL  O  ', ' B 170  MET  HG2', -0.535, (-20.843, -33.904, 8.586)), (' A 269  TYR  HE1', ' B 269  TYR  CE1', -0.535, (-16.071, -30.964, -3.774)), (' B 184  ARG HH22', ' B 243  VAL HG13', -0.534, (-9.937, -38.04, 14.234)), (' A 148  PHE  O  ', ' A 152  ILE HG13', -0.531, (-8.284, -13.413, 10.0)), (' A 163  LEU HD23', ' A 402  GYX  N08', -0.525, (-8.261, -28.409, -1.05)), (' A 184  ARG HH22', ' A 243  VAL HG13', -0.523, (-26.344, -13.547, -4.547)), (' A 285  CYS  HB3', ' A 292  THR  OG1', -0.522, (-2.346, -11.539, -13.609)), (' A  61  ASN  O  ', ' A  66  ARG  NH2', -0.521, (-13.535, -19.822, 33.871)), (' A  29  GLY  HA2', ' A  33  GLY  O  ', -0.516, (0.625, -21.364, 32.253)), (' B 165  ASP  HB3', ' B 402  GYX  C06', -0.515, (-21.832, -31.841, -0.102)), (' A  28  TYR  HB3', ' A  35  THR  CG2', -0.507, (2.435, -18.4, 31.163)), (' B   6  ILE HG13', ' B  22  VAL HG23', -0.502, (-56.407, -13.03, 20.63)), (' B 197  GLN HE22', ' B 199  THR HG23', -0.501, (0.881, -31.939, 19.427)), (' B 225  CYS  HB2', ' B 231  ALA  HB2', -0.5, (6.254, -31.957, 4.454)), (' A  77  ASP  HB3', ' A  80  PHE  HB2', -0.499, (-13.253, -21.698, 20.6)), (' B 113  TYR  CE2', ' B 164  GLY  HA3', -0.497, (-27.644, -31.337, 3.515)), (' A 284  TYR  CE1', ' A 293  LYS  HG2', -0.495, (-2.595, -4.659, -14.142)), (' B  96  TYR  HB3', ' B 103  THR HG23', -0.492, (-38.047, -40.83, 13.015)), (' B 244  MET  CG ', ' B 305  PHE  HE1', -0.489, (-16.238, -37.65, 10.726)), (' A  62  ASP  N  ', ' A  62  ASP  OD1', -0.488, (-10.151, -17.377, 34.817)), (' B 105  ILE  O  ', ' B 288  GLY  HA2', -0.483, (-34.56, -41.953, 5.263)), (' B 106  LYS  HD3', ' B 107  TRP  O  ', -0.478, (-38.635, -40.587, 1.5)), (' A 281  GLU  HG2', ' A 282  THR  N  ', -0.473, (-7.827, -1.258, -15.853)), (' A  28  TYR  CD1', ' A  42  VAL HG12', -0.473, (5.949, -16.807, 30.563)), (' B  12  VAL HG12', ' B  58  VAL  O  ', -0.472, (-39.866, -14.766, 19.004)), (' A 148  PHE  CE2', ' A 152  ILE HD11', -0.472, (-9.593, -11.603, 7.285)), (' A 276  HIS  O  ', ' A 277  ILE HD13', -0.471, (-6.659, -12.705, -10.266)), (' B  84  TYR  HE1', ' B 151  LEU  HG ', -0.469, (-35.189, -26.412, 15.369)), (' B  32  PHE  HB2', ' B  35  THR HG22', -0.466, (-46.658, -11.26, 16.164)), (' B 241  PRO  HA ', ' B 309  ASN  H  ', -0.465, (-14.168, -42.014, 22.666)), (' B 129  ASN  OD1', ' B 178  ASN  HB2', -0.465, (-20.807, -28.821, 24.929)), (' A 269  TYR  CE1', ' B 269  TYR  HE1', -0.464, (-15.576, -31.359, -3.344)), (' A 225  CYS  N  ', ' A 229  LYS  O  ', -0.462, (-36.66, -30.648, -11.298)), (' A 121  LEU  HA ', ' A 121  LEU HD23', -0.461, (-14.835, -9.32, 2.515)), (' A 220  GLY  HA2', ' A 234  TYR  HB3', -0.461, (-34.784, -17.712, -13.396)), (' B 167  ARG  HA ', ' B 244  MET  HE1', -0.456, (-18.273, -34.519, 8.182)), (' B  84  TYR  CE1', ' B 151  LEU  HG ', -0.455, (-35.179, -26.063, 15.59)), (' B 244  MET  HG3', ' B 305  PHE  CE1', -0.454, (-16.682, -38.105, 10.249)), (' A 256  HIS  HA ', ' A 283  LEU HD21', -0.454, (-12.903, -7.167, -16.381)), (' A 265  TYR  CZ ', ' A 272  GLY  HA3', -0.453, (-6.799, -27.139, -5.807)), (' B 112  SER  OG ', ' B 274  TYR  N  ', -0.453, (-28.393, -40.044, 0.077)), (' B 237  GLN  CG ', ' B 312  THR HG22', -0.452, (-2.403, -40.572, 23.979)), (' B 283  LEU  O  ', ' B 293  LYS  HA ', -0.449, (-26.408, -55.301, 6.259)), (' B 207  MET  HE3', ' B 244  MET  SD ', -0.447, (-16.523, -34.413, 10.228)), (' B  28  TYR  HB3', ' B  35  THR HG21', -0.446, (-49.042, -12.53, 14.908)), (' A 155  TYR  HE1', ' A 176  HIS  CD2', -0.444, (-17.48, -15.148, 14.904)), (' B 156  CYS  SG ', ' B 169  THR HG23', -0.443, (-25.762, -28.963, 9.285)), (' A  36  TYR  HB2', ' A  85  MET  HE2', -0.443, (-0.837, -15.513, 23.479)), (' B  51  HIS  HA ', ' B  54  LYS  CE ', -0.442, (-56.991, -21.553, 18.928)), (' A 165  ASP  HB2', ' A 402  GYX  C06', -0.441, (-12.294, -26.129, -0.29)), (' A 203  VAL  CB ', ' B 157  ASN HD22', -0.441, (-25.156, -18.29, 6.295)), (' B  24  MET  HA ', ' B  47  PRO  HG2', -0.439, (-57.227, -11.149, 16.746)), (' B  24  MET  HA ', ' B  47  PRO  CG ', -0.437, (-56.839, -11.413, 16.391)), (' A 134  GLN  NE2', ' A 138  TYR  CE1', -0.437, (-14.058, -2.353, 10.376)), (' B 225  CYS  SG ', ' B 226  THR  N  ', -0.436, (6.531, -28.339, 4.567)), (' A  42  VAL HG13', ' A  45  ILE  CG2', -0.436, (7.233, -17.494, 28.637)), (' B 292  THR HG22', ' B 293  LYS  H  ', -0.435, (-29.462, -56.093, 2.88)), (' A 211  THR  O  ', ' A 245  MET  HB3', -0.433, (-22.777, -18.015, -9.31)), (' B  58  VAL HG22', ' B  59  LEU  N  ', -0.428, (-41.282, -11.89, 17.545)), (' A 148  PHE  CD2', ' A 152  ILE HD11', -0.426, (-9.01, -11.588, 7.79)), (' B 106  LYS  HZ2', ' B 107  TRP  N  ', -0.426, (-36.779, -41.306, 1.774)), (' B 167  ARG  HD2', ' B 209  MET  HG2', -0.426, (-13.754, -32.829, 5.462)), (' B 104  SER  HB3', ' B 119  LEU HD21', -0.426, (-32.779, -43.833, 10.272)), (' B 223  ILE HD13', ' B 233  LYS  HD2', -0.425, (-0.39, -33.903, 7.88)), (' B  27  THR  CG2', ' B  46  LYS  HG2', -0.425, (-54.796, -9.765, 9.411)), (' B 265  TYR  CZ ', ' B 272  GLY  HA3', -0.424, (-24.6, -37.482, -4.89)), (' A 113  TYR  CE1', ' A 164  GLY  HA3', -0.424, (-8.544, -22.403, 3.335)), (' B  33  GLY  O  ', ' B  35  THR HG23', -0.423, (-46.04, -11.076, 13.907)), (' B 106  LYS  C  ', ' B 106  LYS  HD3', -0.422, (-37.972, -40.806, 2.974)), (' B 284  TYR  HA ', ' B 292  THR  O  ', -0.422, (-28.3, -53.728, 6.35)), (' B 184  ARG  NH2', ' B 243  VAL HG13', -0.422, (-9.878, -38.051, 14.738)), (' A 244  MET  HE2', ' A 246  SER  OG ', -0.421, (-18.339, -18.825, -3.368)), (' A 134  GLN  HA ', ' A 134  GLN  OE1', -0.42, (-14.831, -5.851, 11.939)), (' B 269  TYR  CD2', ' B 269  TYR  O  ', -0.419, (-21.051, -31.156, -5.77)), (' B 170  MET  HE3', ' B 174  PHE  CE2', -0.419, (-20.606, -34.422, 13.69)), (' A 212  LEU  O  ', ' A 306  TYR  OH ', -0.417, (-20.85, -14.654, -12.346)), (' B 107  TRP  CD1', ' B 273  HIS  HE1', -0.417, (-33.234, -39.61, -0.558)), (' B  51  HIS  HA ', ' B  54  LYS  HE3', -0.417, (-57.251, -21.279, 19.317)), (' A 315  ILE  N  ', ' A 315  ILE HD12', -0.416, (-38.442, -10.479, -15.307)), (' B  24  MET  CB ', ' B  47  PRO  HB2', -0.416, (-58.31, -12.452, 16.795)), (' A 172  TYR  HA ', ' A 175  GLN  OE1', -0.416, (-19.428, -19.712, 9.172)), (' B 107  TRP  CD1', ' B 112  SER  HB2', -0.415, (-31.891, -38.69, 0.056)), (' A  77  ASP  OD1', ' A  79  SER  N  ', -0.415, (-11.785, -23.879, 22.814)), (' A 186  LEU HD23', ' A 235  LEU  HA ', -0.414, (-34.596, -15.172, -7.055)), (' A  36  TYR  CB ', ' A  85  MET  HE2', -0.414, (-0.347, -15.827, 23.609)), (' B  32  PHE  HB2', ' B  35  THR  CG2', -0.413, (-46.765, -11.276, 16.129)), (' B 252  TYR  CD1', ' B 253  GLU  N  ', -0.412, (-12.36, -50.536, 1.059)), (' A  99  VAL HG11', ' A 286  ILE HG23', -0.411, (-1.361, -9.099, -6.2)), (' A 301  ILE HD12', ' A 301  ILE HG23', -0.409, (-12.46, -17.214, -11.158)), (' A 212  LEU HD23', ' A 304  VAL HG23', -0.409, (-17.325, -17.417, -10.551)), (' B 106  LYS  HZ2', ' B 107  TRP  HB3', -0.409, (-36.692, -41.498, 0.65)), (' A 203  VAL  HB ', ' B 157  ASN  ND2', -0.408, (-25.848, -18.614, 6.606)), (' B  90  HIS  HB2', ' B 160  VAL HG21', -0.407, (-39.166, -27.841, 5.334)), (' B 100  ASN  ND2', ' B 284  TYR  CD1', -0.407, (-29.018, -53.073, 11.607)), (' B  42  VAL HG22', ' B  45  ILE  HB ', -0.405, (-52.007, -16.135, 10.936)), (' B  36  TYR  HA ', ' B  42  VAL HG12', -0.403, (-46.784, -17.952, 12.693)), (' B 282  THR  CB ', ' B 293  LYS  HE2', -0.403, (-25.842, -59.323, 9.475)), (' A 212  LEU HD11', ' A 247  ALA  HB3', -0.401, (-18.703, -22.278, -11.131)), (' B 208  TYR  HE1', ' B 233  LYS  NZ ', -0.401, (-4.387, -33.716, 8.86)), (' B 170  MET  HE3', ' B 174  PHE  CZ ', -0.4, (-20.025, -34.304, 13.698)), (' B 148  PHE  CE2', ' B 152  ILE HD11', -0.4, (-30.505, -33.428, 14.186))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
