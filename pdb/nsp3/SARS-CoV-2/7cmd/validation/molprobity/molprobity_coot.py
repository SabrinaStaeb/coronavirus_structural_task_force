# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = [('B', ' 218 ', 'LYS', 0.03982674078273431, (-15.672, -2.436, 64.26))]
data['omega'] = []
data['rota'] = [('A', '  37 ', 'ASP', 0.02907204876071862, (-27.164, -22.692, -0.314)), ('A', '  80 ', 'LEU', 0.1979327381221104, (-28.132999999999992, -11.088, -2.562)), ('A', ' 157 ', 'LYS', 0.046797631176445975, (-33.438, -12.329, -14.973)), ('A', ' 180 ', 'SER', 0.1343317345230832, (-7.662, -0.9059999999999998, -22.989)), ('A', ' 312 ', 'THR', 0.21019067582841966, (-6.735, -0.4, -41.963)), ('B', ' 180 ', 'SER', 0.18061787693924872, (-22.769, -0.2540000000000001, 41.18)), ('B', ' 215 ', 'GLN', 0.15869333304071112, (-12.914, -6.280000000000002, 62.51099999999999)), ('B', ' 222 ', 'ILE', 0.002382008470499798, (-3.793, 4.570000000000002, 61.247)), ('B', ' 238 ', 'GLU', 0.21228620563750103, (-22.728, -2.040999999999999, 48.64)), ('B', ' 265 ', 'THR', 0.1461235787003138, (3.696, -19.946, 52.69099999999999)), ('C', '  47 ', 'HIS', 0.21007731759502346, (-1.6599999999999995, -11.043, -68.128)), ('C', '  58 ', 'LEU', 0.25853664969265344, (1.9859999999999993, -29.387, -58.61099999999998)), ('C', ' 180 ', 'SER', 0.0239407884941245, (22.944, -38.290000000000006, -32.063)), ('C', ' 270 ', 'CYS', 0.234641162554622, (-9.209000000000003, -21.694, -27.351)), ('D', '  19 ', 'GLN', 0.18932990881329184, (-36.926, -22.703, 89.023)), ('D', '  29 ', 'GLN', 0.16871532936867614, (-23.655, -25.382, 86.783)), ('D', ' 198 ', 'THR', 0.11336953324867817, (-47.12799999999999, -45.449, 42.049))]
data['cbeta'] = []
data['probe'] = [(' D  82  ARG  NH2', ' D 153  ALA  O  ', -0.946, (-30.662, -30.058, 62.469)), (' D 167  GLU  OE1', ' D 701  HOH  O  ', -0.917, (-28.839, -28.868, 50.739)), (' C 143  GLU  O  ', ' C 701  HOH  O  ', -0.915, (11.701, -16.367, -44.872)), (' B 189  CYS  SG ', ' B 608  HOH  O  ', -0.89, (-6.824, 11.365, 66.227)), (' A 294  SER  O  ', ' A 701  HOH  O  ', -0.879, (-16.584, -26.494, -42.959)), (' B  23  MET  O  ', ' B 601  HOH  O  ', -0.849, (5.288, -25.033, 0.847)), (' B 126  LYS  O  ', ' B 602  HOH  O  ', -0.841, (-19.114, -7.6, 34.007)), (' B 162  LEU  CD1', ' B 502  TTT  H16', -0.84, (4.086, -14.595, 44.166)), (' B 253  LEU  HA ', ' B 603  HOH  O  ', -0.835, (-12.054, -18.28, 59.055)), (' D 308  ASN  OD1', ' D 702  HOH  O  ', -0.819, (-59.029, -31.922, 41.693)), (' C 164  ASP  OD2', ' C 702  HOH  O  ', -0.812, (0.541, -30.105, -26.36)), (' D 184  VAL HG22', ' D 198  THR HG22', -0.808, (-49.702, -45.268, 40.9)), (' C 177  ASN  O  ', ' C 704  HOH  O  ', -0.782, (18.914, -32.264, -35.446)), (' A 123  ILE  O  ', ' A 704  HOH  O  ', -0.761, (-11.208, -15.824, -21.958)), (' D  76  ASP  OD2', ' D  82  ARG  NH1', -0.755, (-29.633, -33.2, 64.858)), (' B 164  ASP  OD2', ' B 604  HOH  O  ', -0.752, (-0.154, -9.219, 47.16)), (' A  13  ASN  ND2', ' A  13  ASN  O  ', -0.751, (-16.517, -18.801, 0.711)), (' A  33  PRO  O  ', ' A 703  HOH  O  ', -0.747, (-31.551, -11.862, 5.653)), (' B 190  LYS  N  ', ' B 608  HOH  O  ', -0.74, (-7.481, 11.646, 66.691)), (' A  56  TYR  N  ', ' A 706  HOH  O  ', -0.735, (-27.563, -17.213, 4.041)), (' B 177  ASN  O  ', ' B 606  HOH  O  ', -0.727, (-18.858, -6.255, 37.785)), (' C 213  TYR  N  ', ' C 709  HOH  O  ', -0.726, (14.278, -28.609, -14.849)), (' C 221  GLN  N  ', ' C 221  GLN  OE1', -0.713, (7.412, -38.776, -9.268)), (' B 156 AASN  OD1', ' B 607  HOH  O  ', -0.7, (-0.463, -4.672, 32.82)), (' D 263  GLU  OE2', ' D 296  TYR  OH ', -0.7, (-33.377, -14.274, 37.442)), (' C 279  LYS  HD2', ' C 703  HOH  O  ', -0.692, (16.561, -13.177, -26.563)), (' A 167  GLU  OE1', ' A 705  HOH  O  ', -0.687, (-30.443, -9.979, -21.244)), (' D 221  GLN  O  ', ' D 704  HOH  O  ', -0.685, (-34.539, -42.308, 27.879)), (' A  35  TYR  O  ', ' A 706  HOH  O  ', -0.671, (-28.577, -18.145, 3.812)), (' A 104  ILE  O  ', ' A 707  HOH  O  ', -0.668, (-27.452, -26.116, -21.805)), (' B 126 ALYS  NZ ', ' B 605  HOH  O  ', -0.662, (-24.492, -9.812, 30.861)), (' D 234  LEU  O  ', ' D 705  HOH  O  ', -0.655, (-49.768, -38.471, 31.443)), (' B 287  GLY  N  ', ' B 609  HOH  O  ', -0.648, (-2.644, -25.543, 44.115)), (' B 138  ARG  CG ', ' B 143  GLU  HG3', -0.643, (-13.33, -23.966, 27.233)), (' C  67  GLU  OE1', ' C 706  HOH  O  ', -0.641, (14.904, -29.887, -62.231)), (' A 282  LEU  HB2', ' A 293  SER  O  ', -0.641, (-18.103, -27.881, -38.765)), (' B 264  TYR  CE2', ' B 502  TTT  H14', -0.639, (4.528, -14.309, 50.186)), (' C 221  GLN  N  ', ' C 708  HOH  O  ', -0.634, (5.819, -39.24, -10.146)), (' A 185  LEU HD21', ' A 216  PHE  HZ ', -0.631, (-17.28, -0.147, -36.906)), (' B 254  LYS  N  ', ' B 603  HOH  O  ', -0.628, (-12.187, -18.599, 59.636)), (' B 138  ARG  HG2', ' B 143  GLU  HG3', -0.6, (-12.647, -24.12, 27.799)), (' D 188  VAL HG13', ' D 194  GLN  HG2', -0.592, (-45.774, -49.316, 27.297)), (' D 211  LEU HD13', ' D 300  ILE HG22', -0.584, (-36.337, -23.709, 36.311)), (' C 135  ALA  N  ', ' C 711  HOH  O  ', -0.581, (13.478, -22.942, -44.863)), (' B  81  GLY  O  ', ' B  85 ASER  OG ', -0.567, (3.465, -14.571, 22.472)), (' C  27  TYR  OH ', ' C  50  HIS  ND1', -0.567, (0.434, -15.265, -65.973)), (' D  34  THR HG22', ' D  41  VAL  CG2', -0.566, (-29.358, -19.825, 79.56)), (' B  42  THR HG22', ' B  43  LYS  HD2', -0.566, (8.366, -15.867, 10.31)), (' C 113  LEU HD11', ' C 152  LEU HD21', -0.565, (0.52, -21.258, -38.687)), (' C 122  GLN  O  ', ' C 306  LYS  NZ ', -0.548, (18.947, -22.183, -27.915)), (' B  33  PRO  HG2', ' B  58  LEU HD12', -0.547, (2.336, -9.37, 14.838)), (' A 210  THR HG22', ' A 212  SER  H  ', -0.543, (-21.06, -8.844, -40.719)), (' B   5  ILE HD11', ' B  46  PRO  HB3', -0.535, (-0.612, -23.795, 3.71)), (' B 162  LEU HD13', ' B 502  TTT  H16', -0.532, (4.186, -14.837, 43.702)), (' C  41  VAL  O  ', ' C  44  ILE HG22', -0.532, (-4.637, -18.254, -62.652)), (' C 279  LYS  CE ', ' C 703  HOH  O  ', -0.53, (17.365, -12.892, -26.567)), (' C 191  THR  N  ', ' C 707  HOH  O  ', -0.528, (6.714, -51.781, -5.836)), (' A  41  VAL  O  ', ' A  44  ILE HG22', -0.527, (-35.449, -20.113, 7.436)), (' D 282  LEU  HB2', ' D 293  SER  O  ', -0.523, (-42.511, -11.111, 34.535)), (' A  59  PRO  HD3', ' A  80 ALEU HD12', -0.52, (-26.134, -9.166, 1.216)), (' C 221  GLN  O  ', ' C 708  HOH  O  ', -0.52, (5.029, -39.141, -10.815)), (' C 120  LEU HD11', ' C 172  LEU HD13', -0.517, (10.213, -25.619, -35.626)), (' B  35  TYR  HA ', ' B  39  ALA  O  ', -0.516, (1.446, -19.674, 15.821)), (' A 264  TYR  OH ', ' A 271  GLY  N  ', -0.515, (-36.565, -17.687, -29.192)), (' B 254  LYS  HB2', ' B 257  THR  OG1', -0.515, (-15.3, -18.959, 61.069)), (' C 279  LYS  NZ ', ' C 703  HOH  O  ', -0.515, (17.317, -12.761, -26.675)), (' B 195  GLN  NE2', ' B 615  HOH  O  ', -0.515, (-7.87, 11.993, 58.521)), (' D 116  ALA  O  ', ' D 120  LEU HD23', -0.514, (-40.389, -21.916, 51.214)), (' C 136  TYR  N  ', ' C 711  HOH  O  ', -0.512, (13.477, -22.259, -44.003)), (' A 185  LEU HD21', ' A 216  PHE  CZ ', -0.506, (-16.763, -0.241, -36.91)), (' C 146  ASN  O  ', ' C 150  LEU HD12', -0.505, (7.174, -21.735, -45.906)), (' B 171  TYR  OH ', ' B 607  HOH  O  ', -0.504, (-0.353, -3.862, 34.342)), (' A 121  GLN  O  ', ' C 267  ASN  ND2', -0.504, (-11.697, -20.766, -21.686)), (' A  37  ASP  N  ', ' A  37  ASP  OD1', -0.503, (-26.876, -23.295, 1.349)), (' C 151  ILE HG12', ' C 172  LEU HD21', -0.503, (7.919, -26.042, -38.462)), (' B 177  ASN  HB3', ' B 602  HOH  O  ', -0.502, (-19.501, -5.991, 34.806)), (' A 187  VAL HG22', ' A 232  LYS  HG3', -0.5, (-19.248, 3.992, -40.664)), (' C 243  MET  HE3', ' C 304  PHE  CZ ', -0.5, (8.474, -26.894, -26.541)), (' B 162  LEU HD11', ' B 502  TTT  H16', -0.495, (4.26, -15.594, 44.657)), (' C  13  ASN  HB2', ' C  56  TYR  OH ', -0.494, (9.977, -21.668, -54.998)), (' D   1  GLU  HG2', ' D   3  ARG  HD3', -0.493, (-26.518, -13.054, 98.704)), (' C 279  LYS  CD ', ' C 703  HOH  O  ', -0.492, (16.807, -12.628, -26.389)), (' A 178  LEU  O  ', ' A 201  GLY  HA2', -0.491, (-13.007, -1.082, -22.706)), (' B 116  ALA  O  ', ' B 120  LEU HD23', -0.489, (-10.096, -16.283, 39.999)), (' D 103  SER  OG ', ' D 104  ILE  N  ', -0.488, (-36.673, -11.882, 51.916)), (' A 115 BTHR HG23', ' A 275  HIS  HB2', -0.486, (-23.564, -21.219, -27.986)), (' B  34  THR HG22', ' B  41  VAL HG23', -0.485, (1.753, -18.981, 12.01)), (' B 206  MET  HE3', ' B 243  MET  SD ', -0.485, (-8.252, -8.357, 45.69)), (' B 138  ARG  HG2', ' B 143  GLU  O  ', -0.485, (-12.433, -23.273, 28.504)), (' C  12  ASP  OD1', ' C  14  ILE  N  ', -0.484, (13.163, -24.148, -57.513)), (' D   9  THR  HA ', ' D  55  PHE  O  ', -0.48, (-36.348, -22.356, 80.279)), (' D  88  ASN  ND2', ' D 713  HOH  O  ', -0.476, (-26.125, -17.796, 70.37)), (' C 254  LYS  HB2', ' C 257  THR  OG1', -0.475, (15.236, -19.842, -12.356)), (' C 185  LEU HD21', ' C 216  PHE  HZ ', -0.473, (13.57, -38.961, -18.598)), (' B 243  MET  HG3', ' B 304  PHE  CE2', -0.473, (-10.354, -10.907, 47.282)), (' D 188  VAL HG22', ' D 194  GLN  HG2', -0.472, (-45.635, -48.64, 28.229)), (' D 260  CYS  HB2', ' D 275  HIS  CE1', -0.466, (-41.515, -19.13, 44.076)), (' B 262  SER  OG ', ' B 302  ASP  HB2', -0.466, (-5.859, -14.735, 49.229)), (' D   7  VAL HG12', ' D  50  HIS  O  ', -0.466, (-34.897, -14.928, 85.346)), (' D 214  GLU  OE1', ' D 218  LYS  HE2', -0.463, (-48.746, -29.648, 27.382)), (' B 166  ARG  HA ', ' B 243  MET  HE1', -0.462, (-5.953, -10.462, 46.055)), (' C 170  SER  O  ', ' C 174  GLN  HG2', -0.46, (7.958, -34.608, -34.827)), (' B 217  LYS  HE2', ' B 310  TYR  CE1', -0.46, (-21.625, -4.816, 58.226)), (' C 281  THR HG21', ' C 292  LYS  HD3', -0.46, (14.835, -7.127, -18.078)), (' B 221  GLN  N  ', ' B 221  GLN  OE1', -0.459, (-6.518, 0.435, 63.629)), (' C 185  LEU HD21', ' C 216  PHE  CZ ', -0.457, (13.809, -38.844, -18.337)), (' A  33  PRO  HA ', ' A  42  THR  OG1', -0.456, (-34.93, -14.676, 5.228)), (' D 136  TYR  CZ ', ' D 140  ARG  HD3', -0.456, (-48.144, -19.481, 55.532)), (' B  28  GLY  HA3', ' B  42  THR HG23', -0.456, (6.162, -14.564, 10.315)), (' D  22  ASP  OD1', ' D  24  SER  N  ', -0.453, (-25.153, -18.245, 92.96)), (' D 243  MET  HG3', ' D 304  PHE  CZ ', -0.452, (-40.381, -26.658, 44.523)), (' A 120  LEU HD11', ' A 172  LEU  CD1', -0.452, (-20.683, -13.666, -19.183)), (' B 131  ALA  HB1', ' B 150  LEU HD21', -0.452, (-9.844, -13.325, 25.79)), (' C  41  VAL  HB ', ' C  44  ILE  CG2', -0.451, (-3.931, -16.76, -62.097)), (' C 215  GLN  NE2', ' C 219  GLY  O  ', -0.45, (10.807, -35.378, -8.79)), (' D  14  ILE HD12', ' D  71  TYR  CE1', -0.449, (-45.424, -25.106, 71.255)), (' B 307  GLU  HG3', ' B 308  ASN  N  ', -0.448, (-23.245, -7.489, 50.433)), (' B 115 ATHR  CG2', ' B 165  VAL HG21', -0.447, (-3.887, -17.312, 44.685)), (' C  86  ALA  HB1', ' C 152  LEU HD12', -0.444, (0.122, -21.267, -43.226)), (' A 118  LEU HD11', ' A 285  ILE HG21', -0.443, (-21.687, -25.869, -25.909)), (' A 118  LEU HD11', ' A 285  ILE  CG2', -0.443, (-22.2, -25.474, -25.756)), (' C 165  VAL HG23', ' C 273  TYR  CE2', -0.443, (0.928, -22.993, -28.496)), (' A 162  LEU HD23', ' A 601  TTT  H16', -0.443, (-34.934, -15.408, -25.946)), (' B 126 ALYS  HG3', ' B 602  HOH  O  ', -0.441, (-19.975, -7.522, 33.87)), (' C 214  GLU  N  ', ' C 709  HOH  O  ', -0.44, (14.781, -29.338, -14.368)), (' D 263  GLU  O  ', ' D 273  TYR  HA ', -0.439, (-30.799, -18.417, 42.908)), (' C 211  LEU HD12', ' C 251  TYR  CD1', -0.436, (6.148, -25.278, -14.201)), (' D 211  LEU  CD1', ' D 300  ILE HG22', -0.436, (-35.878, -24.211, 35.989)), (' B  28  GLY  HA2', ' B  32  GLY  O  ', -0.436, (4.097, -13.821, 9.557)), (' A   9  THR  HA ', ' A  55  PHE  O  ', -0.436, (-24.107, -16.54, 7.011)), (' B 170  SER  O  ', ' B 174  GLN  HG2', -0.435, (-7.604, -4.159, 38.471)), (' B 280  GLU  HG3', ' B 281  THR HG22', -0.435, (-17.712, -30.339, 54.157)), (' D 253  LEU  HB3', ' D 258  PHE  CE1', -0.434, (-42.484, -18.3, 35.257)), (' D 206  MET  HE3', ' D 243  MET  SD ', -0.434, (-38.932, -29.808, 46.061)), (' A 185  LEU  HB2', ' A 197  THR  OG1', -0.433, (-16.801, 5.534, -35.665)), (' A  95  TYR  CD2', ' A 144  ALA  HB3', -0.432, (-22.037, -24.458, -14.912)), (' B  86  ALA  HB1', ' B 152  LEU HD12', -0.431, (-0.266, -17.491, 30.081)), (' C  41  VAL  HB ', ' C  44  ILE HG22', -0.431, (-3.996, -17.136, -62.163)), (' D 314  ILE  O  ', ' D 315  LYS  HE2', -0.43, (-54.594, -42.836, 28.2)), (' A  88  ASN  ND2', ' A 710  HOH  O  ', -0.429, (-34.389, -20.871, -2.576)), (' D  33  PRO  HA ', ' D  42  THR  OG1', -0.429, (-25.626, -24.724, 78.57)), (' B 243  MET  HE3', ' B 304  PHE  CZ ', -0.429, (-8.891, -12.077, 46.805)), (' D 146  ASN  ND2', ' D 703  HOH  O  ', -0.428, (-38.383, -16.307, 66.077)), (' B 122  GLN  O  ', ' B 306  LYS  NZ ', -0.428, (-19.343, -16.599, 45.694)), (' D 118  LEU HD11', ' D 285  ILE  CG2', -0.427, (-38.341, -12.829, 47.655)), (' C 219  GLY  HA2', ' C 232  LYS  O  ', -0.427, (12.631, -39.373, -10.947)), (' C 102  THR  O  ', ' C 121  GLN  NE2', -0.427, (11.594, -15.408, -34.352)), (' B 217  LYS  HE2', ' B 310  TYR  CD1', -0.425, (-21.789, -5.125, 57.707)), (' A  58  LEU  O  ', ' A  60  ASN  N  ', -0.424, (-27.559, -7.149, 6.185)), (' A 185  LEU  O  ', ' A 196  GLN  HA ', -0.424, (-14.711, 7.716, -38.055)), (' A   0  ALA  N  ', ' D 252  GLU  O  ', -0.423, (-40.114, -21.156, 29.613)), (' C  72  TYR  CE2', ' C  80 BLEU HD21', -0.423, (6.478, -28.612, -52.865)), (' B  12  ASP  OD1', ' B  14  ILE  N  ', -0.422, (-13.779, -14.339, 15.945)), (' A 243  MET  HE3', ' A 304  PHE  CZ ', -0.422, (-21.609, -12.438, -28.432)), (' B 146  ASN  O  ', ' B 150  LEU  CD1', -0.422, (-7.442, -16.644, 27.654)), (' B 125  LEU HD11', ' B 176  ALA  CB ', -0.419, (-15.023, -7.823, 37.673)), (' D  41  VAL  O  ', ' D  44  ILE HG22', -0.419, (-25.012, -18.378, 81.129)), (' B   6  LYS  HD2', ' B 619  HOH  O  ', -0.418, (-11.172, -21.554, 2.983)), (' A  34  THR HG22', ' A  41  VAL  CG2', -0.418, (-30.993, -18.748, 6.656)), (' A 279  LYS  HD3', ' C 269  GLN  OE1', -0.418, (-11.18, -27.784, -29.448)), (' D 213  TYR  HB2', ' D 305  TYR  CE2', -0.418, (-44.919, -28.124, 36.08)), (' D 274  LYS  HD3', ' D 286  ASP  HB2', -0.417, (-32.892, -11.219, 43.205)), (' D 184  VAL  HA ', ' D 197  THR  O  ', -0.417, (-47.509, -43.902, 39.473)), (' A   2  VAL  O  ', ' A   2  VAL HG13', -0.416, (-32.105, -21.316, 26.861)), (' A  67  GLU  OE2', ' A 708  HOH  O  ', -0.416, (-15.618, -8.777, 7.002)), (' B 119  THR HG21', ' B 304  PHE  CZ ', -0.415, (-10.198, -13.869, 45.765)), (' A 263  GLU  HG3', ' A 299  PRO  O  ', -0.414, (-28.806, -19.682, -35.785)), (' A 251  TYR  O  ', ' A 297  LYS  HA ', -0.413, (-24.9, -20.982, -42.059)), (' B 208  MET  HE3', ' B 247  PRO  HD3', -0.411, (-1.031, -6.371, 54.026)), (' A 184  VAL  HB ', ' A 235  VAL HG13', -0.41, (-10.059, 3.889, -36.657)), (' B 247  PRO  O  ', ' B 248  PRO  C  ', -0.41, (0.412, -12.216, 56.801)), (' B  13  ASN  HB2', ' B  56  TYR  OH ', -0.409, (-9.881, -17.357, 18.418)), (' C 119  THR HG21', ' C 304  PHE  CZ ', -0.409, (10.385, -24.789, -27.376)), (' A 243  MET  HG3', ' A 304  PHE  CZ ', -0.409, (-20.113, -12.123, -29.002)), (' D  26  THR  HA ', ' D  45  LYS  HA ', -0.407, (-24.251, -18.174, 86.329)), (' D 213  TYR  HB2', ' D 305  TYR  CD2', -0.407, (-45.232, -28.227, 36.355)), (' D 187  VAL HG22', ' D 232  LYS  HG3', -0.406, (-41.107, -42.814, 32.852)), (' C  31  PHE  O  ', ' C  60  ASN  ND2', -0.404, (-0.536, -29.498, -64.034)), (' C  74  THR  OG1', ' C  75  THR  N  ', -0.404, (5.229, -35.695, -48.794)), (' D 118  LEU HD11', ' D 285  ILE HG21', -0.403, (-38.713, -13.19, 47.993)), (' A 210  THR HG22', ' A 212  SER  N  ', -0.403, (-20.577, -8.825, -40.22)), (' A 272  HIS  ND1', ' A 273  TYR  N  ', -0.403, (-31.767, -22.209, -28.249)), (' C 146  ASN  O  ', ' C 150  LEU  CD1', -0.402, (7.33, -21.604, -45.396)), (' C   1  GLU  OE2', ' C   3  ARG  HD2', -0.402, (-3.613, -10.088, -79.956)), (' C 128  ASN  HB2', ' C 129  PRO  HD3', -0.401, (14.208, -33.009, -42.837))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
