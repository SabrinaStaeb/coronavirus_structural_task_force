# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('B', ' 137 ', 'TYR', 0.20258378807387314, (12.090000000000002, 17.988, 26.842)), ('B', ' 270 ', 'CYS', 0.018307194113731384, (14.102999999999998, 25.846, -3.21))]
data['cbeta'] = [('B', ' 164 ', 'ASP', ' ', 0.3502344307106864, (5.911, 22.623, 4.388))]
data['probe'] = [(' B 127  PHE  H  ', ' B 133  GLN HE22', -0.814, (4.109, 16.331, 24.01)), (' B 296  TYR  CE1', ' B 300  ILE HD11', -0.787, (8.977, 38.87, 8.111)), (' B 127  PHE  N  ', ' B 133  GLN HE22', -0.694, (3.426, 16.183, 24.268)), (' B 188  VAL HG12', ' B 194  GLN  HG2', -0.602, (-24.51, 34.336, 8.225)), (' B 252  GLU  HA ', ' B 296  TYR  O  ', -0.6, (6.847, 43.954, 8.96)), (' B 222  ILE  O  ', ' B 230  ALA  N  ', -0.591, (-17.883, 33.733, 0.144)), (' B 296  TYR  HE1', ' B 300  ILE HD11', -0.589, (8.547, 38.88, 7.905)), (' B 222  ILE HD13', ' B 232  LYS  HE3', -0.586, (-14.73, 30.102, 5.011)), (' B 270  CYS  O  ', ' B 270  CYS  SG ', -0.575, (15.611, 27.455, -3.74)), (' B 183  ARG HH12', ' B 207  TYR  HB2', -0.568, (-8.097, 28.597, 10.849)), (' B 211  LEU HD22', ' B 303  VAL HG23', -0.531, (1.774, 34.587, 8.834)), (' B 185  LEU HD13', ' B 232  LYS  HD3', -0.53, (-13.772, 28.825, 8.968)), (' B 181  CYS  HA ', ' B 238  GLU  O  ', -0.53, (-9.409, 24.706, 22.036)), (' B 138  ARG  NH1', ' B 143  GLU  OE1', -0.515, (20.499, 14.877, 26.078)), (' B 262  SER  HB2', ' B 302  ASP  HB2', -0.508, (5.524, 30.344, 9.123)), (' B 170  SER  O  ', ' B 174  GLN  HG2', -0.508, (-0.563, 16.935, 12.061)), (' B 118  LEU  HA ', ' B 121  GLN HE21', -0.505, (12.984, 26.527, 18.933)), (' B 184  VAL  HB ', ' B 236  GLN  HB3', -0.502, (-16.648, 28.861, 18.753)), (' B 166  ARG  HA ', ' B 243  MET  HE1', -0.495, (3.169, 25.32, 9.284)), (' B  74  THR HG21', ' B  79  PHE  CG ', -0.489, (7.628, 4.713, 14.209)), (' B 253  LEU  HB3', ' B 258  PHE  CE1', -0.486, (5.682, 40.438, 14.079)), (' B 277  THR  OG1', ' B 279  LYS  HE2', -0.485, (10.879, 35.143, 20.584)), (' B   6  LYS  H  ', ' B  51  GLU  HG3', -0.484, (29.636, -8.42, 26.373)), (' B  36  LEU  HB2', ' B  55  PHE  CE2', -0.475, (26.105, -1.276, 17.813)), (' B 164  ASP  HB3', ' B 167  GLU  H  ', -0.473, (4.572, 22.413, 5.952)), (' B 268  TYR  O  ', ' B 269  GLN  HB2', -0.462, (10.418, 24.194, -4.769)), (' B  28  GLY  HA2', ' B  32  GLY  O  ', -0.462, (20.687, -8.027, 12.408)), (' B 260  CYS  HB2', ' B 275  HIS  CE1', -0.457, (8.551, 32.065, 15.934)), (' B  73  HIS  ND1', ' B 129  PRO  HA ', -0.456, (3.027, 7.995, 21.904)), (' B 127  PHE  H  ', ' B 133  GLN  NE2', -0.455, (4.444, 16.156, 24.502)), (' B 164  ASP  OD2', ' B 167  GLU  HG3', -0.438, (3.474, 22.771, 4.459)), (' B 127  PHE  N  ', ' B 133  GLN  NE2', -0.435, (4.014, 15.869, 24.564)), (' B 122  GLN  OE1', ' B 277  THR  OG1', -0.429, (9.748, 33.849, 20.052)), (' B 103  SER  HB2', ' B 118  LEU HD21', -0.425, (17.361, 28.464, 17.301)), (' B  10  THR HG21', ' B  13  ASN  HA ', -0.417, (17.219, 1.095, 24.682)), (' B  89  HIS  CG ', ' B 159  VAL HG11', -0.411, (21.188, 13.72, 7.677)), (' B 307  GLU  OE2', ' B 310  TYR  HB2', -0.408, (-9.496, 34.236, 22.097)), (' B 206  MET  HB3', ' B 206  MET  HE2', -0.406, (-3.117, 24.867, 9.885)), (' B 401  TTT  H14', ' B 401  TTT  H6 ', -0.405, (7.215, 28.302, 0.08))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
