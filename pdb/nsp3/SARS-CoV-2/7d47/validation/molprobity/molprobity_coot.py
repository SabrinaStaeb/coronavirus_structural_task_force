# script auto-generated by phenix.molprobity


from __future__ import absolute_import, division, print_function
from six.moves import cPickle as pickle
from six.moves import range
try :
  import gobject
except ImportError :
  gobject = None
import sys

class coot_extension_gui(object):
  def __init__(self, title):
    import gtk
    self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    scrolled_win = gtk.ScrolledWindow()
    self.outside_vbox = gtk.VBox(False, 2)
    self.inside_vbox = gtk.VBox(False, 0)
    self.window.set_title(title)
    self.inside_vbox.set_border_width(0)
    self.window.add(self.outside_vbox)
    self.outside_vbox.pack_start(scrolled_win, True, True, 0)
    scrolled_win.add_with_viewport(self.inside_vbox)
    scrolled_win.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

  def finish_window(self):
    import gtk
    self.outside_vbox.set_border_width(2)
    ok_button = gtk.Button("  Close  ")
    self.outside_vbox.pack_end(ok_button, False, False, 0)
    ok_button.connect("clicked", lambda b: self.destroy_window())
    self.window.connect("delete_event", lambda a, b: self.destroy_window())
    self.window.show_all()

  def destroy_window(self, *args):
    self.window.destroy()
    self.window = None

  def confirm_data(self, data):
    for data_key in self.data_keys :
      outlier_list = data.get(data_key)
      if outlier_list is not None and len(outlier_list) > 0 :
        return True
    return False

  def create_property_lists(self, data):
    import gtk
    for data_key in self.data_keys :
      outlier_list = data[data_key]
      if outlier_list is None or len(outlier_list) == 0 :
        continue
      else :
        frame = gtk.Frame(self.data_titles[data_key])
        vbox = gtk.VBox(False, 2)
        frame.set_border_width(6)
        frame.add(vbox)
        self.add_top_widgets(data_key, vbox)
        self.inside_vbox.pack_start(frame, False, False, 5)
        list_obj = residue_properties_list(
          columns=self.data_names[data_key],
          column_types=self.data_types[data_key],
          rows=outlier_list,
          box=vbox)

# Molprobity result viewer
class coot_molprobity_todo_list_gui(coot_extension_gui):
  data_keys = [ "rama", "rota", "cbeta", "probe" ]
  data_titles = { "rama"  : "Ramachandran outliers",
                  "rota"  : "Rotamer outliers",
                  "cbeta" : "C-beta outliers",
                  "probe" : "Severe clashes" }
  data_names = { "rama"  : ["Chain", "Residue", "Name", "Score"],
                 "rota"  : ["Chain", "Residue", "Name", "Score"],
                 "cbeta" : ["Chain", "Residue", "Name", "Conf.", "Deviation"],
                 "probe" : ["Atom 1", "Atom 2", "Overlap"] }
  if (gobject is not None):
    data_types = { "rama" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "rota" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                             gobject.TYPE_STRING, gobject.TYPE_FLOAT,
                             gobject.TYPE_PYOBJECT],
                   "cbeta" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT],
                   "probe" : [gobject.TYPE_STRING, gobject.TYPE_STRING,
                              gobject.TYPE_FLOAT, gobject.TYPE_PYOBJECT] }
  else :
    data_types = dict([ (s, []) for s in ["rama","rota","cbeta","probe"] ])

  def __init__(self, data_file=None, data=None):
    assert ([data, data_file].count(None) == 1)
    if (data is None):
      data = load_pkl(data_file)
    if not self.confirm_data(data):
      return
    coot_extension_gui.__init__(self, "MolProbity to-do list")
    self.dots_btn = None
    self.dots2_btn = None
    self._overlaps_only = True
    self.window.set_default_size(420, 600)
    self.create_property_lists(data)
    self.finish_window()

  def add_top_widgets(self, data_key, box):
    import gtk
    if data_key == "probe" :
      hbox = gtk.HBox(False, 2)
      self.dots_btn = gtk.CheckButton("Show Probe dots")
      hbox.pack_start(self.dots_btn, False, False, 5)
      self.dots_btn.connect("toggled", self.toggle_probe_dots)
      self.dots2_btn = gtk.CheckButton("Overlaps only")
      hbox.pack_start(self.dots2_btn, False, False, 5)
      self.dots2_btn.connect("toggled", self.toggle_all_probe_dots)
      self.dots2_btn.set_active(True)
      self.toggle_probe_dots()
      box.pack_start(hbox, False, False, 0)

  def toggle_probe_dots(self, *args):
    if self.dots_btn is not None :
      show_dots = self.dots_btn.get_active()
      overlaps_only = self.dots2_btn.get_active()
      if show_dots :
        self.dots2_btn.set_sensitive(True)
      else :
        self.dots2_btn.set_sensitive(False)
      show_probe_dots(show_dots, overlaps_only)

  def toggle_all_probe_dots(self, *args):
    if self.dots2_btn is not None :
      self._overlaps_only = self.dots2_btn.get_active()
      self.toggle_probe_dots()

class rsc_todo_list_gui(coot_extension_gui):
  data_keys = ["by_res", "by_atom"]
  data_titles = ["Real-space correlation by residue",
                 "Real-space correlation by atom"]
  data_names = {}
  data_types = {}

class residue_properties_list(object):
  def __init__(self, columns, column_types, rows, box,
      default_size=(380,200)):
    assert len(columns) == (len(column_types) - 1)
    if (len(rows) > 0) and (len(rows[0]) != len(column_types)):
      raise RuntimeError("Wrong number of rows:\n%s" % str(rows[0]))
    import gtk
    self.liststore = gtk.ListStore(*column_types)
    self.listmodel = gtk.TreeModelSort(self.liststore)
    self.listctrl = gtk.TreeView(self.listmodel)
    self.listctrl.column = [None]*len(columns)
    self.listctrl.cell = [None]*len(columns)
    for i, column_label in enumerate(columns):
      cell = gtk.CellRendererText()
      column = gtk.TreeViewColumn(column_label)
      self.listctrl.append_column(column)
      column.set_sort_column_id(i)
      column.pack_start(cell, True)
      column.set_attributes(cell, text=i)
    self.listctrl.get_selection().set_mode(gtk.SELECTION_SINGLE)
    for row in rows :
      self.listmodel.get_model().append(row)
    self.listctrl.connect("cursor-changed", self.OnChange)
    sw = gtk.ScrolledWindow()
    w, h = default_size
    if len(rows) > 10 :
      sw.set_size_request(w, h)
    else :
      sw.set_size_request(w, 30 + (20 * len(rows)))
    sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
    box.pack_start(sw, False, False, 5)
    inside_vbox = gtk.VBox(False, 0)
    sw.add(self.listctrl)

  def OnChange(self, treeview):
    import coot # import dependency
    selection = self.listctrl.get_selection()
    (model, tree_iter) = selection.get_selected()
    if tree_iter is not None :
      row = model[tree_iter]
      xyz = row[-1]
      if isinstance(xyz, tuple) and len(xyz) == 3 :
        set_rotation_centre(*xyz)
        set_zoom(30)
        graphics_draw()

def show_probe_dots(show_dots, overlaps_only):
  import coot # import dependency
  n_objects = number_of_generic_objects()
  sys.stdout.flush()
  if show_dots :
    for object_number in range(n_objects):
      obj_name = generic_object_name(object_number)
      if overlaps_only and not obj_name in ["small overlap", "bad overlap"] :
        sys.stdout.flush()
        set_display_generic_object(object_number, 0)
      else :
        set_display_generic_object(object_number, 1)
  else :
    sys.stdout.flush()
    for object_number in range(n_objects):
      set_display_generic_object(object_number, 0)

def load_pkl(file_name):
  pkl = open(file_name, "rb")
  data = pickle.load(pkl)
  pkl.close()
  return data

data = {}
data['rama'] = []
data['omega'] = []
data['rota'] = [('A', '  25 ', 'MET', 0.019809742629976763, (11.214000000000004, 13.985999999999999, 76.934)), ('A', '  30 ', 'GLN', 0.0, (4.184, 15.487, 76.925)), ('A', '  44 ', 'ILE', 0.029477815038744505, (11.202999999999998, 13.271000000000003, 68.73)), ('A', ' 194 ', 'GLN', 0.01053846772544196, (-45.084, 8.567, 35.23800000000001)), ('B', ' 196 ', 'GLN', 0.0, (-41.954, 51.806, 43.611)), ('B', ' 236 ', 'GLN', 0.0003304159194721881, (-36.605000000000004, 42.4, 44.681))]
data['cbeta'] = [('A', '  60 ', 'ASN', ' ', 0.30859524870533817, (-5.181000000000002, 15.494000000000005, 74.503)), ('A', '  88 ', 'ASN', ' ', 0.25164757279638933, (3.9309999999999974, 14.552, 55.814)), ('B', ' 236 ', 'GLN', ' ', 0.2873616527428617, (-37.659000000000006, 42.376, 43.576))]
data['probe'] = [(' A  25  MET  HB2', ' A  30  GLN HE21', -0.808, (9.839, 15.769, 77.342)), (' A 170  SER  HA ', ' A 206  MET  HE1', -0.756, (-20.538, 13.495, 44.509)), (' A 166  ARG  NH1', ' A 208  MET  SD ', -0.743, (-21.668, 7.565, 38.102)), (' A  25  MET  HB2', ' A  30  GLN  NE2', -0.726, (9.476, 16.14, 76.991)), (' A 189  CYS  SG ', ' A 192  CYS  HB2', -0.646, (-43.567, 1.745, 34.004)), (' B  21  VAL  HA ', ' B  30  GLN HE22', -0.625, (2.312, 43.288, -2.023)), (' B  88  ASN  O  ', ' B  92  LYS  HE3', -0.615, (3.431, 48.91, 22.596)), (' B  28  GLY  HA2', ' B  32  GLY  O  ', -0.614, (-1.423, 50.149, 4.195)), (' B  25  MET  HB2', ' B  30  GLN  OE1', -0.6, (3.91, 46.492, -2.845)), (' A  25  MET  CB ', ' A  30  GLN HE21', -0.58, (9.457, 15.159, 77.069)), (' B 224  CYS  SG ', ' B 225  THR  N  ', -0.576, (-39.709, 64.792, 46.423)), (' A   4  THR  CG2', ' A  20  VAL HG13', -0.57, (9.666, 25.64, 79.095)), (' A 234  LEU HD21', ' A 237  GLN  HB2', -0.555, (-32.496, 20.815, 35.42)), (' A 208  MET  HE2', ' A 247  PRO  HD3', -0.555, (-21.583, 5.877, 33.85)), (' B  23  MET  HA ', ' B  46  PRO  HG2', -0.554, (7.038, 43.858, 0.165)), (' A   4  THR HG23', ' A  20  VAL HG13', -0.552, (9.193, 24.989, 79.081)), (' B   5  ILE  HB ', ' B  51  GLU  HG3', -0.548, (6.591, 36.167, 2.555)), (' B 169  MET  HA ', ' B 169  MET  HE2', -0.545, (-16.674, 47.372, 33.744)), (' A 191  THR  HB ', ' A 228  LYS  NZ ', -0.541, (-44.885, -0.755, 31.767)), (' B 210  THR HG22', ' B 212  SER  H  ', -0.54, (-24.041, 51.145, 51.204)), (' A 282  LEU  HB2', ' A 293  SER  O  ', -0.534, (-10.046, 22.393, 21.432)), (' B 220  VAL  O  ', ' B 232  LYS  N  ', -0.533, (-34.606, 54.96, 51.436)), (' B  34  THR  OG1', ' B  41  VAL HG23', -0.529, (1.982, 47.346, 7.961)), (' B  61  ASP  OD1', ' B  63  THR  N  ', -0.528, (-14.989, 42.977, 2.488)), (' B  25  MET  O  ', ' B  45  LYS  HG2', -0.528, (7.446, 48.616, 0.298)), (' A  28  GLY  HA2', ' A  32  GLY  O  ', -0.523, (2.831, 12.896, 71.212)), (' B  58  LEU  O  ', ' B  60  ASN  N  ', -0.516, (-10.922, 47.331, 5.202)), (' B  32  GLY  O  ', ' B  34  THR HG23', -0.514, (-1.19, 49.066, 5.321)), (' A 224  CYS  SG ', ' A 225  THR  N  ', -0.514, (-39.217, -1.057, 35.716)), (' A 236  GLN  OE1', ' A 311  THR  HA ', -0.513, (-38.629, 23.927, 34.226)), (' B 221  GLN  HA ', ' B 231  THR  HA ', -0.509, (-35.269, 57.304, 53.301)), (' B 136  TYR  O  ', ' B 140  ARG  HG3', -0.508, (-10.677, 35.799, 30.751)), (' B 119  THR HG21', ' B 304  PHE  CZ ', -0.506, (-16.054, 45.198, 39.855)), (' A  36  LEU HD11', ' A  53  LYS  HE3', -0.504, (7.547, 23.833, 62.968)), (' A 147  PHE  O  ', ' A 151  ILE HG13', -0.502, (-8.051, 19.532, 49.437)), (' B  71  TYR  CD1', ' B 130  PRO  HB2', -0.502, (-15.229, 37.558, 17.533)), (' B  66  VAL  O  ', ' B  70  GLU  HG2', -0.502, (-19.311, 40.508, 10.416)), (' B 174  GLN  NE2', ' B 202  VAL HG11', -0.501, (-24.876, 49.326, 31.096)), (' B 115  THR HG23', ' B 275  HIS  HB2', -0.494, (-9.216, 46.901, 42.114)), (' A 119  THR HG21', ' A 304  PHE  CZ ', -0.494, (-15.947, 18.986, 37.592)), (' B 169  MET  HB2', ' B 243  MET  HE1', -0.489, (-18.932, 48.914, 36.672)), (' A  84  MET  HA ', ' A  84  MET  HE2', -0.489, (-0.996, 17.194, 58.177)), (' A  71  TYR  CD1', ' A 130  PRO  HB2', -0.489, (-11.698, 26.777, 59.757)), (' A  78  SER  O  ', ' A  82  ARG  HG3', -0.488, (-7.169, 10.848, 60.66)), (' A 187  VAL  O  ', ' A 195  GLN  N  ', -0.485, (-43.102, 8.212, 36.017)), (' A 179  ASP  OD1', ' A 180  SER  N  ', -0.482, (-29.218, 24.883, 49.493)), (' B   6  LYS  H  ', ' B  51  GLU  HG3', -0.477, (6.176, 35.197, 2.411)), (' A 181  CYS  HA ', ' A 238  GLU  O  ', -0.47, (-30.293, 23.739, 43.292)), (' A 226  CYS  SG ', ' A 227  GLY  N  ', -0.469, (-41.029, -4.019, 33.455)), (' A 189  CYS  SG ', ' A 192  CYS  CB ', -0.466, (-43.748, 1.351, 34.08)), (' B 164  ASP  HB3', ' B 167  GLU  HB3', -0.458, (-15.523, 55.658, 34.82)), (' B 202  VAL HG12', ' B 206  MET  HE2', -0.456, (-25.003, 49.486, 34.017)), (' A  13  ASN  HB2', ' A  56  TYR  OH ', -0.454, (-2.493, 24.489, 60.67)), (' B 285  ILE HG12', ' B 290  LEU HD13', -0.454, (-3.117, 41.023, 45.996)), (' B 116  ALA  HB1', ' B 169  MET  HE3', -0.449, (-13.089, 47.274, 34.978)), (' B 282  LEU  HB2', ' B 293  SER  O  ', -0.448, (-7.6, 41.622, 55.681)), (' B  41  VAL  HB ', ' B  44  ILE  CG2', -0.447, (5.143, 48.03, 8.499)), (' B 264  TYR  OH ', ' B 271  GLY  HA3', -0.444, (-7.444, 59.872, 41.272)), (' A 170  SER  O  ', ' A 174  GLN  HG2', -0.444, (-20.129, 14.361, 48.905)), (' A 140  ARG  HG2', ' A 140  ARG HH11', -0.443, (-10.32, 28.484, 42.739)), (' B 183  ARG  HB3', ' B 199  LEU  HB2', -0.439, (-33.369, 47.311, 39.363)), (' A 220  VAL HG23', ' A 232  LYS  HB3', -0.437, (-33.395, 8.371, 31.086)), (' A  23  MET  HG2', ' A  46  PRO  HB2', -0.436, (13.186, 20.807, 74.146)), (' A  58  LEU  O  ', ' A  60  ASN  N  ', -0.434, (-5.767, 16.452, 71.539)), (' A 221  GLN  HA ', ' A 230  ALA  O  ', -0.433, (-36.095, 4.791, 29.65)), (' A 138  ARG  NH2', ' A 143  GLU  OE1', -0.431, (0.132, 28.923, 51.498)), (' A 217  LYS  HD3', ' A 310  TYR  CE1', -0.43, (-33.768, 21.967, 29.375)), (' A 120  LEU  O  ', ' A 136  TYR  OH ', -0.429, (-13.961, 26.277, 42.942)), (' A 191  THR  N  ', ' A 228  LYS  HE3', -0.423, (-44.985, 0.464, 30.426)), (' B 235  VAL HG23', ' B 312  THR HG22', -0.423, (-39.456, 43.277, 49.177)), (' A 243  MET  HG3', ' A 304  PHE  CZ ', -0.423, (-18.169, 16.948, 37.496)), (' A  12  ASP  HB2', ' A  14  ILE HD12', -0.422, (-8.088, 26.645, 62.74)), (' B 255  HIS  NE2', ' B 279  LYS  O  ', -0.422, (-12.105, 35.608, 53.983)), (' B 122  GLN  OE1', ' B 277  THR  OG1', -0.421, (-11.52, 38.957, 45.449)), (' A 185  LEU HD22', ' A 232  LYS  HE2', -0.421, (-34.129, 11.291, 36.07)), (' B 187  VAL  C  ', ' B 231  THR  O  ', -0.421, (-38.436, 54.969, 50.469)), (' A 313  THR  O  ', ' A 313  THR HG22', -0.42, (-42.455, 21.294, 25.886)), (' B 237  GLN  HB3', ' B 310  TYR  HB3', -0.419, (-32.015, 40.564, 45.776)), (' A  11  VAL HG13', ' A  64  LEU HD22', -0.419, (-5.556, 21.844, 69.525)), (' B  27  TYR  HB3', ' B  34  THR HG21', -0.417, (0.593, 47.301, 5.296)), (' B  33  PRO  HB2', ' B  58  LEU  CD2', -0.415, (-5.627, 51.151, 8.594)), (' A 109  ASN  ND2', ' A 160  GLY  O  ', -0.415, (-0.979, 5.674, 43.642)), (' A  41  VAL  HA ', ' A  44  ILE HG13', -0.413, (9.059, 13.518, 65.515)), (' B  33  PRO  HA ', ' B  42  THR  OG1', -0.41, (-1.35, 51.768, 7.523)), (' A  88  ASN  HA ', ' A  91  LYS  CE ', -0.409, (4.586, 16.96, 54.818)), (' B  44  ILE HG13', ' B  45  LYS  N  ', -0.408, (8.411, 48.536, 5.273)), (' B  71  TYR  CD2', ' B 131  ALA  HB2', -0.404, (-13.134, 40.372, 17.976)), (' A   3  ARG  HB3', ' A  23  MET  SD ', -0.403, (16.089, 22.274, 76.549)), (' A 126  LYS  HB2', ' A 126  LYS  HE2', -0.402, (-19.229, 30.552, 48.398)), (' A  25  MET  HG2', ' A  29  GLN HE21', -0.402, (9.098, 12.465, 78.771)), (' B  73  HIS  CE1', ' B 129  PRO  HA ', -0.402, (-19.905, 40.075, 20.013)), (' A 274  LYS  HG3', ' A 661  HOH  O  ', -0.401, (-5.779, 11.258, 30.213)), (' A 280  GLU  OE2', ' A 283  TYR  OH ', -0.401, (-5.957, 29.649, 24.19)), (' B  33  PRO  HB2', ' B  58  LEU HD21', -0.401, (-5.569, 51.366, 9.086))]
handle_read_draw_probe_dots_unformatted("molprobity_probe.txt", 0, 0)
show_probe_dots(True, True)
gui = coot_molprobity_todo_list_gui(data=data)
